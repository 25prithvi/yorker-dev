
yorker-dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044cc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004678  08004678  00014678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004690  08004690  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004690  08004690  00014690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004698  08004698  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004698  08004698  00014698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800469c  0800469c  0001469c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080046a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  2000000c  080046ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  080046ac  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0cc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000265f  00000000  00000000  0002f108  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f48  00000000  00000000  00031768  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd0  00000000  00000000  000326b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000302b  00000000  00000000  00033480  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e4ed  00000000  00000000  000364ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000df86c  00000000  00000000  00044998  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00124204  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d40  00000000  00000000  00124280  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004660 	.word	0x08004660

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08004660 	.word	0x08004660

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <keys_action>:
#include "stm32f4xx_hal.h"

int key_pressed_flag;
int key_pressed = NONE_KEY_PRESSED;

void keys_action(){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0

	if(HAL_GPIO_ReadPin(LEFT_KEY_GPIO_Port,LEFT_KEY_Pin) == 1 && key_pressed_flag == NONE_KEY_PRESSED )
 80004f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004f4:	4845      	ldr	r0, [pc, #276]	; (800060c <keys_action+0x120>)
 80004f6:	f001 fde9 	bl	80020cc <HAL_GPIO_ReadPin>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d107      	bne.n	8000510 <keys_action+0x24>
 8000500:	4b43      	ldr	r3, [pc, #268]	; (8000610 <keys_action+0x124>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d103      	bne.n	8000510 <keys_action+0x24>
	{
		key_pressed_flag = LEFT_KEY_PRESSED;
 8000508:	4b41      	ldr	r3, [pc, #260]	; (8000610 <keys_action+0x124>)
 800050a:	2201      	movs	r2, #1
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	e07b      	b.n	8000608 <keys_action+0x11c>
	}
	else if(HAL_GPIO_ReadPin(LEFT_KEY_GPIO_Port,LEFT_KEY_Pin) == 0 && key_pressed_flag == LEFT_KEY_PRESSED)
 8000510:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000514:	483d      	ldr	r0, [pc, #244]	; (800060c <keys_action+0x120>)
 8000516:	f001 fdd9 	bl	80020cc <HAL_GPIO_ReadPin>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d10a      	bne.n	8000536 <keys_action+0x4a>
 8000520:	4b3b      	ldr	r3, [pc, #236]	; (8000610 <keys_action+0x124>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b01      	cmp	r3, #1
 8000526:	d106      	bne.n	8000536 <keys_action+0x4a>
	{

		key_pressed = LEFT_KEY_PRESSED;
 8000528:	4b3a      	ldr	r3, [pc, #232]	; (8000614 <keys_action+0x128>)
 800052a:	2201      	movs	r2, #1
 800052c:	601a      	str	r2, [r3, #0]
		key_pressed_flag = NONE_KEY_PRESSED;
 800052e:	4b38      	ldr	r3, [pc, #224]	; (8000610 <keys_action+0x124>)
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	e068      	b.n	8000608 <keys_action+0x11c>
	}
	else if(HAL_GPIO_ReadPin(RIGHT_KEY_GPIO_Port,RIGHT_KEY_Pin) == 1 && key_pressed_flag == NONE_KEY_PRESSED )
 8000536:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800053a:	4834      	ldr	r0, [pc, #208]	; (800060c <keys_action+0x120>)
 800053c:	f001 fdc6 	bl	80020cc <HAL_GPIO_ReadPin>
 8000540:	4603      	mov	r3, r0
 8000542:	2b01      	cmp	r3, #1
 8000544:	d107      	bne.n	8000556 <keys_action+0x6a>
 8000546:	4b32      	ldr	r3, [pc, #200]	; (8000610 <keys_action+0x124>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d103      	bne.n	8000556 <keys_action+0x6a>
	{
		key_pressed_flag = RIGHT_KEY_PRESSED;
 800054e:	4b30      	ldr	r3, [pc, #192]	; (8000610 <keys_action+0x124>)
 8000550:	2202      	movs	r2, #2
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	e058      	b.n	8000608 <keys_action+0x11c>
	}
	else if(HAL_GPIO_ReadPin(RIGHT_KEY_GPIO_Port,RIGHT_KEY_Pin) == 0 && key_pressed_flag == RIGHT_KEY_PRESSED)
 8000556:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800055a:	482c      	ldr	r0, [pc, #176]	; (800060c <keys_action+0x120>)
 800055c:	f001 fdb6 	bl	80020cc <HAL_GPIO_ReadPin>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d10a      	bne.n	800057c <keys_action+0x90>
 8000566:	4b2a      	ldr	r3, [pc, #168]	; (8000610 <keys_action+0x124>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	2b02      	cmp	r3, #2
 800056c:	d106      	bne.n	800057c <keys_action+0x90>
	{
		key_pressed = RIGHT_KEY_PRESSED;
 800056e:	4b29      	ldr	r3, [pc, #164]	; (8000614 <keys_action+0x128>)
 8000570:	2202      	movs	r2, #2
 8000572:	601a      	str	r2, [r3, #0]
		key_pressed_flag = NONE_KEY_PRESSED;
 8000574:	4b26      	ldr	r3, [pc, #152]	; (8000610 <keys_action+0x124>)
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	e045      	b.n	8000608 <keys_action+0x11c>
	}
	else if(HAL_GPIO_ReadPin(ENTER_KEY_GPIO_Port,ENTER_KEY_Pin) == 1 && key_pressed_flag == NONE_KEY_PRESSED )
 800057c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000580:	4822      	ldr	r0, [pc, #136]	; (800060c <keys_action+0x120>)
 8000582:	f001 fda3 	bl	80020cc <HAL_GPIO_ReadPin>
 8000586:	4603      	mov	r3, r0
 8000588:	2b01      	cmp	r3, #1
 800058a:	d107      	bne.n	800059c <keys_action+0xb0>
 800058c:	4b20      	ldr	r3, [pc, #128]	; (8000610 <keys_action+0x124>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d103      	bne.n	800059c <keys_action+0xb0>
	{
		key_pressed_flag = ENTER_KEY_PRESSED;
 8000594:	4b1e      	ldr	r3, [pc, #120]	; (8000610 <keys_action+0x124>)
 8000596:	2203      	movs	r2, #3
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	e035      	b.n	8000608 <keys_action+0x11c>
	}
	else if(HAL_GPIO_ReadPin(ENTER_KEY_GPIO_Port,ENTER_KEY_Pin) == 0 && key_pressed_flag == ENTER_KEY_PRESSED)
 800059c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a0:	481a      	ldr	r0, [pc, #104]	; (800060c <keys_action+0x120>)
 80005a2:	f001 fd93 	bl	80020cc <HAL_GPIO_ReadPin>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d10a      	bne.n	80005c2 <keys_action+0xd6>
 80005ac:	4b18      	ldr	r3, [pc, #96]	; (8000610 <keys_action+0x124>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	d106      	bne.n	80005c2 <keys_action+0xd6>
	{
		key_pressed = ENTER_KEY_PRESSED;
 80005b4:	4b17      	ldr	r3, [pc, #92]	; (8000614 <keys_action+0x128>)
 80005b6:	2203      	movs	r2, #3
 80005b8:	601a      	str	r2, [r3, #0]
		key_pressed_flag = NONE_KEY_PRESSED;
 80005ba:	4b15      	ldr	r3, [pc, #84]	; (8000610 <keys_action+0x124>)
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	e022      	b.n	8000608 <keys_action+0x11c>
	}
	else if(HAL_GPIO_ReadPin(ESC_KEY_GPIO_Port,ESC_KEY_Pin) == 1 && key_pressed_flag == NONE_KEY_PRESSED )
 80005c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c6:	4814      	ldr	r0, [pc, #80]	; (8000618 <keys_action+0x12c>)
 80005c8:	f001 fd80 	bl	80020cc <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d107      	bne.n	80005e2 <keys_action+0xf6>
 80005d2:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <keys_action+0x124>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d103      	bne.n	80005e2 <keys_action+0xf6>
	{
		key_pressed_flag = ESC_KEY_PRESSED;
 80005da:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <keys_action+0x124>)
 80005dc:	2204      	movs	r2, #4
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	e012      	b.n	8000608 <keys_action+0x11c>
	}
	else if(HAL_GPIO_ReadPin(ESC_KEY_GPIO_Port,ESC_KEY_Pin) == 0 && key_pressed_flag == ESC_KEY_PRESSED)
 80005e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005e6:	480c      	ldr	r0, [pc, #48]	; (8000618 <keys_action+0x12c>)
 80005e8:	f001 fd70 	bl	80020cc <HAL_GPIO_ReadPin>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d10a      	bne.n	8000608 <keys_action+0x11c>
 80005f2:	4b07      	ldr	r3, [pc, #28]	; (8000610 <keys_action+0x124>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b04      	cmp	r3, #4
 80005f8:	d106      	bne.n	8000608 <keys_action+0x11c>
	{
		key_pressed = ESC_KEY_PRESSED;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <keys_action+0x128>)
 80005fc:	2204      	movs	r2, #4
 80005fe:	601a      	str	r2, [r3, #0]
		key_pressed_flag = NONE_KEY_PRESSED;
 8000600:	4b03      	ldr	r3, [pc, #12]	; (8000610 <keys_action+0x124>)
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
	}

}
 8000606:	e7ff      	b.n	8000608 <keys_action+0x11c>
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40020c00 	.word	0x40020c00
 8000610:	2000002c 	.word	0x2000002c
 8000614:	20000028 	.word	0x20000028
 8000618:	40020400 	.word	0x40020400

0800061c <platform_start_yorker>:

#include "platform.h"
#include "stm32f4xx_hal.h"

void platform_start_yorker()
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	 HAL_Init();
 8000620:	f000 ff92 	bl	8001548 <HAL_Init>
	 platform_sysclk_cfg();
 8000624:	f000 fa90 	bl	8000b48 <platform_sysclk_cfg>
	 platform_gpio_init();
 8000628:	f000 fa10 	bl	8000a4c <platform_gpio_init>
	 platform_adc_init();
 800062c:	f000 f906 	bl	800083c <platform_adc_init>
	 platform_uart_init();
 8000630:	f000 fc9c 	bl	8000f6c <platform_uart_init>
	 platform_rtc_init();
 8000634:	f000 fae8 	bl	8000c08 <platform_rtc_init>
	 platform_timer_init();
 8000638:	f000 fbd6 	bl	8000de8 <platform_timer_init>

	 platform_timer_start();
 800063c:	f000 fbde 	bl	8000dfc <platform_timer_start>

	 while (1)
 8000640:	e7fe      	b.n	8000640 <platform_start_yorker+0x24>

08000642 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000646:	bf00      	nop
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <__MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void __MX_ADC1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000656:	463b      	mov	r3, r7
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000662:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <__MX_ADC1_Init+0x98>)
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <__MX_ADC1_Init+0x9c>)
 8000666:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <__MX_ADC1_Init+0x98>)
 800066a:	2200      	movs	r2, #0
 800066c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800066e:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <__MX_ADC1_Init+0x98>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000674:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <__MX_ADC1_Init+0x98>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <__MX_ADC1_Init+0x98>)
 800067c:	2200      	movs	r2, #0
 800067e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000680:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <__MX_ADC1_Init+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000688:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <__MX_ADC1_Init+0x98>)
 800068a:	2200      	movs	r2, #0
 800068c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <__MX_ADC1_Init+0x98>)
 8000690:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <__MX_ADC1_Init+0xa0>)
 8000692:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <__MX_ADC1_Init+0x98>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <__MX_ADC1_Init+0x98>)
 800069c:	2201      	movs	r2, #1
 800069e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <__MX_ADC1_Init+0x98>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <__MX_ADC1_Init+0x98>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006ae:	480e      	ldr	r0, [pc, #56]	; (80006e8 <__MX_ADC1_Init+0x98>)
 80006b0:	f000 ffbc 	bl	800162c <HAL_ADC_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <__MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006ba:	f7ff ffc2 	bl	8000642 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80006be:	230a      	movs	r3, #10
 80006c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006c2:	2301      	movs	r3, #1
 80006c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ca:	463b      	mov	r3, r7
 80006cc:	4619      	mov	r1, r3
 80006ce:	4806      	ldr	r0, [pc, #24]	; (80006e8 <__MX_ADC1_Init+0x98>)
 80006d0:	f000 fff0 	bl	80016b4 <HAL_ADC_ConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <__MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006da:	f7ff ffb2 	bl	8000642 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000078 	.word	0x20000078
 80006ec:	40012000 	.word	0x40012000
 80006f0:	0f000001 	.word	0x0f000001

080006f4 <__MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
void __MX_ADC2_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006fa:	463b      	mov	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000706:	4b21      	ldr	r3, [pc, #132]	; (800078c <__MX_ADC2_Init+0x98>)
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <__MX_ADC2_Init+0x9c>)
 800070a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <__MX_ADC2_Init+0x98>)
 800070e:	2200      	movs	r2, #0
 8000710:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000712:	4b1e      	ldr	r3, [pc, #120]	; (800078c <__MX_ADC2_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000718:	4b1c      	ldr	r3, [pc, #112]	; (800078c <__MX_ADC2_Init+0x98>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <__MX_ADC2_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000724:	4b19      	ldr	r3, [pc, #100]	; (800078c <__MX_ADC2_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <__MX_ADC2_Init+0x98>)
 800072e:	2200      	movs	r2, #0
 8000730:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <__MX_ADC2_Init+0x98>)
 8000734:	4a17      	ldr	r2, [pc, #92]	; (8000794 <__MX_ADC2_Init+0xa0>)
 8000736:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <__MX_ADC2_Init+0x98>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <__MX_ADC2_Init+0x98>)
 8000740:	2201      	movs	r2, #1
 8000742:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <__MX_ADC2_Init+0x98>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <__MX_ADC2_Init+0x98>)
 800074e:	2201      	movs	r2, #1
 8000750:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000752:	480e      	ldr	r0, [pc, #56]	; (800078c <__MX_ADC2_Init+0x98>)
 8000754:	f000 ff6a 	bl	800162c <HAL_ADC_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <__MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800075e:	f7ff ff70 	bl	8000642 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000762:	230b      	movs	r3, #11
 8000764:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000766:	2301      	movs	r3, #1
 8000768:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800076e:	463b      	mov	r3, r7
 8000770:	4619      	mov	r1, r3
 8000772:	4806      	ldr	r0, [pc, #24]	; (800078c <__MX_ADC2_Init+0x98>)
 8000774:	f000 ff9e 	bl	80016b4 <HAL_ADC_ConfigChannel>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <__MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800077e:	f7ff ff60 	bl	8000642 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	3710      	adds	r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000030 	.word	0x20000030
 8000790:	40012100 	.word	0x40012100
 8000794:	0f000001 	.word	0x0f000001

08000798 <__MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
void __MX_ADC3_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800079e:	463b      	mov	r3, r7
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80007aa:	4b21      	ldr	r3, [pc, #132]	; (8000830 <__MX_ADC3_Init+0x98>)
 80007ac:	4a21      	ldr	r2, [pc, #132]	; (8000834 <__MX_ADC3_Init+0x9c>)
 80007ae:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007b0:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <__MX_ADC3_Init+0x98>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007b6:	4b1e      	ldr	r3, [pc, #120]	; (8000830 <__MX_ADC3_Init+0x98>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80007bc:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <__MX_ADC3_Init+0x98>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80007c2:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <__MX_ADC3_Init+0x98>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007c8:	4b19      	ldr	r3, [pc, #100]	; (8000830 <__MX_ADC3_Init+0x98>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <__MX_ADC3_Init+0x98>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <__MX_ADC3_Init+0x98>)
 80007d8:	4a17      	ldr	r2, [pc, #92]	; (8000838 <__MX_ADC3_Init+0xa0>)
 80007da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <__MX_ADC3_Init+0x98>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <__MX_ADC3_Init+0x98>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <__MX_ADC3_Init+0x98>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <__MX_ADC3_Init+0x98>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80007f6:	480e      	ldr	r0, [pc, #56]	; (8000830 <__MX_ADC3_Init+0x98>)
 80007f8:	f000 ff18 	bl	800162c <HAL_ADC_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <__MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8000802:	f7ff ff1e 	bl	8000642 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000806:	230c      	movs	r3, #12
 8000808:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800080a:	2301      	movs	r3, #1
 800080c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000812:	463b      	mov	r3, r7
 8000814:	4619      	mov	r1, r3
 8000816:	4806      	ldr	r0, [pc, #24]	; (8000830 <__MX_ADC3_Init+0x98>)
 8000818:	f000 ff4c 	bl	80016b4 <HAL_ADC_ConfigChannel>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <__MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000822:	f7ff ff0e 	bl	8000642 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200000c0 	.word	0x200000c0
 8000834:	40012200 	.word	0x40012200
 8000838:	0f000001 	.word	0x0f000001

0800083c <platform_adc_init>:
/*******************************************************************************
 *  PUBLIC
 ******************************************************************************/

void platform_adc_init()
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	__MX_ADC1_Init();
 8000840:	f7ff ff06 	bl	8000650 <__MX_ADC1_Init>
	__MX_ADC2_Init();
 8000844:	f7ff ff56 	bl	80006f4 <__MX_ADC2_Init>
	__MX_ADC3_Init();
 8000848:	f7ff ffa6 	bl	8000798 <__MX_ADC3_Init>
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}

08000850 <__MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void __MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08c      	sub	sp, #48	; 0x30
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]
 800086a:	4b72      	ldr	r3, [pc, #456]	; (8000a34 <__MX_GPIO_Init+0x1e4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a71      	ldr	r2, [pc, #452]	; (8000a34 <__MX_GPIO_Init+0x1e4>)
 8000870:	f043 0310 	orr.w	r3, r3, #16
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b6f      	ldr	r3, [pc, #444]	; (8000a34 <__MX_GPIO_Init+0x1e4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0310 	and.w	r3, r3, #16
 800087e:	61bb      	str	r3, [r7, #24]
 8000880:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
 8000886:	4b6b      	ldr	r3, [pc, #428]	; (8000a34 <__MX_GPIO_Init+0x1e4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a6a      	ldr	r2, [pc, #424]	; (8000a34 <__MX_GPIO_Init+0x1e4>)
 800088c:	f043 0304 	orr.w	r3, r3, #4
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b68      	ldr	r3, [pc, #416]	; (8000a34 <__MX_GPIO_Init+0x1e4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0304 	and.w	r3, r3, #4
 800089a:	617b      	str	r3, [r7, #20]
 800089c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	4b64      	ldr	r3, [pc, #400]	; (8000a34 <__MX_GPIO_Init+0x1e4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a63      	ldr	r2, [pc, #396]	; (8000a34 <__MX_GPIO_Init+0x1e4>)
 80008a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b61      	ldr	r3, [pc, #388]	; (8000a34 <__MX_GPIO_Init+0x1e4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	4b5d      	ldr	r3, [pc, #372]	; (8000a34 <__MX_GPIO_Init+0x1e4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a5c      	ldr	r2, [pc, #368]	; (8000a34 <__MX_GPIO_Init+0x1e4>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b5a      	ldr	r3, [pc, #360]	; (8000a34 <__MX_GPIO_Init+0x1e4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	4b56      	ldr	r3, [pc, #344]	; (8000a34 <__MX_GPIO_Init+0x1e4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a55      	ldr	r2, [pc, #340]	; (8000a34 <__MX_GPIO_Init+0x1e4>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b53      	ldr	r3, [pc, #332]	; (8000a34 <__MX_GPIO_Init+0x1e4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	4b4f      	ldr	r3, [pc, #316]	; (8000a34 <__MX_GPIO_Init+0x1e4>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a4e      	ldr	r2, [pc, #312]	; (8000a34 <__MX_GPIO_Init+0x1e4>)
 80008fc:	f043 0308 	orr.w	r3, r3, #8
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b4c      	ldr	r3, [pc, #304]	; (8000a34 <__MX_GPIO_Init+0x1e4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0308 	and.w	r3, r3, #8
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BUZZER_PIN_Pin|RELAY_1_Pin|RELAY_2_Pin|RELAY_3_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	f24e 0140 	movw	r1, #57408	; 0xe040
 8000914:	4848      	ldr	r0, [pc, #288]	; (8000a38 <__MX_GPIO_Init+0x1e8>)
 8000916:	f001 fbf1 	bl	80020fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY_4_Pin|RELAY_5_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000920:	4846      	ldr	r0, [pc, #280]	; (8000a3c <__MX_GPIO_Init+0x1ec>)
 8000922:	f001 fbeb 	bl	80020fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEARTBEAT_LED_GPIO_Port, HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800092c:	4844      	ldr	r0, [pc, #272]	; (8000a40 <__MX_GPIO_Init+0x1f0>)
 800092e:	f001 fbe5 	bl	80020fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_ENABLE_GPIO_Port, RS485_ENABLE_Pin, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000938:	4842      	ldr	r0, [pc, #264]	; (8000a44 <__MX_GPIO_Init+0x1f4>)
 800093a:	f001 fbdf 	bl	80020fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RELAY_6_Pin|RELAY_7_Pin|RELAY_8_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2138      	movs	r1, #56	; 0x38
 8000942:	4841      	ldr	r0, [pc, #260]	; (8000a48 <__MX_GPIO_Init+0x1f8>)
 8000944:	f001 fbda 	bl	80020fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUZZER_PIN_Pin RELAY_1_Pin RELAY_2_Pin RELAY_3_Pin */
  GPIO_InitStruct.Pin = BUZZER_PIN_Pin|RELAY_1_Pin|RELAY_2_Pin|RELAY_3_Pin;
 8000948:	f24e 0340 	movw	r3, #57408	; 0xe040
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000952:	2302      	movs	r3, #2
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	4835      	ldr	r0, [pc, #212]	; (8000a38 <__MX_GPIO_Init+0x1e8>)
 8000962:	f001 fa09 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : POWER_MAINS_Pin LEVEL_SENS_5_Pin LEVEL_SENS_6_Pin */
  GPIO_InitStruct.Pin = POWER_MAINS_Pin|LEVEL_SENS_5_Pin|LEVEL_SENS_6_Pin;
 8000966:	f44f 5303 	mov.w	r3, #8384	; 0x20c0
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	4832      	ldr	r0, [pc, #200]	; (8000a44 <__MX_GPIO_Init+0x1f4>)
 800097c:	f001 f9fc 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_4_Pin RELAY_5_Pin */
  GPIO_InitStruct.Pin = RELAY_4_Pin|RELAY_5_Pin;
 8000980:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800098a:	2302      	movs	r3, #2
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	4828      	ldr	r0, [pc, #160]	; (8000a3c <__MX_GPIO_Init+0x1ec>)
 800099a:	f001 f9ed 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_5_Pin LEVEL_SENS_4_Pin ESC_KEY_Pin LEVEL_SENS_3_Pin */
  GPIO_InitStruct.Pin = KEY_5_Pin|LEVEL_SENS_4_Pin|ESC_KEY_Pin|LEVEL_SENS_3_Pin;
 800099e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	4822      	ldr	r0, [pc, #136]	; (8000a3c <__MX_GPIO_Init+0x1ec>)
 80009b4:	f001 f9e0 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENTER_KEY_Pin LEVEL_SENS_2_Pin RIGHT_KEY_Pin LEVEL_SENS_1_Pin
                           LEFT_KEY_Pin PULSE_SENS_2_Pin PULSE_SENS_1_Pin */
  GPIO_InitStruct.Pin = ENTER_KEY_Pin|LEVEL_SENS_2_Pin|RIGHT_KEY_Pin|LEVEL_SENS_1_Pin
 80009b8:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 80009bc:	61fb      	str	r3, [r7, #28]
                          |LEFT_KEY_Pin|PULSE_SENS_2_Pin|PULSE_SENS_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	481e      	ldr	r0, [pc, #120]	; (8000a48 <__MX_GPIO_Init+0x1f8>)
 80009ce:	f001 f9d3 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : HEARTBEAT_LED_Pin */
  GPIO_InitStruct.Pin = HEARTBEAT_LED_Pin;
 80009d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009dc:	2302      	movs	r3, #2
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4815      	ldr	r0, [pc, #84]	; (8000a40 <__MX_GPIO_Init+0x1f0>)
 80009ec:	f001 f9c4 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_ENABLE_Pin */
  GPIO_InitStruct.Pin = RS485_ENABLE_Pin;
 80009f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RS485_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	480e      	ldr	r0, [pc, #56]	; (8000a44 <__MX_GPIO_Init+0x1f4>)
 8000a0a:	f001 f9b5 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_6_Pin RELAY_7_Pin RELAY_8_Pin */
  GPIO_InitStruct.Pin = RELAY_6_Pin|RELAY_7_Pin|RELAY_8_Pin;
 8000a0e:	2338      	movs	r3, #56	; 0x38
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a16:	2302      	movs	r3, #2
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4808      	ldr	r0, [pc, #32]	; (8000a48 <__MX_GPIO_Init+0x1f8>)
 8000a26:	f001 f9a7 	bl	8001d78 <HAL_GPIO_Init>

}
 8000a2a:	bf00      	nop
 8000a2c:	3730      	adds	r7, #48	; 0x30
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40020400 	.word	0x40020400
 8000a40:	40020000 	.word	0x40020000
 8000a44:	40020800 	.word	0x40020800
 8000a48:	40020c00 	.word	0x40020c00

08000a4c <platform_gpio_init>:
  * @brief Platform GPIO Initialization Function
  * @param None
  * @retval None
  */
void platform_gpio_init()
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	__MX_GPIO_Init();
 8000a50:	f7ff fefe 	bl	8000850 <__MX_GPIO_Init>
}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <__SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void __SystemClock_Config(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b0a0      	sub	sp, #128	; 0x80
 8000a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a62:	2230      	movs	r2, #48	; 0x30
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f003 fdf2 	bl	8004650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	2230      	movs	r2, #48	; 0x30
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f003 fde3 	bl	8004650 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	4b2c      	ldr	r3, [pc, #176]	; (8000b40 <__SystemClock_Config+0xe8>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	4a2b      	ldr	r2, [pc, #172]	; (8000b40 <__SystemClock_Config+0xe8>)
 8000a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a98:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9a:	4b29      	ldr	r3, [pc, #164]	; (8000b40 <__SystemClock_Config+0xe8>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <__SystemClock_Config+0xec>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ab2:	4a24      	ldr	r2, [pc, #144]	; (8000b44 <__SystemClock_Config+0xec>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab8:	6013      	str	r3, [r2, #0]
 8000aba:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <__SystemClock_Config+0xec>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000ac6:	230a      	movs	r3, #10
 8000ac8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aca:	2301      	movs	r3, #1
 8000acc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ace:	2310      	movs	r3, #16
 8000ad0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ada:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 fb26 	bl	8002130 <HAL_RCC_OscConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <__SystemClock_Config+0x96>
  {
    Error_Handler();
 8000aea:	f7ff fdaa 	bl	8000642 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aee:	230f      	movs	r3, #15
 8000af0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000af2:	2300      	movs	r3, #0
 8000af4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af6:	2300      	movs	r3, #0
 8000af8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b02:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f001 fd81 	bl	8002610 <HAL_RCC_ClockConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <__SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b14:	f7ff fd95 	bl	8000642 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b18:	2320      	movs	r3, #32
 8000b1a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b20:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 ff3e 	bl	80029a8 <HAL_RCCEx_PeriphCLKConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <__SystemClock_Config+0xde>
  {
    Error_Handler();
 8000b32:	f7ff fd86 	bl	8000642 <Error_Handler>
  }
}
 8000b36:	bf00      	nop
 8000b38:	3780      	adds	r7, #128	; 0x80
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40007000 	.word	0x40007000

08000b48 <platform_sysclk_cfg>:
/*******************************************************************************
 *  PUBLIC
 ******************************************************************************/

void platform_sysclk_cfg()
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	__SystemClock_Config();
 8000b4c:	f7ff ff84 	bl	8000a58 <__SystemClock_Config>
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <__MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void __MX_RTC_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000b68:	2300      	movs	r3, #0
 8000b6a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b6c:	4b24      	ldr	r3, [pc, #144]	; (8000c00 <__MX_RTC_Init+0xac>)
 8000b6e:	4a25      	ldr	r2, [pc, #148]	; (8000c04 <__MX_RTC_Init+0xb0>)
 8000b70:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b72:	4b23      	ldr	r3, [pc, #140]	; (8000c00 <__MX_RTC_Init+0xac>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b78:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <__MX_RTC_Init+0xac>)
 8000b7a:	227f      	movs	r2, #127	; 0x7f
 8000b7c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b7e:	4b20      	ldr	r3, [pc, #128]	; (8000c00 <__MX_RTC_Init+0xac>)
 8000b80:	22ff      	movs	r2, #255	; 0xff
 8000b82:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b84:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <__MX_RTC_Init+0xac>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b8a:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <__MX_RTC_Init+0xac>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b90:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <__MX_RTC_Init+0xac>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b96:	481a      	ldr	r0, [pc, #104]	; (8000c00 <__MX_RTC_Init+0xac>)
 8000b98:	f002 f8c4 	bl	8002d24 <HAL_RTC_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <__MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000ba2:	f7ff fd4e 	bl	8000642 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	480f      	ldr	r0, [pc, #60]	; (8000c00 <__MX_RTC_Init+0xac>)
 8000bc2:	f002 f940 	bl	8002e46 <HAL_RTC_SetTime>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <__MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000bcc:	f7ff fd39 	bl	8000642 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000be0:	463b      	mov	r3, r7
 8000be2:	2201      	movs	r2, #1
 8000be4:	4619      	mov	r1, r3
 8000be6:	4806      	ldr	r0, [pc, #24]	; (8000c00 <__MX_RTC_Init+0xac>)
 8000be8:	f002 f9ea 	bl	8002fc0 <HAL_RTC_SetDate>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <__MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000bf2:	f7ff fd26 	bl	8000642 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000108 	.word	0x20000108
 8000c04:	40002800 	.word	0x40002800

08000c08 <platform_rtc_init>:

/*******************************************************************************
 *  PUBLIC
 ******************************************************************************/
void platform_rtc_init()
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	__MX_RTC_Init();
 8000c0c:	f7ff ffa2 	bl	8000b54 <__MX_RTC_Init>
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <__MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void __MX_TIM2_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c28:	463b      	mov	r3, r7
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c30:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <__MX_TIM2_Init+0x98>)
 8000c32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1600-1;
 8000c38:	4b1c      	ldr	r3, [pc, #112]	; (8000cac <__MX_TIM2_Init+0x98>)
 8000c3a:	f240 623f 	movw	r2, #1599	; 0x63f
 8000c3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c40:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <__MX_TIM2_Init+0x98>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8000c46:	4b19      	ldr	r3, [pc, #100]	; (8000cac <__MX_TIM2_Init+0x98>)
 8000c48:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000c4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c4e:	4b17      	ldr	r3, [pc, #92]	; (8000cac <__MX_TIM2_Init+0x98>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <__MX_TIM2_Init+0x98>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c5a:	4814      	ldr	r0, [pc, #80]	; (8000cac <__MX_TIM2_Init+0x98>)
 8000c5c:	f002 fac9 	bl	80031f2 <HAL_TIM_Base_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <__MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c66:	f7ff fcec 	bl	8000642 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c70:	f107 0308 	add.w	r3, r7, #8
 8000c74:	4619      	mov	r1, r3
 8000c76:	480d      	ldr	r0, [pc, #52]	; (8000cac <__MX_TIM2_Init+0x98>)
 8000c78:	f002 fc12 	bl	80034a0 <HAL_TIM_ConfigClockSource>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <__MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c82:	f7ff fcde 	bl	8000642 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c86:	2300      	movs	r3, #0
 8000c88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c8e:	463b      	mov	r3, r7
 8000c90:	4619      	mov	r1, r3
 8000c92:	4806      	ldr	r0, [pc, #24]	; (8000cac <__MX_TIM2_Init+0x98>)
 8000c94:	f002 fe1e 	bl	80038d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <__MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c9e:	f7ff fcd0 	bl	8000642 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ca2:	bf00      	nop
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200001a8 	.word	0x200001a8

08000cb0 <__MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void __MX_TIM4_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cb6:	f107 0308 	add.w	r3, r7, #8
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ccc:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <__MX_TIM4_Init+0x94>)
 8000cce:	4a1e      	ldr	r2, [pc, #120]	; (8000d48 <__MX_TIM4_Init+0x98>)
 8000cd0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1600-1;
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	; (8000d44 <__MX_TIM4_Init+0x94>)
 8000cd4:	f240 623f 	movw	r2, #1599	; 0x63f
 8000cd8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cda:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <__MX_TIM4_Init+0x94>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000-1;
 8000ce0:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <__MX_TIM4_Init+0x94>)
 8000ce2:	f241 3287 	movw	r2, #4999	; 0x1387
 8000ce6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <__MX_TIM4_Init+0x94>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <__MX_TIM4_Init+0x94>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000cf4:	4813      	ldr	r0, [pc, #76]	; (8000d44 <__MX_TIM4_Init+0x94>)
 8000cf6:	f002 fa7c 	bl	80031f2 <HAL_TIM_Base_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <__MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000d00:	f7ff fc9f 	bl	8000642 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d0a:	f107 0308 	add.w	r3, r7, #8
 8000d0e:	4619      	mov	r1, r3
 8000d10:	480c      	ldr	r0, [pc, #48]	; (8000d44 <__MX_TIM4_Init+0x94>)
 8000d12:	f002 fbc5 	bl	80034a0 <HAL_TIM_ConfigClockSource>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <__MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000d1c:	f7ff fc91 	bl	8000642 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d20:	2300      	movs	r3, #0
 8000d22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d28:	463b      	mov	r3, r7
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4805      	ldr	r0, [pc, #20]	; (8000d44 <__MX_TIM4_Init+0x94>)
 8000d2e:	f002 fdd1 	bl	80038d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <__MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000d38:	f7ff fc83 	bl	8000642 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d3c:	bf00      	nop
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000128 	.word	0x20000128
 8000d48:	40000800 	.word	0x40000800

08000d4c <__MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
void __MX_TIM5_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d52:	f107 0308 	add.w	r3, r7, #8
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d60:	463b      	mov	r3, r7
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d68:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <__MX_TIM5_Init+0x94>)
 8000d6a:	4a1e      	ldr	r2, [pc, #120]	; (8000de4 <__MX_TIM5_Init+0x98>)
 8000d6c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1600-1;
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <__MX_TIM5_Init+0x94>)
 8000d70:	f240 623f 	movw	r2, #1599	; 0x63f
 8000d74:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d76:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <__MX_TIM5_Init+0x94>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 5000-1;
 8000d7c:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <__MX_TIM5_Init+0x94>)
 8000d7e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000d82:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <__MX_TIM5_Init+0x94>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <__MX_TIM5_Init+0x94>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000d90:	4813      	ldr	r0, [pc, #76]	; (8000de0 <__MX_TIM5_Init+0x94>)
 8000d92:	f002 fa2e 	bl	80031f2 <HAL_TIM_Base_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <__MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000d9c:	f7ff fc51 	bl	8000642 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	4619      	mov	r1, r3
 8000dac:	480c      	ldr	r0, [pc, #48]	; (8000de0 <__MX_TIM5_Init+0x94>)
 8000dae:	f002 fb77 	bl	80034a0 <HAL_TIM_ConfigClockSource>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <__MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000db8:	f7ff fc43 	bl	8000642 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4805      	ldr	r0, [pc, #20]	; (8000de0 <__MX_TIM5_Init+0x94>)
 8000dca:	f002 fd83 	bl	80038d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <__MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000dd4:	f7ff fc35 	bl	8000642 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000168 	.word	0x20000168
 8000de4:	40000c00 	.word	0x40000c00

08000de8 <platform_timer_init>:
/*******************************************************************************
 *  PUBLIC
 ******************************************************************************/

void platform_timer_init()
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	__MX_TIM2_Init();
 8000dec:	f7ff ff12 	bl	8000c14 <__MX_TIM2_Init>
	__MX_TIM4_Init();
 8000df0:	f7ff ff5e 	bl	8000cb0 <__MX_TIM4_Init>
	__MX_TIM5_Init();
 8000df4:	f7ff ffaa 	bl	8000d4c <__MX_TIM5_Init>
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <platform_timer_start>:

void platform_timer_start()
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000e00:	4803      	ldr	r0, [pc, #12]	; (8000e10 <platform_timer_start+0x14>)
 8000e02:	f002 fa21 	bl	8003248 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8000e06:	4803      	ldr	r0, [pc, #12]	; (8000e14 <platform_timer_start+0x18>)
 8000e08:	f002 fa1e 	bl	8003248 <HAL_TIM_Base_Start_IT>
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	200001a8 	.word	0x200001a8
 8000e14:	20000128 	.word	0x20000128

08000e18 <HAL_TIM_PeriodElapsedCallback>:
	HAL_TIM_Base_Stop_IT(&htim2);
	HAL_TIM_Base_Stop_IT(&htim4);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == htim2.Instance)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d101      	bne.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
    	keys_action();
 8000e2c:	f7ff fb5e 	bl	80004ec <keys_action>
    	//pulse_counter();
    }
    if (htim->Instance == htim4.Instance)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	429a      	cmp	r2, r3
    else if (htim->Instance == htim5.Instance)
	{
    	//keypad_action();
    	//keypad_status = 1;
	}
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200001a8 	.word	0x200001a8
 8000e48:	20000128 	.word	0x20000128

08000e4c <__MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
void __MX_UART5_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <__MX_UART5_Init+0x4c>)
 8000e52:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <__MX_UART5_Init+0x50>)
 8000e54:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <__MX_UART5_Init+0x4c>)
 8000e58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e5c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <__MX_UART5_Init+0x4c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <__MX_UART5_Init+0x4c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <__MX_UART5_Init+0x4c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <__MX_UART5_Init+0x4c>)
 8000e72:	220c      	movs	r2, #12
 8000e74:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <__MX_UART5_Init+0x4c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <__MX_UART5_Init+0x4c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <__MX_UART5_Init+0x4c>)
 8000e84:	f002 fdb6 	bl	80039f4 <HAL_UART_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <__MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000e8e:	f7ff fbd8 	bl	8000642 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000228 	.word	0x20000228
 8000e9c:	40005000 	.word	0x40005000

08000ea0 <__MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
void __MX_UART7_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <__MX_UART7_Init+0x4c>)
 8000ea6:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <__MX_UART7_Init+0x50>)
 8000ea8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <__MX_UART7_Init+0x4c>)
 8000eac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000eb0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <__MX_UART7_Init+0x4c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <__MX_UART7_Init+0x4c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <__MX_UART7_Init+0x4c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <__MX_UART7_Init+0x4c>)
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <__MX_UART7_Init+0x4c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <__MX_UART7_Init+0x4c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <__MX_UART7_Init+0x4c>)
 8000ed8:	f002 fd8c 	bl	80039f4 <HAL_UART_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <__MX_UART7_Init+0x46>
  {
    Error_Handler();
 8000ee2:	f7ff fbae 	bl	8000642 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200001e8 	.word	0x200001e8
 8000ef0:	40007800 	.word	0x40007800

08000ef4 <__MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void __MX_USART2_UART_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <__MX_USART2_UART_Init+0x4c>)
 8000efa:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <__MX_USART2_UART_Init+0x50>)
 8000efc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <__MX_USART2_UART_Init+0x4c>)
 8000f00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <__MX_USART2_UART_Init+0x4c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <__MX_USART2_UART_Init+0x4c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <__MX_USART2_UART_Init+0x4c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <__MX_USART2_UART_Init+0x4c>)
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <__MX_USART2_UART_Init+0x4c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <__MX_USART2_UART_Init+0x4c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <__MX_USART2_UART_Init+0x4c>)
 8000f2c:	f002 fd62 	bl	80039f4 <HAL_UART_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <__MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f36:	f7ff fb84 	bl	8000642 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000268 	.word	0x20000268
 8000f44:	40004400 	.word	0x40004400

08000f48 <__wifi_uart_init>:

void __wifi_uart_init()
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	__MX_USART2_UART_Init();
 8000f4c:	f7ff ffd2 	bl	8000ef4 <__MX_USART2_UART_Init>
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <__lcd_uart_init>:

void __lcd_uart_init()
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	__MX_UART7_Init();
 8000f58:	f7ff ffa2 	bl	8000ea0 <__MX_UART7_Init>
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <__rs485_uart_init>:

void __rs485_uart_init()
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	__MX_UART5_Init();
 8000f64:	f7ff ff72 	bl	8000e4c <__MX_UART5_Init>
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <platform_uart_init>:
/*******************************************************************************
 *  PUBLIC
 ******************************************************************************/

void platform_uart_init()
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	__wifi_uart_init();
 8000f70:	f7ff ffea 	bl	8000f48 <__wifi_uart_init>
	__lcd_uart_init();
 8000f74:	f7ff ffee 	bl	8000f54 <__lcd_uart_init>
	__rs485_uart_init();
 8000f78:	f7ff fff2 	bl	8000f60 <__rs485_uart_init>
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	platform_start_yorker();
 8000f84:	f7ff fb4a 	bl	800061c <platform_start_yorker>
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <HAL_MspInit+0x4c>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	4a0f      	ldr	r2, [pc, #60]	; (8000fdc <HAL_MspInit+0x4c>)
 8000fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <HAL_MspInit+0x4c>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <HAL_MspInit+0x4c>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <HAL_MspInit+0x4c>)
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_MspInit+0x4c>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40023800 	.word	0x40023800

08000fe0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08e      	sub	sp, #56	; 0x38
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a45      	ldr	r2, [pc, #276]	; (8001114 <HAL_ADC_MspInit+0x134>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d128      	bne.n	8001054 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	623b      	str	r3, [r7, #32]
 8001006:	4b44      	ldr	r3, [pc, #272]	; (8001118 <HAL_ADC_MspInit+0x138>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	4a43      	ldr	r2, [pc, #268]	; (8001118 <HAL_ADC_MspInit+0x138>)
 800100c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001010:	6453      	str	r3, [r2, #68]	; 0x44
 8001012:	4b41      	ldr	r3, [pc, #260]	; (8001118 <HAL_ADC_MspInit+0x138>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101a:	623b      	str	r3, [r7, #32]
 800101c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
 8001022:	4b3d      	ldr	r3, [pc, #244]	; (8001118 <HAL_ADC_MspInit+0x138>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a3c      	ldr	r2, [pc, #240]	; (8001118 <HAL_ADC_MspInit+0x138>)
 8001028:	f043 0304 	orr.w	r3, r3, #4
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b3a      	ldr	r3, [pc, #232]	; (8001118 <HAL_ADC_MspInit+0x138>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0304 	and.w	r3, r3, #4
 8001036:	61fb      	str	r3, [r7, #28]
 8001038:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800103a:	2309      	movs	r3, #9
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800103e:	2303      	movs	r3, #3
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104a:	4619      	mov	r1, r3
 800104c:	4833      	ldr	r0, [pc, #204]	; (800111c <HAL_ADC_MspInit+0x13c>)
 800104e:	f000 fe93 	bl	8001d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001052:	e05a      	b.n	800110a <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a31      	ldr	r2, [pc, #196]	; (8001120 <HAL_ADC_MspInit+0x140>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d128      	bne.n	80010b0 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
 8001062:	4b2d      	ldr	r3, [pc, #180]	; (8001118 <HAL_ADC_MspInit+0x138>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	4a2c      	ldr	r2, [pc, #176]	; (8001118 <HAL_ADC_MspInit+0x138>)
 8001068:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800106c:	6453      	str	r3, [r2, #68]	; 0x44
 800106e:	4b2a      	ldr	r3, [pc, #168]	; (8001118 <HAL_ADC_MspInit+0x138>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001076:	61bb      	str	r3, [r7, #24]
 8001078:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	4b26      	ldr	r3, [pc, #152]	; (8001118 <HAL_ADC_MspInit+0x138>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a25      	ldr	r2, [pc, #148]	; (8001118 <HAL_ADC_MspInit+0x138>)
 8001084:	f043 0304 	orr.w	r3, r3, #4
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b23      	ldr	r3, [pc, #140]	; (8001118 <HAL_ADC_MspInit+0x138>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0304 	and.w	r3, r3, #4
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001096:	2302      	movs	r3, #2
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800109a:	2303      	movs	r3, #3
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a6:	4619      	mov	r1, r3
 80010a8:	481c      	ldr	r0, [pc, #112]	; (800111c <HAL_ADC_MspInit+0x13c>)
 80010aa:	f000 fe65 	bl	8001d78 <HAL_GPIO_Init>
}
 80010ae:	e02c      	b.n	800110a <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a1b      	ldr	r2, [pc, #108]	; (8001124 <HAL_ADC_MspInit+0x144>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d127      	bne.n	800110a <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <HAL_ADC_MspInit+0x138>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	4a15      	ldr	r2, [pc, #84]	; (8001118 <HAL_ADC_MspInit+0x138>)
 80010c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010c8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <HAL_ADC_MspInit+0x138>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <HAL_ADC_MspInit+0x138>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <HAL_ADC_MspInit+0x138>)
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <HAL_ADC_MspInit+0x138>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010f2:	2304      	movs	r3, #4
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f6:	2303      	movs	r3, #3
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001102:	4619      	mov	r1, r3
 8001104:	4805      	ldr	r0, [pc, #20]	; (800111c <HAL_ADC_MspInit+0x13c>)
 8001106:	f000 fe37 	bl	8001d78 <HAL_GPIO_Init>
}
 800110a:	bf00      	nop
 800110c:	3738      	adds	r7, #56	; 0x38
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40012000 	.word	0x40012000
 8001118:	40023800 	.word	0x40023800
 800111c:	40020800 	.word	0x40020800
 8001120:	40012100 	.word	0x40012100
 8001124:	40012200 	.word	0x40012200

08001128 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a05      	ldr	r2, [pc, #20]	; (800114c <HAL_RTC_MspInit+0x24>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d102      	bne.n	8001140 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800113a:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_RTC_MspInit+0x28>)
 800113c:	2201      	movs	r2, #1
 800113e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	40002800 	.word	0x40002800
 8001150:	42470e3c 	.word	0x42470e3c

08001154 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001164:	d116      	bne.n	8001194 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	4b28      	ldr	r3, [pc, #160]	; (800120c <HAL_TIM_Base_MspInit+0xb8>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	4a27      	ldr	r2, [pc, #156]	; (800120c <HAL_TIM_Base_MspInit+0xb8>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6413      	str	r3, [r2, #64]	; 0x40
 8001176:	4b25      	ldr	r3, [pc, #148]	; (800120c <HAL_TIM_Base_MspInit+0xb8>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	201c      	movs	r0, #28
 8001188:	f000 fd9d 	bl	8001cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800118c:	201c      	movs	r0, #28
 800118e:	f000 fdb6 	bl	8001cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001192:	e036      	b.n	8001202 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a1d      	ldr	r2, [pc, #116]	; (8001210 <HAL_TIM_Base_MspInit+0xbc>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d116      	bne.n	80011cc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	4b1a      	ldr	r3, [pc, #104]	; (800120c <HAL_TIM_Base_MspInit+0xb8>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	4a19      	ldr	r2, [pc, #100]	; (800120c <HAL_TIM_Base_MspInit+0xb8>)
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	6413      	str	r3, [r2, #64]	; 0x40
 80011ae:	4b17      	ldr	r3, [pc, #92]	; (800120c <HAL_TIM_Base_MspInit+0xb8>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	201e      	movs	r0, #30
 80011c0:	f000 fd81 	bl	8001cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80011c4:	201e      	movs	r0, #30
 80011c6:	f000 fd9a 	bl	8001cfe <HAL_NVIC_EnableIRQ>
}
 80011ca:	e01a      	b.n	8001202 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM5)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a10      	ldr	r2, [pc, #64]	; (8001214 <HAL_TIM_Base_MspInit+0xc0>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d115      	bne.n	8001202 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <HAL_TIM_Base_MspInit+0xb8>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	4a0b      	ldr	r2, [pc, #44]	; (800120c <HAL_TIM_Base_MspInit+0xb8>)
 80011e0:	f043 0308 	orr.w	r3, r3, #8
 80011e4:	6413      	str	r3, [r2, #64]	; 0x40
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_TIM_Base_MspInit+0xb8>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	2032      	movs	r0, #50	; 0x32
 80011f8:	f000 fd65 	bl	8001cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80011fc:	2032      	movs	r0, #50	; 0x32
 80011fe:	f000 fd7e 	bl	8001cfe <HAL_NVIC_EnableIRQ>
}
 8001202:	bf00      	nop
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800
 8001210:	40000800 	.word	0x40000800
 8001214:	40000c00 	.word	0x40000c00

08001218 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08e      	sub	sp, #56	; 0x38
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a67      	ldr	r2, [pc, #412]	; (80013d4 <HAL_UART_MspInit+0x1bc>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d153      	bne.n	80012e2 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	623b      	str	r3, [r7, #32]
 800123e:	4b66      	ldr	r3, [pc, #408]	; (80013d8 <HAL_UART_MspInit+0x1c0>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a65      	ldr	r2, [pc, #404]	; (80013d8 <HAL_UART_MspInit+0x1c0>)
 8001244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b63      	ldr	r3, [pc, #396]	; (80013d8 <HAL_UART_MspInit+0x1c0>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001252:	623b      	str	r3, [r7, #32]
 8001254:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
 800125a:	4b5f      	ldr	r3, [pc, #380]	; (80013d8 <HAL_UART_MspInit+0x1c0>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a5e      	ldr	r2, [pc, #376]	; (80013d8 <HAL_UART_MspInit+0x1c0>)
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b5c      	ldr	r3, [pc, #368]	; (80013d8 <HAL_UART_MspInit+0x1c0>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	61fb      	str	r3, [r7, #28]
 8001270:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
 8001276:	4b58      	ldr	r3, [pc, #352]	; (80013d8 <HAL_UART_MspInit+0x1c0>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a57      	ldr	r2, [pc, #348]	; (80013d8 <HAL_UART_MspInit+0x1c0>)
 800127c:	f043 0308 	orr.w	r3, r3, #8
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b55      	ldr	r3, [pc, #340]	; (80013d8 <HAL_UART_MspInit+0x1c0>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	61bb      	str	r3, [r7, #24]
 800128c:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = RS485_TX_Pin;
 800128e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001298:	2301      	movs	r3, #1
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80012a0:	2308      	movs	r3, #8
 80012a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 80012a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a8:	4619      	mov	r1, r3
 80012aa:	484c      	ldr	r0, [pc, #304]	; (80013dc <HAL_UART_MspInit+0x1c4>)
 80012ac:	f000 fd64 	bl	8001d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RS485_RX_Pin;
 80012b0:	2304      	movs	r3, #4
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012bc:	2303      	movs	r3, #3
 80012be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80012c0:	2308      	movs	r3, #8
 80012c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c8:	4619      	mov	r1, r3
 80012ca:	4845      	ldr	r0, [pc, #276]	; (80013e0 <HAL_UART_MspInit+0x1c8>)
 80012cc:	f000 fd54 	bl	8001d78 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2100      	movs	r1, #0
 80012d4:	2035      	movs	r0, #53	; 0x35
 80012d6:	f000 fcf6 	bl	8001cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80012da:	2035      	movs	r0, #53	; 0x35
 80012dc:	f000 fd0f 	bl	8001cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012e0:	e073      	b.n	80013ca <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==UART7)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a3f      	ldr	r2, [pc, #252]	; (80013e4 <HAL_UART_MspInit+0x1cc>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d135      	bne.n	8001358 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART7_CLK_ENABLE();
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	4b39      	ldr	r3, [pc, #228]	; (80013d8 <HAL_UART_MspInit+0x1c0>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	4a38      	ldr	r2, [pc, #224]	; (80013d8 <HAL_UART_MspInit+0x1c0>)
 80012f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80012fa:	6413      	str	r3, [r2, #64]	; 0x40
 80012fc:	4b36      	ldr	r3, [pc, #216]	; (80013d8 <HAL_UART_MspInit+0x1c0>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	4b32      	ldr	r3, [pc, #200]	; (80013d8 <HAL_UART_MspInit+0x1c0>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	4a31      	ldr	r2, [pc, #196]	; (80013d8 <HAL_UART_MspInit+0x1c0>)
 8001312:	f043 0310 	orr.w	r3, r3, #16
 8001316:	6313      	str	r3, [r2, #48]	; 0x30
 8001318:	4b2f      	ldr	r3, [pc, #188]	; (80013d8 <HAL_UART_MspInit+0x1c0>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	f003 0310 	and.w	r3, r3, #16
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_UART_RX_Pin|LCD_UART_TX_Pin;
 8001324:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800132e:	2301      	movs	r3, #1
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001336:	2308      	movs	r3, #8
 8001338:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800133a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133e:	4619      	mov	r1, r3
 8001340:	4829      	ldr	r0, [pc, #164]	; (80013e8 <HAL_UART_MspInit+0x1d0>)
 8001342:	f000 fd19 	bl	8001d78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	2052      	movs	r0, #82	; 0x52
 800134c:	f000 fcbb 	bl	8001cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001350:	2052      	movs	r0, #82	; 0x52
 8001352:	f000 fcd4 	bl	8001cfe <HAL_NVIC_EnableIRQ>
}
 8001356:	e038      	b.n	80013ca <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a23      	ldr	r2, [pc, #140]	; (80013ec <HAL_UART_MspInit+0x1d4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d133      	bne.n	80013ca <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <HAL_UART_MspInit+0x1c0>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	4a1b      	ldr	r2, [pc, #108]	; (80013d8 <HAL_UART_MspInit+0x1c0>)
 800136c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
 8001372:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <HAL_UART_MspInit+0x1c0>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_UART_MspInit+0x1c0>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a14      	ldr	r2, [pc, #80]	; (80013d8 <HAL_UART_MspInit+0x1c0>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_UART_MspInit+0x1c0>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = WIFI_UART_TX_Pin|WIFI_UART_RX_Pin;
 800139a:	230c      	movs	r3, #12
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013aa:	2307      	movs	r3, #7
 80013ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b2:	4619      	mov	r1, r3
 80013b4:	480e      	ldr	r0, [pc, #56]	; (80013f0 <HAL_UART_MspInit+0x1d8>)
 80013b6:	f000 fcdf 	bl	8001d78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2100      	movs	r1, #0
 80013be:	2026      	movs	r0, #38	; 0x26
 80013c0:	f000 fc81 	bl	8001cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013c4:	2026      	movs	r0, #38	; 0x26
 80013c6:	f000 fc9a 	bl	8001cfe <HAL_NVIC_EnableIRQ>
}
 80013ca:	bf00      	nop
 80013cc:	3738      	adds	r7, #56	; 0x38
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40005000 	.word	0x40005000
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020800 	.word	0x40020800
 80013e0:	40020c00 	.word	0x40020c00
 80013e4:	40007800 	.word	0x40007800
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40004400 	.word	0x40004400
 80013f0:	40020000 	.word	0x40020000

080013f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <HardFault_Handler+0x4>

08001408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800140c:	e7fe      	b.n	800140c <MemManage_Handler+0x4>

0800140e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001412:	e7fe      	b.n	8001412 <BusFault_Handler+0x4>

08001414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <UsageFault_Handler+0x4>

0800141a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001448:	f000 f8d0 	bl	80015ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}

08001450 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001454:	4802      	ldr	r0, [pc, #8]	; (8001460 <TIM2_IRQHandler+0x10>)
 8001456:	f001 ff1b 	bl	8003290 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200001a8 	.word	0x200001a8

08001464 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001468:	4802      	ldr	r0, [pc, #8]	; (8001474 <TIM4_IRQHandler+0x10>)
 800146a:	f001 ff11 	bl	8003290 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000128 	.word	0x20000128

08001478 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <USART2_IRQHandler+0x10>)
 800147e:	f002 fb07 	bl	8003a90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000268 	.word	0x20000268

0800148c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <TIM5_IRQHandler+0x10>)
 8001492:	f001 fefd 	bl	8003290 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000168 	.word	0x20000168

080014a0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <UART5_IRQHandler+0x10>)
 80014a6:	f002 faf3 	bl	8003a90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000228 	.word	0x20000228

080014b4 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80014b8:	4802      	ldr	r0, [pc, #8]	; (80014c4 <UART7_IRQHandler+0x10>)
 80014ba:	f002 fae9 	bl	8003a90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200001e8 	.word	0x200001e8

080014c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <SystemInit+0x28>)
 80014ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014d2:	4a07      	ldr	r2, [pc, #28]	; (80014f0 <SystemInit+0x28>)
 80014d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014dc:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <SystemInit+0x28>)
 80014de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014e2:	609a      	str	r2, [r3, #8]
#endif
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80014f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800152c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014fa:	e003      	b.n	8001504 <LoopCopyDataInit>

080014fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001500:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001502:	3104      	adds	r1, #4

08001504 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001504:	480b      	ldr	r0, [pc, #44]	; (8001534 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001508:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800150a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800150c:	d3f6      	bcc.n	80014fc <CopyDataInit>
  ldr  r2, =_sbss
 800150e:	4a0b      	ldr	r2, [pc, #44]	; (800153c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001510:	e002      	b.n	8001518 <LoopFillZerobss>

08001512 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001512:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001514:	f842 3b04 	str.w	r3, [r2], #4

08001518 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800151a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800151c:	d3f9      	bcc.n	8001512 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800151e:	f7ff ffd3 	bl	80014c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001522:	f003 f871 	bl	8004608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001526:	f7ff fd2b 	bl	8000f80 <main>
  bx  lr    
 800152a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800152c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001530:	080046a0 	.word	0x080046a0
  ldr  r0, =_sdata
 8001534:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001538:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800153c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001540:	200002ac 	.word	0x200002ac

08001544 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC_IRQHandler>
	...

08001548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800154c:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <HAL_Init+0x40>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0d      	ldr	r2, [pc, #52]	; (8001588 <HAL_Init+0x40>)
 8001552:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001556:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <HAL_Init+0x40>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <HAL_Init+0x40>)
 800155e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001562:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <HAL_Init+0x40>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a07      	ldr	r2, [pc, #28]	; (8001588 <HAL_Init+0x40>)
 800156a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001570:	2003      	movs	r0, #3
 8001572:	f000 fb9d 	bl	8001cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001576:	2000      	movs	r0, #0
 8001578:	f000 f808 	bl	800158c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800157c:	f7ff fd08 	bl	8000f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40023c00 	.word	0x40023c00

0800158c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_InitTick+0x54>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_InitTick+0x58>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 fbb5 	bl	8001d1a <HAL_SYSTICK_Config>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00e      	b.n	80015d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b0f      	cmp	r3, #15
 80015be:	d80a      	bhi.n	80015d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c0:	2200      	movs	r2, #0
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295
 80015c8:	f000 fb7d 	bl	8001cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015cc:	4a06      	ldr	r2, [pc, #24]	; (80015e8 <HAL_InitTick+0x5c>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e000      	b.n	80015d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000000 	.word	0x20000000
 80015e4:	20000008 	.word	0x20000008
 80015e8:	20000004 	.word	0x20000004

080015ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_IncTick+0x20>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_IncTick+0x24>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	4a04      	ldr	r2, [pc, #16]	; (8001610 <HAL_IncTick+0x24>)
 80015fe:	6013      	str	r3, [r2, #0]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	20000008 	.word	0x20000008
 8001610:	200002a8 	.word	0x200002a8

08001614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return uwTick;
 8001618:	4b03      	ldr	r3, [pc, #12]	; (8001628 <HAL_GetTick+0x14>)
 800161a:	681b      	ldr	r3, [r3, #0]
}
 800161c:	4618      	mov	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	200002a8 	.word	0x200002a8

0800162c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e033      	b.n	80016aa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	2b00      	cmp	r3, #0
 8001648:	d109      	bne.n	800165e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff fcc8 	bl	8000fe0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f003 0310 	and.w	r3, r3, #16
 8001666:	2b00      	cmp	r3, #0
 8001668:	d118      	bne.n	800169c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001672:	f023 0302 	bic.w	r3, r3, #2
 8001676:	f043 0202 	orr.w	r2, r3, #2
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 f94a 	bl	8001918 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	f023 0303 	bic.w	r3, r3, #3
 8001692:	f043 0201 	orr.w	r2, r3, #1
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	641a      	str	r2, [r3, #64]	; 0x40
 800169a:	e001      	b.n	80016a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d101      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x1c>
 80016cc:	2302      	movs	r3, #2
 80016ce:	e113      	b.n	80018f8 <HAL_ADC_ConfigChannel+0x244>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b09      	cmp	r3, #9
 80016de:	d925      	bls.n	800172c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68d9      	ldr	r1, [r3, #12]
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	461a      	mov	r2, r3
 80016ee:	4613      	mov	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	4413      	add	r3, r2
 80016f4:	3b1e      	subs	r3, #30
 80016f6:	2207      	movs	r2, #7
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43da      	mvns	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	400a      	ands	r2, r1
 8001704:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68d9      	ldr	r1, [r3, #12]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	b29b      	uxth	r3, r3
 8001716:	4618      	mov	r0, r3
 8001718:	4603      	mov	r3, r0
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4403      	add	r3, r0
 800171e:	3b1e      	subs	r3, #30
 8001720:	409a      	lsls	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	e022      	b.n	8001772 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6919      	ldr	r1, [r3, #16]
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	b29b      	uxth	r3, r3
 8001738:	461a      	mov	r2, r3
 800173a:	4613      	mov	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4413      	add	r3, r2
 8001740:	2207      	movs	r2, #7
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43da      	mvns	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	400a      	ands	r2, r1
 800174e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6919      	ldr	r1, [r3, #16]
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	b29b      	uxth	r3, r3
 8001760:	4618      	mov	r0, r3
 8001762:	4603      	mov	r3, r0
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4403      	add	r3, r0
 8001768:	409a      	lsls	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b06      	cmp	r3, #6
 8001778:	d824      	bhi.n	80017c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	3b05      	subs	r3, #5
 800178c:	221f      	movs	r2, #31
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43da      	mvns	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	400a      	ands	r2, r1
 800179a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	4618      	mov	r0, r3
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	3b05      	subs	r3, #5
 80017b6:	fa00 f203 	lsl.w	r2, r0, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	635a      	str	r2, [r3, #52]	; 0x34
 80017c2:	e04c      	b.n	800185e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b0c      	cmp	r3, #12
 80017ca:	d824      	bhi.n	8001816 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	3b23      	subs	r3, #35	; 0x23
 80017de:	221f      	movs	r2, #31
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43da      	mvns	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	400a      	ands	r2, r1
 80017ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	4618      	mov	r0, r3
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685a      	ldr	r2, [r3, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	3b23      	subs	r3, #35	; 0x23
 8001808:	fa00 f203 	lsl.w	r2, r0, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	631a      	str	r2, [r3, #48]	; 0x30
 8001814:	e023      	b.n	800185e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	3b41      	subs	r3, #65	; 0x41
 8001828:	221f      	movs	r2, #31
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43da      	mvns	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	400a      	ands	r2, r1
 8001836:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	b29b      	uxth	r3, r3
 8001844:	4618      	mov	r0, r3
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	3b41      	subs	r3, #65	; 0x41
 8001852:	fa00 f203 	lsl.w	r2, r0, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800185e:	4b29      	ldr	r3, [pc, #164]	; (8001904 <HAL_ADC_ConfigChannel+0x250>)
 8001860:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a28      	ldr	r2, [pc, #160]	; (8001908 <HAL_ADC_ConfigChannel+0x254>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d10f      	bne.n	800188c <HAL_ADC_ConfigChannel+0x1d8>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b12      	cmp	r3, #18
 8001872:	d10b      	bne.n	800188c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a1d      	ldr	r2, [pc, #116]	; (8001908 <HAL_ADC_ConfigChannel+0x254>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d12b      	bne.n	80018ee <HAL_ADC_ConfigChannel+0x23a>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a1c      	ldr	r2, [pc, #112]	; (800190c <HAL_ADC_ConfigChannel+0x258>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d003      	beq.n	80018a8 <HAL_ADC_ConfigChannel+0x1f4>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b11      	cmp	r3, #17
 80018a6:	d122      	bne.n	80018ee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a11      	ldr	r2, [pc, #68]	; (800190c <HAL_ADC_ConfigChannel+0x258>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d111      	bne.n	80018ee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <HAL_ADC_ConfigChannel+0x25c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a11      	ldr	r2, [pc, #68]	; (8001914 <HAL_ADC_ConfigChannel+0x260>)
 80018d0:	fba2 2303 	umull	r2, r3, r2, r3
 80018d4:	0c9a      	lsrs	r2, r3, #18
 80018d6:	4613      	mov	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018e0:	e002      	b.n	80018e8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f9      	bne.n	80018e2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	40012300 	.word	0x40012300
 8001908:	40012000 	.word	0x40012000
 800190c:	10000012 	.word	0x10000012
 8001910:	20000000 	.word	0x20000000
 8001914:	431bde83 	.word	0x431bde83

08001918 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001920:	4b79      	ldr	r3, [pc, #484]	; (8001b08 <ADC_Init+0x1f0>)
 8001922:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	431a      	orrs	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800194c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6859      	ldr	r1, [r3, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	021a      	lsls	r2, r3, #8
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	430a      	orrs	r2, r1
 8001960:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001970:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6859      	ldr	r1, [r3, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	430a      	orrs	r2, r1
 8001982:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001992:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6899      	ldr	r1, [r3, #8]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68da      	ldr	r2, [r3, #12]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019aa:	4a58      	ldr	r2, [pc, #352]	; (8001b0c <ADC_Init+0x1f4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d022      	beq.n	80019f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6899      	ldr	r1, [r3, #8]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6899      	ldr	r1, [r3, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	e00f      	b.n	8001a16 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a14:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0202 	bic.w	r2, r2, #2
 8001a24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6899      	ldr	r1, [r3, #8]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	7e1b      	ldrb	r3, [r3, #24]
 8001a30:	005a      	lsls	r2, r3, #1
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d01b      	beq.n	8001a7c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a52:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6859      	ldr	r1, [r3, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	035a      	lsls	r2, r3, #13
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	e007      	b.n	8001a8c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	051a      	lsls	r2, r3, #20
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ac0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6899      	ldr	r1, [r3, #8]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ace:	025a      	lsls	r2, r3, #9
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ae6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6899      	ldr	r1, [r3, #8]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	029a      	lsls	r2, r3, #10
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	609a      	str	r2, [r3, #8]
}
 8001afc:	bf00      	nop
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	40012300 	.word	0x40012300
 8001b0c:	0f000001 	.word	0x0f000001

08001b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b42:	4a04      	ldr	r2, [pc, #16]	; (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	60d3      	str	r3, [r2, #12]
}
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <__NVIC_GetPriorityGrouping+0x18>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	f003 0307 	and.w	r3, r3, #7
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	db0b      	blt.n	8001b9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	f003 021f 	and.w	r2, r3, #31
 8001b8c:	4907      	ldr	r1, [pc, #28]	; (8001bac <__NVIC_EnableIRQ+0x38>)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	095b      	lsrs	r3, r3, #5
 8001b94:	2001      	movs	r0, #1
 8001b96:	fa00 f202 	lsl.w	r2, r0, r2
 8001b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000e100 	.word	0xe000e100

08001bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	6039      	str	r1, [r7, #0]
 8001bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	db0a      	blt.n	8001bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	490c      	ldr	r1, [pc, #48]	; (8001bfc <__NVIC_SetPriority+0x4c>)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	0112      	lsls	r2, r2, #4
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd8:	e00a      	b.n	8001bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4908      	ldr	r1, [pc, #32]	; (8001c00 <__NVIC_SetPriority+0x50>)
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	3b04      	subs	r3, #4
 8001be8:	0112      	lsls	r2, r2, #4
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	440b      	add	r3, r1
 8001bee:	761a      	strb	r2, [r3, #24]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000e100 	.word	0xe000e100
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b089      	sub	sp, #36	; 0x24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f1c3 0307 	rsb	r3, r3, #7
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	bf28      	it	cs
 8001c22:	2304      	movcs	r3, #4
 8001c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	2b06      	cmp	r3, #6
 8001c2c:	d902      	bls.n	8001c34 <NVIC_EncodePriority+0x30>
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3b03      	subs	r3, #3
 8001c32:	e000      	b.n	8001c36 <NVIC_EncodePriority+0x32>
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	f04f 32ff 	mov.w	r2, #4294967295
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43da      	mvns	r2, r3
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	401a      	ands	r2, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
 8001c56:	43d9      	mvns	r1, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c5c:	4313      	orrs	r3, r2
         );
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3724      	adds	r7, #36	; 0x24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
	...

08001c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c7c:	d301      	bcc.n	8001c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00f      	b.n	8001ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c82:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <SysTick_Config+0x40>)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8a:	210f      	movs	r1, #15
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c90:	f7ff ff8e 	bl	8001bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <SysTick_Config+0x40>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9a:	4b04      	ldr	r3, [pc, #16]	; (8001cac <SysTick_Config+0x40>)
 8001c9c:	2207      	movs	r2, #7
 8001c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	e000e010 	.word	0xe000e010

08001cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ff29 	bl	8001b10 <__NVIC_SetPriorityGrouping>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	4603      	mov	r3, r0
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
 8001cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd8:	f7ff ff3e 	bl	8001b58 <__NVIC_GetPriorityGrouping>
 8001cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	6978      	ldr	r0, [r7, #20]
 8001ce4:	f7ff ff8e 	bl	8001c04 <NVIC_EncodePriority>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cee:	4611      	mov	r1, r2
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff5d 	bl	8001bb0 <__NVIC_SetPriority>
}
 8001cf6:	bf00      	nop
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	4603      	mov	r3, r0
 8001d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff31 	bl	8001b74 <__NVIC_EnableIRQ>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff ffa2 	bl	8001c6c <SysTick_Config>
 8001d28:	4603      	mov	r3, r0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d004      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2280      	movs	r2, #128	; 0x80
 8001d4a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e00c      	b.n	8001d6a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2205      	movs	r2, #5
 8001d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0201 	bic.w	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b089      	sub	sp, #36	; 0x24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]
 8001d92:	e177      	b.n	8002084 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d94:	2201      	movs	r2, #1
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	4013      	ands	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	f040 8166 	bne.w	800207e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d00b      	beq.n	8001dd2 <HAL_GPIO_Init+0x5a>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d007      	beq.n	8001dd2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dc6:	2b11      	cmp	r3, #17
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b12      	cmp	r3, #18
 8001dd0:	d130      	bne.n	8001e34 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	2203      	movs	r2, #3
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e08:	2201      	movs	r2, #1
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	091b      	lsrs	r3, r3, #4
 8001e1e:	f003 0201 	and.w	r2, r3, #1
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	2203      	movs	r2, #3
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_Init+0xfc>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b12      	cmp	r3, #18
 8001e72:	d123      	bne.n	8001ebc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	08da      	lsrs	r2, r3, #3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3208      	adds	r2, #8
 8001e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	220f      	movs	r2, #15
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	691a      	ldr	r2, [r3, #16]
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	08da      	lsrs	r2, r3, #3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3208      	adds	r2, #8
 8001eb6:	69b9      	ldr	r1, [r7, #24]
 8001eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0203 	and.w	r2, r3, #3
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80c0 	beq.w	800207e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	4b65      	ldr	r3, [pc, #404]	; (8002098 <HAL_GPIO_Init+0x320>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	4a64      	ldr	r2, [pc, #400]	; (8002098 <HAL_GPIO_Init+0x320>)
 8001f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0e:	4b62      	ldr	r3, [pc, #392]	; (8002098 <HAL_GPIO_Init+0x320>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f1a:	4a60      	ldr	r2, [pc, #384]	; (800209c <HAL_GPIO_Init+0x324>)
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	089b      	lsrs	r3, r3, #2
 8001f20:	3302      	adds	r3, #2
 8001f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	220f      	movs	r2, #15
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a57      	ldr	r2, [pc, #348]	; (80020a0 <HAL_GPIO_Init+0x328>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d037      	beq.n	8001fb6 <HAL_GPIO_Init+0x23e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a56      	ldr	r2, [pc, #344]	; (80020a4 <HAL_GPIO_Init+0x32c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d031      	beq.n	8001fb2 <HAL_GPIO_Init+0x23a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a55      	ldr	r2, [pc, #340]	; (80020a8 <HAL_GPIO_Init+0x330>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d02b      	beq.n	8001fae <HAL_GPIO_Init+0x236>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a54      	ldr	r2, [pc, #336]	; (80020ac <HAL_GPIO_Init+0x334>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d025      	beq.n	8001faa <HAL_GPIO_Init+0x232>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a53      	ldr	r2, [pc, #332]	; (80020b0 <HAL_GPIO_Init+0x338>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d01f      	beq.n	8001fa6 <HAL_GPIO_Init+0x22e>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a52      	ldr	r2, [pc, #328]	; (80020b4 <HAL_GPIO_Init+0x33c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d019      	beq.n	8001fa2 <HAL_GPIO_Init+0x22a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a51      	ldr	r2, [pc, #324]	; (80020b8 <HAL_GPIO_Init+0x340>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d013      	beq.n	8001f9e <HAL_GPIO_Init+0x226>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a50      	ldr	r2, [pc, #320]	; (80020bc <HAL_GPIO_Init+0x344>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d00d      	beq.n	8001f9a <HAL_GPIO_Init+0x222>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a4f      	ldr	r2, [pc, #316]	; (80020c0 <HAL_GPIO_Init+0x348>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d007      	beq.n	8001f96 <HAL_GPIO_Init+0x21e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a4e      	ldr	r2, [pc, #312]	; (80020c4 <HAL_GPIO_Init+0x34c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d101      	bne.n	8001f92 <HAL_GPIO_Init+0x21a>
 8001f8e:	2309      	movs	r3, #9
 8001f90:	e012      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001f92:	230a      	movs	r3, #10
 8001f94:	e010      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001f96:	2308      	movs	r3, #8
 8001f98:	e00e      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001f9a:	2307      	movs	r3, #7
 8001f9c:	e00c      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001f9e:	2306      	movs	r3, #6
 8001fa0:	e00a      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001fa2:	2305      	movs	r3, #5
 8001fa4:	e008      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	e006      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001faa:	2303      	movs	r3, #3
 8001fac:	e004      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e002      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	69fa      	ldr	r2, [r7, #28]
 8001fba:	f002 0203 	and.w	r2, r2, #3
 8001fbe:	0092      	lsls	r2, r2, #2
 8001fc0:	4093      	lsls	r3, r2
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fc8:	4934      	ldr	r1, [pc, #208]	; (800209c <HAL_GPIO_Init+0x324>)
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	089b      	lsrs	r3, r3, #2
 8001fce:	3302      	adds	r3, #2
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fd6:	4b3c      	ldr	r3, [pc, #240]	; (80020c8 <HAL_GPIO_Init+0x350>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ffa:	4a33      	ldr	r2, [pc, #204]	; (80020c8 <HAL_GPIO_Init+0x350>)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002000:	4b31      	ldr	r3, [pc, #196]	; (80020c8 <HAL_GPIO_Init+0x350>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002024:	4a28      	ldr	r2, [pc, #160]	; (80020c8 <HAL_GPIO_Init+0x350>)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800202a:	4b27      	ldr	r3, [pc, #156]	; (80020c8 <HAL_GPIO_Init+0x350>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800204e:	4a1e      	ldr	r2, [pc, #120]	; (80020c8 <HAL_GPIO_Init+0x350>)
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002054:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <HAL_GPIO_Init+0x350>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002078:	4a13      	ldr	r2, [pc, #76]	; (80020c8 <HAL_GPIO_Init+0x350>)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3301      	adds	r3, #1
 8002082:	61fb      	str	r3, [r7, #28]
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	2b0f      	cmp	r3, #15
 8002088:	f67f ae84 	bls.w	8001d94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800208c:	bf00      	nop
 800208e:	3724      	adds	r7, #36	; 0x24
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	40023800 	.word	0x40023800
 800209c:	40013800 	.word	0x40013800
 80020a0:	40020000 	.word	0x40020000
 80020a4:	40020400 	.word	0x40020400
 80020a8:	40020800 	.word	0x40020800
 80020ac:	40020c00 	.word	0x40020c00
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40021400 	.word	0x40021400
 80020b8:	40021800 	.word	0x40021800
 80020bc:	40021c00 	.word	0x40021c00
 80020c0:	40022000 	.word	0x40022000
 80020c4:	40022400 	.word	0x40022400
 80020c8:	40013c00 	.word	0x40013c00

080020cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	887b      	ldrh	r3, [r7, #2]
 80020de:	4013      	ands	r3, r2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
 80020e8:	e001      	b.n	80020ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	807b      	strh	r3, [r7, #2]
 8002108:	4613      	mov	r3, r2
 800210a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800210c:	787b      	ldrb	r3, [r7, #1]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002112:	887a      	ldrh	r2, [r7, #2]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002118:	e003      	b.n	8002122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800211a:	887b      	ldrh	r3, [r7, #2]
 800211c:	041a      	lsls	r2, r3, #16
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	619a      	str	r2, [r3, #24]
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
	...

08002130 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e25b      	b.n	80025fa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d075      	beq.n	800223a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800214e:	4ba3      	ldr	r3, [pc, #652]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b04      	cmp	r3, #4
 8002158:	d00c      	beq.n	8002174 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800215a:	4ba0      	ldr	r3, [pc, #640]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002162:	2b08      	cmp	r3, #8
 8002164:	d112      	bne.n	800218c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002166:	4b9d      	ldr	r3, [pc, #628]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002172:	d10b      	bne.n	800218c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002174:	4b99      	ldr	r3, [pc, #612]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d05b      	beq.n	8002238 <HAL_RCC_OscConfig+0x108>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d157      	bne.n	8002238 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e236      	b.n	80025fa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002194:	d106      	bne.n	80021a4 <HAL_RCC_OscConfig+0x74>
 8002196:	4b91      	ldr	r3, [pc, #580]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a90      	ldr	r2, [pc, #576]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 800219c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	e01d      	b.n	80021e0 <HAL_RCC_OscConfig+0xb0>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021ac:	d10c      	bne.n	80021c8 <HAL_RCC_OscConfig+0x98>
 80021ae:	4b8b      	ldr	r3, [pc, #556]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a8a      	ldr	r2, [pc, #552]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 80021b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	4b88      	ldr	r3, [pc, #544]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a87      	ldr	r2, [pc, #540]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 80021c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	e00b      	b.n	80021e0 <HAL_RCC_OscConfig+0xb0>
 80021c8:	4b84      	ldr	r3, [pc, #528]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a83      	ldr	r2, [pc, #524]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 80021ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d2:	6013      	str	r3, [r2, #0]
 80021d4:	4b81      	ldr	r3, [pc, #516]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a80      	ldr	r2, [pc, #512]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 80021da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d013      	beq.n	8002210 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e8:	f7ff fa14 	bl	8001614 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021f0:	f7ff fa10 	bl	8001614 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b64      	cmp	r3, #100	; 0x64
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e1fb      	b.n	80025fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002202:	4b76      	ldr	r3, [pc, #472]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f0      	beq.n	80021f0 <HAL_RCC_OscConfig+0xc0>
 800220e:	e014      	b.n	800223a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7ff fa00 	bl	8001614 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002218:	f7ff f9fc 	bl	8001614 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b64      	cmp	r3, #100	; 0x64
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e1e7      	b.n	80025fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800222a:	4b6c      	ldr	r3, [pc, #432]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f0      	bne.n	8002218 <HAL_RCC_OscConfig+0xe8>
 8002236:	e000      	b.n	800223a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d063      	beq.n	800230e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002246:	4b65      	ldr	r3, [pc, #404]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 030c 	and.w	r3, r3, #12
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00b      	beq.n	800226a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002252:	4b62      	ldr	r3, [pc, #392]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800225a:	2b08      	cmp	r3, #8
 800225c:	d11c      	bne.n	8002298 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800225e:	4b5f      	ldr	r3, [pc, #380]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d116      	bne.n	8002298 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226a:	4b5c      	ldr	r3, [pc, #368]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d005      	beq.n	8002282 <HAL_RCC_OscConfig+0x152>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d001      	beq.n	8002282 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e1bb      	b.n	80025fa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002282:	4b56      	ldr	r3, [pc, #344]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	4952      	ldr	r1, [pc, #328]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 8002292:	4313      	orrs	r3, r2
 8002294:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002296:	e03a      	b.n	800230e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d020      	beq.n	80022e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022a0:	4b4f      	ldr	r3, [pc, #316]	; (80023e0 <HAL_RCC_OscConfig+0x2b0>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a6:	f7ff f9b5 	bl	8001614 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ae:	f7ff f9b1 	bl	8001614 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e19c      	b.n	80025fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c0:	4b46      	ldr	r3, [pc, #280]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0f0      	beq.n	80022ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022cc:	4b43      	ldr	r3, [pc, #268]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4940      	ldr	r1, [pc, #256]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	600b      	str	r3, [r1, #0]
 80022e0:	e015      	b.n	800230e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022e2:	4b3f      	ldr	r3, [pc, #252]	; (80023e0 <HAL_RCC_OscConfig+0x2b0>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e8:	f7ff f994 	bl	8001614 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022f0:	f7ff f990 	bl	8001614 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e17b      	b.n	80025fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002302:	4b36      	ldr	r3, [pc, #216]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b00      	cmp	r3, #0
 8002318:	d030      	beq.n	800237c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d016      	beq.n	8002350 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002322:	4b30      	ldr	r3, [pc, #192]	; (80023e4 <HAL_RCC_OscConfig+0x2b4>)
 8002324:	2201      	movs	r2, #1
 8002326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002328:	f7ff f974 	bl	8001614 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002330:	f7ff f970 	bl	8001614 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e15b      	b.n	80025fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002342:	4b26      	ldr	r3, [pc, #152]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 8002344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f0      	beq.n	8002330 <HAL_RCC_OscConfig+0x200>
 800234e:	e015      	b.n	800237c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002350:	4b24      	ldr	r3, [pc, #144]	; (80023e4 <HAL_RCC_OscConfig+0x2b4>)
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002356:	f7ff f95d 	bl	8001614 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800235e:	f7ff f959 	bl	8001614 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e144      	b.n	80025fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002370:	4b1a      	ldr	r3, [pc, #104]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 8002372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1f0      	bne.n	800235e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 80a0 	beq.w	80024ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800238a:	2300      	movs	r3, #0
 800238c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800238e:	4b13      	ldr	r3, [pc, #76]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10f      	bne.n	80023ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	4a0e      	ldr	r2, [pc, #56]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a8:	6413      	str	r3, [r2, #64]	; 0x40
 80023aa:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <HAL_RCC_OscConfig+0x2ac>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b6:	2301      	movs	r3, #1
 80023b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ba:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <HAL_RCC_OscConfig+0x2b8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d121      	bne.n	800240a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c6:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <HAL_RCC_OscConfig+0x2b8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <HAL_RCC_OscConfig+0x2b8>)
 80023cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d2:	f7ff f91f 	bl	8001614 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d8:	e011      	b.n	80023fe <HAL_RCC_OscConfig+0x2ce>
 80023da:	bf00      	nop
 80023dc:	40023800 	.word	0x40023800
 80023e0:	42470000 	.word	0x42470000
 80023e4:	42470e80 	.word	0x42470e80
 80023e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ec:	f7ff f912 	bl	8001614 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e0fd      	b.n	80025fa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fe:	4b81      	ldr	r3, [pc, #516]	; (8002604 <HAL_RCC_OscConfig+0x4d4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f0      	beq.n	80023ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d106      	bne.n	8002420 <HAL_RCC_OscConfig+0x2f0>
 8002412:	4b7d      	ldr	r3, [pc, #500]	; (8002608 <HAL_RCC_OscConfig+0x4d8>)
 8002414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002416:	4a7c      	ldr	r2, [pc, #496]	; (8002608 <HAL_RCC_OscConfig+0x4d8>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	6713      	str	r3, [r2, #112]	; 0x70
 800241e:	e01c      	b.n	800245a <HAL_RCC_OscConfig+0x32a>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	2b05      	cmp	r3, #5
 8002426:	d10c      	bne.n	8002442 <HAL_RCC_OscConfig+0x312>
 8002428:	4b77      	ldr	r3, [pc, #476]	; (8002608 <HAL_RCC_OscConfig+0x4d8>)
 800242a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242c:	4a76      	ldr	r2, [pc, #472]	; (8002608 <HAL_RCC_OscConfig+0x4d8>)
 800242e:	f043 0304 	orr.w	r3, r3, #4
 8002432:	6713      	str	r3, [r2, #112]	; 0x70
 8002434:	4b74      	ldr	r3, [pc, #464]	; (8002608 <HAL_RCC_OscConfig+0x4d8>)
 8002436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002438:	4a73      	ldr	r2, [pc, #460]	; (8002608 <HAL_RCC_OscConfig+0x4d8>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	6713      	str	r3, [r2, #112]	; 0x70
 8002440:	e00b      	b.n	800245a <HAL_RCC_OscConfig+0x32a>
 8002442:	4b71      	ldr	r3, [pc, #452]	; (8002608 <HAL_RCC_OscConfig+0x4d8>)
 8002444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002446:	4a70      	ldr	r2, [pc, #448]	; (8002608 <HAL_RCC_OscConfig+0x4d8>)
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	6713      	str	r3, [r2, #112]	; 0x70
 800244e:	4b6e      	ldr	r3, [pc, #440]	; (8002608 <HAL_RCC_OscConfig+0x4d8>)
 8002450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002452:	4a6d      	ldr	r2, [pc, #436]	; (8002608 <HAL_RCC_OscConfig+0x4d8>)
 8002454:	f023 0304 	bic.w	r3, r3, #4
 8002458:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d015      	beq.n	800248e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002462:	f7ff f8d7 	bl	8001614 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002468:	e00a      	b.n	8002480 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800246a:	f7ff f8d3 	bl	8001614 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	f241 3288 	movw	r2, #5000	; 0x1388
 8002478:	4293      	cmp	r3, r2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e0bc      	b.n	80025fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002480:	4b61      	ldr	r3, [pc, #388]	; (8002608 <HAL_RCC_OscConfig+0x4d8>)
 8002482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0ee      	beq.n	800246a <HAL_RCC_OscConfig+0x33a>
 800248c:	e014      	b.n	80024b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248e:	f7ff f8c1 	bl	8001614 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002494:	e00a      	b.n	80024ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002496:	f7ff f8bd 	bl	8001614 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e0a6      	b.n	80025fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ac:	4b56      	ldr	r3, [pc, #344]	; (8002608 <HAL_RCC_OscConfig+0x4d8>)
 80024ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1ee      	bne.n	8002496 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024b8:	7dfb      	ldrb	r3, [r7, #23]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d105      	bne.n	80024ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024be:	4b52      	ldr	r3, [pc, #328]	; (8002608 <HAL_RCC_OscConfig+0x4d8>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	4a51      	ldr	r2, [pc, #324]	; (8002608 <HAL_RCC_OscConfig+0x4d8>)
 80024c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 8092 	beq.w	80025f8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024d4:	4b4c      	ldr	r3, [pc, #304]	; (8002608 <HAL_RCC_OscConfig+0x4d8>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 030c 	and.w	r3, r3, #12
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d05c      	beq.n	800259a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d141      	bne.n	800256c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e8:	4b48      	ldr	r3, [pc, #288]	; (800260c <HAL_RCC_OscConfig+0x4dc>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ee:	f7ff f891 	bl	8001614 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f6:	f7ff f88d 	bl	8001614 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e078      	b.n	80025fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002508:	4b3f      	ldr	r3, [pc, #252]	; (8002608 <HAL_RCC_OscConfig+0x4d8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1f0      	bne.n	80024f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69da      	ldr	r2, [r3, #28]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	019b      	lsls	r3, r3, #6
 8002524:	431a      	orrs	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252a:	085b      	lsrs	r3, r3, #1
 800252c:	3b01      	subs	r3, #1
 800252e:	041b      	lsls	r3, r3, #16
 8002530:	431a      	orrs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002536:	061b      	lsls	r3, r3, #24
 8002538:	4933      	ldr	r1, [pc, #204]	; (8002608 <HAL_RCC_OscConfig+0x4d8>)
 800253a:	4313      	orrs	r3, r2
 800253c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800253e:	4b33      	ldr	r3, [pc, #204]	; (800260c <HAL_RCC_OscConfig+0x4dc>)
 8002540:	2201      	movs	r2, #1
 8002542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7ff f866 	bl	8001614 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800254c:	f7ff f862 	bl	8001614 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e04d      	b.n	80025fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800255e:	4b2a      	ldr	r3, [pc, #168]	; (8002608 <HAL_RCC_OscConfig+0x4d8>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f0      	beq.n	800254c <HAL_RCC_OscConfig+0x41c>
 800256a:	e045      	b.n	80025f8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256c:	4b27      	ldr	r3, [pc, #156]	; (800260c <HAL_RCC_OscConfig+0x4dc>)
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002572:	f7ff f84f 	bl	8001614 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800257a:	f7ff f84b 	bl	8001614 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e036      	b.n	80025fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258c:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <HAL_RCC_OscConfig+0x4d8>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f0      	bne.n	800257a <HAL_RCC_OscConfig+0x44a>
 8002598:	e02e      	b.n	80025f8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d101      	bne.n	80025a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e029      	b.n	80025fa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025a6:	4b18      	ldr	r3, [pc, #96]	; (8002608 <HAL_RCC_OscConfig+0x4d8>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d11c      	bne.n	80025f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d115      	bne.n	80025f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025ce:	4013      	ands	r3, r2
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d10d      	bne.n	80025f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d106      	bne.n	80025f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d001      	beq.n	80025f8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40007000 	.word	0x40007000
 8002608:	40023800 	.word	0x40023800
 800260c:	42470060 	.word	0x42470060

08002610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0cc      	b.n	80027be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002624:	4b68      	ldr	r3, [pc, #416]	; (80027c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 030f 	and.w	r3, r3, #15
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d90c      	bls.n	800264c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002632:	4b65      	ldr	r3, [pc, #404]	; (80027c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800263a:	4b63      	ldr	r3, [pc, #396]	; (80027c8 <HAL_RCC_ClockConfig+0x1b8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d001      	beq.n	800264c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0b8      	b.n	80027be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d020      	beq.n	800269a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002664:	4b59      	ldr	r3, [pc, #356]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4a58      	ldr	r2, [pc, #352]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800266e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800267c:	4b53      	ldr	r3, [pc, #332]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	4a52      	ldr	r2, [pc, #328]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002686:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002688:	4b50      	ldr	r3, [pc, #320]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	494d      	ldr	r1, [pc, #308]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	4313      	orrs	r3, r2
 8002698:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d044      	beq.n	8002730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ae:	4b47      	ldr	r3, [pc, #284]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d119      	bne.n	80026ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e07f      	b.n	80027be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d003      	beq.n	80026ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ca:	2b03      	cmp	r3, #3
 80026cc:	d107      	bne.n	80026de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ce:	4b3f      	ldr	r3, [pc, #252]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d109      	bne.n	80026ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e06f      	b.n	80027be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026de:	4b3b      	ldr	r3, [pc, #236]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e067      	b.n	80027be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ee:	4b37      	ldr	r3, [pc, #220]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f023 0203 	bic.w	r2, r3, #3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	4934      	ldr	r1, [pc, #208]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002700:	f7fe ff88 	bl	8001614 <HAL_GetTick>
 8002704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002706:	e00a      	b.n	800271e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002708:	f7fe ff84 	bl	8001614 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	f241 3288 	movw	r2, #5000	; 0x1388
 8002716:	4293      	cmp	r3, r2
 8002718:	d901      	bls.n	800271e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e04f      	b.n	80027be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271e:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 020c 	and.w	r2, r3, #12
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	429a      	cmp	r2, r3
 800272e:	d1eb      	bne.n	8002708 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002730:	4b25      	ldr	r3, [pc, #148]	; (80027c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 030f 	and.w	r3, r3, #15
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d20c      	bcs.n	8002758 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273e:	4b22      	ldr	r3, [pc, #136]	; (80027c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002746:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d001      	beq.n	8002758 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e032      	b.n	80027be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002764:	4b19      	ldr	r3, [pc, #100]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	4916      	ldr	r1, [pc, #88]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	4313      	orrs	r3, r2
 8002774:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d009      	beq.n	8002796 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002782:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	490e      	ldr	r1, [pc, #56]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	4313      	orrs	r3, r2
 8002794:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002796:	f000 f821 	bl	80027dc <HAL_RCC_GetSysClockFreq>
 800279a:	4601      	mov	r1, r0
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	091b      	lsrs	r3, r3, #4
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <HAL_RCC_ClockConfig+0x1c0>)
 80027a8:	5cd3      	ldrb	r3, [r2, r3]
 80027aa:	fa21 f303 	lsr.w	r3, r1, r3
 80027ae:	4a09      	ldr	r2, [pc, #36]	; (80027d4 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027b2:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <HAL_RCC_ClockConfig+0x1c8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe fee8 	bl	800158c <HAL_InitTick>

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40023c00 	.word	0x40023c00
 80027cc:	40023800 	.word	0x40023800
 80027d0:	08004678 	.word	0x08004678
 80027d4:	20000000 	.word	0x20000000
 80027d8:	20000004 	.word	0x20000004

080027dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	607b      	str	r3, [r7, #4]
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	2300      	movs	r3, #0
 80027ec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027f2:	4b50      	ldr	r3, [pc, #320]	; (8002934 <HAL_RCC_GetSysClockFreq+0x158>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d007      	beq.n	800280e <HAL_RCC_GetSysClockFreq+0x32>
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d008      	beq.n	8002814 <HAL_RCC_GetSysClockFreq+0x38>
 8002802:	2b00      	cmp	r3, #0
 8002804:	f040 808d 	bne.w	8002922 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002808:	4b4b      	ldr	r3, [pc, #300]	; (8002938 <HAL_RCC_GetSysClockFreq+0x15c>)
 800280a:	60bb      	str	r3, [r7, #8]
       break;
 800280c:	e08c      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800280e:	4b4b      	ldr	r3, [pc, #300]	; (800293c <HAL_RCC_GetSysClockFreq+0x160>)
 8002810:	60bb      	str	r3, [r7, #8]
      break;
 8002812:	e089      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002814:	4b47      	ldr	r3, [pc, #284]	; (8002934 <HAL_RCC_GetSysClockFreq+0x158>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800281c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800281e:	4b45      	ldr	r3, [pc, #276]	; (8002934 <HAL_RCC_GetSysClockFreq+0x158>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d023      	beq.n	8002872 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800282a:	4b42      	ldr	r3, [pc, #264]	; (8002934 <HAL_RCC_GetSysClockFreq+0x158>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	099b      	lsrs	r3, r3, #6
 8002830:	f04f 0400 	mov.w	r4, #0
 8002834:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	ea03 0501 	and.w	r5, r3, r1
 8002840:	ea04 0602 	and.w	r6, r4, r2
 8002844:	4a3d      	ldr	r2, [pc, #244]	; (800293c <HAL_RCC_GetSysClockFreq+0x160>)
 8002846:	fb02 f106 	mul.w	r1, r2, r6
 800284a:	2200      	movs	r2, #0
 800284c:	fb02 f205 	mul.w	r2, r2, r5
 8002850:	440a      	add	r2, r1
 8002852:	493a      	ldr	r1, [pc, #232]	; (800293c <HAL_RCC_GetSysClockFreq+0x160>)
 8002854:	fba5 0101 	umull	r0, r1, r5, r1
 8002858:	1853      	adds	r3, r2, r1
 800285a:	4619      	mov	r1, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f04f 0400 	mov.w	r4, #0
 8002862:	461a      	mov	r2, r3
 8002864:	4623      	mov	r3, r4
 8002866:	f7fd fcc1 	bl	80001ec <__aeabi_uldivmod>
 800286a:	4603      	mov	r3, r0
 800286c:	460c      	mov	r4, r1
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	e049      	b.n	8002906 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002872:	4b30      	ldr	r3, [pc, #192]	; (8002934 <HAL_RCC_GetSysClockFreq+0x158>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	099b      	lsrs	r3, r3, #6
 8002878:	f04f 0400 	mov.w	r4, #0
 800287c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	ea03 0501 	and.w	r5, r3, r1
 8002888:	ea04 0602 	and.w	r6, r4, r2
 800288c:	4629      	mov	r1, r5
 800288e:	4632      	mov	r2, r6
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	f04f 0400 	mov.w	r4, #0
 8002898:	0154      	lsls	r4, r2, #5
 800289a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800289e:	014b      	lsls	r3, r1, #5
 80028a0:	4619      	mov	r1, r3
 80028a2:	4622      	mov	r2, r4
 80028a4:	1b49      	subs	r1, r1, r5
 80028a6:	eb62 0206 	sbc.w	r2, r2, r6
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	f04f 0400 	mov.w	r4, #0
 80028b2:	0194      	lsls	r4, r2, #6
 80028b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80028b8:	018b      	lsls	r3, r1, #6
 80028ba:	1a5b      	subs	r3, r3, r1
 80028bc:	eb64 0402 	sbc.w	r4, r4, r2
 80028c0:	f04f 0100 	mov.w	r1, #0
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	00e2      	lsls	r2, r4, #3
 80028ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80028ce:	00d9      	lsls	r1, r3, #3
 80028d0:	460b      	mov	r3, r1
 80028d2:	4614      	mov	r4, r2
 80028d4:	195b      	adds	r3, r3, r5
 80028d6:	eb44 0406 	adc.w	r4, r4, r6
 80028da:	f04f 0100 	mov.w	r1, #0
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	02a2      	lsls	r2, r4, #10
 80028e4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80028e8:	0299      	lsls	r1, r3, #10
 80028ea:	460b      	mov	r3, r1
 80028ec:	4614      	mov	r4, r2
 80028ee:	4618      	mov	r0, r3
 80028f0:	4621      	mov	r1, r4
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f04f 0400 	mov.w	r4, #0
 80028f8:	461a      	mov	r2, r3
 80028fa:	4623      	mov	r3, r4
 80028fc:	f7fd fc76 	bl	80001ec <__aeabi_uldivmod>
 8002900:	4603      	mov	r3, r0
 8002902:	460c      	mov	r4, r1
 8002904:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002906:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <HAL_RCC_GetSysClockFreq+0x158>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	0c1b      	lsrs	r3, r3, #16
 800290c:	f003 0303 	and.w	r3, r3, #3
 8002910:	3301      	adds	r3, #1
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	fbb2 f3f3 	udiv	r3, r2, r3
 800291e:	60bb      	str	r3, [r7, #8]
      break;
 8002920:	e002      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002922:	4b05      	ldr	r3, [pc, #20]	; (8002938 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002924:	60bb      	str	r3, [r7, #8]
      break;
 8002926:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002928:	68bb      	ldr	r3, [r7, #8]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002932:	bf00      	nop
 8002934:	40023800 	.word	0x40023800
 8002938:	00f42400 	.word	0x00f42400
 800293c:	017d7840 	.word	0x017d7840

08002940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002944:	4b03      	ldr	r3, [pc, #12]	; (8002954 <HAL_RCC_GetHCLKFreq+0x14>)
 8002946:	681b      	ldr	r3, [r3, #0]
}
 8002948:	4618      	mov	r0, r3
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	20000000 	.word	0x20000000

08002958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800295c:	f7ff fff0 	bl	8002940 <HAL_RCC_GetHCLKFreq>
 8002960:	4601      	mov	r1, r0
 8002962:	4b05      	ldr	r3, [pc, #20]	; (8002978 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	0a9b      	lsrs	r3, r3, #10
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	4a03      	ldr	r2, [pc, #12]	; (800297c <HAL_RCC_GetPCLK1Freq+0x24>)
 800296e:	5cd3      	ldrb	r3, [r2, r3]
 8002970:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002974:	4618      	mov	r0, r3
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40023800 	.word	0x40023800
 800297c:	08004688 	.word	0x08004688

08002980 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002984:	f7ff ffdc 	bl	8002940 <HAL_RCC_GetHCLKFreq>
 8002988:	4601      	mov	r1, r0
 800298a:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	0b5b      	lsrs	r3, r3, #13
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	4a03      	ldr	r2, [pc, #12]	; (80029a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002996:	5cd3      	ldrb	r3, [r2, r3]
 8002998:	fa21 f303 	lsr.w	r3, r1, r3
}
 800299c:	4618      	mov	r0, r3
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40023800 	.word	0x40023800
 80029a4:	08004688 	.word	0x08004688

080029a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10b      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d105      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d075      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80029dc:	4bad      	ldr	r3, [pc, #692]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029e2:	f7fe fe17 	bl	8001614 <HAL_GetTick>
 80029e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029e8:	e008      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80029ea:	f7fe fe13 	bl	8001614 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e18b      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029fc:	4ba6      	ldr	r3, [pc, #664]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f0      	bne.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d009      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	019a      	lsls	r2, r3, #6
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	071b      	lsls	r3, r3, #28
 8002a20:	499d      	ldr	r1, [pc, #628]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d01f      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a34:	4b98      	ldr	r3, [pc, #608]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a3a:	0f1b      	lsrs	r3, r3, #28
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	019a      	lsls	r2, r3, #6
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	061b      	lsls	r3, r3, #24
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	071b      	lsls	r3, r3, #28
 8002a54:	4990      	ldr	r1, [pc, #576]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a5c:	4b8e      	ldr	r3, [pc, #568]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a62:	f023 021f 	bic.w	r2, r3, #31
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	498a      	ldr	r1, [pc, #552]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00d      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	019a      	lsls	r2, r3, #6
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	061b      	lsls	r3, r3, #24
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	071b      	lsls	r3, r3, #28
 8002a94:	4980      	ldr	r1, [pc, #512]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a9c:	4b7d      	ldr	r3, [pc, #500]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002aa2:	f7fe fdb7 	bl	8001614 <HAL_GetTick>
 8002aa6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002aa8:	e008      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002aaa:	f7fe fdb3 	bl	8001614 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e12b      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002abc:	4b76      	ldr	r3, [pc, #472]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0f0      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d105      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d079      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ae0:	4b6e      	ldr	r3, [pc, #440]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ae6:	f7fe fd95 	bl	8001614 <HAL_GetTick>
 8002aea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002aec:	e008      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002aee:	f7fe fd91 	bl	8001614 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e109      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b00:	4b65      	ldr	r3, [pc, #404]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b0c:	d0ef      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0304 	and.w	r3, r3, #4
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d020      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b1a:	4b5f      	ldr	r3, [pc, #380]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b20:	0f1b      	lsrs	r3, r3, #28
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	019a      	lsls	r2, r3, #6
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	061b      	lsls	r3, r3, #24
 8002b34:	431a      	orrs	r2, r3
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	071b      	lsls	r3, r3, #28
 8002b3a:	4957      	ldr	r1, [pc, #348]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b42:	4b55      	ldr	r3, [pc, #340]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b48:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	3b01      	subs	r3, #1
 8002b52:	021b      	lsls	r3, r3, #8
 8002b54:	4950      	ldr	r1, [pc, #320]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d01e      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b68:	4b4b      	ldr	r3, [pc, #300]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6e:	0e1b      	lsrs	r3, r3, #24
 8002b70:	f003 030f 	and.w	r3, r3, #15
 8002b74:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	019a      	lsls	r2, r3, #6
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	061b      	lsls	r3, r3, #24
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	071b      	lsls	r3, r3, #28
 8002b88:	4943      	ldr	r1, [pc, #268]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002b90:	4b41      	ldr	r3, [pc, #260]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	493e      	ldr	r1, [pc, #248]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ba6:	4b3d      	ldr	r3, [pc, #244]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002bac:	f7fe fd32 	bl	8001614 <HAL_GetTick>
 8002bb0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002bb4:	f7fe fd2e 	bl	8001614 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e0a6      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002bc6:	4b34      	ldr	r3, [pc, #208]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bd2:	d1ef      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 808d 	beq.w	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	4b2c      	ldr	r3, [pc, #176]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	4a2b      	ldr	r2, [pc, #172]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf2:	4b29      	ldr	r3, [pc, #164]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002bfe:	4b28      	ldr	r3, [pc, #160]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a27      	ldr	r2, [pc, #156]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c08:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c0a:	f7fe fd03 	bl	8001614 <HAL_GetTick>
 8002c0e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002c10:	e008      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c12:	f7fe fcff 	bl	8001614 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e077      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002c24:	4b1e      	ldr	r3, [pc, #120]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0f0      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c30:	4b19      	ldr	r3, [pc, #100]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c38:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d039      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d032      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c4e:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c56:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c58:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c5e:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002c64:	4a0c      	ldr	r2, [pc, #48]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c6a:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d11e      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002c76:	f7fe fccd 	bl	8001614 <HAL_GetTick>
 8002c7a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c7c:	e014      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c7e:	f7fe fcc9 	bl	8001614 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d90b      	bls.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e03f      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8002c94:	42470068 	.word	0x42470068
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	42470070 	.word	0x42470070
 8002ca0:	40007000 	.word	0x40007000
 8002ca4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca8:	4b1c      	ldr	r3, [pc, #112]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0e4      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cc0:	d10d      	bne.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x336>
 8002cc2:	4b16      	ldr	r3, [pc, #88]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd6:	4911      	ldr	r1, [pc, #68]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	608b      	str	r3, [r1, #8]
 8002cdc:	e005      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002cde:	4b0f      	ldr	r3, [pc, #60]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	4a0e      	ldr	r2, [pc, #56]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002ce4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ce8:	6093      	str	r3, [r2, #8]
 8002cea:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002cec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf6:	4909      	ldr	r1, [pc, #36]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0310 	and.w	r3, r3, #16
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d004      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8002d0e:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002d10:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	424711e0 	.word	0x424711e0

08002d24 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e083      	b.n	8002e3e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	7f5b      	ldrb	r3, [r3, #29]
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d105      	bne.n	8002d4c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7fe f9ee 	bl	8001128 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	22ca      	movs	r2, #202	; 0xca
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2253      	movs	r2, #83	; 0x53
 8002d60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f9fb 	bl	800315e <RTC_EnterInitMode>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d008      	beq.n	8002d80 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	22ff      	movs	r2, #255	; 0xff
 8002d74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2204      	movs	r2, #4
 8002d7a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e05e      	b.n	8002e3e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6812      	ldr	r2, [r2, #0]
 8002d8a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d92:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6899      	ldr	r1, [r3, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	68d2      	ldr	r2, [r2, #12]
 8002dba:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6919      	ldr	r1, [r3, #16]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	041a      	lsls	r2, r3, #16
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dde:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 0320 	and.w	r3, r3, #32
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10e      	bne.n	8002e0c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f98d 	bl	800310e <HAL_RTC_WaitForSynchro>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d008      	beq.n	8002e0c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	22ff      	movs	r2, #255	; 0xff
 8002e00:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2204      	movs	r2, #4
 8002e06:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e018      	b.n	8002e3e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e1a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699a      	ldr	r2, [r3, #24]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	22ff      	movs	r2, #255	; 0xff
 8002e34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
  }
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002e46:	b590      	push	{r4, r7, lr}
 8002e48:	b087      	sub	sp, #28
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	7f1b      	ldrb	r3, [r3, #28]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d101      	bne.n	8002e62 <HAL_RTC_SetTime+0x1c>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e0aa      	b.n	8002fb8 <HAL_RTC_SetTime+0x172>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2201      	movs	r2, #1
 8002e66:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d126      	bne.n	8002ec2 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d102      	bne.n	8002e88 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2200      	movs	r2, #0
 8002e86:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 f992 	bl	80031b6 <RTC_ByteToBcd2>
 8002e92:	4603      	mov	r3, r0
 8002e94:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	785b      	ldrb	r3, [r3, #1]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 f98b 	bl	80031b6 <RTC_ByteToBcd2>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002ea4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	789b      	ldrb	r3, [r3, #2]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 f983 	bl	80031b6 <RTC_ByteToBcd2>
 8002eb0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002eb2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	78db      	ldrb	r3, [r3, #3]
 8002eba:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	e018      	b.n	8002ef4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d102      	bne.n	8002ed6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	785b      	ldrb	r3, [r3, #1]
 8002ee0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002ee2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002ee8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	78db      	ldrb	r3, [r3, #3]
 8002eee:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	22ca      	movs	r2, #202	; 0xca
 8002efa:	625a      	str	r2, [r3, #36]	; 0x24
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2253      	movs	r2, #83	; 0x53
 8002f02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 f92a 	bl	800315e <RTC_EnterInitMode>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00b      	beq.n	8002f28 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	22ff      	movs	r2, #255	; 0xff
 8002f16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2204      	movs	r2, #4
 8002f1c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e047      	b.n	8002fb8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002f32:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002f36:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f46:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6899      	ldr	r1, [r3, #8]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	431a      	orrs	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f6e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 0320 	and.w	r3, r3, #32
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d111      	bne.n	8002fa2 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 f8c5 	bl	800310e <HAL_RTC_WaitForSynchro>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00b      	beq.n	8002fa2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	22ff      	movs	r2, #255	; 0xff
 8002f90:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2204      	movs	r2, #4
 8002f96:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e00a      	b.n	8002fb8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	22ff      	movs	r2, #255	; 0xff
 8002fa8:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2201      	movs	r2, #1
 8002fae:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
  }
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	371c      	adds	r7, #28
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd90      	pop	{r4, r7, pc}

08002fc0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002fc0:	b590      	push	{r4, r7, lr}
 8002fc2:	b087      	sub	sp, #28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	7f1b      	ldrb	r3, [r3, #28]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_RTC_SetDate+0x1c>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e094      	b.n	8003106 <HAL_RTC_SetDate+0x146>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10e      	bne.n	800300c <HAL_RTC_SetDate+0x4c>
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	785b      	ldrb	r3, [r3, #1]
 8002ff2:	f003 0310 	and.w	r3, r3, #16
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d008      	beq.n	800300c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	785b      	ldrb	r3, [r3, #1]
 8002ffe:	f023 0310 	bic.w	r3, r3, #16
 8003002:	b2db      	uxtb	r3, r3
 8003004:	330a      	adds	r3, #10
 8003006:	b2da      	uxtb	r2, r3
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d11c      	bne.n	800304c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	78db      	ldrb	r3, [r3, #3]
 8003016:	4618      	mov	r0, r3
 8003018:	f000 f8cd 	bl	80031b6 <RTC_ByteToBcd2>
 800301c:	4603      	mov	r3, r0
 800301e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	785b      	ldrb	r3, [r3, #1]
 8003024:	4618      	mov	r0, r3
 8003026:	f000 f8c6 	bl	80031b6 <RTC_ByteToBcd2>
 800302a:	4603      	mov	r3, r0
 800302c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800302e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	789b      	ldrb	r3, [r3, #2]
 8003034:	4618      	mov	r0, r3
 8003036:	f000 f8be 	bl	80031b6 <RTC_ByteToBcd2>
 800303a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800303c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003046:	4313      	orrs	r3, r2
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	e00e      	b.n	800306a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	78db      	ldrb	r3, [r3, #3]
 8003050:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	785b      	ldrb	r3, [r3, #1]
 8003056:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003058:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800305e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003066:	4313      	orrs	r3, r2
 8003068:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	22ca      	movs	r2, #202	; 0xca
 8003070:	625a      	str	r2, [r3, #36]	; 0x24
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2253      	movs	r2, #83	; 0x53
 8003078:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 f86f 	bl	800315e <RTC_EnterInitMode>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00b      	beq.n	800309e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	22ff      	movs	r2, #255	; 0xff
 800308c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2204      	movs	r2, #4
 8003092:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e033      	b.n	8003106 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80030a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80030ac:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68da      	ldr	r2, [r3, #12]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030bc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 0320 	and.w	r3, r3, #32
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d111      	bne.n	80030f0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f000 f81e 	bl	800310e <HAL_RTC_WaitForSynchro>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00b      	beq.n	80030f0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	22ff      	movs	r2, #255	; 0xff
 80030de:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2204      	movs	r2, #4
 80030e4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e00a      	b.n	8003106 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	22ff      	movs	r2, #255	; 0xff
 80030f6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2201      	movs	r2, #1
 80030fc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003104:	2300      	movs	r3, #0
  }
}
 8003106:	4618      	mov	r0, r3
 8003108:	371c      	adds	r7, #28
 800310a:	46bd      	mov	sp, r7
 800310c:	bd90      	pop	{r4, r7, pc}

0800310e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b084      	sub	sp, #16
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003128:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800312a:	f7fe fa73 	bl	8001614 <HAL_GetTick>
 800312e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003130:	e009      	b.n	8003146 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003132:	f7fe fa6f 	bl	8001614 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003140:	d901      	bls.n	8003146 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e007      	b.n	8003156 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f003 0320 	and.w	r3, r3, #32
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0ee      	beq.n	8003132 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b084      	sub	sp, #16
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003174:	2b00      	cmp	r3, #0
 8003176:	d119      	bne.n	80031ac <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f04f 32ff 	mov.w	r2, #4294967295
 8003180:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003182:	f7fe fa47 	bl	8001614 <HAL_GetTick>
 8003186:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003188:	e009      	b.n	800319e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800318a:	f7fe fa43 	bl	8001614 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003198:	d901      	bls.n	800319e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e007      	b.n	80031ae <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0ee      	beq.n	800318a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b085      	sub	sp, #20
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	4603      	mov	r3, r0
 80031be:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80031c4:	e005      	b.n	80031d2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	3301      	adds	r3, #1
 80031ca:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80031cc:	79fb      	ldrb	r3, [r7, #7]
 80031ce:	3b0a      	subs	r3, #10
 80031d0:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80031d2:	79fb      	ldrb	r3, [r7, #7]
 80031d4:	2b09      	cmp	r3, #9
 80031d6:	d8f6      	bhi.n	80031c6 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	79fb      	ldrb	r3, [r7, #7]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	b2db      	uxtb	r3, r3
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e01d      	b.n	8003240 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d106      	bne.n	800321e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7fd ff9b 	bl	8001154 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2202      	movs	r2, #2
 8003222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3304      	adds	r3, #4
 800322e:	4619      	mov	r1, r3
 8003230:	4610      	mov	r0, r2
 8003232:	f000 fa15 	bl	8003660 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0201 	orr.w	r2, r2, #1
 800325e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b06      	cmp	r3, #6
 8003270:	d007      	beq.n	8003282 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f042 0201 	orr.w	r2, r2, #1
 8003280:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d122      	bne.n	80032ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d11b      	bne.n	80032ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0202 	mvn.w	r2, #2
 80032bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f9a5 	bl	8003622 <HAL_TIM_IC_CaptureCallback>
 80032d8:	e005      	b.n	80032e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f997 	bl	800360e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f9a8 	bl	8003636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d122      	bne.n	8003340 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b04      	cmp	r3, #4
 8003306:	d11b      	bne.n	8003340 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f06f 0204 	mvn.w	r2, #4
 8003310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2202      	movs	r2, #2
 8003316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f97b 	bl	8003622 <HAL_TIM_IC_CaptureCallback>
 800332c:	e005      	b.n	800333a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f96d 	bl	800360e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f97e 	bl	8003636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b08      	cmp	r3, #8
 800334c:	d122      	bne.n	8003394 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f003 0308 	and.w	r3, r3, #8
 8003358:	2b08      	cmp	r3, #8
 800335a:	d11b      	bne.n	8003394 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f06f 0208 	mvn.w	r2, #8
 8003364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2204      	movs	r2, #4
 800336a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f951 	bl	8003622 <HAL_TIM_IC_CaptureCallback>
 8003380:	e005      	b.n	800338e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f943 	bl	800360e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f954 	bl	8003636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	2b10      	cmp	r3, #16
 80033a0:	d122      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f003 0310 	and.w	r3, r3, #16
 80033ac:	2b10      	cmp	r3, #16
 80033ae:	d11b      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f06f 0210 	mvn.w	r2, #16
 80033b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2208      	movs	r2, #8
 80033be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f927 	bl	8003622 <HAL_TIM_IC_CaptureCallback>
 80033d4:	e005      	b.n	80033e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f919 	bl	800360e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f92a 	bl	8003636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d10e      	bne.n	8003414 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b01      	cmp	r3, #1
 8003402:	d107      	bne.n	8003414 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f06f 0201 	mvn.w	r2, #1
 800340c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7fd fd02 	bl	8000e18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341e:	2b80      	cmp	r3, #128	; 0x80
 8003420:	d10e      	bne.n	8003440 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342c:	2b80      	cmp	r3, #128	; 0x80
 800342e:	d107      	bne.n	8003440 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fad0 	bl	80039e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344a:	2b40      	cmp	r3, #64	; 0x40
 800344c:	d10e      	bne.n	800346c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003458:	2b40      	cmp	r3, #64	; 0x40
 800345a:	d107      	bne.n	800346c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f8ef 	bl	800364a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f003 0320 	and.w	r3, r3, #32
 8003476:	2b20      	cmp	r3, #32
 8003478:	d10e      	bne.n	8003498 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f003 0320 	and.w	r3, r3, #32
 8003484:	2b20      	cmp	r3, #32
 8003486:	d107      	bne.n	8003498 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f06f 0220 	mvn.w	r2, #32
 8003490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fa9a 	bl	80039cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003498:	bf00      	nop
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d101      	bne.n	80034b8 <HAL_TIM_ConfigClockSource+0x18>
 80034b4:	2302      	movs	r3, #2
 80034b6:	e0a6      	b.n	8003606 <HAL_TIM_ConfigClockSource+0x166>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2b40      	cmp	r3, #64	; 0x40
 80034ee:	d067      	beq.n	80035c0 <HAL_TIM_ConfigClockSource+0x120>
 80034f0:	2b40      	cmp	r3, #64	; 0x40
 80034f2:	d80b      	bhi.n	800350c <HAL_TIM_ConfigClockSource+0x6c>
 80034f4:	2b10      	cmp	r3, #16
 80034f6:	d073      	beq.n	80035e0 <HAL_TIM_ConfigClockSource+0x140>
 80034f8:	2b10      	cmp	r3, #16
 80034fa:	d802      	bhi.n	8003502 <HAL_TIM_ConfigClockSource+0x62>
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d06f      	beq.n	80035e0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003500:	e078      	b.n	80035f4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003502:	2b20      	cmp	r3, #32
 8003504:	d06c      	beq.n	80035e0 <HAL_TIM_ConfigClockSource+0x140>
 8003506:	2b30      	cmp	r3, #48	; 0x30
 8003508:	d06a      	beq.n	80035e0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800350a:	e073      	b.n	80035f4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800350c:	2b70      	cmp	r3, #112	; 0x70
 800350e:	d00d      	beq.n	800352c <HAL_TIM_ConfigClockSource+0x8c>
 8003510:	2b70      	cmp	r3, #112	; 0x70
 8003512:	d804      	bhi.n	800351e <HAL_TIM_ConfigClockSource+0x7e>
 8003514:	2b50      	cmp	r3, #80	; 0x50
 8003516:	d033      	beq.n	8003580 <HAL_TIM_ConfigClockSource+0xe0>
 8003518:	2b60      	cmp	r3, #96	; 0x60
 800351a:	d041      	beq.n	80035a0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800351c:	e06a      	b.n	80035f4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800351e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003522:	d066      	beq.n	80035f2 <HAL_TIM_ConfigClockSource+0x152>
 8003524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003528:	d017      	beq.n	800355a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800352a:	e063      	b.n	80035f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6818      	ldr	r0, [r3, #0]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	6899      	ldr	r1, [r3, #8]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f000 f9aa 	bl	8003894 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800354e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	609a      	str	r2, [r3, #8]
      break;
 8003558:	e04c      	b.n	80035f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6818      	ldr	r0, [r3, #0]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	6899      	ldr	r1, [r3, #8]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f000 f993 	bl	8003894 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800357c:	609a      	str	r2, [r3, #8]
      break;
 800357e:	e039      	b.n	80035f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6818      	ldr	r0, [r3, #0]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	6859      	ldr	r1, [r3, #4]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	461a      	mov	r2, r3
 800358e:	f000 f907 	bl	80037a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2150      	movs	r1, #80	; 0x50
 8003598:	4618      	mov	r0, r3
 800359a:	f000 f960 	bl	800385e <TIM_ITRx_SetConfig>
      break;
 800359e:	e029      	b.n	80035f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6818      	ldr	r0, [r3, #0]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	6859      	ldr	r1, [r3, #4]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	461a      	mov	r2, r3
 80035ae:	f000 f926 	bl	80037fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2160      	movs	r1, #96	; 0x60
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 f950 	bl	800385e <TIM_ITRx_SetConfig>
      break;
 80035be:	e019      	b.n	80035f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6818      	ldr	r0, [r3, #0]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	6859      	ldr	r1, [r3, #4]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	461a      	mov	r2, r3
 80035ce:	f000 f8e7 	bl	80037a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2140      	movs	r1, #64	; 0x40
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 f940 	bl	800385e <TIM_ITRx_SetConfig>
      break;
 80035de:	e009      	b.n	80035f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4619      	mov	r1, r3
 80035ea:	4610      	mov	r0, r2
 80035ec:	f000 f937 	bl	800385e <TIM_ITRx_SetConfig>
      break;
 80035f0:	e000      	b.n	80035f4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80035f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a40      	ldr	r2, [pc, #256]	; (8003774 <TIM_Base_SetConfig+0x114>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d013      	beq.n	80036a0 <TIM_Base_SetConfig+0x40>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367e:	d00f      	beq.n	80036a0 <TIM_Base_SetConfig+0x40>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a3d      	ldr	r2, [pc, #244]	; (8003778 <TIM_Base_SetConfig+0x118>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00b      	beq.n	80036a0 <TIM_Base_SetConfig+0x40>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a3c      	ldr	r2, [pc, #240]	; (800377c <TIM_Base_SetConfig+0x11c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d007      	beq.n	80036a0 <TIM_Base_SetConfig+0x40>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a3b      	ldr	r2, [pc, #236]	; (8003780 <TIM_Base_SetConfig+0x120>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d003      	beq.n	80036a0 <TIM_Base_SetConfig+0x40>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a3a      	ldr	r2, [pc, #232]	; (8003784 <TIM_Base_SetConfig+0x124>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d108      	bne.n	80036b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a2f      	ldr	r2, [pc, #188]	; (8003774 <TIM_Base_SetConfig+0x114>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d02b      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c0:	d027      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a2c      	ldr	r2, [pc, #176]	; (8003778 <TIM_Base_SetConfig+0x118>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d023      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a2b      	ldr	r2, [pc, #172]	; (800377c <TIM_Base_SetConfig+0x11c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d01f      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a2a      	ldr	r2, [pc, #168]	; (8003780 <TIM_Base_SetConfig+0x120>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d01b      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a29      	ldr	r2, [pc, #164]	; (8003784 <TIM_Base_SetConfig+0x124>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d017      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a28      	ldr	r2, [pc, #160]	; (8003788 <TIM_Base_SetConfig+0x128>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d013      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a27      	ldr	r2, [pc, #156]	; (800378c <TIM_Base_SetConfig+0x12c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00f      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a26      	ldr	r2, [pc, #152]	; (8003790 <TIM_Base_SetConfig+0x130>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d00b      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a25      	ldr	r2, [pc, #148]	; (8003794 <TIM_Base_SetConfig+0x134>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d007      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a24      	ldr	r2, [pc, #144]	; (8003798 <TIM_Base_SetConfig+0x138>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d003      	beq.n	8003712 <TIM_Base_SetConfig+0xb2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a23      	ldr	r2, [pc, #140]	; (800379c <TIM_Base_SetConfig+0x13c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d108      	bne.n	8003724 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	4313      	orrs	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	4313      	orrs	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a0a      	ldr	r2, [pc, #40]	; (8003774 <TIM_Base_SetConfig+0x114>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d003      	beq.n	8003758 <TIM_Base_SetConfig+0xf8>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a0c      	ldr	r2, [pc, #48]	; (8003784 <TIM_Base_SetConfig+0x124>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d103      	bne.n	8003760 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	615a      	str	r2, [r3, #20]
}
 8003766:	bf00      	nop
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40010000 	.word	0x40010000
 8003778:	40000400 	.word	0x40000400
 800377c:	40000800 	.word	0x40000800
 8003780:	40000c00 	.word	0x40000c00
 8003784:	40010400 	.word	0x40010400
 8003788:	40014000 	.word	0x40014000
 800378c:	40014400 	.word	0x40014400
 8003790:	40014800 	.word	0x40014800
 8003794:	40001800 	.word	0x40001800
 8003798:	40001c00 	.word	0x40001c00
 800379c:	40002000 	.word	0x40002000

080037a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	f023 0201 	bic.w	r2, r3, #1
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f023 030a 	bic.w	r3, r3, #10
 80037dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	621a      	str	r2, [r3, #32]
}
 80037f2:	bf00      	nop
 80037f4:	371c      	adds	r7, #28
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037fe:	b480      	push	{r7}
 8003800:	b087      	sub	sp, #28
 8003802:	af00      	add	r7, sp, #0
 8003804:	60f8      	str	r0, [r7, #12]
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	f023 0210 	bic.w	r2, r3, #16
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003828:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	031b      	lsls	r3, r3, #12
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	4313      	orrs	r3, r2
 8003832:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800383a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	621a      	str	r2, [r3, #32]
}
 8003852:	bf00      	nop
 8003854:	371c      	adds	r7, #28
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800385e:	b480      	push	{r7}
 8003860:	b085      	sub	sp, #20
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003874:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	f043 0307 	orr.w	r3, r3, #7
 8003880:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	609a      	str	r2, [r3, #8]
}
 8003888:	bf00      	nop
 800388a:	3714      	adds	r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	021a      	lsls	r2, r3, #8
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	4313      	orrs	r3, r2
 80038c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	609a      	str	r2, [r3, #8]
}
 80038c8:	bf00      	nop
 80038ca:	371c      	adds	r7, #28
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e05a      	b.n	80039a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003912:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	4313      	orrs	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a21      	ldr	r2, [pc, #132]	; (80039b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d022      	beq.n	8003976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003938:	d01d      	beq.n	8003976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a1d      	ldr	r2, [pc, #116]	; (80039b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d018      	beq.n	8003976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a1b      	ldr	r2, [pc, #108]	; (80039b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d013      	beq.n	8003976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a1a      	ldr	r2, [pc, #104]	; (80039bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d00e      	beq.n	8003976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a18      	ldr	r2, [pc, #96]	; (80039c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d009      	beq.n	8003976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a17      	ldr	r2, [pc, #92]	; (80039c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d004      	beq.n	8003976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a15      	ldr	r2, [pc, #84]	; (80039c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d10c      	bne.n	8003990 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800397c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	4313      	orrs	r3, r2
 8003986:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	40010000 	.word	0x40010000
 80039b4:	40000400 	.word	0x40000400
 80039b8:	40000800 	.word	0x40000800
 80039bc:	40000c00 	.word	0x40000c00
 80039c0:	40010400 	.word	0x40010400
 80039c4:	40014000 	.word	0x40014000
 80039c8:	40001800 	.word	0x40001800

080039cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e03f      	b.n	8003a86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d106      	bne.n	8003a20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fd fbfc 	bl	8001218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2224      	movs	r2, #36	; 0x24
 8003a24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 fa69 	bl	8003f10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	691a      	ldr	r2, [r3, #16]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	695a      	ldr	r2, [r3, #20]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b088      	sub	sp, #32
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10d      	bne.n	8003ae2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	f003 0320 	and.w	r3, r3, #32
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d008      	beq.n	8003ae2 <HAL_UART_IRQHandler+0x52>
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f996 	bl	8003e0c <UART_Receive_IT>
      return;
 8003ae0:	e0d1      	b.n	8003c86 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 80b0 	beq.w	8003c4a <HAL_UART_IRQHandler+0x1ba>
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d105      	bne.n	8003b00 <HAL_UART_IRQHandler+0x70>
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 80a5 	beq.w	8003c4a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <HAL_UART_IRQHandler+0x90>
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b18:	f043 0201 	orr.w	r2, r3, #1
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <HAL_UART_IRQHandler+0xb0>
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b38:	f043 0202 	orr.w	r2, r3, #2
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <HAL_UART_IRQHandler+0xd0>
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d005      	beq.n	8003b60 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b58:	f043 0204 	orr.w	r2, r3, #4
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00f      	beq.n	8003b8a <HAL_UART_IRQHandler+0xfa>
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	f003 0320 	and.w	r3, r3, #32
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d104      	bne.n	8003b7e <HAL_UART_IRQHandler+0xee>
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d005      	beq.n	8003b8a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b82:	f043 0208 	orr.w	r2, r3, #8
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d078      	beq.n	8003c84 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	f003 0320 	and.w	r3, r3, #32
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d007      	beq.n	8003bac <HAL_UART_IRQHandler+0x11c>
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	f003 0320 	and.w	r3, r3, #32
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d002      	beq.n	8003bac <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f930 	bl	8003e0c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb6:	2b40      	cmp	r3, #64	; 0x40
 8003bb8:	bf0c      	ite	eq
 8003bba:	2301      	moveq	r3, #1
 8003bbc:	2300      	movne	r3, #0
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d102      	bne.n	8003bd4 <HAL_UART_IRQHandler+0x144>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d031      	beq.n	8003c38 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f879 	bl	8003ccc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be4:	2b40      	cmp	r3, #64	; 0x40
 8003be6:	d123      	bne.n	8003c30 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695a      	ldr	r2, [r3, #20]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bf6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d013      	beq.n	8003c28 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c04:	4a21      	ldr	r2, [pc, #132]	; (8003c8c <HAL_UART_IRQHandler+0x1fc>)
 8003c06:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fe f890 	bl	8001d32 <HAL_DMA_Abort_IT>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d016      	beq.n	8003c46 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c22:	4610      	mov	r0, r2
 8003c24:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c26:	e00e      	b.n	8003c46 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f845 	bl	8003cb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c2e:	e00a      	b.n	8003c46 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f841 	bl	8003cb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c36:	e006      	b.n	8003c46 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f83d 	bl	8003cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003c44:	e01e      	b.n	8003c84 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c46:	bf00      	nop
    return;
 8003c48:	e01c      	b.n	8003c84 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d008      	beq.n	8003c66 <HAL_UART_IRQHandler+0x1d6>
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f866 	bl	8003d30 <UART_Transmit_IT>
    return;
 8003c64:	e00f      	b.n	8003c86 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00a      	beq.n	8003c86 <HAL_UART_IRQHandler+0x1f6>
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d005      	beq.n	8003c86 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f8ae 	bl	8003ddc <UART_EndTransmit_IT>
    return;
 8003c80:	bf00      	nop
 8003c82:	e000      	b.n	8003c86 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003c84:	bf00      	nop
  }
}
 8003c86:	3720      	adds	r7, #32
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	08003d09 	.word	0x08003d09

08003c90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ce2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	695a      	ldr	r2, [r3, #20]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0201 	bic.w	r2, r2, #1
 8003cf2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f7ff ffc8 	bl	8003cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d28:	bf00      	nop
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b21      	cmp	r3, #33	; 0x21
 8003d42:	d144      	bne.n	8003dce <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4c:	d11a      	bne.n	8003d84 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d62:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d105      	bne.n	8003d78 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	1c9a      	adds	r2, r3, #2
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	621a      	str	r2, [r3, #32]
 8003d76:	e00e      	b.n	8003d96 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	621a      	str	r2, [r3, #32]
 8003d82:	e008      	b.n	8003d96 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	1c59      	adds	r1, r3, #1
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6211      	str	r1, [r2, #32]
 8003d8e:	781a      	ldrb	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	4619      	mov	r1, r3
 8003da4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10f      	bne.n	8003dca <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003db8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dc8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	e000      	b.n	8003dd0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003dce:	2302      	movs	r3, #2
  }
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003df2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff ff47 	bl	8003c90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b22      	cmp	r3, #34	; 0x22
 8003e1e:	d171      	bne.n	8003f04 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e28:	d123      	bne.n	8003e72 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10e      	bne.n	8003e56 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4e:	1c9a      	adds	r2, r3, #2
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	629a      	str	r2, [r3, #40]	; 0x28
 8003e54:	e029      	b.n	8003eaa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	629a      	str	r2, [r3, #40]	; 0x28
 8003e70:	e01b      	b.n	8003eaa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10a      	bne.n	8003e90 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6858      	ldr	r0, [r3, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e84:	1c59      	adds	r1, r3, #1
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6291      	str	r1, [r2, #40]	; 0x28
 8003e8a:	b2c2      	uxtb	r2, r0
 8003e8c:	701a      	strb	r2, [r3, #0]
 8003e8e:	e00c      	b.n	8003eaa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9c:	1c58      	adds	r0, r3, #1
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	6288      	str	r0, [r1, #40]	; 0x28
 8003ea2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d120      	bne.n	8003f00 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68da      	ldr	r2, [r3, #12]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0220 	bic.w	r2, r2, #32
 8003ecc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003edc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695a      	ldr	r2, [r3, #20]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0201 	bic.w	r2, r2, #1
 8003eec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7ff fed4 	bl	8003ca4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003efc:	2300      	movs	r3, #0
 8003efe:	e002      	b.n	8003f06 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	e000      	b.n	8003f06 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003f04:	2302      	movs	r3, #2
  }
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f14:	b085      	sub	sp, #20
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003f52:	f023 030c 	bic.w	r3, r3, #12
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6812      	ldr	r2, [r2, #0]
 8003f5a:	68f9      	ldr	r1, [r7, #12]
 8003f5c:	430b      	orrs	r3, r1
 8003f5e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699a      	ldr	r2, [r3, #24]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f7e:	f040 818b 	bne.w	8004298 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4ac1      	ldr	r2, [pc, #772]	; (800428c <UART_SetConfig+0x37c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d005      	beq.n	8003f98 <UART_SetConfig+0x88>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4abf      	ldr	r2, [pc, #764]	; (8004290 <UART_SetConfig+0x380>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	f040 80bd 	bne.w	8004112 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f98:	f7fe fcf2 	bl	8002980 <HAL_RCC_GetPCLK2Freq>
 8003f9c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	461d      	mov	r5, r3
 8003fa2:	f04f 0600 	mov.w	r6, #0
 8003fa6:	46a8      	mov	r8, r5
 8003fa8:	46b1      	mov	r9, r6
 8003faa:	eb18 0308 	adds.w	r3, r8, r8
 8003fae:	eb49 0409 	adc.w	r4, r9, r9
 8003fb2:	4698      	mov	r8, r3
 8003fb4:	46a1      	mov	r9, r4
 8003fb6:	eb18 0805 	adds.w	r8, r8, r5
 8003fba:	eb49 0906 	adc.w	r9, r9, r6
 8003fbe:	f04f 0100 	mov.w	r1, #0
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003fca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003fce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003fd2:	4688      	mov	r8, r1
 8003fd4:	4691      	mov	r9, r2
 8003fd6:	eb18 0005 	adds.w	r0, r8, r5
 8003fda:	eb49 0106 	adc.w	r1, r9, r6
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	461d      	mov	r5, r3
 8003fe4:	f04f 0600 	mov.w	r6, #0
 8003fe8:	196b      	adds	r3, r5, r5
 8003fea:	eb46 0406 	adc.w	r4, r6, r6
 8003fee:	461a      	mov	r2, r3
 8003ff0:	4623      	mov	r3, r4
 8003ff2:	f7fc f8fb 	bl	80001ec <__aeabi_uldivmod>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	460c      	mov	r4, r1
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	4ba5      	ldr	r3, [pc, #660]	; (8004294 <UART_SetConfig+0x384>)
 8003ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8004002:	095b      	lsrs	r3, r3, #5
 8004004:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	461d      	mov	r5, r3
 800400c:	f04f 0600 	mov.w	r6, #0
 8004010:	46a9      	mov	r9, r5
 8004012:	46b2      	mov	sl, r6
 8004014:	eb19 0309 	adds.w	r3, r9, r9
 8004018:	eb4a 040a 	adc.w	r4, sl, sl
 800401c:	4699      	mov	r9, r3
 800401e:	46a2      	mov	sl, r4
 8004020:	eb19 0905 	adds.w	r9, r9, r5
 8004024:	eb4a 0a06 	adc.w	sl, sl, r6
 8004028:	f04f 0100 	mov.w	r1, #0
 800402c:	f04f 0200 	mov.w	r2, #0
 8004030:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004034:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004038:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800403c:	4689      	mov	r9, r1
 800403e:	4692      	mov	sl, r2
 8004040:	eb19 0005 	adds.w	r0, r9, r5
 8004044:	eb4a 0106 	adc.w	r1, sl, r6
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	461d      	mov	r5, r3
 800404e:	f04f 0600 	mov.w	r6, #0
 8004052:	196b      	adds	r3, r5, r5
 8004054:	eb46 0406 	adc.w	r4, r6, r6
 8004058:	461a      	mov	r2, r3
 800405a:	4623      	mov	r3, r4
 800405c:	f7fc f8c6 	bl	80001ec <__aeabi_uldivmod>
 8004060:	4603      	mov	r3, r0
 8004062:	460c      	mov	r4, r1
 8004064:	461a      	mov	r2, r3
 8004066:	4b8b      	ldr	r3, [pc, #556]	; (8004294 <UART_SetConfig+0x384>)
 8004068:	fba3 1302 	umull	r1, r3, r3, r2
 800406c:	095b      	lsrs	r3, r3, #5
 800406e:	2164      	movs	r1, #100	; 0x64
 8004070:	fb01 f303 	mul.w	r3, r1, r3
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	3332      	adds	r3, #50	; 0x32
 800407a:	4a86      	ldr	r2, [pc, #536]	; (8004294 <UART_SetConfig+0x384>)
 800407c:	fba2 2303 	umull	r2, r3, r2, r3
 8004080:	095b      	lsrs	r3, r3, #5
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004088:	4498      	add	r8, r3
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	461d      	mov	r5, r3
 800408e:	f04f 0600 	mov.w	r6, #0
 8004092:	46a9      	mov	r9, r5
 8004094:	46b2      	mov	sl, r6
 8004096:	eb19 0309 	adds.w	r3, r9, r9
 800409a:	eb4a 040a 	adc.w	r4, sl, sl
 800409e:	4699      	mov	r9, r3
 80040a0:	46a2      	mov	sl, r4
 80040a2:	eb19 0905 	adds.w	r9, r9, r5
 80040a6:	eb4a 0a06 	adc.w	sl, sl, r6
 80040aa:	f04f 0100 	mov.w	r1, #0
 80040ae:	f04f 0200 	mov.w	r2, #0
 80040b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040be:	4689      	mov	r9, r1
 80040c0:	4692      	mov	sl, r2
 80040c2:	eb19 0005 	adds.w	r0, r9, r5
 80040c6:	eb4a 0106 	adc.w	r1, sl, r6
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	461d      	mov	r5, r3
 80040d0:	f04f 0600 	mov.w	r6, #0
 80040d4:	196b      	adds	r3, r5, r5
 80040d6:	eb46 0406 	adc.w	r4, r6, r6
 80040da:	461a      	mov	r2, r3
 80040dc:	4623      	mov	r3, r4
 80040de:	f7fc f885 	bl	80001ec <__aeabi_uldivmod>
 80040e2:	4603      	mov	r3, r0
 80040e4:	460c      	mov	r4, r1
 80040e6:	461a      	mov	r2, r3
 80040e8:	4b6a      	ldr	r3, [pc, #424]	; (8004294 <UART_SetConfig+0x384>)
 80040ea:	fba3 1302 	umull	r1, r3, r3, r2
 80040ee:	095b      	lsrs	r3, r3, #5
 80040f0:	2164      	movs	r1, #100	; 0x64
 80040f2:	fb01 f303 	mul.w	r3, r1, r3
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	3332      	adds	r3, #50	; 0x32
 80040fc:	4a65      	ldr	r2, [pc, #404]	; (8004294 <UART_SetConfig+0x384>)
 80040fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004102:	095b      	lsrs	r3, r3, #5
 8004104:	f003 0207 	and.w	r2, r3, #7
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4442      	add	r2, r8
 800410e:	609a      	str	r2, [r3, #8]
 8004110:	e26f      	b.n	80045f2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004112:	f7fe fc21 	bl	8002958 <HAL_RCC_GetPCLK1Freq>
 8004116:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	461d      	mov	r5, r3
 800411c:	f04f 0600 	mov.w	r6, #0
 8004120:	46a8      	mov	r8, r5
 8004122:	46b1      	mov	r9, r6
 8004124:	eb18 0308 	adds.w	r3, r8, r8
 8004128:	eb49 0409 	adc.w	r4, r9, r9
 800412c:	4698      	mov	r8, r3
 800412e:	46a1      	mov	r9, r4
 8004130:	eb18 0805 	adds.w	r8, r8, r5
 8004134:	eb49 0906 	adc.w	r9, r9, r6
 8004138:	f04f 0100 	mov.w	r1, #0
 800413c:	f04f 0200 	mov.w	r2, #0
 8004140:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004144:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004148:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800414c:	4688      	mov	r8, r1
 800414e:	4691      	mov	r9, r2
 8004150:	eb18 0005 	adds.w	r0, r8, r5
 8004154:	eb49 0106 	adc.w	r1, r9, r6
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	461d      	mov	r5, r3
 800415e:	f04f 0600 	mov.w	r6, #0
 8004162:	196b      	adds	r3, r5, r5
 8004164:	eb46 0406 	adc.w	r4, r6, r6
 8004168:	461a      	mov	r2, r3
 800416a:	4623      	mov	r3, r4
 800416c:	f7fc f83e 	bl	80001ec <__aeabi_uldivmod>
 8004170:	4603      	mov	r3, r0
 8004172:	460c      	mov	r4, r1
 8004174:	461a      	mov	r2, r3
 8004176:	4b47      	ldr	r3, [pc, #284]	; (8004294 <UART_SetConfig+0x384>)
 8004178:	fba3 2302 	umull	r2, r3, r3, r2
 800417c:	095b      	lsrs	r3, r3, #5
 800417e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	461d      	mov	r5, r3
 8004186:	f04f 0600 	mov.w	r6, #0
 800418a:	46a9      	mov	r9, r5
 800418c:	46b2      	mov	sl, r6
 800418e:	eb19 0309 	adds.w	r3, r9, r9
 8004192:	eb4a 040a 	adc.w	r4, sl, sl
 8004196:	4699      	mov	r9, r3
 8004198:	46a2      	mov	sl, r4
 800419a:	eb19 0905 	adds.w	r9, r9, r5
 800419e:	eb4a 0a06 	adc.w	sl, sl, r6
 80041a2:	f04f 0100 	mov.w	r1, #0
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041b6:	4689      	mov	r9, r1
 80041b8:	4692      	mov	sl, r2
 80041ba:	eb19 0005 	adds.w	r0, r9, r5
 80041be:	eb4a 0106 	adc.w	r1, sl, r6
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	461d      	mov	r5, r3
 80041c8:	f04f 0600 	mov.w	r6, #0
 80041cc:	196b      	adds	r3, r5, r5
 80041ce:	eb46 0406 	adc.w	r4, r6, r6
 80041d2:	461a      	mov	r2, r3
 80041d4:	4623      	mov	r3, r4
 80041d6:	f7fc f809 	bl	80001ec <__aeabi_uldivmod>
 80041da:	4603      	mov	r3, r0
 80041dc:	460c      	mov	r4, r1
 80041de:	461a      	mov	r2, r3
 80041e0:	4b2c      	ldr	r3, [pc, #176]	; (8004294 <UART_SetConfig+0x384>)
 80041e2:	fba3 1302 	umull	r1, r3, r3, r2
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	2164      	movs	r1, #100	; 0x64
 80041ea:	fb01 f303 	mul.w	r3, r1, r3
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	3332      	adds	r3, #50	; 0x32
 80041f4:	4a27      	ldr	r2, [pc, #156]	; (8004294 <UART_SetConfig+0x384>)
 80041f6:	fba2 2303 	umull	r2, r3, r2, r3
 80041fa:	095b      	lsrs	r3, r3, #5
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004202:	4498      	add	r8, r3
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	461d      	mov	r5, r3
 8004208:	f04f 0600 	mov.w	r6, #0
 800420c:	46a9      	mov	r9, r5
 800420e:	46b2      	mov	sl, r6
 8004210:	eb19 0309 	adds.w	r3, r9, r9
 8004214:	eb4a 040a 	adc.w	r4, sl, sl
 8004218:	4699      	mov	r9, r3
 800421a:	46a2      	mov	sl, r4
 800421c:	eb19 0905 	adds.w	r9, r9, r5
 8004220:	eb4a 0a06 	adc.w	sl, sl, r6
 8004224:	f04f 0100 	mov.w	r1, #0
 8004228:	f04f 0200 	mov.w	r2, #0
 800422c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004230:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004234:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004238:	4689      	mov	r9, r1
 800423a:	4692      	mov	sl, r2
 800423c:	eb19 0005 	adds.w	r0, r9, r5
 8004240:	eb4a 0106 	adc.w	r1, sl, r6
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	461d      	mov	r5, r3
 800424a:	f04f 0600 	mov.w	r6, #0
 800424e:	196b      	adds	r3, r5, r5
 8004250:	eb46 0406 	adc.w	r4, r6, r6
 8004254:	461a      	mov	r2, r3
 8004256:	4623      	mov	r3, r4
 8004258:	f7fb ffc8 	bl	80001ec <__aeabi_uldivmod>
 800425c:	4603      	mov	r3, r0
 800425e:	460c      	mov	r4, r1
 8004260:	461a      	mov	r2, r3
 8004262:	4b0c      	ldr	r3, [pc, #48]	; (8004294 <UART_SetConfig+0x384>)
 8004264:	fba3 1302 	umull	r1, r3, r3, r2
 8004268:	095b      	lsrs	r3, r3, #5
 800426a:	2164      	movs	r1, #100	; 0x64
 800426c:	fb01 f303 	mul.w	r3, r1, r3
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	3332      	adds	r3, #50	; 0x32
 8004276:	4a07      	ldr	r2, [pc, #28]	; (8004294 <UART_SetConfig+0x384>)
 8004278:	fba2 2303 	umull	r2, r3, r2, r3
 800427c:	095b      	lsrs	r3, r3, #5
 800427e:	f003 0207 	and.w	r2, r3, #7
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4442      	add	r2, r8
 8004288:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800428a:	e1b2      	b.n	80045f2 <UART_SetConfig+0x6e2>
 800428c:	40011000 	.word	0x40011000
 8004290:	40011400 	.word	0x40011400
 8004294:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4ad7      	ldr	r2, [pc, #860]	; (80045fc <UART_SetConfig+0x6ec>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d005      	beq.n	80042ae <UART_SetConfig+0x39e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4ad6      	ldr	r2, [pc, #856]	; (8004600 <UART_SetConfig+0x6f0>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	f040 80d1 	bne.w	8004450 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80042ae:	f7fe fb67 	bl	8002980 <HAL_RCC_GetPCLK2Freq>
 80042b2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	469a      	mov	sl, r3
 80042b8:	f04f 0b00 	mov.w	fp, #0
 80042bc:	46d0      	mov	r8, sl
 80042be:	46d9      	mov	r9, fp
 80042c0:	eb18 0308 	adds.w	r3, r8, r8
 80042c4:	eb49 0409 	adc.w	r4, r9, r9
 80042c8:	4698      	mov	r8, r3
 80042ca:	46a1      	mov	r9, r4
 80042cc:	eb18 080a 	adds.w	r8, r8, sl
 80042d0:	eb49 090b 	adc.w	r9, r9, fp
 80042d4:	f04f 0100 	mov.w	r1, #0
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80042e0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80042e4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80042e8:	4688      	mov	r8, r1
 80042ea:	4691      	mov	r9, r2
 80042ec:	eb1a 0508 	adds.w	r5, sl, r8
 80042f0:	eb4b 0609 	adc.w	r6, fp, r9
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	4619      	mov	r1, r3
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	f04f 0400 	mov.w	r4, #0
 8004306:	0094      	lsls	r4, r2, #2
 8004308:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800430c:	008b      	lsls	r3, r1, #2
 800430e:	461a      	mov	r2, r3
 8004310:	4623      	mov	r3, r4
 8004312:	4628      	mov	r0, r5
 8004314:	4631      	mov	r1, r6
 8004316:	f7fb ff69 	bl	80001ec <__aeabi_uldivmod>
 800431a:	4603      	mov	r3, r0
 800431c:	460c      	mov	r4, r1
 800431e:	461a      	mov	r2, r3
 8004320:	4bb8      	ldr	r3, [pc, #736]	; (8004604 <UART_SetConfig+0x6f4>)
 8004322:	fba3 2302 	umull	r2, r3, r3, r2
 8004326:	095b      	lsrs	r3, r3, #5
 8004328:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	469b      	mov	fp, r3
 8004330:	f04f 0c00 	mov.w	ip, #0
 8004334:	46d9      	mov	r9, fp
 8004336:	46e2      	mov	sl, ip
 8004338:	eb19 0309 	adds.w	r3, r9, r9
 800433c:	eb4a 040a 	adc.w	r4, sl, sl
 8004340:	4699      	mov	r9, r3
 8004342:	46a2      	mov	sl, r4
 8004344:	eb19 090b 	adds.w	r9, r9, fp
 8004348:	eb4a 0a0c 	adc.w	sl, sl, ip
 800434c:	f04f 0100 	mov.w	r1, #0
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004358:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800435c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004360:	4689      	mov	r9, r1
 8004362:	4692      	mov	sl, r2
 8004364:	eb1b 0509 	adds.w	r5, fp, r9
 8004368:	eb4c 060a 	adc.w	r6, ip, sl
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	4619      	mov	r1, r3
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	f04f 0300 	mov.w	r3, #0
 800437a:	f04f 0400 	mov.w	r4, #0
 800437e:	0094      	lsls	r4, r2, #2
 8004380:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004384:	008b      	lsls	r3, r1, #2
 8004386:	461a      	mov	r2, r3
 8004388:	4623      	mov	r3, r4
 800438a:	4628      	mov	r0, r5
 800438c:	4631      	mov	r1, r6
 800438e:	f7fb ff2d 	bl	80001ec <__aeabi_uldivmod>
 8004392:	4603      	mov	r3, r0
 8004394:	460c      	mov	r4, r1
 8004396:	461a      	mov	r2, r3
 8004398:	4b9a      	ldr	r3, [pc, #616]	; (8004604 <UART_SetConfig+0x6f4>)
 800439a:	fba3 1302 	umull	r1, r3, r3, r2
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	2164      	movs	r1, #100	; 0x64
 80043a2:	fb01 f303 	mul.w	r3, r1, r3
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	011b      	lsls	r3, r3, #4
 80043aa:	3332      	adds	r3, #50	; 0x32
 80043ac:	4a95      	ldr	r2, [pc, #596]	; (8004604 <UART_SetConfig+0x6f4>)
 80043ae:	fba2 2303 	umull	r2, r3, r2, r3
 80043b2:	095b      	lsrs	r3, r3, #5
 80043b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043b8:	4498      	add	r8, r3
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	469b      	mov	fp, r3
 80043be:	f04f 0c00 	mov.w	ip, #0
 80043c2:	46d9      	mov	r9, fp
 80043c4:	46e2      	mov	sl, ip
 80043c6:	eb19 0309 	adds.w	r3, r9, r9
 80043ca:	eb4a 040a 	adc.w	r4, sl, sl
 80043ce:	4699      	mov	r9, r3
 80043d0:	46a2      	mov	sl, r4
 80043d2:	eb19 090b 	adds.w	r9, r9, fp
 80043d6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80043da:	f04f 0100 	mov.w	r1, #0
 80043de:	f04f 0200 	mov.w	r2, #0
 80043e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043ee:	4689      	mov	r9, r1
 80043f0:	4692      	mov	sl, r2
 80043f2:	eb1b 0509 	adds.w	r5, fp, r9
 80043f6:	eb4c 060a 	adc.w	r6, ip, sl
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	4619      	mov	r1, r3
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	f04f 0400 	mov.w	r4, #0
 800440c:	0094      	lsls	r4, r2, #2
 800440e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004412:	008b      	lsls	r3, r1, #2
 8004414:	461a      	mov	r2, r3
 8004416:	4623      	mov	r3, r4
 8004418:	4628      	mov	r0, r5
 800441a:	4631      	mov	r1, r6
 800441c:	f7fb fee6 	bl	80001ec <__aeabi_uldivmod>
 8004420:	4603      	mov	r3, r0
 8004422:	460c      	mov	r4, r1
 8004424:	461a      	mov	r2, r3
 8004426:	4b77      	ldr	r3, [pc, #476]	; (8004604 <UART_SetConfig+0x6f4>)
 8004428:	fba3 1302 	umull	r1, r3, r3, r2
 800442c:	095b      	lsrs	r3, r3, #5
 800442e:	2164      	movs	r1, #100	; 0x64
 8004430:	fb01 f303 	mul.w	r3, r1, r3
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	3332      	adds	r3, #50	; 0x32
 800443a:	4a72      	ldr	r2, [pc, #456]	; (8004604 <UART_SetConfig+0x6f4>)
 800443c:	fba2 2303 	umull	r2, r3, r2, r3
 8004440:	095b      	lsrs	r3, r3, #5
 8004442:	f003 020f 	and.w	r2, r3, #15
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4442      	add	r2, r8
 800444c:	609a      	str	r2, [r3, #8]
 800444e:	e0d0      	b.n	80045f2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004450:	f7fe fa82 	bl	8002958 <HAL_RCC_GetPCLK1Freq>
 8004454:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	469a      	mov	sl, r3
 800445a:	f04f 0b00 	mov.w	fp, #0
 800445e:	46d0      	mov	r8, sl
 8004460:	46d9      	mov	r9, fp
 8004462:	eb18 0308 	adds.w	r3, r8, r8
 8004466:	eb49 0409 	adc.w	r4, r9, r9
 800446a:	4698      	mov	r8, r3
 800446c:	46a1      	mov	r9, r4
 800446e:	eb18 080a 	adds.w	r8, r8, sl
 8004472:	eb49 090b 	adc.w	r9, r9, fp
 8004476:	f04f 0100 	mov.w	r1, #0
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004482:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004486:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800448a:	4688      	mov	r8, r1
 800448c:	4691      	mov	r9, r2
 800448e:	eb1a 0508 	adds.w	r5, sl, r8
 8004492:	eb4b 0609 	adc.w	r6, fp, r9
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	4619      	mov	r1, r3
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	f04f 0300 	mov.w	r3, #0
 80044a4:	f04f 0400 	mov.w	r4, #0
 80044a8:	0094      	lsls	r4, r2, #2
 80044aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044ae:	008b      	lsls	r3, r1, #2
 80044b0:	461a      	mov	r2, r3
 80044b2:	4623      	mov	r3, r4
 80044b4:	4628      	mov	r0, r5
 80044b6:	4631      	mov	r1, r6
 80044b8:	f7fb fe98 	bl	80001ec <__aeabi_uldivmod>
 80044bc:	4603      	mov	r3, r0
 80044be:	460c      	mov	r4, r1
 80044c0:	461a      	mov	r2, r3
 80044c2:	4b50      	ldr	r3, [pc, #320]	; (8004604 <UART_SetConfig+0x6f4>)
 80044c4:	fba3 2302 	umull	r2, r3, r3, r2
 80044c8:	095b      	lsrs	r3, r3, #5
 80044ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	469b      	mov	fp, r3
 80044d2:	f04f 0c00 	mov.w	ip, #0
 80044d6:	46d9      	mov	r9, fp
 80044d8:	46e2      	mov	sl, ip
 80044da:	eb19 0309 	adds.w	r3, r9, r9
 80044de:	eb4a 040a 	adc.w	r4, sl, sl
 80044e2:	4699      	mov	r9, r3
 80044e4:	46a2      	mov	sl, r4
 80044e6:	eb19 090b 	adds.w	r9, r9, fp
 80044ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044ee:	f04f 0100 	mov.w	r1, #0
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004502:	4689      	mov	r9, r1
 8004504:	4692      	mov	sl, r2
 8004506:	eb1b 0509 	adds.w	r5, fp, r9
 800450a:	eb4c 060a 	adc.w	r6, ip, sl
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	4619      	mov	r1, r3
 8004514:	f04f 0200 	mov.w	r2, #0
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	f04f 0400 	mov.w	r4, #0
 8004520:	0094      	lsls	r4, r2, #2
 8004522:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004526:	008b      	lsls	r3, r1, #2
 8004528:	461a      	mov	r2, r3
 800452a:	4623      	mov	r3, r4
 800452c:	4628      	mov	r0, r5
 800452e:	4631      	mov	r1, r6
 8004530:	f7fb fe5c 	bl	80001ec <__aeabi_uldivmod>
 8004534:	4603      	mov	r3, r0
 8004536:	460c      	mov	r4, r1
 8004538:	461a      	mov	r2, r3
 800453a:	4b32      	ldr	r3, [pc, #200]	; (8004604 <UART_SetConfig+0x6f4>)
 800453c:	fba3 1302 	umull	r1, r3, r3, r2
 8004540:	095b      	lsrs	r3, r3, #5
 8004542:	2164      	movs	r1, #100	; 0x64
 8004544:	fb01 f303 	mul.w	r3, r1, r3
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	3332      	adds	r3, #50	; 0x32
 800454e:	4a2d      	ldr	r2, [pc, #180]	; (8004604 <UART_SetConfig+0x6f4>)
 8004550:	fba2 2303 	umull	r2, r3, r2, r3
 8004554:	095b      	lsrs	r3, r3, #5
 8004556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800455a:	4498      	add	r8, r3
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	469b      	mov	fp, r3
 8004560:	f04f 0c00 	mov.w	ip, #0
 8004564:	46d9      	mov	r9, fp
 8004566:	46e2      	mov	sl, ip
 8004568:	eb19 0309 	adds.w	r3, r9, r9
 800456c:	eb4a 040a 	adc.w	r4, sl, sl
 8004570:	4699      	mov	r9, r3
 8004572:	46a2      	mov	sl, r4
 8004574:	eb19 090b 	adds.w	r9, r9, fp
 8004578:	eb4a 0a0c 	adc.w	sl, sl, ip
 800457c:	f04f 0100 	mov.w	r1, #0
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004588:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800458c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004590:	4689      	mov	r9, r1
 8004592:	4692      	mov	sl, r2
 8004594:	eb1b 0509 	adds.w	r5, fp, r9
 8004598:	eb4c 060a 	adc.w	r6, ip, sl
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	4619      	mov	r1, r3
 80045a2:	f04f 0200 	mov.w	r2, #0
 80045a6:	f04f 0300 	mov.w	r3, #0
 80045aa:	f04f 0400 	mov.w	r4, #0
 80045ae:	0094      	lsls	r4, r2, #2
 80045b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045b4:	008b      	lsls	r3, r1, #2
 80045b6:	461a      	mov	r2, r3
 80045b8:	4623      	mov	r3, r4
 80045ba:	4628      	mov	r0, r5
 80045bc:	4631      	mov	r1, r6
 80045be:	f7fb fe15 	bl	80001ec <__aeabi_uldivmod>
 80045c2:	4603      	mov	r3, r0
 80045c4:	460c      	mov	r4, r1
 80045c6:	461a      	mov	r2, r3
 80045c8:	4b0e      	ldr	r3, [pc, #56]	; (8004604 <UART_SetConfig+0x6f4>)
 80045ca:	fba3 1302 	umull	r1, r3, r3, r2
 80045ce:	095b      	lsrs	r3, r3, #5
 80045d0:	2164      	movs	r1, #100	; 0x64
 80045d2:	fb01 f303 	mul.w	r3, r1, r3
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	3332      	adds	r3, #50	; 0x32
 80045dc:	4a09      	ldr	r2, [pc, #36]	; (8004604 <UART_SetConfig+0x6f4>)
 80045de:	fba2 2303 	umull	r2, r3, r2, r3
 80045e2:	095b      	lsrs	r3, r3, #5
 80045e4:	f003 020f 	and.w	r2, r3, #15
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4442      	add	r2, r8
 80045ee:	609a      	str	r2, [r3, #8]
}
 80045f0:	e7ff      	b.n	80045f2 <UART_SetConfig+0x6e2>
 80045f2:	bf00      	nop
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045fc:	40011000 	.word	0x40011000
 8004600:	40011400 	.word	0x40011400
 8004604:	51eb851f 	.word	0x51eb851f

08004608 <__libc_init_array>:
 8004608:	b570      	push	{r4, r5, r6, lr}
 800460a:	4e0d      	ldr	r6, [pc, #52]	; (8004640 <__libc_init_array+0x38>)
 800460c:	4c0d      	ldr	r4, [pc, #52]	; (8004644 <__libc_init_array+0x3c>)
 800460e:	1ba4      	subs	r4, r4, r6
 8004610:	10a4      	asrs	r4, r4, #2
 8004612:	2500      	movs	r5, #0
 8004614:	42a5      	cmp	r5, r4
 8004616:	d109      	bne.n	800462c <__libc_init_array+0x24>
 8004618:	4e0b      	ldr	r6, [pc, #44]	; (8004648 <__libc_init_array+0x40>)
 800461a:	4c0c      	ldr	r4, [pc, #48]	; (800464c <__libc_init_array+0x44>)
 800461c:	f000 f820 	bl	8004660 <_init>
 8004620:	1ba4      	subs	r4, r4, r6
 8004622:	10a4      	asrs	r4, r4, #2
 8004624:	2500      	movs	r5, #0
 8004626:	42a5      	cmp	r5, r4
 8004628:	d105      	bne.n	8004636 <__libc_init_array+0x2e>
 800462a:	bd70      	pop	{r4, r5, r6, pc}
 800462c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004630:	4798      	blx	r3
 8004632:	3501      	adds	r5, #1
 8004634:	e7ee      	b.n	8004614 <__libc_init_array+0xc>
 8004636:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800463a:	4798      	blx	r3
 800463c:	3501      	adds	r5, #1
 800463e:	e7f2      	b.n	8004626 <__libc_init_array+0x1e>
 8004640:	08004698 	.word	0x08004698
 8004644:	08004698 	.word	0x08004698
 8004648:	08004698 	.word	0x08004698
 800464c:	0800469c 	.word	0x0800469c

08004650 <memset>:
 8004650:	4402      	add	r2, r0
 8004652:	4603      	mov	r3, r0
 8004654:	4293      	cmp	r3, r2
 8004656:	d100      	bne.n	800465a <memset+0xa>
 8004658:	4770      	bx	lr
 800465a:	f803 1b01 	strb.w	r1, [r3], #1
 800465e:	e7f9      	b.n	8004654 <memset+0x4>

08004660 <_init>:
 8004660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004662:	bf00      	nop
 8004664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004666:	bc08      	pop	{r3}
 8004668:	469e      	mov	lr, r3
 800466a:	4770      	bx	lr

0800466c <_fini>:
 800466c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800466e:	bf00      	nop
 8004670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004672:	bc08      	pop	{r3}
 8004674:	469e      	mov	lr, r3
 8004676:	4770      	bx	lr
