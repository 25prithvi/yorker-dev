
yorker-dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c81c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b18  0800c9d0  0800c9d0  0001c9d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d4e8  0800d4e8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d4e8  0800d4e8  0001d4e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d4f0  0800d4f0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4f0  0800d4f0  0001d4f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d4f4  0800d4f4  0001d4f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800d4f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000998  200001e4  0800d6dc  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b7c  0800d6dc  00020b7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aba9  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003bb7  00000000  00000000  0003adbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001600  00000000  00000000  0003e978  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001408  00000000  00000000  0003ff78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002787c  00000000  00000000  00041380  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000161ee  00000000  00000000  00068bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e7e20  00000000  00000000  0007edea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00166c0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006714  00000000  00000000  00166c88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c9b4 	.word	0x0800c9b4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	0800c9b4 	.word	0x0800c9b4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	platform_start_yorker();
 8000fac:	f006 fe82 	bl	8007cb4 <platform_start_yorker>
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <HAL_MspInit+0x4c>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	4a0f      	ldr	r2, [pc, #60]	; (8001004 <HAL_MspInit+0x4c>)
 8000fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <HAL_MspInit+0x4c>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	603b      	str	r3, [r7, #0]
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <HAL_MspInit+0x4c>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	4a08      	ldr	r2, [pc, #32]	; (8001004 <HAL_MspInit+0x4c>)
 8000fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_MspInit+0x4c>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40023800 	.word	0x40023800

08001008 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08e      	sub	sp, #56	; 0x38
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a45      	ldr	r2, [pc, #276]	; (800113c <HAL_ADC_MspInit+0x134>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d128      	bne.n	800107c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	623b      	str	r3, [r7, #32]
 800102e:	4b44      	ldr	r3, [pc, #272]	; (8001140 <HAL_ADC_MspInit+0x138>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	4a43      	ldr	r2, [pc, #268]	; (8001140 <HAL_ADC_MspInit+0x138>)
 8001034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001038:	6453      	str	r3, [r2, #68]	; 0x44
 800103a:	4b41      	ldr	r3, [pc, #260]	; (8001140 <HAL_ADC_MspInit+0x138>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001042:	623b      	str	r3, [r7, #32]
 8001044:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
 800104a:	4b3d      	ldr	r3, [pc, #244]	; (8001140 <HAL_ADC_MspInit+0x138>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a3c      	ldr	r2, [pc, #240]	; (8001140 <HAL_ADC_MspInit+0x138>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b3a      	ldr	r3, [pc, #232]	; (8001140 <HAL_ADC_MspInit+0x138>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	61fb      	str	r3, [r7, #28]
 8001060:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC3     ------> ADC1_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8001062:	230b      	movs	r3, #11
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001066:	2303      	movs	r3, #3
 8001068:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001072:	4619      	mov	r1, r3
 8001074:	4833      	ldr	r0, [pc, #204]	; (8001144 <HAL_ADC_MspInit+0x13c>)
 8001076:	f001 f93b 	bl	80022f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800107a:	e05a      	b.n	8001132 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a31      	ldr	r2, [pc, #196]	; (8001148 <HAL_ADC_MspInit+0x140>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d128      	bne.n	80010d8 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	61bb      	str	r3, [r7, #24]
 800108a:	4b2d      	ldr	r3, [pc, #180]	; (8001140 <HAL_ADC_MspInit+0x138>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	4a2c      	ldr	r2, [pc, #176]	; (8001140 <HAL_ADC_MspInit+0x138>)
 8001090:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001094:	6453      	str	r3, [r2, #68]	; 0x44
 8001096:	4b2a      	ldr	r3, [pc, #168]	; (8001140 <HAL_ADC_MspInit+0x138>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800109e:	61bb      	str	r3, [r7, #24]
 80010a0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
 80010a6:	4b26      	ldr	r3, [pc, #152]	; (8001140 <HAL_ADC_MspInit+0x138>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a25      	ldr	r2, [pc, #148]	; (8001140 <HAL_ADC_MspInit+0x138>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b23      	ldr	r3, [pc, #140]	; (8001140 <HAL_ADC_MspInit+0x138>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010be:	2302      	movs	r3, #2
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010c2:	2303      	movs	r3, #3
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ce:	4619      	mov	r1, r3
 80010d0:	481c      	ldr	r0, [pc, #112]	; (8001144 <HAL_ADC_MspInit+0x13c>)
 80010d2:	f001 f90d 	bl	80022f0 <HAL_GPIO_Init>
}
 80010d6:	e02c      	b.n	8001132 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a1b      	ldr	r2, [pc, #108]	; (800114c <HAL_ADC_MspInit+0x144>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d127      	bne.n	8001132 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	4b16      	ldr	r3, [pc, #88]	; (8001140 <HAL_ADC_MspInit+0x138>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	4a15      	ldr	r2, [pc, #84]	; (8001140 <HAL_ADC_MspInit+0x138>)
 80010ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010f0:	6453      	str	r3, [r2, #68]	; 0x44
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <HAL_ADC_MspInit+0x138>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <HAL_ADC_MspInit+0x138>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <HAL_ADC_MspInit+0x138>)
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <HAL_ADC_MspInit+0x138>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800111a:	2304      	movs	r3, #4
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800111e:	2303      	movs	r3, #3
 8001120:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112a:	4619      	mov	r1, r3
 800112c:	4805      	ldr	r0, [pc, #20]	; (8001144 <HAL_ADC_MspInit+0x13c>)
 800112e:	f001 f8df 	bl	80022f0 <HAL_GPIO_Init>
}
 8001132:	bf00      	nop
 8001134:	3738      	adds	r7, #56	; 0x38
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40012000 	.word	0x40012000
 8001140:	40023800 	.word	0x40023800
 8001144:	40020800 	.word	0x40020800
 8001148:	40012100 	.word	0x40012100
 800114c:	40012200 	.word	0x40012200

08001150 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a19      	ldr	r2, [pc, #100]	; (80011d4 <HAL_I2C_MspInit+0x84>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d12b      	bne.n	80011ca <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <HAL_I2C_MspInit+0x88>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a17      	ldr	r2, [pc, #92]	; (80011d8 <HAL_I2C_MspInit+0x88>)
 800117c:	f043 0302 	orr.w	r3, r3, #2
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <HAL_I2C_MspInit+0x88>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 800118e:	23c0      	movs	r3, #192	; 0xc0
 8001190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001192:	2312      	movs	r3, #18
 8001194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001196:	2301      	movs	r3, #1
 8001198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119a:	2303      	movs	r3, #3
 800119c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800119e:	2304      	movs	r3, #4
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	4619      	mov	r1, r3
 80011a8:	480c      	ldr	r0, [pc, #48]	; (80011dc <HAL_I2C_MspInit+0x8c>)
 80011aa:	f001 f8a1 	bl	80022f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <HAL_I2C_MspInit+0x88>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	4a08      	ldr	r2, [pc, #32]	; (80011d8 <HAL_I2C_MspInit+0x88>)
 80011b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011bc:	6413      	str	r3, [r2, #64]	; 0x40
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_I2C_MspInit+0x88>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40005400 	.word	0x40005400
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020400 	.word	0x40020400

080011e0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a05      	ldr	r2, [pc, #20]	; (8001204 <HAL_RTC_MspInit+0x24>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d102      	bne.n	80011f8 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <HAL_RTC_MspInit+0x28>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	40002800 	.word	0x40002800
 8001208:	42470e3c 	.word	0x42470e3c

0800120c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800121c:	d116      	bne.n	800124c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	4b28      	ldr	r3, [pc, #160]	; (80012c4 <HAL_TIM_Base_MspInit+0xb8>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	4a27      	ldr	r2, [pc, #156]	; (80012c4 <HAL_TIM_Base_MspInit+0xb8>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6413      	str	r3, [r2, #64]	; 0x40
 800122e:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <HAL_TIM_Base_MspInit+0xb8>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	2100      	movs	r1, #0
 800123e:	201c      	movs	r0, #28
 8001240:	f000 fdeb 	bl	8001e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001244:	201c      	movs	r0, #28
 8001246:	f000 fe04 	bl	8001e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800124a:	e036      	b.n	80012ba <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a1d      	ldr	r2, [pc, #116]	; (80012c8 <HAL_TIM_Base_MspInit+0xbc>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d116      	bne.n	8001284 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <HAL_TIM_Base_MspInit+0xb8>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	4a19      	ldr	r2, [pc, #100]	; (80012c4 <HAL_TIM_Base_MspInit+0xb8>)
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	6413      	str	r3, [r2, #64]	; 0x40
 8001266:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <HAL_TIM_Base_MspInit+0xb8>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	201e      	movs	r0, #30
 8001278:	f000 fdcf 	bl	8001e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800127c:	201e      	movs	r0, #30
 800127e:	f000 fde8 	bl	8001e52 <HAL_NVIC_EnableIRQ>
}
 8001282:	e01a      	b.n	80012ba <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM5)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a10      	ldr	r2, [pc, #64]	; (80012cc <HAL_TIM_Base_MspInit+0xc0>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d115      	bne.n	80012ba <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <HAL_TIM_Base_MspInit+0xb8>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	4a0b      	ldr	r2, [pc, #44]	; (80012c4 <HAL_TIM_Base_MspInit+0xb8>)
 8001298:	f043 0308 	orr.w	r3, r3, #8
 800129c:	6413      	str	r3, [r2, #64]	; 0x40
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <HAL_TIM_Base_MspInit+0xb8>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	2032      	movs	r0, #50	; 0x32
 80012b0:	f000 fdb3 	bl	8001e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80012b4:	2032      	movs	r0, #50	; 0x32
 80012b6:	f000 fdcc 	bl	8001e52 <HAL_NVIC_EnableIRQ>
}
 80012ba:	bf00      	nop
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40000800 	.word	0x40000800
 80012cc:	40000c00 	.word	0x40000c00

080012d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08e      	sub	sp, #56	; 0x38
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a67      	ldr	r2, [pc, #412]	; (800148c <HAL_UART_MspInit+0x1bc>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d153      	bne.n	800139a <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	623b      	str	r3, [r7, #32]
 80012f6:	4b66      	ldr	r3, [pc, #408]	; (8001490 <HAL_UART_MspInit+0x1c0>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	4a65      	ldr	r2, [pc, #404]	; (8001490 <HAL_UART_MspInit+0x1c0>)
 80012fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001300:	6413      	str	r3, [r2, #64]	; 0x40
 8001302:	4b63      	ldr	r3, [pc, #396]	; (8001490 <HAL_UART_MspInit+0x1c0>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800130a:	623b      	str	r3, [r7, #32]
 800130c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
 8001312:	4b5f      	ldr	r3, [pc, #380]	; (8001490 <HAL_UART_MspInit+0x1c0>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a5e      	ldr	r2, [pc, #376]	; (8001490 <HAL_UART_MspInit+0x1c0>)
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b5c      	ldr	r3, [pc, #368]	; (8001490 <HAL_UART_MspInit+0x1c0>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	61fb      	str	r3, [r7, #28]
 8001328:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	61bb      	str	r3, [r7, #24]
 800132e:	4b58      	ldr	r3, [pc, #352]	; (8001490 <HAL_UART_MspInit+0x1c0>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a57      	ldr	r2, [pc, #348]	; (8001490 <HAL_UART_MspInit+0x1c0>)
 8001334:	f043 0308 	orr.w	r3, r3, #8
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b55      	ldr	r3, [pc, #340]	; (8001490 <HAL_UART_MspInit+0x1c0>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	61bb      	str	r3, [r7, #24]
 8001344:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = RS485_TX_Pin;
 8001346:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001350:	2301      	movs	r3, #1
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001358:	2308      	movs	r3, #8
 800135a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 800135c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001360:	4619      	mov	r1, r3
 8001362:	484c      	ldr	r0, [pc, #304]	; (8001494 <HAL_UART_MspInit+0x1c4>)
 8001364:	f000 ffc4 	bl	80022f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RS485_RX_Pin;
 8001368:	2304      	movs	r3, #4
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136c:	2302      	movs	r3, #2
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001370:	2301      	movs	r3, #1
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001374:	2303      	movs	r3, #3
 8001376:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001378:	2308      	movs	r3, #8
 800137a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001380:	4619      	mov	r1, r3
 8001382:	4845      	ldr	r0, [pc, #276]	; (8001498 <HAL_UART_MspInit+0x1c8>)
 8001384:	f000 ffb4 	bl	80022f0 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001388:	2200      	movs	r2, #0
 800138a:	2100      	movs	r1, #0
 800138c:	2035      	movs	r0, #53	; 0x35
 800138e:	f000 fd44 	bl	8001e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001392:	2035      	movs	r0, #53	; 0x35
 8001394:	f000 fd5d 	bl	8001e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001398:	e073      	b.n	8001482 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==UART7)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a3f      	ldr	r2, [pc, #252]	; (800149c <HAL_UART_MspInit+0x1cc>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d135      	bne.n	8001410 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART7_CLK_ENABLE();
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	4b39      	ldr	r3, [pc, #228]	; (8001490 <HAL_UART_MspInit+0x1c0>)
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	4a38      	ldr	r2, [pc, #224]	; (8001490 <HAL_UART_MspInit+0x1c0>)
 80013ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80013b2:	6413      	str	r3, [r2, #64]	; 0x40
 80013b4:	4b36      	ldr	r3, [pc, #216]	; (8001490 <HAL_UART_MspInit+0x1c0>)
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013c0:	2300      	movs	r3, #0
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	4b32      	ldr	r3, [pc, #200]	; (8001490 <HAL_UART_MspInit+0x1c0>)
 80013c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c8:	4a31      	ldr	r2, [pc, #196]	; (8001490 <HAL_UART_MspInit+0x1c0>)
 80013ca:	f043 0310 	orr.w	r3, r3, #16
 80013ce:	6313      	str	r3, [r2, #48]	; 0x30
 80013d0:	4b2f      	ldr	r3, [pc, #188]	; (8001490 <HAL_UART_MspInit+0x1c0>)
 80013d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d4:	f003 0310 	and.w	r3, r3, #16
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_UART_RX_Pin|LCD_UART_TX_Pin;
 80013dc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e6:	2301      	movs	r3, #1
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ea:	2303      	movs	r3, #3
 80013ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80013ee:	2308      	movs	r3, #8
 80013f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f6:	4619      	mov	r1, r3
 80013f8:	4829      	ldr	r0, [pc, #164]	; (80014a0 <HAL_UART_MspInit+0x1d0>)
 80013fa:	f000 ff79 	bl	80022f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2100      	movs	r1, #0
 8001402:	2052      	movs	r0, #82	; 0x52
 8001404:	f000 fd09 	bl	8001e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001408:	2052      	movs	r0, #82	; 0x52
 800140a:	f000 fd22 	bl	8001e52 <HAL_NVIC_EnableIRQ>
}
 800140e:	e038      	b.n	8001482 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a23      	ldr	r2, [pc, #140]	; (80014a4 <HAL_UART_MspInit+0x1d4>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d133      	bne.n	8001482 <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <HAL_UART_MspInit+0x1c0>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <HAL_UART_MspInit+0x1c0>)
 8001424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001428:	6413      	str	r3, [r2, #64]	; 0x40
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <HAL_UART_MspInit+0x1c0>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <HAL_UART_MspInit+0x1c0>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a14      	ldr	r2, [pc, #80]	; (8001490 <HAL_UART_MspInit+0x1c0>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_UART_MspInit+0x1c0>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = WIFI_UART_TX_Pin|WIFI_UART_RX_Pin;
 8001452:	230c      	movs	r3, #12
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145e:	2303      	movs	r3, #3
 8001460:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001462:	2307      	movs	r3, #7
 8001464:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146a:	4619      	mov	r1, r3
 800146c:	480e      	ldr	r0, [pc, #56]	; (80014a8 <HAL_UART_MspInit+0x1d8>)
 800146e:	f000 ff3f 	bl	80022f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	2026      	movs	r0, #38	; 0x26
 8001478:	f000 fccf 	bl	8001e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800147c:	2026      	movs	r0, #38	; 0x26
 800147e:	f000 fce8 	bl	8001e52 <HAL_NVIC_EnableIRQ>
}
 8001482:	bf00      	nop
 8001484:	3738      	adds	r7, #56	; 0x38
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40005000 	.word	0x40005000
 8001490:	40023800 	.word	0x40023800
 8001494:	40020800 	.word	0x40020800
 8001498:	40020c00 	.word	0x40020c00
 800149c:	40007800 	.word	0x40007800
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40004400 	.word	0x40004400
 80014a8:	40020000 	.word	0x40020000

080014ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <HardFault_Handler+0x4>

080014c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <MemManage_Handler+0x4>

080014c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <BusFault_Handler+0x4>

080014cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <UsageFault_Handler+0x4>

080014d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001500:	f000 f8fc 	bl	80016fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}

08001508 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <TIM2_IRQHandler+0x10>)
 800150e:	f002 faa3 	bl	8003a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000a78 	.word	0x20000a78

0800151c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <TIM4_IRQHandler+0x10>)
 8001522:	f002 fa99 	bl	8003a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200009f8 	.word	0x200009f8

08001530 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <USART2_IRQHandler+0x10>)
 8001536:	f002 fed3 	bl	80042e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000b38 	.word	0x20000b38

08001544 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <TIM5_IRQHandler+0x10>)
 800154a:	f002 fa85 	bl	8003a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000a38 	.word	0x20000a38

08001558 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800155c:	4802      	ldr	r0, [pc, #8]	; (8001568 <UART5_IRQHandler+0x10>)
 800155e:	f002 febf 	bl	80042e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000af8 	.word	0x20000af8

0800156c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001570:	4802      	ldr	r0, [pc, #8]	; (800157c <UART7_IRQHandler+0x10>)
 8001572:	f002 feb5 	bl	80042e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000ab8 	.word	0x20000ab8

08001580 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <_sbrk+0x50>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d102      	bne.n	8001596 <_sbrk+0x16>
		heap_end = &end;
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <_sbrk+0x50>)
 8001592:	4a10      	ldr	r2, [pc, #64]	; (80015d4 <_sbrk+0x54>)
 8001594:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <_sbrk+0x50>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <_sbrk+0x50>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4413      	add	r3, r2
 80015a4:	466a      	mov	r2, sp
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d907      	bls.n	80015ba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80015aa:	f007 fc67 	bl	8008e7c <__errno>
 80015ae:	4602      	mov	r2, r0
 80015b0:	230c      	movs	r3, #12
 80015b2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295
 80015b8:	e006      	b.n	80015c8 <_sbrk+0x48>
	}

	heap_end += incr;
 80015ba:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <_sbrk+0x50>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	4a03      	ldr	r2, [pc, #12]	; (80015d0 <_sbrk+0x50>)
 80015c4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80015c6:	68fb      	ldr	r3, [r7, #12]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000200 	.word	0x20000200
 80015d4:	20000b80 	.word	0x20000b80

080015d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <SystemInit+0x28>)
 80015de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015e2:	4a07      	ldr	r2, [pc, #28]	; (8001600 <SystemInit+0x28>)
 80015e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <SystemInit+0x28>)
 80015ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015f2:	609a      	str	r2, [r3, #8]
#endif
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001604:	f8df d034 	ldr.w	sp, [pc, #52]	; 800163c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001608:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800160a:	e003      	b.n	8001614 <LoopCopyDataInit>

0800160c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800160e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001610:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001612:	3104      	adds	r1, #4

08001614 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001614:	480b      	ldr	r0, [pc, #44]	; (8001644 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001618:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800161a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800161c:	d3f6      	bcc.n	800160c <CopyDataInit>
  ldr  r2, =_sbss
 800161e:	4a0b      	ldr	r2, [pc, #44]	; (800164c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001620:	e002      	b.n	8001628 <LoopFillZerobss>

08001622 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001622:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001624:	f842 3b04 	str.w	r3, [r2], #4

08001628 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800162a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800162c:	d3f9      	bcc.n	8001622 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800162e:	f7ff ffd3 	bl	80015d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001632:	f007 fc29 	bl	8008e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001636:	f7ff fcb7 	bl	8000fa8 <main>
  bx  lr    
 800163a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800163c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001640:	0800d4f8 	.word	0x0800d4f8
  ldr  r0, =_sdata
 8001644:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001648:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 800164c:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8001650:	20000b7c 	.word	0x20000b7c

08001654 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001654:	e7fe      	b.n	8001654 <ADC_IRQHandler>
	...

08001658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800165c:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <HAL_Init+0x40>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a0d      	ldr	r2, [pc, #52]	; (8001698 <HAL_Init+0x40>)
 8001662:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001666:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <HAL_Init+0x40>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <HAL_Init+0x40>)
 800166e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001672:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <HAL_Init+0x40>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a07      	ldr	r2, [pc, #28]	; (8001698 <HAL_Init+0x40>)
 800167a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800167e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001680:	2003      	movs	r0, #3
 8001682:	f000 fbbf 	bl	8001e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001686:	2000      	movs	r0, #0
 8001688:	f000 f808 	bl	800169c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800168c:	f7ff fc94 	bl	8000fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40023c00 	.word	0x40023c00

0800169c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <HAL_InitTick+0x54>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_InitTick+0x58>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	4619      	mov	r1, r3
 80016ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 fbd7 	bl	8001e6e <HAL_SYSTICK_Config>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00e      	b.n	80016e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b0f      	cmp	r3, #15
 80016ce:	d80a      	bhi.n	80016e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d0:	2200      	movs	r2, #0
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	f000 fb9f 	bl	8001e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016dc:	4a06      	ldr	r2, [pc, #24]	; (80016f8 <HAL_InitTick+0x5c>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	e000      	b.n	80016e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000000 	.word	0x20000000
 80016f4:	20000008 	.word	0x20000008
 80016f8:	20000004 	.word	0x20000004

080016fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_IncTick+0x20>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_IncTick+0x24>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4413      	add	r3, r2
 800170c:	4a04      	ldr	r2, [pc, #16]	; (8001720 <HAL_IncTick+0x24>)
 800170e:	6013      	str	r3, [r2, #0]
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20000008 	.word	0x20000008
 8001720:	200006d8 	.word	0x200006d8

08001724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return uwTick;
 8001728:	4b03      	ldr	r3, [pc, #12]	; (8001738 <HAL_GetTick+0x14>)
 800172a:	681b      	ldr	r3, [r3, #0]
}
 800172c:	4618      	mov	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	200006d8 	.word	0x200006d8

0800173c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001744:	f7ff ffee 	bl	8001724 <HAL_GetTick>
 8001748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001754:	d005      	beq.n	8001762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <HAL_Delay+0x40>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4413      	add	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001762:	bf00      	nop
 8001764:	f7ff ffde 	bl	8001724 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	429a      	cmp	r2, r3
 8001772:	d8f7      	bhi.n	8001764 <HAL_Delay+0x28>
  {
  }
}
 8001774:	bf00      	nop
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000008 	.word	0x20000008

08001780 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e033      	b.n	80017fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	2b00      	cmp	r3, #0
 800179c:	d109      	bne.n	80017b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff fc32 	bl	8001008 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f003 0310 	and.w	r3, r3, #16
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d118      	bne.n	80017f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017c6:	f023 0302 	bic.w	r3, r3, #2
 80017ca:	f043 0202 	orr.w	r2, r3, #2
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f94a 	bl	8001a6c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f023 0303 	bic.w	r3, r3, #3
 80017e6:	f043 0201 	orr.w	r2, r3, #1
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	641a      	str	r2, [r3, #64]	; 0x40
 80017ee:	e001      	b.n	80017f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800181c:	2b01      	cmp	r3, #1
 800181e:	d101      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x1c>
 8001820:	2302      	movs	r3, #2
 8001822:	e113      	b.n	8001a4c <HAL_ADC_ConfigChannel+0x244>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b09      	cmp	r3, #9
 8001832:	d925      	bls.n	8001880 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68d9      	ldr	r1, [r3, #12]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	b29b      	uxth	r3, r3
 8001840:	461a      	mov	r2, r3
 8001842:	4613      	mov	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	3b1e      	subs	r3, #30
 800184a:	2207      	movs	r2, #7
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43da      	mvns	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	400a      	ands	r2, r1
 8001858:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68d9      	ldr	r1, [r3, #12]
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	b29b      	uxth	r3, r3
 800186a:	4618      	mov	r0, r3
 800186c:	4603      	mov	r3, r0
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4403      	add	r3, r0
 8001872:	3b1e      	subs	r3, #30
 8001874:	409a      	lsls	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	e022      	b.n	80018c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6919      	ldr	r1, [r3, #16]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	b29b      	uxth	r3, r3
 800188c:	461a      	mov	r2, r3
 800188e:	4613      	mov	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4413      	add	r3, r2
 8001894:	2207      	movs	r2, #7
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43da      	mvns	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	400a      	ands	r2, r1
 80018a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6919      	ldr	r1, [r3, #16]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	4618      	mov	r0, r3
 80018b6:	4603      	mov	r3, r0
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	4403      	add	r3, r0
 80018bc:	409a      	lsls	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b06      	cmp	r3, #6
 80018cc:	d824      	bhi.n	8001918 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	3b05      	subs	r3, #5
 80018e0:	221f      	movs	r2, #31
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43da      	mvns	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	400a      	ands	r2, r1
 80018ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	4618      	mov	r0, r3
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	3b05      	subs	r3, #5
 800190a:	fa00 f203 	lsl.w	r2, r0, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	635a      	str	r2, [r3, #52]	; 0x34
 8001916:	e04c      	b.n	80019b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b0c      	cmp	r3, #12
 800191e:	d824      	bhi.n	800196a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	3b23      	subs	r3, #35	; 0x23
 8001932:	221f      	movs	r2, #31
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43da      	mvns	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	400a      	ands	r2, r1
 8001940:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	b29b      	uxth	r3, r3
 800194e:	4618      	mov	r0, r3
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	3b23      	subs	r3, #35	; 0x23
 800195c:	fa00 f203 	lsl.w	r2, r0, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	430a      	orrs	r2, r1
 8001966:	631a      	str	r2, [r3, #48]	; 0x30
 8001968:	e023      	b.n	80019b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	3b41      	subs	r3, #65	; 0x41
 800197c:	221f      	movs	r2, #31
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43da      	mvns	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	400a      	ands	r2, r1
 800198a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	b29b      	uxth	r3, r3
 8001998:	4618      	mov	r0, r3
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	3b41      	subs	r3, #65	; 0x41
 80019a6:	fa00 f203 	lsl.w	r2, r0, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019b2:	4b29      	ldr	r3, [pc, #164]	; (8001a58 <HAL_ADC_ConfigChannel+0x250>)
 80019b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a28      	ldr	r2, [pc, #160]	; (8001a5c <HAL_ADC_ConfigChannel+0x254>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d10f      	bne.n	80019e0 <HAL_ADC_ConfigChannel+0x1d8>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b12      	cmp	r3, #18
 80019c6:	d10b      	bne.n	80019e0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a1d      	ldr	r2, [pc, #116]	; (8001a5c <HAL_ADC_ConfigChannel+0x254>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d12b      	bne.n	8001a42 <HAL_ADC_ConfigChannel+0x23a>
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a1c      	ldr	r2, [pc, #112]	; (8001a60 <HAL_ADC_ConfigChannel+0x258>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d003      	beq.n	80019fc <HAL_ADC_ConfigChannel+0x1f4>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b11      	cmp	r3, #17
 80019fa:	d122      	bne.n	8001a42 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a11      	ldr	r2, [pc, #68]	; (8001a60 <HAL_ADC_ConfigChannel+0x258>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d111      	bne.n	8001a42 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <HAL_ADC_ConfigChannel+0x25c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a11      	ldr	r2, [pc, #68]	; (8001a68 <HAL_ADC_ConfigChannel+0x260>)
 8001a24:	fba2 2303 	umull	r2, r3, r2, r3
 8001a28:	0c9a      	lsrs	r2, r3, #18
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a34:	e002      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f9      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	40012300 	.word	0x40012300
 8001a5c:	40012000 	.word	0x40012000
 8001a60:	10000012 	.word	0x10000012
 8001a64:	20000000 	.word	0x20000000
 8001a68:	431bde83 	.word	0x431bde83

08001a6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a74:	4b79      	ldr	r3, [pc, #484]	; (8001c5c <ADC_Init+0x1f0>)
 8001a76:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001aa0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6859      	ldr	r1, [r3, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	021a      	lsls	r2, r3, #8
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ac4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6859      	ldr	r1, [r3, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ae6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6899      	ldr	r1, [r3, #8]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afe:	4a58      	ldr	r2, [pc, #352]	; (8001c60 <ADC_Init+0x1f4>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d022      	beq.n	8001b4a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6899      	ldr	r1, [r3, #8]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6899      	ldr	r1, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	e00f      	b.n	8001b6a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b68:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0202 	bic.w	r2, r2, #2
 8001b78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6899      	ldr	r1, [r3, #8]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	7e1b      	ldrb	r3, [r3, #24]
 8001b84:	005a      	lsls	r2, r3, #1
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d01b      	beq.n	8001bd0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ba6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001bb6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6859      	ldr	r1, [r3, #4]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	035a      	lsls	r2, r3, #13
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	e007      	b.n	8001be0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bde:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	051a      	lsls	r2, r3, #20
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6899      	ldr	r1, [r3, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c22:	025a      	lsls	r2, r3, #9
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6899      	ldr	r1, [r3, #8]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	029a      	lsls	r2, r3, #10
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	609a      	str	r2, [r3, #8]
}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	40012300 	.word	0x40012300
 8001c60:	0f000001 	.word	0x0f000001

08001c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c80:	4013      	ands	r3, r2
 8001c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c96:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	60d3      	str	r3, [r2, #12]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb0:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	0a1b      	lsrs	r3, r3, #8
 8001cb6:	f003 0307 	and.w	r3, r3, #7
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	db0b      	blt.n	8001cf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	f003 021f 	and.w	r2, r3, #31
 8001ce0:	4907      	ldr	r1, [pc, #28]	; (8001d00 <__NVIC_EnableIRQ+0x38>)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	095b      	lsrs	r3, r3, #5
 8001ce8:	2001      	movs	r0, #1
 8001cea:	fa00 f202 	lsl.w	r2, r0, r2
 8001cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000e100 	.word	0xe000e100

08001d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	6039      	str	r1, [r7, #0]
 8001d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	db0a      	blt.n	8001d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	490c      	ldr	r1, [pc, #48]	; (8001d50 <__NVIC_SetPriority+0x4c>)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	0112      	lsls	r2, r2, #4
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	440b      	add	r3, r1
 8001d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d2c:	e00a      	b.n	8001d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	4908      	ldr	r1, [pc, #32]	; (8001d54 <__NVIC_SetPriority+0x50>)
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	3b04      	subs	r3, #4
 8001d3c:	0112      	lsls	r2, r2, #4
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	440b      	add	r3, r1
 8001d42:	761a      	strb	r2, [r3, #24]
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000e100 	.word	0xe000e100
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	; 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f1c3 0307 	rsb	r3, r3, #7
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	bf28      	it	cs
 8001d76:	2304      	movcs	r3, #4
 8001d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	2b06      	cmp	r3, #6
 8001d80:	d902      	bls.n	8001d88 <NVIC_EncodePriority+0x30>
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3b03      	subs	r3, #3
 8001d86:	e000      	b.n	8001d8a <NVIC_EncodePriority+0x32>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43da      	mvns	r2, r3
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da0:	f04f 31ff 	mov.w	r1, #4294967295
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	fa01 f303 	lsl.w	r3, r1, r3
 8001daa:	43d9      	mvns	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	4313      	orrs	r3, r2
         );
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3724      	adds	r7, #36	; 0x24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dd0:	d301      	bcc.n	8001dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e00f      	b.n	8001df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <SysTick_Config+0x40>)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dde:	210f      	movs	r1, #15
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295
 8001de4:	f7ff ff8e 	bl	8001d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <SysTick_Config+0x40>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dee:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <SysTick_Config+0x40>)
 8001df0:	2207      	movs	r2, #7
 8001df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	e000e010 	.word	0xe000e010

08001e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff ff29 	bl	8001c64 <__NVIC_SetPriorityGrouping>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	4603      	mov	r3, r0
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
 8001e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e2c:	f7ff ff3e 	bl	8001cac <__NVIC_GetPriorityGrouping>
 8001e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	6978      	ldr	r0, [r7, #20]
 8001e38:	f7ff ff8e 	bl	8001d58 <NVIC_EncodePriority>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff5d 	bl	8001d04 <__NVIC_SetPriority>
}
 8001e4a:	bf00      	nop
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	4603      	mov	r3, r0
 8001e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff31 	bl	8001cc8 <__NVIC_EnableIRQ>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff ffa2 	bl	8001dc0 <SysTick_Config>
 8001e7c:	4603      	mov	r3, r0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d004      	beq.n	8001ea4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2280      	movs	r2, #128	; 0x80
 8001e9e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e00c      	b.n	8001ebe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2205      	movs	r2, #5
 8001ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0201 	bic.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
	...

08001ecc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001ede:	4b23      	ldr	r3, [pc, #140]	; (8001f6c <HAL_FLASH_Program+0xa0>)
 8001ee0:	7e1b      	ldrb	r3, [r3, #24]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d101      	bne.n	8001eea <HAL_FLASH_Program+0x1e>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e03b      	b.n	8001f62 <HAL_FLASH_Program+0x96>
 8001eea:	4b20      	ldr	r3, [pc, #128]	; (8001f6c <HAL_FLASH_Program+0xa0>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ef0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ef4:	f000 f870 	bl	8001fd8 <FLASH_WaitForLastOperation>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001efc:	7dfb      	ldrb	r3, [r7, #23]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d12b      	bne.n	8001f5a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d105      	bne.n	8001f14 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001f08:	783b      	ldrb	r3, [r7, #0]
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	68b8      	ldr	r0, [r7, #8]
 8001f0e:	f000 f919 	bl	8002144 <FLASH_Program_Byte>
 8001f12:	e016      	b.n	8001f42 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d105      	bne.n	8001f26 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001f1a:	883b      	ldrh	r3, [r7, #0]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	68b8      	ldr	r0, [r7, #8]
 8001f20:	f000 f8ec 	bl	80020fc <FLASH_Program_HalfWord>
 8001f24:	e00d      	b.n	8001f42 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d105      	bne.n	8001f38 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	4619      	mov	r1, r3
 8001f30:	68b8      	ldr	r0, [r7, #8]
 8001f32:	f000 f8c1 	bl	80020b8 <FLASH_Program_Word>
 8001f36:	e004      	b.n	8001f42 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001f38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f3c:	68b8      	ldr	r0, [r7, #8]
 8001f3e:	f000 f88b 	bl	8002058 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f42:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f46:	f000 f847 	bl	8001fd8 <FLASH_WaitForLastOperation>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001f4e:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <HAL_FLASH_Program+0xa4>)
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	4a07      	ldr	r2, [pc, #28]	; (8001f70 <HAL_FLASH_Program+0xa4>)
 8001f54:	f023 0301 	bic.w	r3, r3, #1
 8001f58:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001f5a:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <HAL_FLASH_Program+0xa0>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200006dc 	.word	0x200006dc
 8001f70:	40023c00 	.word	0x40023c00

08001f74 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <HAL_FLASH_Unlock+0x38>)
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	da0b      	bge.n	8001f9e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <HAL_FLASH_Unlock+0x38>)
 8001f88:	4a09      	ldr	r2, [pc, #36]	; (8001fb0 <HAL_FLASH_Unlock+0x3c>)
 8001f8a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001f8c:	4b07      	ldr	r3, [pc, #28]	; (8001fac <HAL_FLASH_Unlock+0x38>)
 8001f8e:	4a09      	ldr	r2, [pc, #36]	; (8001fb4 <HAL_FLASH_Unlock+0x40>)
 8001f90:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_FLASH_Unlock+0x38>)
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	da01      	bge.n	8001f9e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	40023c00 	.word	0x40023c00
 8001fb0:	45670123 	.word	0x45670123
 8001fb4:	cdef89ab 	.word	0xcdef89ab

08001fb8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <HAL_FLASH_Lock+0x1c>)
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <HAL_FLASH_Lock+0x1c>)
 8001fc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fc6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	40023c00 	.word	0x40023c00

08001fd8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001fe4:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <FLASH_WaitForLastOperation+0x78>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001fea:	f7ff fb9b 	bl	8001724 <HAL_GetTick>
 8001fee:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001ff0:	e010      	b.n	8002014 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff8:	d00c      	beq.n	8002014 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d007      	beq.n	8002010 <FLASH_WaitForLastOperation+0x38>
 8002000:	f7ff fb90 	bl	8001724 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	429a      	cmp	r2, r3
 800200e:	d201      	bcs.n	8002014 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e019      	b.n	8002048 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002014:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <FLASH_WaitForLastOperation+0x7c>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1e8      	bne.n	8001ff2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <FLASH_WaitForLastOperation+0x7c>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b00      	cmp	r3, #0
 800202a:	d002      	beq.n	8002032 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800202c:	4b09      	ldr	r3, [pc, #36]	; (8002054 <FLASH_WaitForLastOperation+0x7c>)
 800202e:	2201      	movs	r2, #1
 8002030:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002032:	4b08      	ldr	r3, [pc, #32]	; (8002054 <FLASH_WaitForLastOperation+0x7c>)
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800203e:	f000 f8a3 	bl	8002188 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002046:	2300      	movs	r3, #0
  
}  
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	200006dc 	.word	0x200006dc
 8002054:	40023c00 	.word	0x40023c00

08002058 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002058:	b490      	push	{r4, r7}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002064:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <FLASH_Program_DoubleWord+0x5c>)
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	4a12      	ldr	r2, [pc, #72]	; (80020b4 <FLASH_Program_DoubleWord+0x5c>)
 800206a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800206e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002070:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <FLASH_Program_DoubleWord+0x5c>)
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	4a0f      	ldr	r2, [pc, #60]	; (80020b4 <FLASH_Program_DoubleWord+0x5c>)
 8002076:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800207a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800207c:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <FLASH_Program_DoubleWord+0x5c>)
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	4a0c      	ldr	r2, [pc, #48]	; (80020b4 <FLASH_Program_DoubleWord+0x5c>)
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800208e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002092:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	f04f 0400 	mov.w	r4, #0
 800209e:	0013      	movs	r3, r2
 80020a0:	2400      	movs	r4, #0
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	3204      	adds	r2, #4
 80020a6:	6013      	str	r3, [r2, #0]
}
 80020a8:	bf00      	nop
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc90      	pop	{r4, r7}
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40023c00 	.word	0x40023c00

080020b8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80020c2:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <FLASH_Program_Word+0x40>)
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	4a0c      	ldr	r2, [pc, #48]	; (80020f8 <FLASH_Program_Word+0x40>)
 80020c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <FLASH_Program_Word+0x40>)
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	4a09      	ldr	r2, [pc, #36]	; (80020f8 <FLASH_Program_Word+0x40>)
 80020d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020d8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80020da:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <FLASH_Program_Word+0x40>)
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	4a06      	ldr	r2, [pc, #24]	; (80020f8 <FLASH_Program_Word+0x40>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	601a      	str	r2, [r3, #0]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	40023c00 	.word	0x40023c00

080020fc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002108:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <FLASH_Program_HalfWord+0x44>)
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	4a0c      	ldr	r2, [pc, #48]	; (8002140 <FLASH_Program_HalfWord+0x44>)
 800210e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002112:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002114:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <FLASH_Program_HalfWord+0x44>)
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	4a09      	ldr	r2, [pc, #36]	; (8002140 <FLASH_Program_HalfWord+0x44>)
 800211a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800211e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002120:	4b07      	ldr	r3, [pc, #28]	; (8002140 <FLASH_Program_HalfWord+0x44>)
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	4a06      	ldr	r2, [pc, #24]	; (8002140 <FLASH_Program_HalfWord+0x44>)
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	887a      	ldrh	r2, [r7, #2]
 8002130:	801a      	strh	r2, [r3, #0]
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40023c00 	.word	0x40023c00

08002144 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <FLASH_Program_Byte+0x40>)
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	4a0b      	ldr	r2, [pc, #44]	; (8002184 <FLASH_Program_Byte+0x40>)
 8002156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800215a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <FLASH_Program_Byte+0x40>)
 800215e:	4a09      	ldr	r2, [pc, #36]	; (8002184 <FLASH_Program_Byte+0x40>)
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002164:	4b07      	ldr	r3, [pc, #28]	; (8002184 <FLASH_Program_Byte+0x40>)
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	4a06      	ldr	r2, [pc, #24]	; (8002184 <FLASH_Program_Byte+0x40>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	78fa      	ldrb	r2, [r7, #3]
 8002174:	701a      	strb	r2, [r3, #0]
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40023c00 	.word	0x40023c00

08002188 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800218c:	4b2f      	ldr	r3, [pc, #188]	; (800224c <FLASH_SetErrorCode+0xc4>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 0310 	and.w	r3, r3, #16
 8002194:	2b00      	cmp	r3, #0
 8002196:	d008      	beq.n	80021aa <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002198:	4b2d      	ldr	r3, [pc, #180]	; (8002250 <FLASH_SetErrorCode+0xc8>)
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	f043 0310 	orr.w	r3, r3, #16
 80021a0:	4a2b      	ldr	r2, [pc, #172]	; (8002250 <FLASH_SetErrorCode+0xc8>)
 80021a2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80021a4:	4b29      	ldr	r3, [pc, #164]	; (800224c <FLASH_SetErrorCode+0xc4>)
 80021a6:	2210      	movs	r2, #16
 80021a8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80021aa:	4b28      	ldr	r3, [pc, #160]	; (800224c <FLASH_SetErrorCode+0xc4>)
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	f003 0320 	and.w	r3, r3, #32
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d008      	beq.n	80021c8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80021b6:	4b26      	ldr	r3, [pc, #152]	; (8002250 <FLASH_SetErrorCode+0xc8>)
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	f043 0308 	orr.w	r3, r3, #8
 80021be:	4a24      	ldr	r2, [pc, #144]	; (8002250 <FLASH_SetErrorCode+0xc8>)
 80021c0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80021c2:	4b22      	ldr	r3, [pc, #136]	; (800224c <FLASH_SetErrorCode+0xc4>)
 80021c4:	2220      	movs	r2, #32
 80021c6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80021c8:	4b20      	ldr	r3, [pc, #128]	; (800224c <FLASH_SetErrorCode+0xc4>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d008      	beq.n	80021e6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80021d4:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <FLASH_SetErrorCode+0xc8>)
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	f043 0304 	orr.w	r3, r3, #4
 80021dc:	4a1c      	ldr	r2, [pc, #112]	; (8002250 <FLASH_SetErrorCode+0xc8>)
 80021de:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80021e0:	4b1a      	ldr	r3, [pc, #104]	; (800224c <FLASH_SetErrorCode+0xc4>)
 80021e2:	2240      	movs	r2, #64	; 0x40
 80021e4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80021e6:	4b19      	ldr	r3, [pc, #100]	; (800224c <FLASH_SetErrorCode+0xc4>)
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d008      	beq.n	8002204 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80021f2:	4b17      	ldr	r3, [pc, #92]	; (8002250 <FLASH_SetErrorCode+0xc8>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	f043 0302 	orr.w	r3, r3, #2
 80021fa:	4a15      	ldr	r2, [pc, #84]	; (8002250 <FLASH_SetErrorCode+0xc8>)
 80021fc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80021fe:	4b13      	ldr	r3, [pc, #76]	; (800224c <FLASH_SetErrorCode+0xc4>)
 8002200:	2280      	movs	r2, #128	; 0x80
 8002202:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002204:	4b11      	ldr	r3, [pc, #68]	; (800224c <FLASH_SetErrorCode+0xc4>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220c:	2b00      	cmp	r3, #0
 800220e:	d009      	beq.n	8002224 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002210:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <FLASH_SetErrorCode+0xc8>)
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	4a0d      	ldr	r2, [pc, #52]	; (8002250 <FLASH_SetErrorCode+0xc8>)
 800221a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <FLASH_SetErrorCode+0xc4>)
 800221e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002222:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002224:	4b09      	ldr	r3, [pc, #36]	; (800224c <FLASH_SetErrorCode+0xc4>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d008      	beq.n	8002242 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002230:	4b07      	ldr	r3, [pc, #28]	; (8002250 <FLASH_SetErrorCode+0xc8>)
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	f043 0320 	orr.w	r3, r3, #32
 8002238:	4a05      	ldr	r2, [pc, #20]	; (8002250 <FLASH_SetErrorCode+0xc8>)
 800223a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800223c:	4b03      	ldr	r3, [pc, #12]	; (800224c <FLASH_SetErrorCode+0xc4>)
 800223e:	2202      	movs	r2, #2
 8002240:	60da      	str	r2, [r3, #12]
  }
}
 8002242:	bf00      	nop
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	40023c00 	.word	0x40023c00
 8002250:	200006dc 	.word	0x200006dc

08002254 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002264:	78fb      	ldrb	r3, [r7, #3]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d102      	bne.n	8002270 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	e010      	b.n	8002292 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002270:	78fb      	ldrb	r3, [r7, #3]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d103      	bne.n	800227e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002276:	f44f 7380 	mov.w	r3, #256	; 0x100
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	e009      	b.n	8002292 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800227e:	78fb      	ldrb	r3, [r7, #3]
 8002280:	2b02      	cmp	r3, #2
 8002282:	d103      	bne.n	800228c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	e002      	b.n	8002292 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800228c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002290:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b0b      	cmp	r3, #11
 8002296:	d902      	bls.n	800229e <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3304      	adds	r3, #4
 800229c:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800229e:	4b13      	ldr	r3, [pc, #76]	; (80022ec <FLASH_Erase_Sector+0x98>)
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	4a12      	ldr	r2, [pc, #72]	; (80022ec <FLASH_Erase_Sector+0x98>)
 80022a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022a8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80022aa:	4b10      	ldr	r3, [pc, #64]	; (80022ec <FLASH_Erase_Sector+0x98>)
 80022ac:	691a      	ldr	r2, [r3, #16]
 80022ae:	490f      	ldr	r1, [pc, #60]	; (80022ec <FLASH_Erase_Sector+0x98>)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80022b6:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <FLASH_Erase_Sector+0x98>)
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	4a0c      	ldr	r2, [pc, #48]	; (80022ec <FLASH_Erase_Sector+0x98>)
 80022bc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80022c0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80022c2:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <FLASH_Erase_Sector+0x98>)
 80022c4:	691a      	ldr	r2, [r3, #16]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	4313      	orrs	r3, r2
 80022cc:	4a07      	ldr	r2, [pc, #28]	; (80022ec <FLASH_Erase_Sector+0x98>)
 80022ce:	f043 0302 	orr.w	r3, r3, #2
 80022d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <FLASH_Erase_Sector+0x98>)
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	4a04      	ldr	r2, [pc, #16]	; (80022ec <FLASH_Erase_Sector+0x98>)
 80022da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022de:	6113      	str	r3, [r2, #16]
}
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	40023c00 	.word	0x40023c00

080022f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b089      	sub	sp, #36	; 0x24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022fe:	2300      	movs	r3, #0
 8002300:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002302:	2300      	movs	r3, #0
 8002304:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
 800230a:	e177      	b.n	80025fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800230c:	2201      	movs	r2, #1
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	4013      	ands	r3, r2
 800231e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	429a      	cmp	r2, r3
 8002326:	f040 8166 	bne.w	80025f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d00b      	beq.n	800234a <HAL_GPIO_Init+0x5a>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d007      	beq.n	800234a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800233e:	2b11      	cmp	r3, #17
 8002340:	d003      	beq.n	800234a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b12      	cmp	r3, #18
 8002348:	d130      	bne.n	80023ac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2203      	movs	r2, #3
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002380:	2201      	movs	r2, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 0201 	and.w	r2, r3, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	2203      	movs	r2, #3
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d003      	beq.n	80023ec <HAL_GPIO_Init+0xfc>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b12      	cmp	r3, #18
 80023ea:	d123      	bne.n	8002434 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	08da      	lsrs	r2, r3, #3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3208      	adds	r2, #8
 80023f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	220f      	movs	r2, #15
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	691a      	ldr	r2, [r3, #16]
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	08da      	lsrs	r2, r3, #3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3208      	adds	r2, #8
 800242e:	69b9      	ldr	r1, [r7, #24]
 8002430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	2203      	movs	r2, #3
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 0203 	and.w	r2, r3, #3
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 80c0 	beq.w	80025f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	4b65      	ldr	r3, [pc, #404]	; (8002610 <HAL_GPIO_Init+0x320>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	4a64      	ldr	r2, [pc, #400]	; (8002610 <HAL_GPIO_Init+0x320>)
 8002480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002484:	6453      	str	r3, [r2, #68]	; 0x44
 8002486:	4b62      	ldr	r3, [pc, #392]	; (8002610 <HAL_GPIO_Init+0x320>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002492:	4a60      	ldr	r2, [pc, #384]	; (8002614 <HAL_GPIO_Init+0x324>)
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	089b      	lsrs	r3, r3, #2
 8002498:	3302      	adds	r3, #2
 800249a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	220f      	movs	r2, #15
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a57      	ldr	r2, [pc, #348]	; (8002618 <HAL_GPIO_Init+0x328>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d037      	beq.n	800252e <HAL_GPIO_Init+0x23e>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a56      	ldr	r2, [pc, #344]	; (800261c <HAL_GPIO_Init+0x32c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d031      	beq.n	800252a <HAL_GPIO_Init+0x23a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a55      	ldr	r2, [pc, #340]	; (8002620 <HAL_GPIO_Init+0x330>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d02b      	beq.n	8002526 <HAL_GPIO_Init+0x236>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a54      	ldr	r2, [pc, #336]	; (8002624 <HAL_GPIO_Init+0x334>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d025      	beq.n	8002522 <HAL_GPIO_Init+0x232>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a53      	ldr	r2, [pc, #332]	; (8002628 <HAL_GPIO_Init+0x338>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d01f      	beq.n	800251e <HAL_GPIO_Init+0x22e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a52      	ldr	r2, [pc, #328]	; (800262c <HAL_GPIO_Init+0x33c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d019      	beq.n	800251a <HAL_GPIO_Init+0x22a>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a51      	ldr	r2, [pc, #324]	; (8002630 <HAL_GPIO_Init+0x340>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d013      	beq.n	8002516 <HAL_GPIO_Init+0x226>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a50      	ldr	r2, [pc, #320]	; (8002634 <HAL_GPIO_Init+0x344>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d00d      	beq.n	8002512 <HAL_GPIO_Init+0x222>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a4f      	ldr	r2, [pc, #316]	; (8002638 <HAL_GPIO_Init+0x348>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d007      	beq.n	800250e <HAL_GPIO_Init+0x21e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a4e      	ldr	r2, [pc, #312]	; (800263c <HAL_GPIO_Init+0x34c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d101      	bne.n	800250a <HAL_GPIO_Init+0x21a>
 8002506:	2309      	movs	r3, #9
 8002508:	e012      	b.n	8002530 <HAL_GPIO_Init+0x240>
 800250a:	230a      	movs	r3, #10
 800250c:	e010      	b.n	8002530 <HAL_GPIO_Init+0x240>
 800250e:	2308      	movs	r3, #8
 8002510:	e00e      	b.n	8002530 <HAL_GPIO_Init+0x240>
 8002512:	2307      	movs	r3, #7
 8002514:	e00c      	b.n	8002530 <HAL_GPIO_Init+0x240>
 8002516:	2306      	movs	r3, #6
 8002518:	e00a      	b.n	8002530 <HAL_GPIO_Init+0x240>
 800251a:	2305      	movs	r3, #5
 800251c:	e008      	b.n	8002530 <HAL_GPIO_Init+0x240>
 800251e:	2304      	movs	r3, #4
 8002520:	e006      	b.n	8002530 <HAL_GPIO_Init+0x240>
 8002522:	2303      	movs	r3, #3
 8002524:	e004      	b.n	8002530 <HAL_GPIO_Init+0x240>
 8002526:	2302      	movs	r3, #2
 8002528:	e002      	b.n	8002530 <HAL_GPIO_Init+0x240>
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <HAL_GPIO_Init+0x240>
 800252e:	2300      	movs	r3, #0
 8002530:	69fa      	ldr	r2, [r7, #28]
 8002532:	f002 0203 	and.w	r2, r2, #3
 8002536:	0092      	lsls	r2, r2, #2
 8002538:	4093      	lsls	r3, r2
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002540:	4934      	ldr	r1, [pc, #208]	; (8002614 <HAL_GPIO_Init+0x324>)
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	089b      	lsrs	r3, r3, #2
 8002546:	3302      	adds	r3, #2
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800254e:	4b3c      	ldr	r3, [pc, #240]	; (8002640 <HAL_GPIO_Init+0x350>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	43db      	mvns	r3, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4013      	ands	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002572:	4a33      	ldr	r2, [pc, #204]	; (8002640 <HAL_GPIO_Init+0x350>)
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002578:	4b31      	ldr	r3, [pc, #196]	; (8002640 <HAL_GPIO_Init+0x350>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800259c:	4a28      	ldr	r2, [pc, #160]	; (8002640 <HAL_GPIO_Init+0x350>)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025a2:	4b27      	ldr	r3, [pc, #156]	; (8002640 <HAL_GPIO_Init+0x350>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	43db      	mvns	r3, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4013      	ands	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025c6:	4a1e      	ldr	r2, [pc, #120]	; (8002640 <HAL_GPIO_Init+0x350>)
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025cc:	4b1c      	ldr	r3, [pc, #112]	; (8002640 <HAL_GPIO_Init+0x350>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025f0:	4a13      	ldr	r2, [pc, #76]	; (8002640 <HAL_GPIO_Init+0x350>)
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3301      	adds	r3, #1
 80025fa:	61fb      	str	r3, [r7, #28]
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	2b0f      	cmp	r3, #15
 8002600:	f67f ae84 	bls.w	800230c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002604:	bf00      	nop
 8002606:	3724      	adds	r7, #36	; 0x24
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	40023800 	.word	0x40023800
 8002614:	40013800 	.word	0x40013800
 8002618:	40020000 	.word	0x40020000
 800261c:	40020400 	.word	0x40020400
 8002620:	40020800 	.word	0x40020800
 8002624:	40020c00 	.word	0x40020c00
 8002628:	40021000 	.word	0x40021000
 800262c:	40021400 	.word	0x40021400
 8002630:	40021800 	.word	0x40021800
 8002634:	40021c00 	.word	0x40021c00
 8002638:	40022000 	.word	0x40022000
 800263c:	40022400 	.word	0x40022400
 8002640:	40013c00 	.word	0x40013c00

08002644 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691a      	ldr	r2, [r3, #16]
 8002654:	887b      	ldrh	r3, [r7, #2]
 8002656:	4013      	ands	r3, r2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800265c:	2301      	movs	r3, #1
 800265e:	73fb      	strb	r3, [r7, #15]
 8002660:	e001      	b.n	8002666 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002662:	2300      	movs	r3, #0
 8002664:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002666:	7bfb      	ldrb	r3, [r7, #15]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	807b      	strh	r3, [r7, #2]
 8002680:	4613      	mov	r3, r2
 8002682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002684:	787b      	ldrb	r3, [r7, #1]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800268a:	887a      	ldrh	r2, [r7, #2]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002690:	e003      	b.n	800269a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002692:	887b      	ldrh	r3, [r7, #2]
 8002694:	041a      	lsls	r2, r3, #16
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	619a      	str	r2, [r3, #24]
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
	...

080026a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e11f      	b.n	80028fa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d106      	bne.n	80026d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7fe fd3e 	bl	8001150 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2224      	movs	r2, #36	; 0x24
 80026d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0201 	bic.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800270a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800270c:	f000 fd94 	bl	8003238 <HAL_RCC_GetPCLK1Freq>
 8002710:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	4a7b      	ldr	r2, [pc, #492]	; (8002904 <HAL_I2C_Init+0x25c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d807      	bhi.n	800272c <HAL_I2C_Init+0x84>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4a7a      	ldr	r2, [pc, #488]	; (8002908 <HAL_I2C_Init+0x260>)
 8002720:	4293      	cmp	r3, r2
 8002722:	bf94      	ite	ls
 8002724:	2301      	movls	r3, #1
 8002726:	2300      	movhi	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	e006      	b.n	800273a <HAL_I2C_Init+0x92>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4a77      	ldr	r2, [pc, #476]	; (800290c <HAL_I2C_Init+0x264>)
 8002730:	4293      	cmp	r3, r2
 8002732:	bf94      	ite	ls
 8002734:	2301      	movls	r3, #1
 8002736:	2300      	movhi	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e0db      	b.n	80028fa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4a72      	ldr	r2, [pc, #456]	; (8002910 <HAL_I2C_Init+0x268>)
 8002746:	fba2 2303 	umull	r2, r3, r2, r3
 800274a:	0c9b      	lsrs	r3, r3, #18
 800274c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	430a      	orrs	r2, r1
 8002760:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	4a64      	ldr	r2, [pc, #400]	; (8002904 <HAL_I2C_Init+0x25c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d802      	bhi.n	800277c <HAL_I2C_Init+0xd4>
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	3301      	adds	r3, #1
 800277a:	e009      	b.n	8002790 <HAL_I2C_Init+0xe8>
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002782:	fb02 f303 	mul.w	r3, r2, r3
 8002786:	4a63      	ldr	r2, [pc, #396]	; (8002914 <HAL_I2C_Init+0x26c>)
 8002788:	fba2 2303 	umull	r2, r3, r2, r3
 800278c:	099b      	lsrs	r3, r3, #6
 800278e:	3301      	adds	r3, #1
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6812      	ldr	r2, [r2, #0]
 8002794:	430b      	orrs	r3, r1
 8002796:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	4956      	ldr	r1, [pc, #344]	; (8002904 <HAL_I2C_Init+0x25c>)
 80027ac:	428b      	cmp	r3, r1
 80027ae:	d80d      	bhi.n	80027cc <HAL_I2C_Init+0x124>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	1e59      	subs	r1, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80027be:	3301      	adds	r3, #1
 80027c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	bf38      	it	cc
 80027c8:	2304      	movcc	r3, #4
 80027ca:	e04f      	b.n	800286c <HAL_I2C_Init+0x1c4>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d111      	bne.n	80027f8 <HAL_I2C_Init+0x150>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	1e58      	subs	r0, r3, #1
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6859      	ldr	r1, [r3, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	440b      	add	r3, r1
 80027e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027e6:	3301      	adds	r3, #1
 80027e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	bf0c      	ite	eq
 80027f0:	2301      	moveq	r3, #1
 80027f2:	2300      	movne	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	e012      	b.n	800281e <HAL_I2C_Init+0x176>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1e58      	subs	r0, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6859      	ldr	r1, [r3, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	0099      	lsls	r1, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	fbb0 f3f3 	udiv	r3, r0, r3
 800280e:	3301      	adds	r3, #1
 8002810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002814:	2b00      	cmp	r3, #0
 8002816:	bf0c      	ite	eq
 8002818:	2301      	moveq	r3, #1
 800281a:	2300      	movne	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_I2C_Init+0x17e>
 8002822:	2301      	movs	r3, #1
 8002824:	e022      	b.n	800286c <HAL_I2C_Init+0x1c4>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10e      	bne.n	800284c <HAL_I2C_Init+0x1a4>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	1e58      	subs	r0, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6859      	ldr	r1, [r3, #4]
 8002836:	460b      	mov	r3, r1
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	440b      	add	r3, r1
 800283c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002840:	3301      	adds	r3, #1
 8002842:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800284a:	e00f      	b.n	800286c <HAL_I2C_Init+0x1c4>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	1e58      	subs	r0, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6859      	ldr	r1, [r3, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	0099      	lsls	r1, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002862:	3301      	adds	r3, #1
 8002864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002868:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	6809      	ldr	r1, [r1, #0]
 8002870:	4313      	orrs	r3, r2
 8002872:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69da      	ldr	r2, [r3, #28]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800289a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6911      	ldr	r1, [r2, #16]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	68d2      	ldr	r2, [r2, #12]
 80028a6:	4311      	orrs	r1, r2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	430b      	orrs	r3, r1
 80028ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695a      	ldr	r2, [r3, #20]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2220      	movs	r2, #32
 80028e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	000186a0 	.word	0x000186a0
 8002908:	001e847f 	.word	0x001e847f
 800290c:	003d08ff 	.word	0x003d08ff
 8002910:	431bde83 	.word	0x431bde83
 8002914:	10624dd3 	.word	0x10624dd3

08002918 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b20      	cmp	r3, #32
 800292c:	d129      	bne.n	8002982 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2224      	movs	r2, #36	; 0x24
 8002932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0201 	bic.w	r2, r2, #1
 8002944:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0210 	bic.w	r2, r2, #16
 8002954:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f042 0201 	orr.w	r2, r2, #1
 8002974:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2220      	movs	r2, #32
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	e000      	b.n	8002984 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002982:	2302      	movs	r3, #2
  }
}
 8002984:	4618      	mov	r0, r3
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b20      	cmp	r3, #32
 80029a8:	d12a      	bne.n	8002a00 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2224      	movs	r2, #36	; 0x24
 80029ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0201 	bic.w	r2, r2, #1
 80029c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80029ca:	89fb      	ldrh	r3, [r7, #14]
 80029cc:	f023 030f 	bic.w	r3, r3, #15
 80029d0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	89fb      	ldrh	r3, [r7, #14]
 80029d8:	4313      	orrs	r3, r2
 80029da:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	89fa      	ldrh	r2, [r7, #14]
 80029e2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2220      	movs	r2, #32
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80029fc:	2300      	movs	r3, #0
 80029fe:	e000      	b.n	8002a02 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002a00:	2302      	movs	r3, #2
  }
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
	...

08002a10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e25b      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d075      	beq.n	8002b1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a2e:	4ba3      	ldr	r3, [pc, #652]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 030c 	and.w	r3, r3, #12
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d00c      	beq.n	8002a54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a3a:	4ba0      	ldr	r3, [pc, #640]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d112      	bne.n	8002a6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a46:	4b9d      	ldr	r3, [pc, #628]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a52:	d10b      	bne.n	8002a6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a54:	4b99      	ldr	r3, [pc, #612]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d05b      	beq.n	8002b18 <HAL_RCC_OscConfig+0x108>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d157      	bne.n	8002b18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e236      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a74:	d106      	bne.n	8002a84 <HAL_RCC_OscConfig+0x74>
 8002a76:	4b91      	ldr	r3, [pc, #580]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a90      	ldr	r2, [pc, #576]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	e01d      	b.n	8002ac0 <HAL_RCC_OscConfig+0xb0>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a8c:	d10c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x98>
 8002a8e:	4b8b      	ldr	r3, [pc, #556]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a8a      	ldr	r2, [pc, #552]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	4b88      	ldr	r3, [pc, #544]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a87      	ldr	r2, [pc, #540]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	e00b      	b.n	8002ac0 <HAL_RCC_OscConfig+0xb0>
 8002aa8:	4b84      	ldr	r3, [pc, #528]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a83      	ldr	r2, [pc, #524]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab2:	6013      	str	r3, [r2, #0]
 8002ab4:	4b81      	ldr	r3, [pc, #516]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a80      	ldr	r2, [pc, #512]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d013      	beq.n	8002af0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fe2c 	bl	8001724 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ad0:	f7fe fe28 	bl	8001724 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b64      	cmp	r3, #100	; 0x64
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e1fb      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae2:	4b76      	ldr	r3, [pc, #472]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0f0      	beq.n	8002ad0 <HAL_RCC_OscConfig+0xc0>
 8002aee:	e014      	b.n	8002b1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fe fe18 	bl	8001724 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af8:	f7fe fe14 	bl	8001724 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	; 0x64
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e1e7      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b0a:	4b6c      	ldr	r3, [pc, #432]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0xe8>
 8002b16:	e000      	b.n	8002b1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d063      	beq.n	8002bee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b26:	4b65      	ldr	r3, [pc, #404]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 030c 	and.w	r3, r3, #12
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00b      	beq.n	8002b4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b32:	4b62      	ldr	r3, [pc, #392]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d11c      	bne.n	8002b78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b3e:	4b5f      	ldr	r3, [pc, #380]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d116      	bne.n	8002b78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b4a:	4b5c      	ldr	r3, [pc, #368]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d005      	beq.n	8002b62 <HAL_RCC_OscConfig+0x152>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d001      	beq.n	8002b62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e1bb      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b62:	4b56      	ldr	r3, [pc, #344]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	4952      	ldr	r1, [pc, #328]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b76:	e03a      	b.n	8002bee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d020      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b80:	4b4f      	ldr	r3, [pc, #316]	; (8002cc0 <HAL_RCC_OscConfig+0x2b0>)
 8002b82:	2201      	movs	r2, #1
 8002b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b86:	f7fe fdcd 	bl	8001724 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b8e:	f7fe fdc9 	bl	8001724 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e19c      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba0:	4b46      	ldr	r3, [pc, #280]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0f0      	beq.n	8002b8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bac:	4b43      	ldr	r3, [pc, #268]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	4940      	ldr	r1, [pc, #256]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	600b      	str	r3, [r1, #0]
 8002bc0:	e015      	b.n	8002bee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bc2:	4b3f      	ldr	r3, [pc, #252]	; (8002cc0 <HAL_RCC_OscConfig+0x2b0>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc8:	f7fe fdac 	bl	8001724 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bd0:	f7fe fda8 	bl	8001724 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e17b      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be2:	4b36      	ldr	r3, [pc, #216]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f0      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d030      	beq.n	8002c5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d016      	beq.n	8002c30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c02:	4b30      	ldr	r3, [pc, #192]	; (8002cc4 <HAL_RCC_OscConfig+0x2b4>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c08:	f7fe fd8c 	bl	8001724 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c10:	f7fe fd88 	bl	8001724 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e15b      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c22:	4b26      	ldr	r3, [pc, #152]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0x200>
 8002c2e:	e015      	b.n	8002c5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c30:	4b24      	ldr	r3, [pc, #144]	; (8002cc4 <HAL_RCC_OscConfig+0x2b4>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c36:	f7fe fd75 	bl	8001724 <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c3e:	f7fe fd71 	bl	8001724 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e144      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c50:	4b1a      	ldr	r3, [pc, #104]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1f0      	bne.n	8002c3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80a0 	beq.w	8002daa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c6e:	4b13      	ldr	r3, [pc, #76]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10f      	bne.n	8002c9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	4b0f      	ldr	r3, [pc, #60]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	4a0e      	ldr	r2, [pc, #56]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c88:	6413      	str	r3, [r2, #64]	; 0x40
 8002c8a:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c92:	60bb      	str	r3, [r7, #8]
 8002c94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c96:	2301      	movs	r3, #1
 8002c98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9a:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_RCC_OscConfig+0x2b8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d121      	bne.n	8002cea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ca6:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <HAL_RCC_OscConfig+0x2b8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a07      	ldr	r2, [pc, #28]	; (8002cc8 <HAL_RCC_OscConfig+0x2b8>)
 8002cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cb2:	f7fe fd37 	bl	8001724 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb8:	e011      	b.n	8002cde <HAL_RCC_OscConfig+0x2ce>
 8002cba:	bf00      	nop
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	42470000 	.word	0x42470000
 8002cc4:	42470e80 	.word	0x42470e80
 8002cc8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ccc:	f7fe fd2a 	bl	8001724 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e0fd      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cde:	4b81      	ldr	r3, [pc, #516]	; (8002ee4 <HAL_RCC_OscConfig+0x4d4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f0      	beq.n	8002ccc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d106      	bne.n	8002d00 <HAL_RCC_OscConfig+0x2f0>
 8002cf2:	4b7d      	ldr	r3, [pc, #500]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf6:	4a7c      	ldr	r2, [pc, #496]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cfe:	e01c      	b.n	8002d3a <HAL_RCC_OscConfig+0x32a>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	2b05      	cmp	r3, #5
 8002d06:	d10c      	bne.n	8002d22 <HAL_RCC_OscConfig+0x312>
 8002d08:	4b77      	ldr	r3, [pc, #476]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0c:	4a76      	ldr	r2, [pc, #472]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002d0e:	f043 0304 	orr.w	r3, r3, #4
 8002d12:	6713      	str	r3, [r2, #112]	; 0x70
 8002d14:	4b74      	ldr	r3, [pc, #464]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d18:	4a73      	ldr	r2, [pc, #460]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d20:	e00b      	b.n	8002d3a <HAL_RCC_OscConfig+0x32a>
 8002d22:	4b71      	ldr	r3, [pc, #452]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d26:	4a70      	ldr	r2, [pc, #448]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002d28:	f023 0301 	bic.w	r3, r3, #1
 8002d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2e:	4b6e      	ldr	r3, [pc, #440]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d32:	4a6d      	ldr	r2, [pc, #436]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002d34:	f023 0304 	bic.w	r3, r3, #4
 8002d38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d015      	beq.n	8002d6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d42:	f7fe fcef 	bl	8001724 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d48:	e00a      	b.n	8002d60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d4a:	f7fe fceb 	bl	8001724 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e0bc      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d60:	4b61      	ldr	r3, [pc, #388]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0ee      	beq.n	8002d4a <HAL_RCC_OscConfig+0x33a>
 8002d6c:	e014      	b.n	8002d98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6e:	f7fe fcd9 	bl	8001724 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d74:	e00a      	b.n	8002d8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d76:	f7fe fcd5 	bl	8001724 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e0a6      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d8c:	4b56      	ldr	r3, [pc, #344]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1ee      	bne.n	8002d76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d98:	7dfb      	ldrb	r3, [r7, #23]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d105      	bne.n	8002daa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d9e:	4b52      	ldr	r3, [pc, #328]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	4a51      	ldr	r2, [pc, #324]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002da4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002da8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 8092 	beq.w	8002ed8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002db4:	4b4c      	ldr	r3, [pc, #304]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 030c 	and.w	r3, r3, #12
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d05c      	beq.n	8002e7a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d141      	bne.n	8002e4c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc8:	4b48      	ldr	r3, [pc, #288]	; (8002eec <HAL_RCC_OscConfig+0x4dc>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dce:	f7fe fca9 	bl	8001724 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd6:	f7fe fca5 	bl	8001724 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e078      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de8:	4b3f      	ldr	r3, [pc, #252]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1f0      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	69da      	ldr	r2, [r3, #28]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	019b      	lsls	r3, r3, #6
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0a:	085b      	lsrs	r3, r3, #1
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	041b      	lsls	r3, r3, #16
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	061b      	lsls	r3, r3, #24
 8002e18:	4933      	ldr	r1, [pc, #204]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e1e:	4b33      	ldr	r3, [pc, #204]	; (8002eec <HAL_RCC_OscConfig+0x4dc>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7fe fc7e 	bl	8001724 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e2c:	f7fe fc7a 	bl	8001724 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e04d      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3e:	4b2a      	ldr	r3, [pc, #168]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0x41c>
 8002e4a:	e045      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4c:	4b27      	ldr	r3, [pc, #156]	; (8002eec <HAL_RCC_OscConfig+0x4dc>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e52:	f7fe fc67 	bl	8001724 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e5a:	f7fe fc63 	bl	8001724 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e036      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1f0      	bne.n	8002e5a <HAL_RCC_OscConfig+0x44a>
 8002e78:	e02e      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d101      	bne.n	8002e86 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e029      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e86:	4b18      	ldr	r3, [pc, #96]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d11c      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d115      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002eae:	4013      	ands	r3, r2
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d10d      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d106      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d001      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40007000 	.word	0x40007000
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	42470060 	.word	0x42470060

08002ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e0cc      	b.n	800309e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f04:	4b68      	ldr	r3, [pc, #416]	; (80030a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 030f 	and.w	r3, r3, #15
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d90c      	bls.n	8002f2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f12:	4b65      	ldr	r3, [pc, #404]	; (80030a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	b2d2      	uxtb	r2, r2
 8002f18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1a:	4b63      	ldr	r3, [pc, #396]	; (80030a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d001      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e0b8      	b.n	800309e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d020      	beq.n	8002f7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f44:	4b59      	ldr	r3, [pc, #356]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	4a58      	ldr	r2, [pc, #352]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d005      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f5c:	4b53      	ldr	r3, [pc, #332]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	4a52      	ldr	r2, [pc, #328]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f68:	4b50      	ldr	r3, [pc, #320]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	494d      	ldr	r1, [pc, #308]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d044      	beq.n	8003010 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d107      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8e:	4b47      	ldr	r3, [pc, #284]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d119      	bne.n	8002fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e07f      	b.n	800309e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d003      	beq.n	8002fae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	d107      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fae:	4b3f      	ldr	r3, [pc, #252]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d109      	bne.n	8002fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e06f      	b.n	800309e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fbe:	4b3b      	ldr	r3, [pc, #236]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e067      	b.n	800309e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fce:	4b37      	ldr	r3, [pc, #220]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f023 0203 	bic.w	r2, r3, #3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4934      	ldr	r1, [pc, #208]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fe0:	f7fe fba0 	bl	8001724 <HAL_GetTick>
 8002fe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe6:	e00a      	b.n	8002ffe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe8:	f7fe fb9c 	bl	8001724 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e04f      	b.n	800309e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffe:	4b2b      	ldr	r3, [pc, #172]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 020c 	and.w	r2, r3, #12
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	429a      	cmp	r2, r3
 800300e:	d1eb      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003010:	4b25      	ldr	r3, [pc, #148]	; (80030a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 030f 	and.w	r3, r3, #15
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	429a      	cmp	r2, r3
 800301c:	d20c      	bcs.n	8003038 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301e:	4b22      	ldr	r3, [pc, #136]	; (80030a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003026:	4b20      	ldr	r3, [pc, #128]	; (80030a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	429a      	cmp	r2, r3
 8003032:	d001      	beq.n	8003038 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e032      	b.n	800309e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003044:	4b19      	ldr	r3, [pc, #100]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	4916      	ldr	r1, [pc, #88]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8003052:	4313      	orrs	r3, r2
 8003054:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	2b00      	cmp	r3, #0
 8003060:	d009      	beq.n	8003076 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003062:	4b12      	ldr	r3, [pc, #72]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	490e      	ldr	r1, [pc, #56]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	4313      	orrs	r3, r2
 8003074:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003076:	f000 f821 	bl	80030bc <HAL_RCC_GetSysClockFreq>
 800307a:	4601      	mov	r1, r0
 800307c:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	091b      	lsrs	r3, r3, #4
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	4a0a      	ldr	r2, [pc, #40]	; (80030b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003088:	5cd3      	ldrb	r3, [r2, r3]
 800308a:	fa21 f303 	lsr.w	r3, r1, r3
 800308e:	4a09      	ldr	r2, [pc, #36]	; (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003090:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003092:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f7fe fb00 	bl	800169c <HAL_InitTick>

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40023c00 	.word	0x40023c00
 80030ac:	40023800 	.word	0x40023800
 80030b0:	0800d21c 	.word	0x0800d21c
 80030b4:	20000000 	.word	0x20000000
 80030b8:	20000004 	.word	0x20000004

080030bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	607b      	str	r3, [r7, #4]
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	2300      	movs	r3, #0
 80030cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030d2:	4b50      	ldr	r3, [pc, #320]	; (8003214 <HAL_RCC_GetSysClockFreq+0x158>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d007      	beq.n	80030ee <HAL_RCC_GetSysClockFreq+0x32>
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d008      	beq.n	80030f4 <HAL_RCC_GetSysClockFreq+0x38>
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f040 808d 	bne.w	8003202 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030e8:	4b4b      	ldr	r3, [pc, #300]	; (8003218 <HAL_RCC_GetSysClockFreq+0x15c>)
 80030ea:	60bb      	str	r3, [r7, #8]
       break;
 80030ec:	e08c      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030ee:	4b4b      	ldr	r3, [pc, #300]	; (800321c <HAL_RCC_GetSysClockFreq+0x160>)
 80030f0:	60bb      	str	r3, [r7, #8]
      break;
 80030f2:	e089      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030f4:	4b47      	ldr	r3, [pc, #284]	; (8003214 <HAL_RCC_GetSysClockFreq+0x158>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030fe:	4b45      	ldr	r3, [pc, #276]	; (8003214 <HAL_RCC_GetSysClockFreq+0x158>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d023      	beq.n	8003152 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800310a:	4b42      	ldr	r3, [pc, #264]	; (8003214 <HAL_RCC_GetSysClockFreq+0x158>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	099b      	lsrs	r3, r3, #6
 8003110:	f04f 0400 	mov.w	r4, #0
 8003114:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	ea03 0501 	and.w	r5, r3, r1
 8003120:	ea04 0602 	and.w	r6, r4, r2
 8003124:	4a3d      	ldr	r2, [pc, #244]	; (800321c <HAL_RCC_GetSysClockFreq+0x160>)
 8003126:	fb02 f106 	mul.w	r1, r2, r6
 800312a:	2200      	movs	r2, #0
 800312c:	fb02 f205 	mul.w	r2, r2, r5
 8003130:	440a      	add	r2, r1
 8003132:	493a      	ldr	r1, [pc, #232]	; (800321c <HAL_RCC_GetSysClockFreq+0x160>)
 8003134:	fba5 0101 	umull	r0, r1, r5, r1
 8003138:	1853      	adds	r3, r2, r1
 800313a:	4619      	mov	r1, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f04f 0400 	mov.w	r4, #0
 8003142:	461a      	mov	r2, r3
 8003144:	4623      	mov	r3, r4
 8003146:	f7fd fdaf 	bl	8000ca8 <__aeabi_uldivmod>
 800314a:	4603      	mov	r3, r0
 800314c:	460c      	mov	r4, r1
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	e049      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003152:	4b30      	ldr	r3, [pc, #192]	; (8003214 <HAL_RCC_GetSysClockFreq+0x158>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	099b      	lsrs	r3, r3, #6
 8003158:	f04f 0400 	mov.w	r4, #0
 800315c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	ea03 0501 	and.w	r5, r3, r1
 8003168:	ea04 0602 	and.w	r6, r4, r2
 800316c:	4629      	mov	r1, r5
 800316e:	4632      	mov	r2, r6
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	f04f 0400 	mov.w	r4, #0
 8003178:	0154      	lsls	r4, r2, #5
 800317a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800317e:	014b      	lsls	r3, r1, #5
 8003180:	4619      	mov	r1, r3
 8003182:	4622      	mov	r2, r4
 8003184:	1b49      	subs	r1, r1, r5
 8003186:	eb62 0206 	sbc.w	r2, r2, r6
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	f04f 0400 	mov.w	r4, #0
 8003192:	0194      	lsls	r4, r2, #6
 8003194:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003198:	018b      	lsls	r3, r1, #6
 800319a:	1a5b      	subs	r3, r3, r1
 800319c:	eb64 0402 	sbc.w	r4, r4, r2
 80031a0:	f04f 0100 	mov.w	r1, #0
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	00e2      	lsls	r2, r4, #3
 80031aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80031ae:	00d9      	lsls	r1, r3, #3
 80031b0:	460b      	mov	r3, r1
 80031b2:	4614      	mov	r4, r2
 80031b4:	195b      	adds	r3, r3, r5
 80031b6:	eb44 0406 	adc.w	r4, r4, r6
 80031ba:	f04f 0100 	mov.w	r1, #0
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	02a2      	lsls	r2, r4, #10
 80031c4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80031c8:	0299      	lsls	r1, r3, #10
 80031ca:	460b      	mov	r3, r1
 80031cc:	4614      	mov	r4, r2
 80031ce:	4618      	mov	r0, r3
 80031d0:	4621      	mov	r1, r4
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f04f 0400 	mov.w	r4, #0
 80031d8:	461a      	mov	r2, r3
 80031da:	4623      	mov	r3, r4
 80031dc:	f7fd fd64 	bl	8000ca8 <__aeabi_uldivmod>
 80031e0:	4603      	mov	r3, r0
 80031e2:	460c      	mov	r4, r1
 80031e4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031e6:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <HAL_RCC_GetSysClockFreq+0x158>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	0c1b      	lsrs	r3, r3, #16
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	3301      	adds	r3, #1
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fe:	60bb      	str	r3, [r7, #8]
      break;
 8003200:	e002      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003202:	4b05      	ldr	r3, [pc, #20]	; (8003218 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003204:	60bb      	str	r3, [r7, #8]
      break;
 8003206:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003208:	68bb      	ldr	r3, [r7, #8]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003212:	bf00      	nop
 8003214:	40023800 	.word	0x40023800
 8003218:	00f42400 	.word	0x00f42400
 800321c:	017d7840 	.word	0x017d7840

08003220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003224:	4b03      	ldr	r3, [pc, #12]	; (8003234 <HAL_RCC_GetHCLKFreq+0x14>)
 8003226:	681b      	ldr	r3, [r3, #0]
}
 8003228:	4618      	mov	r0, r3
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	20000000 	.word	0x20000000

08003238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800323c:	f7ff fff0 	bl	8003220 <HAL_RCC_GetHCLKFreq>
 8003240:	4601      	mov	r1, r0
 8003242:	4b05      	ldr	r3, [pc, #20]	; (8003258 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	0a9b      	lsrs	r3, r3, #10
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	4a03      	ldr	r2, [pc, #12]	; (800325c <HAL_RCC_GetPCLK1Freq+0x24>)
 800324e:	5cd3      	ldrb	r3, [r2, r3]
 8003250:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003254:	4618      	mov	r0, r3
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40023800 	.word	0x40023800
 800325c:	0800d22c 	.word	0x0800d22c

08003260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003264:	f7ff ffdc 	bl	8003220 <HAL_RCC_GetHCLKFreq>
 8003268:	4601      	mov	r1, r0
 800326a:	4b05      	ldr	r3, [pc, #20]	; (8003280 <HAL_RCC_GetPCLK2Freq+0x20>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	0b5b      	lsrs	r3, r3, #13
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	4a03      	ldr	r2, [pc, #12]	; (8003284 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003276:	5cd3      	ldrb	r3, [r2, r3]
 8003278:	fa21 f303 	lsr.w	r3, r1, r3
}
 800327c:	4618      	mov	r0, r3
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40023800 	.word	0x40023800
 8003284:	0800d22c 	.word	0x0800d22c

08003288 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10b      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d105      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d075      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80032bc:	4bad      	ldr	r3, [pc, #692]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80032c2:	f7fe fa2f 	bl	8001724 <HAL_GetTick>
 80032c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032c8:	e008      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80032ca:	f7fe fa2b 	bl	8001724 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e18b      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032dc:	4ba6      	ldr	r3, [pc, #664]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1f0      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d009      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	019a      	lsls	r2, r3, #6
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	071b      	lsls	r3, r3, #28
 8003300:	499d      	ldr	r1, [pc, #628]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003302:	4313      	orrs	r3, r2
 8003304:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d01f      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003314:	4b98      	ldr	r3, [pc, #608]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800331a:	0f1b      	lsrs	r3, r3, #28
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	019a      	lsls	r2, r3, #6
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	061b      	lsls	r3, r3, #24
 800332e:	431a      	orrs	r2, r3
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	071b      	lsls	r3, r3, #28
 8003334:	4990      	ldr	r1, [pc, #576]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003336:	4313      	orrs	r3, r2
 8003338:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800333c:	4b8e      	ldr	r3, [pc, #568]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800333e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003342:	f023 021f 	bic.w	r2, r3, #31
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	3b01      	subs	r3, #1
 800334c:	498a      	ldr	r1, [pc, #552]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800334e:	4313      	orrs	r3, r2
 8003350:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00d      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	019a      	lsls	r2, r3, #6
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	061b      	lsls	r3, r3, #24
 800336c:	431a      	orrs	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	071b      	lsls	r3, r3, #28
 8003374:	4980      	ldr	r1, [pc, #512]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003376:	4313      	orrs	r3, r2
 8003378:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800337c:	4b7d      	ldr	r3, [pc, #500]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800337e:	2201      	movs	r2, #1
 8003380:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003382:	f7fe f9cf 	bl	8001724 <HAL_GetTick>
 8003386:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003388:	e008      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800338a:	f7fe f9cb 	bl	8001724 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e12b      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800339c:	4b76      	ldr	r3, [pc, #472]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f0      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d105      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d079      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80033c0:	4b6e      	ldr	r3, [pc, #440]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80033c6:	f7fe f9ad 	bl	8001724 <HAL_GetTick>
 80033ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033cc:	e008      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80033ce:	f7fe f9a9 	bl	8001724 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e109      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033e0:	4b65      	ldr	r3, [pc, #404]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033ec:	d0ef      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d020      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80033fa:	4b5f      	ldr	r3, [pc, #380]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003400:	0f1b      	lsrs	r3, r3, #28
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	019a      	lsls	r2, r3, #6
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	061b      	lsls	r3, r3, #24
 8003414:	431a      	orrs	r2, r3
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	071b      	lsls	r3, r3, #28
 800341a:	4957      	ldr	r1, [pc, #348]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800341c:	4313      	orrs	r3, r2
 800341e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003422:	4b55      	ldr	r3, [pc, #340]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003428:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	3b01      	subs	r3, #1
 8003432:	021b      	lsls	r3, r3, #8
 8003434:	4950      	ldr	r1, [pc, #320]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003436:	4313      	orrs	r3, r2
 8003438:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b00      	cmp	r3, #0
 8003446:	d01e      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003448:	4b4b      	ldr	r3, [pc, #300]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800344a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344e:	0e1b      	lsrs	r3, r3, #24
 8003450:	f003 030f 	and.w	r3, r3, #15
 8003454:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	019a      	lsls	r2, r3, #6
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	061b      	lsls	r3, r3, #24
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	071b      	lsls	r3, r3, #28
 8003468:	4943      	ldr	r1, [pc, #268]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003470:	4b41      	ldr	r3, [pc, #260]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003472:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003476:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	493e      	ldr	r1, [pc, #248]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003480:	4313      	orrs	r3, r2
 8003482:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003486:	4b3d      	ldr	r3, [pc, #244]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003488:	2201      	movs	r2, #1
 800348a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800348c:	f7fe f94a 	bl	8001724 <HAL_GetTick>
 8003490:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003494:	f7fe f946 	bl	8001724 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e0a6      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80034a6:	4b34      	ldr	r3, [pc, #208]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034b2:	d1ef      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0320 	and.w	r3, r3, #32
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 808d 	beq.w	80035dc <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	4b2c      	ldr	r3, [pc, #176]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	4a2b      	ldr	r2, [pc, #172]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034d0:	6413      	str	r3, [r2, #64]	; 0x40
 80034d2:	4b29      	ldr	r3, [pc, #164]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80034de:	4b28      	ldr	r3, [pc, #160]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a27      	ldr	r2, [pc, #156]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80034e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034ea:	f7fe f91b 	bl	8001724 <HAL_GetTick>
 80034ee:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80034f2:	f7fe f917 	bl	8001724 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e077      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003504:	4b1e      	ldr	r3, [pc, #120]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003510:	4b19      	ldr	r3, [pc, #100]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003518:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d039      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003524:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	429a      	cmp	r2, r3
 800352c:	d032      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800352e:	4b12      	ldr	r3, [pc, #72]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003536:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003538:	4b12      	ldr	r3, [pc, #72]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800353a:	2201      	movs	r2, #1
 800353c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800353e:	4b11      	ldr	r3, [pc, #68]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003544:	4a0c      	ldr	r2, [pc, #48]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800354a:	4b0b      	ldr	r3, [pc, #44]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800354c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b01      	cmp	r3, #1
 8003554:	d11e      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003556:	f7fe f8e5 	bl	8001724 <HAL_GetTick>
 800355a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355c:	e014      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800355e:	f7fe f8e1 	bl	8001724 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	f241 3288 	movw	r2, #5000	; 0x1388
 800356c:	4293      	cmp	r3, r2
 800356e:	d90b      	bls.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e03f      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8003574:	42470068 	.word	0x42470068
 8003578:	40023800 	.word	0x40023800
 800357c:	42470070 	.word	0x42470070
 8003580:	40007000 	.word	0x40007000
 8003584:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003588:	4b1c      	ldr	r3, [pc, #112]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800358a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0e4      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800359c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035a0:	d10d      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x336>
 80035a2:	4b16      	ldr	r3, [pc, #88]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80035b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035b6:	4911      	ldr	r1, [pc, #68]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	608b      	str	r3, [r1, #8]
 80035bc:	e005      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x342>
 80035be:	4b0f      	ldr	r3, [pc, #60]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	4a0e      	ldr	r2, [pc, #56]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80035c4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80035c8:	6093      	str	r3, [r2, #8]
 80035ca:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80035cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d6:	4909      	ldr	r1, [pc, #36]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0310 	and.w	r3, r3, #16
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d004      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80035ee:	4b04      	ldr	r3, [pc, #16]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80035f0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40023800 	.word	0x40023800
 8003600:	424711e0 	.word	0x424711e0

08003604 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e083      	b.n	800371e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	7f5b      	ldrb	r3, [r3, #29]
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	d105      	bne.n	800362c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7fd fdda 	bl	80011e0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	22ca      	movs	r2, #202	; 0xca
 8003638:	625a      	str	r2, [r3, #36]	; 0x24
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2253      	movs	r2, #83	; 0x53
 8003640:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f944 	bl	80038d0 <RTC_EnterInitMode>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d008      	beq.n	8003660 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	22ff      	movs	r2, #255	; 0xff
 8003654:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2204      	movs	r2, #4
 800365a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e05e      	b.n	800371e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6812      	ldr	r2, [r2, #0]
 800366a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800366e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003672:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6899      	ldr	r1, [r3, #8]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	431a      	orrs	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	68d2      	ldr	r2, [r2, #12]
 800369a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6919      	ldr	r1, [r3, #16]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	041a      	lsls	r2, r3, #16
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036be:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10e      	bne.n	80036ec <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f8d6 	bl	8003880 <HAL_RTC_WaitForSynchro>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d008      	beq.n	80036ec <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	22ff      	movs	r2, #255	; 0xff
 80036e0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2204      	movs	r2, #4
 80036e6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e018      	b.n	800371e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699a      	ldr	r2, [r3, #24]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	22ff      	movs	r2, #255	; 0xff
 8003714:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800371c:	2300      	movs	r3, #0
  }
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b086      	sub	sp, #24
 800372a:	af00      	add	r7, sp, #0
 800372c:	60f8      	str	r0, [r7, #12]
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003758:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800375c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	0c1b      	lsrs	r3, r3, #16
 8003762:	b2db      	uxtb	r3, r3
 8003764:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003768:	b2da      	uxtb	r2, r3
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	0a1b      	lsrs	r3, r3, #8
 8003772:	b2db      	uxtb	r3, r3
 8003774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003778:	b2da      	uxtb	r2, r3
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	b2db      	uxtb	r3, r3
 8003782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003786:	b2da      	uxtb	r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	0c1b      	lsrs	r3, r3, #16
 8003790:	b2db      	uxtb	r3, r3
 8003792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003796:	b2da      	uxtb	r2, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d11a      	bne.n	80037d8 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 f8be 	bl	8003928 <RTC_Bcd2ToByte>
 80037ac:	4603      	mov	r3, r0
 80037ae:	461a      	mov	r2, r3
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	785b      	ldrb	r3, [r3, #1]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 f8b5 	bl	8003928 <RTC_Bcd2ToByte>
 80037be:	4603      	mov	r3, r0
 80037c0:	461a      	mov	r2, r3
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	789b      	ldrb	r3, [r3, #2]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 f8ac 	bl	8003928 <RTC_Bcd2ToByte>
 80037d0:	4603      	mov	r3, r0
 80037d2:	461a      	mov	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b086      	sub	sp, #24
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80037fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003800:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	0c1b      	lsrs	r3, r3, #16
 8003806:	b2da      	uxtb	r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	0a1b      	lsrs	r3, r3, #8
 8003810:	b2db      	uxtb	r3, r3
 8003812:	f003 031f 	and.w	r3, r3, #31
 8003816:	b2da      	uxtb	r2, r3
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	b2db      	uxtb	r3, r3
 8003820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003824:	b2da      	uxtb	r2, r3
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	0b5b      	lsrs	r3, r3, #13
 800382e:	b2db      	uxtb	r3, r3
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	b2da      	uxtb	r2, r3
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d11a      	bne.n	8003876 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	78db      	ldrb	r3, [r3, #3]
 8003844:	4618      	mov	r0, r3
 8003846:	f000 f86f 	bl	8003928 <RTC_Bcd2ToByte>
 800384a:	4603      	mov	r3, r0
 800384c:	461a      	mov	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	785b      	ldrb	r3, [r3, #1]
 8003856:	4618      	mov	r0, r3
 8003858:	f000 f866 	bl	8003928 <RTC_Bcd2ToByte>
 800385c:	4603      	mov	r3, r0
 800385e:	461a      	mov	r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	789b      	ldrb	r3, [r3, #2]
 8003868:	4618      	mov	r0, r3
 800386a:	f000 f85d 	bl	8003928 <RTC_Bcd2ToByte>
 800386e:	4603      	mov	r3, r0
 8003870:	461a      	mov	r2, r3
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800389a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800389c:	f7fd ff42 	bl	8001724 <HAL_GetTick>
 80038a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80038a2:	e009      	b.n	80038b8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80038a4:	f7fd ff3e 	bl	8001724 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038b2:	d901      	bls.n	80038b8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e007      	b.n	80038c8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0ee      	beq.n	80038a4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d119      	bne.n	800391e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f04f 32ff 	mov.w	r2, #4294967295
 80038f2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038f4:	f7fd ff16 	bl	8001724 <HAL_GetTick>
 80038f8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80038fa:	e009      	b.n	8003910 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80038fc:	f7fd ff12 	bl	8001724 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800390a:	d901      	bls.n	8003910 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e007      	b.n	8003920 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0ee      	beq.n	80038fc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	091b      	lsrs	r3, r3, #4
 800393a:	b2db      	uxtb	r3, r3
 800393c:	461a      	mov	r2, r3
 800393e:	4613      	mov	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003948:	79fb      	ldrb	r3, [r7, #7]
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	b2da      	uxtb	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	b2db      	uxtb	r3, r3
 8003954:	4413      	add	r3, r2
 8003956:	b2db      	uxtb	r3, r3
}
 8003958:	4618      	mov	r0, r3
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e01d      	b.n	80039b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d106      	bne.n	8003990 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7fd fc3e 	bl	800120c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3304      	adds	r3, #4
 80039a0:	4619      	mov	r1, r3
 80039a2:	4610      	mov	r0, r2
 80039a4:	f000 fa40 	bl	8003e28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b085      	sub	sp, #20
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f042 0201 	orr.w	r2, r2, #1
 80039d0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2b06      	cmp	r3, #6
 80039e2:	d007      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0201 	orr.w	r2, r2, #1
 80039f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0201 	bic.w	r2, r2, #1
 8003a18:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6a1a      	ldr	r2, [r3, #32]
 8003a20:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a24:	4013      	ands	r3, r2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10f      	bne.n	8003a4a <HAL_TIM_Base_Stop_IT+0x48>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6a1a      	ldr	r2, [r3, #32]
 8003a30:	f240 4344 	movw	r3, #1092	; 0x444
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d107      	bne.n	8003a4a <HAL_TIM_Base_Stop_IT+0x48>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0201 	bic.w	r2, r2, #1
 8003a48:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d122      	bne.n	8003ab4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d11b      	bne.n	8003ab4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f06f 0202 	mvn.w	r2, #2
 8003a84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f9a5 	bl	8003dea <HAL_TIM_IC_CaptureCallback>
 8003aa0:	e005      	b.n	8003aae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f997 	bl	8003dd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f9a8 	bl	8003dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d122      	bne.n	8003b08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d11b      	bne.n	8003b08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f06f 0204 	mvn.w	r2, #4
 8003ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2202      	movs	r2, #2
 8003ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f97b 	bl	8003dea <HAL_TIM_IC_CaptureCallback>
 8003af4:	e005      	b.n	8003b02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f96d 	bl	8003dd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f97e 	bl	8003dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	2b08      	cmp	r3, #8
 8003b14:	d122      	bne.n	8003b5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d11b      	bne.n	8003b5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0208 	mvn.w	r2, #8
 8003b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2204      	movs	r2, #4
 8003b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f951 	bl	8003dea <HAL_TIM_IC_CaptureCallback>
 8003b48:	e005      	b.n	8003b56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f943 	bl	8003dd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f954 	bl	8003dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0310 	and.w	r3, r3, #16
 8003b66:	2b10      	cmp	r3, #16
 8003b68:	d122      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f003 0310 	and.w	r3, r3, #16
 8003b74:	2b10      	cmp	r3, #16
 8003b76:	d11b      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0210 	mvn.w	r2, #16
 8003b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2208      	movs	r2, #8
 8003b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f927 	bl	8003dea <HAL_TIM_IC_CaptureCallback>
 8003b9c:	e005      	b.n	8003baa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f919 	bl	8003dd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f92a 	bl	8003dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d10e      	bne.n	8003bdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d107      	bne.n	8003bdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f06f 0201 	mvn.w	r2, #1
 8003bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f005 f86e 	bl	8008cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be6:	2b80      	cmp	r3, #128	; 0x80
 8003be8:	d10e      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf4:	2b80      	cmp	r3, #128	; 0x80
 8003bf6:	d107      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fad0 	bl	80041a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c12:	2b40      	cmp	r3, #64	; 0x40
 8003c14:	d10e      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c20:	2b40      	cmp	r3, #64	; 0x40
 8003c22:	d107      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f8ef 	bl	8003e12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f003 0320 	and.w	r3, r3, #32
 8003c3e:	2b20      	cmp	r3, #32
 8003c40:	d10e      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0320 	and.w	r3, r3, #32
 8003c4c:	2b20      	cmp	r3, #32
 8003c4e:	d107      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0220 	mvn.w	r2, #32
 8003c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 fa9a 	bl	8004194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c60:	bf00      	nop
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d101      	bne.n	8003c80 <HAL_TIM_ConfigClockSource+0x18>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e0a6      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x166>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ca6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b40      	cmp	r3, #64	; 0x40
 8003cb6:	d067      	beq.n	8003d88 <HAL_TIM_ConfigClockSource+0x120>
 8003cb8:	2b40      	cmp	r3, #64	; 0x40
 8003cba:	d80b      	bhi.n	8003cd4 <HAL_TIM_ConfigClockSource+0x6c>
 8003cbc:	2b10      	cmp	r3, #16
 8003cbe:	d073      	beq.n	8003da8 <HAL_TIM_ConfigClockSource+0x140>
 8003cc0:	2b10      	cmp	r3, #16
 8003cc2:	d802      	bhi.n	8003cca <HAL_TIM_ConfigClockSource+0x62>
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d06f      	beq.n	8003da8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003cc8:	e078      	b.n	8003dbc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003cca:	2b20      	cmp	r3, #32
 8003ccc:	d06c      	beq.n	8003da8 <HAL_TIM_ConfigClockSource+0x140>
 8003cce:	2b30      	cmp	r3, #48	; 0x30
 8003cd0:	d06a      	beq.n	8003da8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003cd2:	e073      	b.n	8003dbc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003cd4:	2b70      	cmp	r3, #112	; 0x70
 8003cd6:	d00d      	beq.n	8003cf4 <HAL_TIM_ConfigClockSource+0x8c>
 8003cd8:	2b70      	cmp	r3, #112	; 0x70
 8003cda:	d804      	bhi.n	8003ce6 <HAL_TIM_ConfigClockSource+0x7e>
 8003cdc:	2b50      	cmp	r3, #80	; 0x50
 8003cde:	d033      	beq.n	8003d48 <HAL_TIM_ConfigClockSource+0xe0>
 8003ce0:	2b60      	cmp	r3, #96	; 0x60
 8003ce2:	d041      	beq.n	8003d68 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003ce4:	e06a      	b.n	8003dbc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cea:	d066      	beq.n	8003dba <HAL_TIM_ConfigClockSource+0x152>
 8003cec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cf0:	d017      	beq.n	8003d22 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003cf2:	e063      	b.n	8003dbc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6818      	ldr	r0, [r3, #0]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	6899      	ldr	r1, [r3, #8]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f000 f9aa 	bl	800405c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d16:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	609a      	str	r2, [r3, #8]
      break;
 8003d20:	e04c      	b.n	8003dbc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6818      	ldr	r0, [r3, #0]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	6899      	ldr	r1, [r3, #8]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f000 f993 	bl	800405c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d44:	609a      	str	r2, [r3, #8]
      break;
 8003d46:	e039      	b.n	8003dbc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6818      	ldr	r0, [r3, #0]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	6859      	ldr	r1, [r3, #4]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	461a      	mov	r2, r3
 8003d56:	f000 f907 	bl	8003f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2150      	movs	r1, #80	; 0x50
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 f960 	bl	8004026 <TIM_ITRx_SetConfig>
      break;
 8003d66:	e029      	b.n	8003dbc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6818      	ldr	r0, [r3, #0]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	6859      	ldr	r1, [r3, #4]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	461a      	mov	r2, r3
 8003d76:	f000 f926 	bl	8003fc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2160      	movs	r1, #96	; 0x60
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 f950 	bl	8004026 <TIM_ITRx_SetConfig>
      break;
 8003d86:	e019      	b.n	8003dbc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6818      	ldr	r0, [r3, #0]
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	6859      	ldr	r1, [r3, #4]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	461a      	mov	r2, r3
 8003d96:	f000 f8e7 	bl	8003f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2140      	movs	r1, #64	; 0x40
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 f940 	bl	8004026 <TIM_ITRx_SetConfig>
      break;
 8003da6:	e009      	b.n	8003dbc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4619      	mov	r1, r3
 8003db2:	4610      	mov	r0, r2
 8003db4:	f000 f937 	bl	8004026 <TIM_ITRx_SetConfig>
      break;
 8003db8:	e000      	b.n	8003dbc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003dba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
	...

08003e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a40      	ldr	r2, [pc, #256]	; (8003f3c <TIM_Base_SetConfig+0x114>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d013      	beq.n	8003e68 <TIM_Base_SetConfig+0x40>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e46:	d00f      	beq.n	8003e68 <TIM_Base_SetConfig+0x40>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a3d      	ldr	r2, [pc, #244]	; (8003f40 <TIM_Base_SetConfig+0x118>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d00b      	beq.n	8003e68 <TIM_Base_SetConfig+0x40>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a3c      	ldr	r2, [pc, #240]	; (8003f44 <TIM_Base_SetConfig+0x11c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d007      	beq.n	8003e68 <TIM_Base_SetConfig+0x40>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a3b      	ldr	r2, [pc, #236]	; (8003f48 <TIM_Base_SetConfig+0x120>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d003      	beq.n	8003e68 <TIM_Base_SetConfig+0x40>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a3a      	ldr	r2, [pc, #232]	; (8003f4c <TIM_Base_SetConfig+0x124>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d108      	bne.n	8003e7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a2f      	ldr	r2, [pc, #188]	; (8003f3c <TIM_Base_SetConfig+0x114>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d02b      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e88:	d027      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a2c      	ldr	r2, [pc, #176]	; (8003f40 <TIM_Base_SetConfig+0x118>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d023      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a2b      	ldr	r2, [pc, #172]	; (8003f44 <TIM_Base_SetConfig+0x11c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d01f      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a2a      	ldr	r2, [pc, #168]	; (8003f48 <TIM_Base_SetConfig+0x120>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d01b      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a29      	ldr	r2, [pc, #164]	; (8003f4c <TIM_Base_SetConfig+0x124>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d017      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a28      	ldr	r2, [pc, #160]	; (8003f50 <TIM_Base_SetConfig+0x128>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d013      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a27      	ldr	r2, [pc, #156]	; (8003f54 <TIM_Base_SetConfig+0x12c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d00f      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a26      	ldr	r2, [pc, #152]	; (8003f58 <TIM_Base_SetConfig+0x130>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00b      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a25      	ldr	r2, [pc, #148]	; (8003f5c <TIM_Base_SetConfig+0x134>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d007      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a24      	ldr	r2, [pc, #144]	; (8003f60 <TIM_Base_SetConfig+0x138>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d003      	beq.n	8003eda <TIM_Base_SetConfig+0xb2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a23      	ldr	r2, [pc, #140]	; (8003f64 <TIM_Base_SetConfig+0x13c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d108      	bne.n	8003eec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a0a      	ldr	r2, [pc, #40]	; (8003f3c <TIM_Base_SetConfig+0x114>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d003      	beq.n	8003f20 <TIM_Base_SetConfig+0xf8>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a0c      	ldr	r2, [pc, #48]	; (8003f4c <TIM_Base_SetConfig+0x124>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d103      	bne.n	8003f28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	615a      	str	r2, [r3, #20]
}
 8003f2e:	bf00      	nop
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40010000 	.word	0x40010000
 8003f40:	40000400 	.word	0x40000400
 8003f44:	40000800 	.word	0x40000800
 8003f48:	40000c00 	.word	0x40000c00
 8003f4c:	40010400 	.word	0x40010400
 8003f50:	40014000 	.word	0x40014000
 8003f54:	40014400 	.word	0x40014400
 8003f58:	40014800 	.word	0x40014800
 8003f5c:	40001800 	.word	0x40001800
 8003f60:	40001c00 	.word	0x40001c00
 8003f64:	40002000 	.word	0x40002000

08003f68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	f023 0201 	bic.w	r2, r3, #1
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f023 030a 	bic.w	r3, r3, #10
 8003fa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	621a      	str	r2, [r3, #32]
}
 8003fba:	bf00      	nop
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b087      	sub	sp, #28
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	f023 0210 	bic.w	r2, r3, #16
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ff0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	031b      	lsls	r3, r3, #12
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004002:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	4313      	orrs	r3, r2
 800400c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	621a      	str	r2, [r3, #32]
}
 800401a:	bf00      	nop
 800401c:	371c      	adds	r7, #28
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004026:	b480      	push	{r7}
 8004028:	b085      	sub	sp, #20
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800403c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	f043 0307 	orr.w	r3, r3, #7
 8004048:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	609a      	str	r2, [r3, #8]
}
 8004050:	bf00      	nop
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800405c:	b480      	push	{r7}
 800405e:	b087      	sub	sp, #28
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
 8004068:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004076:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	021a      	lsls	r2, r3, #8
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	431a      	orrs	r2, r3
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4313      	orrs	r3, r2
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	4313      	orrs	r3, r2
 8004088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	609a      	str	r2, [r3, #8]
}
 8004090:	bf00      	nop
 8004092:	371c      	adds	r7, #28
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e05a      	b.n	800416a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a21      	ldr	r2, [pc, #132]	; (8004178 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d022      	beq.n	800413e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004100:	d01d      	beq.n	800413e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a1d      	ldr	r2, [pc, #116]	; (800417c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d018      	beq.n	800413e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a1b      	ldr	r2, [pc, #108]	; (8004180 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d013      	beq.n	800413e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a1a      	ldr	r2, [pc, #104]	; (8004184 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d00e      	beq.n	800413e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a18      	ldr	r2, [pc, #96]	; (8004188 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d009      	beq.n	800413e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a17      	ldr	r2, [pc, #92]	; (800418c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d004      	beq.n	800413e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a15      	ldr	r2, [pc, #84]	; (8004190 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d10c      	bne.n	8004158 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004144:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	4313      	orrs	r3, r2
 800414e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40010000 	.word	0x40010000
 800417c:	40000400 	.word	0x40000400
 8004180:	40000800 	.word	0x40000800
 8004184:	40000c00 	.word	0x40000c00
 8004188:	40010400 	.word	0x40010400
 800418c:	40014000 	.word	0x40014000
 8004190:	40001800 	.word	0x40001800

08004194 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e03f      	b.n	800424e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d106      	bne.n	80041e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7fd f874 	bl	80012d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2224      	movs	r2, #36	; 0x24
 80041ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 faad 	bl	8004760 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	691a      	ldr	r2, [r3, #16]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004214:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695a      	ldr	r2, [r3, #20]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004224:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004234:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004256:	b480      	push	{r7}
 8004258:	b085      	sub	sp, #20
 800425a:	af00      	add	r7, sp, #0
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	4613      	mov	r3, r2
 8004262:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b20      	cmp	r3, #32
 800426e:	d130      	bne.n	80042d2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <HAL_UART_Transmit_IT+0x26>
 8004276:	88fb      	ldrh	r3, [r7, #6]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e029      	b.n	80042d4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004286:	2b01      	cmp	r3, #1
 8004288:	d101      	bne.n	800428e <HAL_UART_Transmit_IT+0x38>
 800428a:	2302      	movs	r3, #2
 800428c:	e022      	b.n	80042d4 <HAL_UART_Transmit_IT+0x7e>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	88fa      	ldrh	r2, [r7, #6]
 80042a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	88fa      	ldrh	r2, [r7, #6]
 80042a6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2221      	movs	r2, #33	; 0x21
 80042b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042cc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80042ce:	2300      	movs	r3, #0
 80042d0:	e000      	b.n	80042d4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80042d2:	2302      	movs	r3, #2
  }
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b088      	sub	sp, #32
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004300:	2300      	movs	r3, #0
 8004302:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004304:	2300      	movs	r3, #0
 8004306:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10d      	bne.n	8004332 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	f003 0320 	and.w	r3, r3, #32
 800431c:	2b00      	cmp	r3, #0
 800431e:	d008      	beq.n	8004332 <HAL_UART_IRQHandler+0x52>
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	f003 0320 	and.w	r3, r3, #32
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f996 	bl	800465c <UART_Receive_IT>
      return;
 8004330:	e0d1      	b.n	80044d6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 80b0 	beq.w	800449a <HAL_UART_IRQHandler+0x1ba>
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d105      	bne.n	8004350 <HAL_UART_IRQHandler+0x70>
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 80a5 	beq.w	800449a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00a      	beq.n	8004370 <HAL_UART_IRQHandler+0x90>
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004360:	2b00      	cmp	r3, #0
 8004362:	d005      	beq.n	8004370 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004368:	f043 0201 	orr.w	r2, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <HAL_UART_IRQHandler+0xb0>
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b00      	cmp	r3, #0
 8004382:	d005      	beq.n	8004390 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004388:	f043 0202 	orr.w	r2, r3, #2
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <HAL_UART_IRQHandler+0xd0>
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d005      	beq.n	80043b0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a8:	f043 0204 	orr.w	r2, r3, #4
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	f003 0308 	and.w	r3, r3, #8
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00f      	beq.n	80043da <HAL_UART_IRQHandler+0xfa>
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	f003 0320 	and.w	r3, r3, #32
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d104      	bne.n	80043ce <HAL_UART_IRQHandler+0xee>
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d005      	beq.n	80043da <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d2:	f043 0208 	orr.w	r2, r3, #8
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d078      	beq.n	80044d4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	f003 0320 	and.w	r3, r3, #32
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d007      	beq.n	80043fc <HAL_UART_IRQHandler+0x11c>
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	f003 0320 	and.w	r3, r3, #32
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f930 	bl	800465c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004406:	2b40      	cmp	r3, #64	; 0x40
 8004408:	bf0c      	ite	eq
 800440a:	2301      	moveq	r3, #1
 800440c:	2300      	movne	r3, #0
 800440e:	b2db      	uxtb	r3, r3
 8004410:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	2b00      	cmp	r3, #0
 800441c:	d102      	bne.n	8004424 <HAL_UART_IRQHandler+0x144>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d031      	beq.n	8004488 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f879 	bl	800451c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004434:	2b40      	cmp	r3, #64	; 0x40
 8004436:	d123      	bne.n	8004480 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695a      	ldr	r2, [r3, #20]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004446:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800444c:	2b00      	cmp	r3, #0
 800444e:	d013      	beq.n	8004478 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004454:	4a21      	ldr	r2, [pc, #132]	; (80044dc <HAL_UART_IRQHandler+0x1fc>)
 8004456:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800445c:	4618      	mov	r0, r3
 800445e:	f7fd fd12 	bl	8001e86 <HAL_DMA_Abort_IT>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d016      	beq.n	8004496 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004472:	4610      	mov	r0, r2
 8004474:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004476:	e00e      	b.n	8004496 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f845 	bl	8004508 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800447e:	e00a      	b.n	8004496 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f841 	bl	8004508 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004486:	e006      	b.n	8004496 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f83d 	bl	8004508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004494:	e01e      	b.n	80044d4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004496:	bf00      	nop
    return;
 8004498:	e01c      	b.n	80044d4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d008      	beq.n	80044b6 <HAL_UART_IRQHandler+0x1d6>
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f866 	bl	8004580 <UART_Transmit_IT>
    return;
 80044b4:	e00f      	b.n	80044d6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00a      	beq.n	80044d6 <HAL_UART_IRQHandler+0x1f6>
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d005      	beq.n	80044d6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f8ae 	bl	800462c <UART_EndTransmit_IT>
    return;
 80044d0:	bf00      	nop
 80044d2:	e000      	b.n	80044d6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80044d4:	bf00      	nop
  }
}
 80044d6:	3720      	adds	r7, #32
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	08004559 	.word	0x08004559

080044e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004532:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	695a      	ldr	r2, [r3, #20]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0201 	bic.w	r2, r2, #1
 8004542:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004564:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f7ff ffc8 	bl	8004508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004578:	bf00      	nop
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b21      	cmp	r3, #33	; 0x21
 8004592:	d144      	bne.n	800461e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800459c:	d11a      	bne.n	80045d4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	881b      	ldrh	r3, [r3, #0]
 80045a8:	461a      	mov	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045b2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d105      	bne.n	80045c8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	1c9a      	adds	r2, r3, #2
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	621a      	str	r2, [r3, #32]
 80045c6:	e00e      	b.n	80045e6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	1c5a      	adds	r2, r3, #1
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	621a      	str	r2, [r3, #32]
 80045d2:	e008      	b.n	80045e6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	1c59      	adds	r1, r3, #1
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6211      	str	r1, [r2, #32]
 80045de:	781a      	ldrb	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	4619      	mov	r1, r3
 80045f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10f      	bne.n	800461a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004608:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004618:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	e000      	b.n	8004620 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800461e:	2302      	movs	r3, #2
  }
}
 8004620:	4618      	mov	r0, r3
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004642:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff ff47 	bl	80044e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b22      	cmp	r3, #34	; 0x22
 800466e:	d171      	bne.n	8004754 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004678:	d123      	bne.n	80046c2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10e      	bne.n	80046a6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	b29b      	uxth	r3, r3
 8004690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469e:	1c9a      	adds	r2, r3, #2
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	629a      	str	r2, [r3, #40]	; 0x28
 80046a4:	e029      	b.n	80046fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	629a      	str	r2, [r3, #40]	; 0x28
 80046c0:	e01b      	b.n	80046fa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10a      	bne.n	80046e0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6858      	ldr	r0, [r3, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d4:	1c59      	adds	r1, r3, #1
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	6291      	str	r1, [r2, #40]	; 0x28
 80046da:	b2c2      	uxtb	r2, r0
 80046dc:	701a      	strb	r2, [r3, #0]
 80046de:	e00c      	b.n	80046fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ec:	1c58      	adds	r0, r3, #1
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	6288      	str	r0, [r1, #40]	; 0x28
 80046f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046fe:	b29b      	uxth	r3, r3
 8004700:	3b01      	subs	r3, #1
 8004702:	b29b      	uxth	r3, r3
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	4619      	mov	r1, r3
 8004708:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800470a:	2b00      	cmp	r3, #0
 800470c:	d120      	bne.n	8004750 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68da      	ldr	r2, [r3, #12]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 0220 	bic.w	r2, r2, #32
 800471c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800472c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695a      	ldr	r2, [r3, #20]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0201 	bic.w	r2, r2, #1
 800473c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2220      	movs	r2, #32
 8004742:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7ff fed4 	bl	80044f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800474c:	2300      	movs	r3, #0
 800474e:	e002      	b.n	8004756 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	e000      	b.n	8004756 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004754:	2302      	movs	r3, #2
  }
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
	...

08004760 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004764:	b085      	sub	sp, #20
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	431a      	orrs	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80047a2:	f023 030c 	bic.w	r3, r3, #12
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6812      	ldr	r2, [r2, #0]
 80047aa:	68f9      	ldr	r1, [r7, #12]
 80047ac:	430b      	orrs	r3, r1
 80047ae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ce:	f040 818b 	bne.w	8004ae8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4ac1      	ldr	r2, [pc, #772]	; (8004adc <UART_SetConfig+0x37c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d005      	beq.n	80047e8 <UART_SetConfig+0x88>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4abf      	ldr	r2, [pc, #764]	; (8004ae0 <UART_SetConfig+0x380>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	f040 80bd 	bne.w	8004962 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047e8:	f7fe fd3a 	bl	8003260 <HAL_RCC_GetPCLK2Freq>
 80047ec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	461d      	mov	r5, r3
 80047f2:	f04f 0600 	mov.w	r6, #0
 80047f6:	46a8      	mov	r8, r5
 80047f8:	46b1      	mov	r9, r6
 80047fa:	eb18 0308 	adds.w	r3, r8, r8
 80047fe:	eb49 0409 	adc.w	r4, r9, r9
 8004802:	4698      	mov	r8, r3
 8004804:	46a1      	mov	r9, r4
 8004806:	eb18 0805 	adds.w	r8, r8, r5
 800480a:	eb49 0906 	adc.w	r9, r9, r6
 800480e:	f04f 0100 	mov.w	r1, #0
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800481a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800481e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004822:	4688      	mov	r8, r1
 8004824:	4691      	mov	r9, r2
 8004826:	eb18 0005 	adds.w	r0, r8, r5
 800482a:	eb49 0106 	adc.w	r1, r9, r6
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	461d      	mov	r5, r3
 8004834:	f04f 0600 	mov.w	r6, #0
 8004838:	196b      	adds	r3, r5, r5
 800483a:	eb46 0406 	adc.w	r4, r6, r6
 800483e:	461a      	mov	r2, r3
 8004840:	4623      	mov	r3, r4
 8004842:	f7fc fa31 	bl	8000ca8 <__aeabi_uldivmod>
 8004846:	4603      	mov	r3, r0
 8004848:	460c      	mov	r4, r1
 800484a:	461a      	mov	r2, r3
 800484c:	4ba5      	ldr	r3, [pc, #660]	; (8004ae4 <UART_SetConfig+0x384>)
 800484e:	fba3 2302 	umull	r2, r3, r3, r2
 8004852:	095b      	lsrs	r3, r3, #5
 8004854:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	461d      	mov	r5, r3
 800485c:	f04f 0600 	mov.w	r6, #0
 8004860:	46a9      	mov	r9, r5
 8004862:	46b2      	mov	sl, r6
 8004864:	eb19 0309 	adds.w	r3, r9, r9
 8004868:	eb4a 040a 	adc.w	r4, sl, sl
 800486c:	4699      	mov	r9, r3
 800486e:	46a2      	mov	sl, r4
 8004870:	eb19 0905 	adds.w	r9, r9, r5
 8004874:	eb4a 0a06 	adc.w	sl, sl, r6
 8004878:	f04f 0100 	mov.w	r1, #0
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004884:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004888:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800488c:	4689      	mov	r9, r1
 800488e:	4692      	mov	sl, r2
 8004890:	eb19 0005 	adds.w	r0, r9, r5
 8004894:	eb4a 0106 	adc.w	r1, sl, r6
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	461d      	mov	r5, r3
 800489e:	f04f 0600 	mov.w	r6, #0
 80048a2:	196b      	adds	r3, r5, r5
 80048a4:	eb46 0406 	adc.w	r4, r6, r6
 80048a8:	461a      	mov	r2, r3
 80048aa:	4623      	mov	r3, r4
 80048ac:	f7fc f9fc 	bl	8000ca8 <__aeabi_uldivmod>
 80048b0:	4603      	mov	r3, r0
 80048b2:	460c      	mov	r4, r1
 80048b4:	461a      	mov	r2, r3
 80048b6:	4b8b      	ldr	r3, [pc, #556]	; (8004ae4 <UART_SetConfig+0x384>)
 80048b8:	fba3 1302 	umull	r1, r3, r3, r2
 80048bc:	095b      	lsrs	r3, r3, #5
 80048be:	2164      	movs	r1, #100	; 0x64
 80048c0:	fb01 f303 	mul.w	r3, r1, r3
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	3332      	adds	r3, #50	; 0x32
 80048ca:	4a86      	ldr	r2, [pc, #536]	; (8004ae4 <UART_SetConfig+0x384>)
 80048cc:	fba2 2303 	umull	r2, r3, r2, r3
 80048d0:	095b      	lsrs	r3, r3, #5
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048d8:	4498      	add	r8, r3
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	461d      	mov	r5, r3
 80048de:	f04f 0600 	mov.w	r6, #0
 80048e2:	46a9      	mov	r9, r5
 80048e4:	46b2      	mov	sl, r6
 80048e6:	eb19 0309 	adds.w	r3, r9, r9
 80048ea:	eb4a 040a 	adc.w	r4, sl, sl
 80048ee:	4699      	mov	r9, r3
 80048f0:	46a2      	mov	sl, r4
 80048f2:	eb19 0905 	adds.w	r9, r9, r5
 80048f6:	eb4a 0a06 	adc.w	sl, sl, r6
 80048fa:	f04f 0100 	mov.w	r1, #0
 80048fe:	f04f 0200 	mov.w	r2, #0
 8004902:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004906:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800490a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800490e:	4689      	mov	r9, r1
 8004910:	4692      	mov	sl, r2
 8004912:	eb19 0005 	adds.w	r0, r9, r5
 8004916:	eb4a 0106 	adc.w	r1, sl, r6
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	461d      	mov	r5, r3
 8004920:	f04f 0600 	mov.w	r6, #0
 8004924:	196b      	adds	r3, r5, r5
 8004926:	eb46 0406 	adc.w	r4, r6, r6
 800492a:	461a      	mov	r2, r3
 800492c:	4623      	mov	r3, r4
 800492e:	f7fc f9bb 	bl	8000ca8 <__aeabi_uldivmod>
 8004932:	4603      	mov	r3, r0
 8004934:	460c      	mov	r4, r1
 8004936:	461a      	mov	r2, r3
 8004938:	4b6a      	ldr	r3, [pc, #424]	; (8004ae4 <UART_SetConfig+0x384>)
 800493a:	fba3 1302 	umull	r1, r3, r3, r2
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	2164      	movs	r1, #100	; 0x64
 8004942:	fb01 f303 	mul.w	r3, r1, r3
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	3332      	adds	r3, #50	; 0x32
 800494c:	4a65      	ldr	r2, [pc, #404]	; (8004ae4 <UART_SetConfig+0x384>)
 800494e:	fba2 2303 	umull	r2, r3, r2, r3
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	f003 0207 	and.w	r2, r3, #7
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4442      	add	r2, r8
 800495e:	609a      	str	r2, [r3, #8]
 8004960:	e26f      	b.n	8004e42 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004962:	f7fe fc69 	bl	8003238 <HAL_RCC_GetPCLK1Freq>
 8004966:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	461d      	mov	r5, r3
 800496c:	f04f 0600 	mov.w	r6, #0
 8004970:	46a8      	mov	r8, r5
 8004972:	46b1      	mov	r9, r6
 8004974:	eb18 0308 	adds.w	r3, r8, r8
 8004978:	eb49 0409 	adc.w	r4, r9, r9
 800497c:	4698      	mov	r8, r3
 800497e:	46a1      	mov	r9, r4
 8004980:	eb18 0805 	adds.w	r8, r8, r5
 8004984:	eb49 0906 	adc.w	r9, r9, r6
 8004988:	f04f 0100 	mov.w	r1, #0
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004994:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004998:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800499c:	4688      	mov	r8, r1
 800499e:	4691      	mov	r9, r2
 80049a0:	eb18 0005 	adds.w	r0, r8, r5
 80049a4:	eb49 0106 	adc.w	r1, r9, r6
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	461d      	mov	r5, r3
 80049ae:	f04f 0600 	mov.w	r6, #0
 80049b2:	196b      	adds	r3, r5, r5
 80049b4:	eb46 0406 	adc.w	r4, r6, r6
 80049b8:	461a      	mov	r2, r3
 80049ba:	4623      	mov	r3, r4
 80049bc:	f7fc f974 	bl	8000ca8 <__aeabi_uldivmod>
 80049c0:	4603      	mov	r3, r0
 80049c2:	460c      	mov	r4, r1
 80049c4:	461a      	mov	r2, r3
 80049c6:	4b47      	ldr	r3, [pc, #284]	; (8004ae4 <UART_SetConfig+0x384>)
 80049c8:	fba3 2302 	umull	r2, r3, r3, r2
 80049cc:	095b      	lsrs	r3, r3, #5
 80049ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	461d      	mov	r5, r3
 80049d6:	f04f 0600 	mov.w	r6, #0
 80049da:	46a9      	mov	r9, r5
 80049dc:	46b2      	mov	sl, r6
 80049de:	eb19 0309 	adds.w	r3, r9, r9
 80049e2:	eb4a 040a 	adc.w	r4, sl, sl
 80049e6:	4699      	mov	r9, r3
 80049e8:	46a2      	mov	sl, r4
 80049ea:	eb19 0905 	adds.w	r9, r9, r5
 80049ee:	eb4a 0a06 	adc.w	sl, sl, r6
 80049f2:	f04f 0100 	mov.w	r1, #0
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a06:	4689      	mov	r9, r1
 8004a08:	4692      	mov	sl, r2
 8004a0a:	eb19 0005 	adds.w	r0, r9, r5
 8004a0e:	eb4a 0106 	adc.w	r1, sl, r6
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	461d      	mov	r5, r3
 8004a18:	f04f 0600 	mov.w	r6, #0
 8004a1c:	196b      	adds	r3, r5, r5
 8004a1e:	eb46 0406 	adc.w	r4, r6, r6
 8004a22:	461a      	mov	r2, r3
 8004a24:	4623      	mov	r3, r4
 8004a26:	f7fc f93f 	bl	8000ca8 <__aeabi_uldivmod>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	460c      	mov	r4, r1
 8004a2e:	461a      	mov	r2, r3
 8004a30:	4b2c      	ldr	r3, [pc, #176]	; (8004ae4 <UART_SetConfig+0x384>)
 8004a32:	fba3 1302 	umull	r1, r3, r3, r2
 8004a36:	095b      	lsrs	r3, r3, #5
 8004a38:	2164      	movs	r1, #100	; 0x64
 8004a3a:	fb01 f303 	mul.w	r3, r1, r3
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	3332      	adds	r3, #50	; 0x32
 8004a44:	4a27      	ldr	r2, [pc, #156]	; (8004ae4 <UART_SetConfig+0x384>)
 8004a46:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a52:	4498      	add	r8, r3
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	461d      	mov	r5, r3
 8004a58:	f04f 0600 	mov.w	r6, #0
 8004a5c:	46a9      	mov	r9, r5
 8004a5e:	46b2      	mov	sl, r6
 8004a60:	eb19 0309 	adds.w	r3, r9, r9
 8004a64:	eb4a 040a 	adc.w	r4, sl, sl
 8004a68:	4699      	mov	r9, r3
 8004a6a:	46a2      	mov	sl, r4
 8004a6c:	eb19 0905 	adds.w	r9, r9, r5
 8004a70:	eb4a 0a06 	adc.w	sl, sl, r6
 8004a74:	f04f 0100 	mov.w	r1, #0
 8004a78:	f04f 0200 	mov.w	r2, #0
 8004a7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a88:	4689      	mov	r9, r1
 8004a8a:	4692      	mov	sl, r2
 8004a8c:	eb19 0005 	adds.w	r0, r9, r5
 8004a90:	eb4a 0106 	adc.w	r1, sl, r6
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	461d      	mov	r5, r3
 8004a9a:	f04f 0600 	mov.w	r6, #0
 8004a9e:	196b      	adds	r3, r5, r5
 8004aa0:	eb46 0406 	adc.w	r4, r6, r6
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	4623      	mov	r3, r4
 8004aa8:	f7fc f8fe 	bl	8000ca8 <__aeabi_uldivmod>
 8004aac:	4603      	mov	r3, r0
 8004aae:	460c      	mov	r4, r1
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	4b0c      	ldr	r3, [pc, #48]	; (8004ae4 <UART_SetConfig+0x384>)
 8004ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ab8:	095b      	lsrs	r3, r3, #5
 8004aba:	2164      	movs	r1, #100	; 0x64
 8004abc:	fb01 f303 	mul.w	r3, r1, r3
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	3332      	adds	r3, #50	; 0x32
 8004ac6:	4a07      	ldr	r2, [pc, #28]	; (8004ae4 <UART_SetConfig+0x384>)
 8004ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8004acc:	095b      	lsrs	r3, r3, #5
 8004ace:	f003 0207 	and.w	r2, r3, #7
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4442      	add	r2, r8
 8004ad8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004ada:	e1b2      	b.n	8004e42 <UART_SetConfig+0x6e2>
 8004adc:	40011000 	.word	0x40011000
 8004ae0:	40011400 	.word	0x40011400
 8004ae4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4ad7      	ldr	r2, [pc, #860]	; (8004e4c <UART_SetConfig+0x6ec>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d005      	beq.n	8004afe <UART_SetConfig+0x39e>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4ad6      	ldr	r2, [pc, #856]	; (8004e50 <UART_SetConfig+0x6f0>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	f040 80d1 	bne.w	8004ca0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004afe:	f7fe fbaf 	bl	8003260 <HAL_RCC_GetPCLK2Freq>
 8004b02:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	469a      	mov	sl, r3
 8004b08:	f04f 0b00 	mov.w	fp, #0
 8004b0c:	46d0      	mov	r8, sl
 8004b0e:	46d9      	mov	r9, fp
 8004b10:	eb18 0308 	adds.w	r3, r8, r8
 8004b14:	eb49 0409 	adc.w	r4, r9, r9
 8004b18:	4698      	mov	r8, r3
 8004b1a:	46a1      	mov	r9, r4
 8004b1c:	eb18 080a 	adds.w	r8, r8, sl
 8004b20:	eb49 090b 	adc.w	r9, r9, fp
 8004b24:	f04f 0100 	mov.w	r1, #0
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004b30:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004b34:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004b38:	4688      	mov	r8, r1
 8004b3a:	4691      	mov	r9, r2
 8004b3c:	eb1a 0508 	adds.w	r5, sl, r8
 8004b40:	eb4b 0609 	adc.w	r6, fp, r9
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	4619      	mov	r1, r3
 8004b4a:	f04f 0200 	mov.w	r2, #0
 8004b4e:	f04f 0300 	mov.w	r3, #0
 8004b52:	f04f 0400 	mov.w	r4, #0
 8004b56:	0094      	lsls	r4, r2, #2
 8004b58:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b5c:	008b      	lsls	r3, r1, #2
 8004b5e:	461a      	mov	r2, r3
 8004b60:	4623      	mov	r3, r4
 8004b62:	4628      	mov	r0, r5
 8004b64:	4631      	mov	r1, r6
 8004b66:	f7fc f89f 	bl	8000ca8 <__aeabi_uldivmod>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	460c      	mov	r4, r1
 8004b6e:	461a      	mov	r2, r3
 8004b70:	4bb8      	ldr	r3, [pc, #736]	; (8004e54 <UART_SetConfig+0x6f4>)
 8004b72:	fba3 2302 	umull	r2, r3, r3, r2
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	469b      	mov	fp, r3
 8004b80:	f04f 0c00 	mov.w	ip, #0
 8004b84:	46d9      	mov	r9, fp
 8004b86:	46e2      	mov	sl, ip
 8004b88:	eb19 0309 	adds.w	r3, r9, r9
 8004b8c:	eb4a 040a 	adc.w	r4, sl, sl
 8004b90:	4699      	mov	r9, r3
 8004b92:	46a2      	mov	sl, r4
 8004b94:	eb19 090b 	adds.w	r9, r9, fp
 8004b98:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b9c:	f04f 0100 	mov.w	r1, #0
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ba8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004bac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004bb0:	4689      	mov	r9, r1
 8004bb2:	4692      	mov	sl, r2
 8004bb4:	eb1b 0509 	adds.w	r5, fp, r9
 8004bb8:	eb4c 060a 	adc.w	r6, ip, sl
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	f04f 0200 	mov.w	r2, #0
 8004bc6:	f04f 0300 	mov.w	r3, #0
 8004bca:	f04f 0400 	mov.w	r4, #0
 8004bce:	0094      	lsls	r4, r2, #2
 8004bd0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004bd4:	008b      	lsls	r3, r1, #2
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	4623      	mov	r3, r4
 8004bda:	4628      	mov	r0, r5
 8004bdc:	4631      	mov	r1, r6
 8004bde:	f7fc f863 	bl	8000ca8 <__aeabi_uldivmod>
 8004be2:	4603      	mov	r3, r0
 8004be4:	460c      	mov	r4, r1
 8004be6:	461a      	mov	r2, r3
 8004be8:	4b9a      	ldr	r3, [pc, #616]	; (8004e54 <UART_SetConfig+0x6f4>)
 8004bea:	fba3 1302 	umull	r1, r3, r3, r2
 8004bee:	095b      	lsrs	r3, r3, #5
 8004bf0:	2164      	movs	r1, #100	; 0x64
 8004bf2:	fb01 f303 	mul.w	r3, r1, r3
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	3332      	adds	r3, #50	; 0x32
 8004bfc:	4a95      	ldr	r2, [pc, #596]	; (8004e54 <UART_SetConfig+0x6f4>)
 8004bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004c02:	095b      	lsrs	r3, r3, #5
 8004c04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c08:	4498      	add	r8, r3
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	469b      	mov	fp, r3
 8004c0e:	f04f 0c00 	mov.w	ip, #0
 8004c12:	46d9      	mov	r9, fp
 8004c14:	46e2      	mov	sl, ip
 8004c16:	eb19 0309 	adds.w	r3, r9, r9
 8004c1a:	eb4a 040a 	adc.w	r4, sl, sl
 8004c1e:	4699      	mov	r9, r3
 8004c20:	46a2      	mov	sl, r4
 8004c22:	eb19 090b 	adds.w	r9, r9, fp
 8004c26:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c2a:	f04f 0100 	mov.w	r1, #0
 8004c2e:	f04f 0200 	mov.w	r2, #0
 8004c32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c3e:	4689      	mov	r9, r1
 8004c40:	4692      	mov	sl, r2
 8004c42:	eb1b 0509 	adds.w	r5, fp, r9
 8004c46:	eb4c 060a 	adc.w	r6, ip, sl
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	4619      	mov	r1, r3
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	f04f 0400 	mov.w	r4, #0
 8004c5c:	0094      	lsls	r4, r2, #2
 8004c5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c62:	008b      	lsls	r3, r1, #2
 8004c64:	461a      	mov	r2, r3
 8004c66:	4623      	mov	r3, r4
 8004c68:	4628      	mov	r0, r5
 8004c6a:	4631      	mov	r1, r6
 8004c6c:	f7fc f81c 	bl	8000ca8 <__aeabi_uldivmod>
 8004c70:	4603      	mov	r3, r0
 8004c72:	460c      	mov	r4, r1
 8004c74:	461a      	mov	r2, r3
 8004c76:	4b77      	ldr	r3, [pc, #476]	; (8004e54 <UART_SetConfig+0x6f4>)
 8004c78:	fba3 1302 	umull	r1, r3, r3, r2
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	2164      	movs	r1, #100	; 0x64
 8004c80:	fb01 f303 	mul.w	r3, r1, r3
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	3332      	adds	r3, #50	; 0x32
 8004c8a:	4a72      	ldr	r2, [pc, #456]	; (8004e54 <UART_SetConfig+0x6f4>)
 8004c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c90:	095b      	lsrs	r3, r3, #5
 8004c92:	f003 020f 	and.w	r2, r3, #15
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4442      	add	r2, r8
 8004c9c:	609a      	str	r2, [r3, #8]
 8004c9e:	e0d0      	b.n	8004e42 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ca0:	f7fe faca 	bl	8003238 <HAL_RCC_GetPCLK1Freq>
 8004ca4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	469a      	mov	sl, r3
 8004caa:	f04f 0b00 	mov.w	fp, #0
 8004cae:	46d0      	mov	r8, sl
 8004cb0:	46d9      	mov	r9, fp
 8004cb2:	eb18 0308 	adds.w	r3, r8, r8
 8004cb6:	eb49 0409 	adc.w	r4, r9, r9
 8004cba:	4698      	mov	r8, r3
 8004cbc:	46a1      	mov	r9, r4
 8004cbe:	eb18 080a 	adds.w	r8, r8, sl
 8004cc2:	eb49 090b 	adc.w	r9, r9, fp
 8004cc6:	f04f 0100 	mov.w	r1, #0
 8004cca:	f04f 0200 	mov.w	r2, #0
 8004cce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004cd2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004cd6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004cda:	4688      	mov	r8, r1
 8004cdc:	4691      	mov	r9, r2
 8004cde:	eb1a 0508 	adds.w	r5, sl, r8
 8004ce2:	eb4b 0609 	adc.w	r6, fp, r9
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	4619      	mov	r1, r3
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	f04f 0400 	mov.w	r4, #0
 8004cf8:	0094      	lsls	r4, r2, #2
 8004cfa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004cfe:	008b      	lsls	r3, r1, #2
 8004d00:	461a      	mov	r2, r3
 8004d02:	4623      	mov	r3, r4
 8004d04:	4628      	mov	r0, r5
 8004d06:	4631      	mov	r1, r6
 8004d08:	f7fb ffce 	bl	8000ca8 <__aeabi_uldivmod>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	460c      	mov	r4, r1
 8004d10:	461a      	mov	r2, r3
 8004d12:	4b50      	ldr	r3, [pc, #320]	; (8004e54 <UART_SetConfig+0x6f4>)
 8004d14:	fba3 2302 	umull	r2, r3, r3, r2
 8004d18:	095b      	lsrs	r3, r3, #5
 8004d1a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	469b      	mov	fp, r3
 8004d22:	f04f 0c00 	mov.w	ip, #0
 8004d26:	46d9      	mov	r9, fp
 8004d28:	46e2      	mov	sl, ip
 8004d2a:	eb19 0309 	adds.w	r3, r9, r9
 8004d2e:	eb4a 040a 	adc.w	r4, sl, sl
 8004d32:	4699      	mov	r9, r3
 8004d34:	46a2      	mov	sl, r4
 8004d36:	eb19 090b 	adds.w	r9, r9, fp
 8004d3a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004d3e:	f04f 0100 	mov.w	r1, #0
 8004d42:	f04f 0200 	mov.w	r2, #0
 8004d46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d52:	4689      	mov	r9, r1
 8004d54:	4692      	mov	sl, r2
 8004d56:	eb1b 0509 	adds.w	r5, fp, r9
 8004d5a:	eb4c 060a 	adc.w	r6, ip, sl
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	4619      	mov	r1, r3
 8004d64:	f04f 0200 	mov.w	r2, #0
 8004d68:	f04f 0300 	mov.w	r3, #0
 8004d6c:	f04f 0400 	mov.w	r4, #0
 8004d70:	0094      	lsls	r4, r2, #2
 8004d72:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d76:	008b      	lsls	r3, r1, #2
 8004d78:	461a      	mov	r2, r3
 8004d7a:	4623      	mov	r3, r4
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	4631      	mov	r1, r6
 8004d80:	f7fb ff92 	bl	8000ca8 <__aeabi_uldivmod>
 8004d84:	4603      	mov	r3, r0
 8004d86:	460c      	mov	r4, r1
 8004d88:	461a      	mov	r2, r3
 8004d8a:	4b32      	ldr	r3, [pc, #200]	; (8004e54 <UART_SetConfig+0x6f4>)
 8004d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d90:	095b      	lsrs	r3, r3, #5
 8004d92:	2164      	movs	r1, #100	; 0x64
 8004d94:	fb01 f303 	mul.w	r3, r1, r3
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	011b      	lsls	r3, r3, #4
 8004d9c:	3332      	adds	r3, #50	; 0x32
 8004d9e:	4a2d      	ldr	r2, [pc, #180]	; (8004e54 <UART_SetConfig+0x6f4>)
 8004da0:	fba2 2303 	umull	r2, r3, r2, r3
 8004da4:	095b      	lsrs	r3, r3, #5
 8004da6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004daa:	4498      	add	r8, r3
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	469b      	mov	fp, r3
 8004db0:	f04f 0c00 	mov.w	ip, #0
 8004db4:	46d9      	mov	r9, fp
 8004db6:	46e2      	mov	sl, ip
 8004db8:	eb19 0309 	adds.w	r3, r9, r9
 8004dbc:	eb4a 040a 	adc.w	r4, sl, sl
 8004dc0:	4699      	mov	r9, r3
 8004dc2:	46a2      	mov	sl, r4
 8004dc4:	eb19 090b 	adds.w	r9, r9, fp
 8004dc8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004dcc:	f04f 0100 	mov.w	r1, #0
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dd8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ddc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004de0:	4689      	mov	r9, r1
 8004de2:	4692      	mov	sl, r2
 8004de4:	eb1b 0509 	adds.w	r5, fp, r9
 8004de8:	eb4c 060a 	adc.w	r6, ip, sl
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	4619      	mov	r1, r3
 8004df2:	f04f 0200 	mov.w	r2, #0
 8004df6:	f04f 0300 	mov.w	r3, #0
 8004dfa:	f04f 0400 	mov.w	r4, #0
 8004dfe:	0094      	lsls	r4, r2, #2
 8004e00:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e04:	008b      	lsls	r3, r1, #2
 8004e06:	461a      	mov	r2, r3
 8004e08:	4623      	mov	r3, r4
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	4631      	mov	r1, r6
 8004e0e:	f7fb ff4b 	bl	8000ca8 <__aeabi_uldivmod>
 8004e12:	4603      	mov	r3, r0
 8004e14:	460c      	mov	r4, r1
 8004e16:	461a      	mov	r2, r3
 8004e18:	4b0e      	ldr	r3, [pc, #56]	; (8004e54 <UART_SetConfig+0x6f4>)
 8004e1a:	fba3 1302 	umull	r1, r3, r3, r2
 8004e1e:	095b      	lsrs	r3, r3, #5
 8004e20:	2164      	movs	r1, #100	; 0x64
 8004e22:	fb01 f303 	mul.w	r3, r1, r3
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	011b      	lsls	r3, r3, #4
 8004e2a:	3332      	adds	r3, #50	; 0x32
 8004e2c:	4a09      	ldr	r2, [pc, #36]	; (8004e54 <UART_SetConfig+0x6f4>)
 8004e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e32:	095b      	lsrs	r3, r3, #5
 8004e34:	f003 020f 	and.w	r2, r3, #15
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4442      	add	r2, r8
 8004e3e:	609a      	str	r2, [r3, #8]
}
 8004e40:	e7ff      	b.n	8004e42 <UART_SetConfig+0x6e2>
 8004e42:	bf00      	nop
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e4c:	40011000 	.word	0x40011000
 8004e50:	40011400 	.word	0x40011400
 8004e54:	51eb851f 	.word	0x51eb851f

08004e58 <display_screens>:

unsigned char end_char[4] = {0xff,0xff,0xff,'\0'};
char disp_cmd[100];
int disp_cmd_len = 0;

void display_screens(){
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0

	switch (current_screen_state){
 8004e5c:	4b77      	ldr	r3, [pc, #476]	; (800503c <display_screens+0x1e4>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	f200 80e9 	bhi.w	8005038 <display_screens+0x1e0>
 8004e66:	a201      	add	r2, pc, #4	; (adr r2, 8004e6c <display_screens+0x14>)
 8004e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6c:	08004e81 	.word	0x08004e81
 8004e70:	08004ea5 	.word	0x08004ea5
 8004e74:	08004f01 	.word	0x08004f01
 8004e78:	08004f6d 	.word	0x08004f6d
 8004e7c:	08004fd7 	.word	0x08004fd7

	case GOTO_HOME_SCREEN:
		disp_cmd_len = sprintf(disp_cmd,"page 1%s",end_char);
 8004e80:	4a6f      	ldr	r2, [pc, #444]	; (8005040 <display_screens+0x1e8>)
 8004e82:	4970      	ldr	r1, [pc, #448]	; (8005044 <display_screens+0x1ec>)
 8004e84:	4870      	ldr	r0, [pc, #448]	; (8005048 <display_screens+0x1f0>)
 8004e86:	f004 fea3 	bl	8009bd0 <siprintf>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	4b6f      	ldr	r3, [pc, #444]	; (800504c <display_screens+0x1f4>)
 8004e8e:	601a      	str	r2, [r3, #0]
		lcd_send_cmd(disp_cmd,disp_cmd_len);
 8004e90:	4b6e      	ldr	r3, [pc, #440]	; (800504c <display_screens+0x1f4>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4619      	mov	r1, r3
 8004e96:	486c      	ldr	r0, [pc, #432]	; (8005048 <display_screens+0x1f0>)
 8004e98:	f003 ffcc 	bl	8008e34 <lcd_send_cmd>
		current_screen_state = UPDATE_HOME_SCREEN;
 8004e9c:	4b67      	ldr	r3, [pc, #412]	; (800503c <display_screens+0x1e4>)
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]
		break;
 8004ea2:	e0c9      	b.n	8005038 <display_screens+0x1e0>


	case UPDATE_HOME_SCREEN:
		if(key_pressed == NONE_KEY_PRESSED)
 8004ea4:	4b6a      	ldr	r3, [pc, #424]	; (8005050 <display_screens+0x1f8>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d102      	bne.n	8004eb2 <display_screens+0x5a>
		{
			homescreen_update();
 8004eac:	f000 faf2 	bl	8005494 <homescreen_update>
			disp_cmd_len = sprintf(disp_cmd,"page 4%s",end_char);
			lcd_send_cmd(disp_cmd,disp_cmd_len);
			key_pressed = NONE_KEY_PRESSED;
			current_screen_state = ALARMS_SCREEN;
		}
		break;
 8004eb0:	e0bb      	b.n	800502a <display_screens+0x1d2>
		else if(key_pressed == RIGHT_KEY_PRESSED)
 8004eb2:	4b67      	ldr	r3, [pc, #412]	; (8005050 <display_screens+0x1f8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d108      	bne.n	8004ecc <display_screens+0x74>
			settings_update();
 8004eba:	f002 fe33 	bl	8007b24 <settings_update>
			key_pressed = NONE_KEY_PRESSED;
 8004ebe:	4b64      	ldr	r3, [pc, #400]	; (8005050 <display_screens+0x1f8>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]
			current_screen_state = SETTINGS_SCREEN;
 8004ec4:	4b5d      	ldr	r3, [pc, #372]	; (800503c <display_screens+0x1e4>)
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	601a      	str	r2, [r3, #0]
		break;
 8004eca:	e0ae      	b.n	800502a <display_screens+0x1d2>
		else if(key_pressed == LEFT_KEY_PRESSED)
 8004ecc:	4b60      	ldr	r3, [pc, #384]	; (8005050 <display_screens+0x1f8>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	f040 80aa 	bne.w	800502a <display_screens+0x1d2>
			disp_cmd_len = sprintf(disp_cmd,"page 4%s",end_char);
 8004ed6:	4a5a      	ldr	r2, [pc, #360]	; (8005040 <display_screens+0x1e8>)
 8004ed8:	495e      	ldr	r1, [pc, #376]	; (8005054 <display_screens+0x1fc>)
 8004eda:	485b      	ldr	r0, [pc, #364]	; (8005048 <display_screens+0x1f0>)
 8004edc:	f004 fe78 	bl	8009bd0 <siprintf>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	4b5a      	ldr	r3, [pc, #360]	; (800504c <display_screens+0x1f4>)
 8004ee4:	601a      	str	r2, [r3, #0]
			lcd_send_cmd(disp_cmd,disp_cmd_len);
 8004ee6:	4b59      	ldr	r3, [pc, #356]	; (800504c <display_screens+0x1f4>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4619      	mov	r1, r3
 8004eec:	4856      	ldr	r0, [pc, #344]	; (8005048 <display_screens+0x1f0>)
 8004eee:	f003 ffa1 	bl	8008e34 <lcd_send_cmd>
			key_pressed = NONE_KEY_PRESSED;
 8004ef2:	4b57      	ldr	r3, [pc, #348]	; (8005050 <display_screens+0x1f8>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]
			current_screen_state = ALARMS_SCREEN;
 8004ef8:	4b50      	ldr	r3, [pc, #320]	; (800503c <display_screens+0x1e4>)
 8004efa:	2204      	movs	r2, #4
 8004efc:	601a      	str	r2, [r3, #0]
		break;
 8004efe:	e094      	b.n	800502a <display_screens+0x1d2>

	case SETTINGS_SCREEN:
		if(key_pressed == NONE_KEY_PRESSED)
 8004f00:	4b53      	ldr	r3, [pc, #332]	; (8005050 <display_screens+0x1f8>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f000 8092 	beq.w	800502e <display_screens+0x1d6>
//			if(save_settings == 2)
//			{
//				settings_update();
//			}
		}
		else if(key_pressed == RIGHT_KEY_PRESSED)
 8004f0a:	4b51      	ldr	r3, [pc, #324]	; (8005050 <display_screens+0x1f8>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d108      	bne.n	8004f24 <display_screens+0xcc>
		{
			settings2_update();
 8004f12:	f002 fe79 	bl	8007c08 <settings2_update>
//			disp_cmd_len = sprintf(disp_cmd,"page 2%s",end_char);
//			lcd_send_cmd(disp_cmd,disp_cmd_len);
			key_pressed = NONE_KEY_PRESSED;
 8004f16:	4b4e      	ldr	r3, [pc, #312]	; (8005050 <display_screens+0x1f8>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]
			current_screen_state = SETTINGS_SCREEN2;
 8004f1c:	4b47      	ldr	r3, [pc, #284]	; (800503c <display_screens+0x1e4>)
 8004f1e:	2203      	movs	r2, #3
 8004f20:	601a      	str	r2, [r3, #0]
		else if(key_pressed == ENTER_KEY_PRESSED)
		{
			DisplayActions = display_edit_settings;
			key_pressed = NONE_KEY_PRESSED;
		}
		break;
 8004f22:	e084      	b.n	800502e <display_screens+0x1d6>
		else if(key_pressed == LEFT_KEY_PRESSED)
 8004f24:	4b4a      	ldr	r3, [pc, #296]	; (8005050 <display_screens+0x1f8>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d114      	bne.n	8004f56 <display_screens+0xfe>
			disp_cmd_len = sprintf(disp_cmd,"page 1%s",end_char);
 8004f2c:	4a44      	ldr	r2, [pc, #272]	; (8005040 <display_screens+0x1e8>)
 8004f2e:	4945      	ldr	r1, [pc, #276]	; (8005044 <display_screens+0x1ec>)
 8004f30:	4845      	ldr	r0, [pc, #276]	; (8005048 <display_screens+0x1f0>)
 8004f32:	f004 fe4d 	bl	8009bd0 <siprintf>
 8004f36:	4602      	mov	r2, r0
 8004f38:	4b44      	ldr	r3, [pc, #272]	; (800504c <display_screens+0x1f4>)
 8004f3a:	601a      	str	r2, [r3, #0]
			lcd_send_cmd(disp_cmd,disp_cmd_len);
 8004f3c:	4b43      	ldr	r3, [pc, #268]	; (800504c <display_screens+0x1f4>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4619      	mov	r1, r3
 8004f42:	4841      	ldr	r0, [pc, #260]	; (8005048 <display_screens+0x1f0>)
 8004f44:	f003 ff76 	bl	8008e34 <lcd_send_cmd>
			key_pressed = NONE_KEY_PRESSED;
 8004f48:	4b41      	ldr	r3, [pc, #260]	; (8005050 <display_screens+0x1f8>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]
			current_screen_state = UPDATE_HOME_SCREEN;
 8004f4e:	4b3b      	ldr	r3, [pc, #236]	; (800503c <display_screens+0x1e4>)
 8004f50:	2201      	movs	r2, #1
 8004f52:	601a      	str	r2, [r3, #0]
		break;
 8004f54:	e06b      	b.n	800502e <display_screens+0x1d6>
		else if(key_pressed == ENTER_KEY_PRESSED)
 8004f56:	4b3e      	ldr	r3, [pc, #248]	; (8005050 <display_screens+0x1f8>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2b03      	cmp	r3, #3
 8004f5c:	d167      	bne.n	800502e <display_screens+0x1d6>
			DisplayActions = display_edit_settings;
 8004f5e:	4b3e      	ldr	r3, [pc, #248]	; (8005058 <display_screens+0x200>)
 8004f60:	4a3e      	ldr	r2, [pc, #248]	; (800505c <display_screens+0x204>)
 8004f62:	601a      	str	r2, [r3, #0]
			key_pressed = NONE_KEY_PRESSED;
 8004f64:	4b3a      	ldr	r3, [pc, #232]	; (8005050 <display_screens+0x1f8>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	601a      	str	r2, [r3, #0]
		break;
 8004f6a:	e060      	b.n	800502e <display_screens+0x1d6>

	case SETTINGS_SCREEN2:
		if(key_pressed == NONE_KEY_PRESSED)
 8004f6c:	4b38      	ldr	r3, [pc, #224]	; (8005050 <display_screens+0x1f8>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d05e      	beq.n	8005032 <display_screens+0x1da>
//			if(save_settings == 2)
//			{
//				settings2_update();
//			}
		}
		else if(key_pressed == RIGHT_KEY_PRESSED)
 8004f74:	4b36      	ldr	r3, [pc, #216]	; (8005050 <display_screens+0x1f8>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d114      	bne.n	8004fa6 <display_screens+0x14e>
		{
			disp_cmd_len = sprintf(disp_cmd,"page 4%s",end_char);
 8004f7c:	4a30      	ldr	r2, [pc, #192]	; (8005040 <display_screens+0x1e8>)
 8004f7e:	4935      	ldr	r1, [pc, #212]	; (8005054 <display_screens+0x1fc>)
 8004f80:	4831      	ldr	r0, [pc, #196]	; (8005048 <display_screens+0x1f0>)
 8004f82:	f004 fe25 	bl	8009bd0 <siprintf>
 8004f86:	4602      	mov	r2, r0
 8004f88:	4b30      	ldr	r3, [pc, #192]	; (800504c <display_screens+0x1f4>)
 8004f8a:	601a      	str	r2, [r3, #0]
			lcd_send_cmd(disp_cmd,disp_cmd_len);
 8004f8c:	4b2f      	ldr	r3, [pc, #188]	; (800504c <display_screens+0x1f4>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4619      	mov	r1, r3
 8004f92:	482d      	ldr	r0, [pc, #180]	; (8005048 <display_screens+0x1f0>)
 8004f94:	f003 ff4e 	bl	8008e34 <lcd_send_cmd>
			key_pressed = NONE_KEY_PRESSED;
 8004f98:	4b2d      	ldr	r3, [pc, #180]	; (8005050 <display_screens+0x1f8>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	601a      	str	r2, [r3, #0]
			current_screen_state = ALARMS_SCREEN;
 8004f9e:	4b27      	ldr	r3, [pc, #156]	; (800503c <display_screens+0x1e4>)
 8004fa0:	2204      	movs	r2, #4
 8004fa2:	601a      	str	r2, [r3, #0]
		else if(key_pressed == ENTER_KEY_PRESSED)
		{
			DisplayActions = display_edit_settings;
			key_pressed = NONE_KEY_PRESSED;
		}
		break;
 8004fa4:	e045      	b.n	8005032 <display_screens+0x1da>
		else if(key_pressed == LEFT_KEY_PRESSED)
 8004fa6:	4b2a      	ldr	r3, [pc, #168]	; (8005050 <display_screens+0x1f8>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d108      	bne.n	8004fc0 <display_screens+0x168>
			settings_update();
 8004fae:	f002 fdb9 	bl	8007b24 <settings_update>
			key_pressed = NONE_KEY_PRESSED;
 8004fb2:	4b27      	ldr	r3, [pc, #156]	; (8005050 <display_screens+0x1f8>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	601a      	str	r2, [r3, #0]
			current_screen_state = SETTINGS_SCREEN;
 8004fb8:	4b20      	ldr	r3, [pc, #128]	; (800503c <display_screens+0x1e4>)
 8004fba:	2202      	movs	r2, #2
 8004fbc:	601a      	str	r2, [r3, #0]
		break;
 8004fbe:	e038      	b.n	8005032 <display_screens+0x1da>
		else if(key_pressed == ENTER_KEY_PRESSED)
 8004fc0:	4b23      	ldr	r3, [pc, #140]	; (8005050 <display_screens+0x1f8>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2b03      	cmp	r3, #3
 8004fc6:	d134      	bne.n	8005032 <display_screens+0x1da>
			DisplayActions = display_edit_settings;
 8004fc8:	4b23      	ldr	r3, [pc, #140]	; (8005058 <display_screens+0x200>)
 8004fca:	4a24      	ldr	r2, [pc, #144]	; (800505c <display_screens+0x204>)
 8004fcc:	601a      	str	r2, [r3, #0]
			key_pressed = NONE_KEY_PRESSED;
 8004fce:	4b20      	ldr	r3, [pc, #128]	; (8005050 <display_screens+0x1f8>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]
		break;
 8004fd4:	e02d      	b.n	8005032 <display_screens+0x1da>

	case ALARMS_SCREEN:
		if(key_pressed == NONE_KEY_PRESSED)
 8004fd6:	4b1e      	ldr	r3, [pc, #120]	; (8005050 <display_screens+0x1f8>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d02b      	beq.n	8005036 <display_screens+0x1de>
		{

		}
		else if(key_pressed == RIGHT_KEY_PRESSED)
 8004fde:	4b1c      	ldr	r3, [pc, #112]	; (8005050 <display_screens+0x1f8>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d114      	bne.n	8005010 <display_screens+0x1b8>
		{
			disp_cmd_len = sprintf(disp_cmd,"page 1%s",end_char);
 8004fe6:	4a16      	ldr	r2, [pc, #88]	; (8005040 <display_screens+0x1e8>)
 8004fe8:	4916      	ldr	r1, [pc, #88]	; (8005044 <display_screens+0x1ec>)
 8004fea:	4817      	ldr	r0, [pc, #92]	; (8005048 <display_screens+0x1f0>)
 8004fec:	f004 fdf0 	bl	8009bd0 <siprintf>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	4b16      	ldr	r3, [pc, #88]	; (800504c <display_screens+0x1f4>)
 8004ff4:	601a      	str	r2, [r3, #0]
			lcd_send_cmd(disp_cmd,disp_cmd_len);
 8004ff6:	4b15      	ldr	r3, [pc, #84]	; (800504c <display_screens+0x1f4>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	4812      	ldr	r0, [pc, #72]	; (8005048 <display_screens+0x1f0>)
 8004ffe:	f003 ff19 	bl	8008e34 <lcd_send_cmd>
			key_pressed = NONE_KEY_PRESSED;
 8005002:	4b13      	ldr	r3, [pc, #76]	; (8005050 <display_screens+0x1f8>)
 8005004:	2200      	movs	r2, #0
 8005006:	601a      	str	r2, [r3, #0]
			current_screen_state = UPDATE_HOME_SCREEN;
 8005008:	4b0c      	ldr	r3, [pc, #48]	; (800503c <display_screens+0x1e4>)
 800500a:	2201      	movs	r2, #1
 800500c:	601a      	str	r2, [r3, #0]
//			disp_cmd_len = sprintf(disp_cmd,"page 2%s",end_char);
//			lcd_send_cmd(disp_cmd,disp_cmd_len);
			key_pressed = NONE_KEY_PRESSED;
			current_screen_state = SETTINGS_SCREEN2;
		}
		break;
 800500e:	e012      	b.n	8005036 <display_screens+0x1de>
		else if(key_pressed == LEFT_KEY_PRESSED)
 8005010:	4b0f      	ldr	r3, [pc, #60]	; (8005050 <display_screens+0x1f8>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d10e      	bne.n	8005036 <display_screens+0x1de>
			settings2_update();
 8005018:	f002 fdf6 	bl	8007c08 <settings2_update>
			key_pressed = NONE_KEY_PRESSED;
 800501c:	4b0c      	ldr	r3, [pc, #48]	; (8005050 <display_screens+0x1f8>)
 800501e:	2200      	movs	r2, #0
 8005020:	601a      	str	r2, [r3, #0]
			current_screen_state = SETTINGS_SCREEN2;
 8005022:	4b06      	ldr	r3, [pc, #24]	; (800503c <display_screens+0x1e4>)
 8005024:	2203      	movs	r2, #3
 8005026:	601a      	str	r2, [r3, #0]
		break;
 8005028:	e005      	b.n	8005036 <display_screens+0x1de>
		break;
 800502a:	bf00      	nop
 800502c:	e004      	b.n	8005038 <display_screens+0x1e0>
		break;
 800502e:	bf00      	nop
 8005030:	e002      	b.n	8005038 <display_screens+0x1e0>
		break;
 8005032:	bf00      	nop
 8005034:	e000      	b.n	8005038 <display_screens+0x1e0>
		break;
 8005036:	bf00      	nop

	}

}
 8005038:	bf00      	nop
 800503a:	bd80      	pop	{r7, pc}
 800503c:	20000204 	.word	0x20000204
 8005040:	2000000c 	.word	0x2000000c
 8005044:	0800c9d0 	.word	0x0800c9d0
 8005048:	200006fc 	.word	0x200006fc
 800504c:	20000208 	.word	0x20000208
 8005050:	2000020c 	.word	0x2000020c
 8005054:	0800c9dc 	.word	0x0800c9dc
 8005058:	200006d4 	.word	0x200006d4
 800505c:	08006d35 	.word	0x08006d35

08005060 <__update_makeup_water_added>:

/*******************************************************************************
 *  PRIVATE
 ******************************************************************************/
void __update_makeup_water_added(char *disp_mwa_cmd, int *disp_mwa_cmd_len)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b088      	sub	sp, #32
 8005064:	af02      	add	r7, sp, #8
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
	uint8_t n[6];
	int temp = makeup_water_added;
 800506a:	4b24      	ldr	r3, [pc, #144]	; (80050fc <__update_makeup_water_added+0x9c>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 6; i++)
 8005070:	2300      	movs	r3, #0
 8005072:	613b      	str	r3, [r7, #16]
 8005074:	e03a      	b.n	80050ec <__update_makeup_water_added+0x8c>
	{
		n[i] = temp % 10;
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	4b21      	ldr	r3, [pc, #132]	; (8005100 <__update_makeup_water_added+0xa0>)
 800507a:	fb83 1302 	smull	r1, r3, r3, r2
 800507e:	1099      	asrs	r1, r3, #2
 8005080:	17d3      	asrs	r3, r2, #31
 8005082:	1ac9      	subs	r1, r1, r3
 8005084:	460b      	mov	r3, r1
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	440b      	add	r3, r1
 800508a:	005b      	lsls	r3, r3, #1
 800508c:	1ad1      	subs	r1, r2, r3
 800508e:	b2c9      	uxtb	r1, r1
 8005090:	f107 0208 	add.w	r2, r7, #8
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	4413      	add	r3, r2
 8005098:	460a      	mov	r2, r1
 800509a:	701a      	strb	r2, [r3, #0]
		temp = temp / 10;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	4a18      	ldr	r2, [pc, #96]	; (8005100 <__update_makeup_water_added+0xa0>)
 80050a0:	fb82 1203 	smull	r1, r2, r2, r3
 80050a4:	1092      	asrs	r2, r2, #2
 80050a6:	17db      	asrs	r3, r3, #31
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	617b      	str	r3, [r7, #20]
		*disp_mwa_cmd_len += snprintf (disp_mwa_cmd+(*disp_mwa_cmd_len),1024-(*disp_mwa_cmd_len),"n%d.val=%d%s",i,n[i],end_char);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	461a      	mov	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	1898      	adds	r0, r3, r2
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80050be:	4619      	mov	r1, r3
 80050c0:	f107 0208 	add.w	r2, r7, #8
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	4413      	add	r3, r2
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	461a      	mov	r2, r3
 80050cc:	4b0d      	ldr	r3, [pc, #52]	; (8005104 <__update_makeup_water_added+0xa4>)
 80050ce:	9301      	str	r3, [sp, #4]
 80050d0:	9200      	str	r2, [sp, #0]
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	4a0c      	ldr	r2, [pc, #48]	; (8005108 <__update_makeup_water_added+0xa8>)
 80050d6:	f004 fd47 	bl	8009b68 <sniprintf>
 80050da:	4602      	mov	r2, r0
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	441a      	add	r2, r3
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 6; i++)
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	3301      	adds	r3, #1
 80050ea:	613b      	str	r3, [r7, #16]
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	2b05      	cmp	r3, #5
 80050f0:	ddc1      	ble.n	8005076 <__update_makeup_water_added+0x16>
	}
}
 80050f2:	bf00      	nop
 80050f4:	3718      	adds	r7, #24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	20000230 	.word	0x20000230
 8005100:	66666667 	.word	0x66666667
 8005104:	2000000c 	.word	0x2000000c
 8005108:	0800c9e8 	.word	0x0800c9e8

0800510c <__update_blowdown_water>:

void __update_blowdown_water(char *disp_bd_cmd,int *disp_bd_cmd_len)
{
 800510c:	b590      	push	{r4, r7, lr}
 800510e:	b089      	sub	sp, #36	; 0x24
 8005110:	af02      	add	r7, sp, #8
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
	uint8_t n[6];
	int temp = blowdown_water;
 8005116:	4b25      	ldr	r3, [pc, #148]	; (80051ac <__update_blowdown_water+0xa0>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 6; i++)
 800511c:	2300      	movs	r3, #0
 800511e:	613b      	str	r3, [r7, #16]
 8005120:	e03d      	b.n	800519e <__update_blowdown_water+0x92>
	{
		n[i] = temp % 10;
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4b22      	ldr	r3, [pc, #136]	; (80051b0 <__update_blowdown_water+0xa4>)
 8005126:	fb83 1302 	smull	r1, r3, r3, r2
 800512a:	1099      	asrs	r1, r3, #2
 800512c:	17d3      	asrs	r3, r2, #31
 800512e:	1ac9      	subs	r1, r1, r3
 8005130:	460b      	mov	r3, r1
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	440b      	add	r3, r1
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	1ad1      	subs	r1, r2, r3
 800513a:	b2c9      	uxtb	r1, r1
 800513c:	f107 0208 	add.w	r2, r7, #8
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	4413      	add	r3, r2
 8005144:	460a      	mov	r2, r1
 8005146:	701a      	strb	r2, [r3, #0]
		temp = temp / 10;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	4a19      	ldr	r2, [pc, #100]	; (80051b0 <__update_blowdown_water+0xa4>)
 800514c:	fb82 1203 	smull	r1, r2, r2, r3
 8005150:	1092      	asrs	r2, r2, #2
 8005152:	17db      	asrs	r3, r3, #31
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	617b      	str	r3, [r7, #20]
		*disp_bd_cmd_len += snprintf (disp_bd_cmd+(*disp_bd_cmd_len),1024-(*disp_bd_cmd_len),"n%d.val=%d%s",i+6,n[i],end_char);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	461a      	mov	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	1898      	adds	r0, r3, r2
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800516a:	461c      	mov	r4, r3
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1d99      	adds	r1, r3, #6
 8005170:	f107 0208 	add.w	r2, r7, #8
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	4413      	add	r3, r2
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	461a      	mov	r2, r3
 800517c:	4b0d      	ldr	r3, [pc, #52]	; (80051b4 <__update_blowdown_water+0xa8>)
 800517e:	9301      	str	r3, [sp, #4]
 8005180:	9200      	str	r2, [sp, #0]
 8005182:	460b      	mov	r3, r1
 8005184:	4a0c      	ldr	r2, [pc, #48]	; (80051b8 <__update_blowdown_water+0xac>)
 8005186:	4621      	mov	r1, r4
 8005188:	f004 fcee 	bl	8009b68 <sniprintf>
 800518c:	4602      	mov	r2, r0
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	441a      	add	r2, r3
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 6; i++)
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	3301      	adds	r3, #1
 800519c:	613b      	str	r3, [r7, #16]
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	2b05      	cmp	r3, #5
 80051a2:	ddbe      	ble.n	8005122 <__update_blowdown_water+0x16>
	}
}
 80051a4:	bf00      	nop
 80051a6:	371c      	adds	r7, #28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd90      	pop	{r4, r7, pc}
 80051ac:	20000234 	.word	0x20000234
 80051b0:	66666667 	.word	0x66666667
 80051b4:	2000000c 	.word	0x2000000c
 80051b8:	0800c9e8 	.word	0x0800c9e8

080051bc <__update_chemical1>:

void __update_chemical1(char *disp_che1_cmd,int *disp_che1_cmd_len)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af02      	add	r7, sp, #8
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
	*disp_che1_cmd_len += snprintf (disp_che1_cmd+(*disp_che1_cmd_len),1024-(*disp_che1_cmd_len),"x2.val=%d%s",chemical1,end_char); //n12 block on display
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	1898      	adds	r0, r3, r2
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80051d8:	4619      	mov	r1, r3
 80051da:	4b09      	ldr	r3, [pc, #36]	; (8005200 <__update_chemical1+0x44>)
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	4b09      	ldr	r3, [pc, #36]	; (8005204 <__update_chemical1+0x48>)
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	4613      	mov	r3, r2
 80051e4:	4a08      	ldr	r2, [pc, #32]	; (8005208 <__update_chemical1+0x4c>)
 80051e6:	f004 fcbf 	bl	8009b68 <sniprintf>
 80051ea:	4602      	mov	r2, r0
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	441a      	add	r2, r3
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	601a      	str	r2, [r3, #0]
}
 80051f6:	bf00      	nop
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	20000238 	.word	0x20000238
 8005204:	2000000c 	.word	0x2000000c
 8005208:	0800c9f8 	.word	0x0800c9f8

0800520c <__update_chemical2>:

void __update_chemical2(char *disp_che2_cmd,int *disp_che2_cmd_len)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af02      	add	r7, sp, #8
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
	*disp_che2_cmd_len += snprintf (disp_che2_cmd+(*disp_che2_cmd_len),1024-(*disp_che2_cmd_len),"x3.val=%d%s",chemical2,end_char); //n13 block on display
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	461a      	mov	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	1898      	adds	r0, r3, r2
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8005228:	4619      	mov	r1, r3
 800522a:	4b09      	ldr	r3, [pc, #36]	; (8005250 <__update_chemical2+0x44>)
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	4b09      	ldr	r3, [pc, #36]	; (8005254 <__update_chemical2+0x48>)
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	4613      	mov	r3, r2
 8005234:	4a08      	ldr	r2, [pc, #32]	; (8005258 <__update_chemical2+0x4c>)
 8005236:	f004 fc97 	bl	8009b68 <sniprintf>
 800523a:	4602      	mov	r2, r0
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	441a      	add	r2, r3
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	601a      	str	r2, [r3, #0]
}
 8005246:	bf00      	nop
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	2000023c 	.word	0x2000023c
 8005254:	2000000c 	.word	0x2000000c
 8005258:	0800ca04 	.word	0x0800ca04

0800525c <__update_ph_inlet_water>:

void __update_ph_inlet_water(char *disp_ph_inlet_cmd,int *disp_ph_inlet_cmd_len)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af02      	add	r7, sp, #8
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
	*disp_ph_inlet_cmd_len += snprintf (disp_ph_inlet_cmd+(*disp_ph_inlet_cmd_len),1024-(*disp_ph_inlet_cmd_len),"x0.val=%d%s",ph_inlet_water,end_char); //x0 block on display
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	461a      	mov	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	1898      	adds	r0, r3, r2
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8005278:	4619      	mov	r1, r3
 800527a:	4b09      	ldr	r3, [pc, #36]	; (80052a0 <__update_ph_inlet_water+0x44>)
 800527c:	881b      	ldrh	r3, [r3, #0]
 800527e:	461a      	mov	r2, r3
 8005280:	4b08      	ldr	r3, [pc, #32]	; (80052a4 <__update_ph_inlet_water+0x48>)
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	4613      	mov	r3, r2
 8005286:	4a08      	ldr	r2, [pc, #32]	; (80052a8 <__update_ph_inlet_water+0x4c>)
 8005288:	f004 fc6e 	bl	8009b68 <sniprintf>
 800528c:	4602      	mov	r2, r0
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	441a      	add	r2, r3
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	601a      	str	r2, [r3, #0]
}
 8005298:	bf00      	nop
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	20000240 	.word	0x20000240
 80052a4:	2000000c 	.word	0x2000000c
 80052a8:	0800ca10 	.word	0x0800ca10

080052ac <__update_ph_plant_water>:

void __update_ph_plant_water(char *disp_ph_plant_cmd,int *disp_ph_plant_cmd_len)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af02      	add	r7, sp, #8
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
	*disp_ph_plant_cmd_len += snprintf (disp_ph_plant_cmd+(*disp_ph_plant_cmd_len),1024-(*disp_ph_plant_cmd_len),"x1.val=%d%s",ph_plant_water,end_char); //x1 block on display
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	461a      	mov	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	1898      	adds	r0, r3, r2
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80052c8:	4619      	mov	r1, r3
 80052ca:	4b09      	ldr	r3, [pc, #36]	; (80052f0 <__update_ph_plant_water+0x44>)
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	461a      	mov	r2, r3
 80052d0:	4b08      	ldr	r3, [pc, #32]	; (80052f4 <__update_ph_plant_water+0x48>)
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	4613      	mov	r3, r2
 80052d6:	4a08      	ldr	r2, [pc, #32]	; (80052f8 <__update_ph_plant_water+0x4c>)
 80052d8:	f004 fc46 	bl	8009b68 <sniprintf>
 80052dc:	4602      	mov	r2, r0
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	441a      	add	r2, r3
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	601a      	str	r2, [r3, #0]
}
 80052e8:	bf00      	nop
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	20000242 	.word	0x20000242
 80052f4:	2000000c 	.word	0x2000000c
 80052f8:	0800ca1c 	.word	0x0800ca1c

080052fc <__update_tds_inlet_water>:

void __update_tds_inlet_water(char *disp_tds_inlet_cmd,int *disp_tds_inlet_cmd_len)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af02      	add	r7, sp, #8
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
	*disp_tds_inlet_cmd_len += snprintf (disp_tds_inlet_cmd+(*disp_tds_inlet_cmd_len),1024-(*disp_tds_inlet_cmd_len),"n14.val=%d%s",tds_inlet_water,end_char); //n14 block on display
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	461a      	mov	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	1898      	adds	r0, r3, r2
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8005318:	4619      	mov	r1, r3
 800531a:	4b09      	ldr	r3, [pc, #36]	; (8005340 <__update_tds_inlet_water+0x44>)
 800531c:	881b      	ldrh	r3, [r3, #0]
 800531e:	461a      	mov	r2, r3
 8005320:	4b08      	ldr	r3, [pc, #32]	; (8005344 <__update_tds_inlet_water+0x48>)
 8005322:	9300      	str	r3, [sp, #0]
 8005324:	4613      	mov	r3, r2
 8005326:	4a08      	ldr	r2, [pc, #32]	; (8005348 <__update_tds_inlet_water+0x4c>)
 8005328:	f004 fc1e 	bl	8009b68 <sniprintf>
 800532c:	4602      	mov	r2, r0
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	441a      	add	r2, r3
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	601a      	str	r2, [r3, #0]
}
 8005338:	bf00      	nop
 800533a:	3708      	adds	r7, #8
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	20000244 	.word	0x20000244
 8005344:	2000000c 	.word	0x2000000c
 8005348:	0800ca28 	.word	0x0800ca28

0800534c <__update_tds_plant_water>:

void __update_tds_plant_water(char *disp_tds_plant_cmd,int *disp_tds_plant_cmd_len)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af02      	add	r7, sp, #8
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
	*disp_tds_plant_cmd_len += snprintf (disp_tds_plant_cmd+(*disp_tds_plant_cmd_len),1024-(*disp_tds_plant_cmd_len),"n15.val=%d%s",tds_plant_water,end_char); //n15 block on display
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	461a      	mov	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	1898      	adds	r0, r3, r2
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8005368:	4619      	mov	r1, r3
 800536a:	4b09      	ldr	r3, [pc, #36]	; (8005390 <__update_tds_plant_water+0x44>)
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	461a      	mov	r2, r3
 8005370:	4b08      	ldr	r3, [pc, #32]	; (8005394 <__update_tds_plant_water+0x48>)
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	4613      	mov	r3, r2
 8005376:	4a08      	ldr	r2, [pc, #32]	; (8005398 <__update_tds_plant_water+0x4c>)
 8005378:	f004 fbf6 	bl	8009b68 <sniprintf>
 800537c:	4602      	mov	r2, r0
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	441a      	add	r2, r3
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	601a      	str	r2, [r3, #0]
}
 8005388:	bf00      	nop
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	20000246 	.word	0x20000246
 8005394:	2000000c 	.word	0x2000000c
 8005398:	0800ca38 	.word	0x0800ca38

0800539c <__update_pump1_status>:

void __update_pump1_status(char *disp_pump1_status_cmd,int *disp_pump1_status_cmd_len)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
	if(pump1_state) //ON State
 80053a6:	4b18      	ldr	r3, [pc, #96]	; (8005408 <__update_pump1_status+0x6c>)
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d014      	beq.n	80053d8 <__update_pump1_status+0x3c>
	{
		*disp_pump1_status_cmd_len += snprintf (disp_pump1_status_cmd+(*disp_pump1_status_cmd_len),1024-(*disp_pump1_status_cmd_len),"p3.pic=3%s",end_char); //p3 block on display
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	461a      	mov	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	1898      	adds	r0, r3, r2
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80053c0:	4619      	mov	r1, r3
 80053c2:	4b12      	ldr	r3, [pc, #72]	; (800540c <__update_pump1_status+0x70>)
 80053c4:	4a12      	ldr	r2, [pc, #72]	; (8005410 <__update_pump1_status+0x74>)
 80053c6:	f004 fbcf 	bl	8009b68 <sniprintf>
 80053ca:	4602      	mov	r2, r0
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	441a      	add	r2, r3
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	601a      	str	r2, [r3, #0]
	else //OFF State
	{
		*disp_pump1_status_cmd_len += snprintf (disp_pump1_status_cmd+(*disp_pump1_status_cmd_len),1024-(*disp_pump1_status_cmd_len),"p3.pic=2%s",end_char); //p3 block on display
	}

}
 80053d6:	e013      	b.n	8005400 <__update_pump1_status+0x64>
		*disp_pump1_status_cmd_len += snprintf (disp_pump1_status_cmd+(*disp_pump1_status_cmd_len),1024-(*disp_pump1_status_cmd_len),"p3.pic=2%s",end_char); //p3 block on display
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	461a      	mov	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	1898      	adds	r0, r3, r2
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80053ea:	4619      	mov	r1, r3
 80053ec:	4b07      	ldr	r3, [pc, #28]	; (800540c <__update_pump1_status+0x70>)
 80053ee:	4a09      	ldr	r2, [pc, #36]	; (8005414 <__update_pump1_status+0x78>)
 80053f0:	f004 fbba 	bl	8009b68 <sniprintf>
 80053f4:	4602      	mov	r2, r0
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	441a      	add	r2, r3
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	601a      	str	r2, [r3, #0]
}
 8005400:	bf00      	nop
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	20000248 	.word	0x20000248
 800540c:	2000000c 	.word	0x2000000c
 8005410:	0800ca48 	.word	0x0800ca48
 8005414:	0800ca54 	.word	0x0800ca54

08005418 <__update_pump2_status>:

void __update_pump2_status(char *disp_pump2_status_cmd,int *disp_pump2_status_cmd_len)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
	if(pump2_state) //ON State
 8005422:	4b18      	ldr	r3, [pc, #96]	; (8005484 <__update_pump2_status+0x6c>)
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d014      	beq.n	8005454 <__update_pump2_status+0x3c>
	{
		*disp_pump2_status_cmd_len += snprintf (disp_pump2_status_cmd+(*disp_pump2_status_cmd_len),1024-(*disp_pump2_status_cmd_len),"p2.pic=3%s",end_char); //p2 block on display
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	1898      	adds	r0, r3, r2
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800543c:	4619      	mov	r1, r3
 800543e:	4b12      	ldr	r3, [pc, #72]	; (8005488 <__update_pump2_status+0x70>)
 8005440:	4a12      	ldr	r2, [pc, #72]	; (800548c <__update_pump2_status+0x74>)
 8005442:	f004 fb91 	bl	8009b68 <sniprintf>
 8005446:	4602      	mov	r2, r0
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	441a      	add	r2, r3
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	601a      	str	r2, [r3, #0]
	else //OFF State
	{
		*disp_pump2_status_cmd_len += snprintf (disp_pump2_status_cmd+(*disp_pump2_status_cmd_len),1024-(*disp_pump2_status_cmd_len),"p2.pic=2%s",end_char); //p2 block on display
	}

}
 8005452:	e013      	b.n	800547c <__update_pump2_status+0x64>
		*disp_pump2_status_cmd_len += snprintf (disp_pump2_status_cmd+(*disp_pump2_status_cmd_len),1024-(*disp_pump2_status_cmd_len),"p2.pic=2%s",end_char); //p2 block on display
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	461a      	mov	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	1898      	adds	r0, r3, r2
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8005466:	4619      	mov	r1, r3
 8005468:	4b07      	ldr	r3, [pc, #28]	; (8005488 <__update_pump2_status+0x70>)
 800546a:	4a09      	ldr	r2, [pc, #36]	; (8005490 <__update_pump2_status+0x78>)
 800546c:	f004 fb7c 	bl	8009b68 <sniprintf>
 8005470:	4602      	mov	r2, r0
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	441a      	add	r2, r3
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	601a      	str	r2, [r3, #0]
}
 800547c:	bf00      	nop
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	20000010 	.word	0x20000010
 8005488:	2000000c 	.word	0x2000000c
 800548c:	0800ca60 	.word	0x0800ca60
 8005490:	0800ca6c 	.word	0x0800ca6c

08005494 <homescreen_update>:

/*******************************************************************************
 *  PUBLIC
 ******************************************************************************/
void homescreen_update()
{
 8005494:	b580      	push	{r7, lr}
 8005496:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 800549a:	af00      	add	r7, sp, #0
	char homescreen_cmd[1024] = {0};
 800549c:	f107 0308 	add.w	r3, r7, #8
 80054a0:	4618      	mov	r0, r3
 80054a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054a6:	461a      	mov	r2, r3
 80054a8:	2100      	movs	r1, #0
 80054aa:	f003 fd11 	bl	8008ed0 <memset>
	int homescreen_cmd_len = 0;
 80054ae:	1d3b      	adds	r3, r7, #4
 80054b0:	2200      	movs	r2, #0
 80054b2:	601a      	str	r2, [r3, #0]

	__update_makeup_water_added(homescreen_cmd,&homescreen_cmd_len);
 80054b4:	1d3a      	adds	r2, r7, #4
 80054b6:	f107 0308 	add.w	r3, r7, #8
 80054ba:	4611      	mov	r1, r2
 80054bc:	4618      	mov	r0, r3
 80054be:	f7ff fdcf 	bl	8005060 <__update_makeup_water_added>
	__update_blowdown_water(homescreen_cmd,&homescreen_cmd_len);
 80054c2:	1d3a      	adds	r2, r7, #4
 80054c4:	f107 0308 	add.w	r3, r7, #8
 80054c8:	4611      	mov	r1, r2
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7ff fe1e 	bl	800510c <__update_blowdown_water>
	__update_chemical1(homescreen_cmd,&homescreen_cmd_len);
 80054d0:	1d3a      	adds	r2, r7, #4
 80054d2:	f107 0308 	add.w	r3, r7, #8
 80054d6:	4611      	mov	r1, r2
 80054d8:	4618      	mov	r0, r3
 80054da:	f7ff fe6f 	bl	80051bc <__update_chemical1>
	__update_chemical2(homescreen_cmd,&homescreen_cmd_len);
 80054de:	1d3a      	adds	r2, r7, #4
 80054e0:	f107 0308 	add.w	r3, r7, #8
 80054e4:	4611      	mov	r1, r2
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7ff fe90 	bl	800520c <__update_chemical2>
	__update_ph_inlet_water(homescreen_cmd,&homescreen_cmd_len);
 80054ec:	1d3a      	adds	r2, r7, #4
 80054ee:	f107 0308 	add.w	r3, r7, #8
 80054f2:	4611      	mov	r1, r2
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7ff feb1 	bl	800525c <__update_ph_inlet_water>
	__update_ph_plant_water(homescreen_cmd,&homescreen_cmd_len);
 80054fa:	1d3a      	adds	r2, r7, #4
 80054fc:	f107 0308 	add.w	r3, r7, #8
 8005500:	4611      	mov	r1, r2
 8005502:	4618      	mov	r0, r3
 8005504:	f7ff fed2 	bl	80052ac <__update_ph_plant_water>
	__update_tds_inlet_water(homescreen_cmd,&homescreen_cmd_len);
 8005508:	1d3a      	adds	r2, r7, #4
 800550a:	f107 0308 	add.w	r3, r7, #8
 800550e:	4611      	mov	r1, r2
 8005510:	4618      	mov	r0, r3
 8005512:	f7ff fef3 	bl	80052fc <__update_tds_inlet_water>
	__update_tds_plant_water(homescreen_cmd,&homescreen_cmd_len);
 8005516:	1d3a      	adds	r2, r7, #4
 8005518:	f107 0308 	add.w	r3, r7, #8
 800551c:	4611      	mov	r1, r2
 800551e:	4618      	mov	r0, r3
 8005520:	f7ff ff14 	bl	800534c <__update_tds_plant_water>
	__update_pump1_status(homescreen_cmd,&homescreen_cmd_len);
 8005524:	1d3a      	adds	r2, r7, #4
 8005526:	f107 0308 	add.w	r3, r7, #8
 800552a:	4611      	mov	r1, r2
 800552c:	4618      	mov	r0, r3
 800552e:	f7ff ff35 	bl	800539c <__update_pump1_status>
	__update_pump2_status(homescreen_cmd,&homescreen_cmd_len);
 8005532:	1d3a      	adds	r2, r7, #4
 8005534:	f107 0308 	add.w	r3, r7, #8
 8005538:	4611      	mov	r1, r2
 800553a:	4618      	mov	r0, r3
 800553c:	f7ff ff6c 	bl	8005418 <__update_pump2_status>

	lcd_send_cmd(homescreen_cmd,homescreen_cmd_len);
 8005540:	1d3b      	adds	r3, r7, #4
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	f107 0308 	add.w	r3, r7, #8
 8005548:	4611      	mov	r1, r2
 800554a:	4618      	mov	r0, r3
 800554c:	f003 fc72 	bl	8008e34 <lcd_send_cmd>
}
 8005550:	bf00      	nop
 8005552:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
	...

0800555c <keys_action>:
#include "stm32f4xx_hal.h"

int key_pressed_flag;
int key_pressed = NONE_KEY_PRESSED;

void keys_action(){
 800555c:	b580      	push	{r7, lr}
 800555e:	af00      	add	r7, sp, #0

	if(HAL_GPIO_ReadPin(LEFT_KEY_GPIO_Port,LEFT_KEY_Pin) == 1 && key_pressed_flag == NONE_KEY_PRESSED )
 8005560:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005564:	4845      	ldr	r0, [pc, #276]	; (800567c <keys_action+0x120>)
 8005566:	f7fd f86d 	bl	8002644 <HAL_GPIO_ReadPin>
 800556a:	4603      	mov	r3, r0
 800556c:	2b01      	cmp	r3, #1
 800556e:	d107      	bne.n	8005580 <keys_action+0x24>
 8005570:	4b43      	ldr	r3, [pc, #268]	; (8005680 <keys_action+0x124>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d103      	bne.n	8005580 <keys_action+0x24>
	{
		key_pressed_flag = LEFT_KEY_PRESSED;
 8005578:	4b41      	ldr	r3, [pc, #260]	; (8005680 <keys_action+0x124>)
 800557a:	2201      	movs	r2, #1
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	e07b      	b.n	8005678 <keys_action+0x11c>
	}
	else if(HAL_GPIO_ReadPin(LEFT_KEY_GPIO_Port,LEFT_KEY_Pin) == 0 && key_pressed_flag == LEFT_KEY_PRESSED)
 8005580:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005584:	483d      	ldr	r0, [pc, #244]	; (800567c <keys_action+0x120>)
 8005586:	f7fd f85d 	bl	8002644 <HAL_GPIO_ReadPin>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10a      	bne.n	80055a6 <keys_action+0x4a>
 8005590:	4b3b      	ldr	r3, [pc, #236]	; (8005680 <keys_action+0x124>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d106      	bne.n	80055a6 <keys_action+0x4a>
	{
		key_pressed = LEFT_KEY_PRESSED;
 8005598:	4b3a      	ldr	r3, [pc, #232]	; (8005684 <keys_action+0x128>)
 800559a:	2201      	movs	r2, #1
 800559c:	601a      	str	r2, [r3, #0]
		key_pressed_flag = NONE_KEY_PRESSED;
 800559e:	4b38      	ldr	r3, [pc, #224]	; (8005680 <keys_action+0x124>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	e068      	b.n	8005678 <keys_action+0x11c>
	}
	else if(HAL_GPIO_ReadPin(RIGHT_KEY_GPIO_Port,RIGHT_KEY_Pin) == 1 && key_pressed_flag == NONE_KEY_PRESSED )
 80055a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80055aa:	4834      	ldr	r0, [pc, #208]	; (800567c <keys_action+0x120>)
 80055ac:	f7fd f84a 	bl	8002644 <HAL_GPIO_ReadPin>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d107      	bne.n	80055c6 <keys_action+0x6a>
 80055b6:	4b32      	ldr	r3, [pc, #200]	; (8005680 <keys_action+0x124>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d103      	bne.n	80055c6 <keys_action+0x6a>
	{
		key_pressed_flag = RIGHT_KEY_PRESSED;
 80055be:	4b30      	ldr	r3, [pc, #192]	; (8005680 <keys_action+0x124>)
 80055c0:	2202      	movs	r2, #2
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	e058      	b.n	8005678 <keys_action+0x11c>
	}
	else if(HAL_GPIO_ReadPin(RIGHT_KEY_GPIO_Port,RIGHT_KEY_Pin) == 0 && key_pressed_flag == RIGHT_KEY_PRESSED)
 80055c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80055ca:	482c      	ldr	r0, [pc, #176]	; (800567c <keys_action+0x120>)
 80055cc:	f7fd f83a 	bl	8002644 <HAL_GPIO_ReadPin>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10a      	bne.n	80055ec <keys_action+0x90>
 80055d6:	4b2a      	ldr	r3, [pc, #168]	; (8005680 <keys_action+0x124>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d106      	bne.n	80055ec <keys_action+0x90>
	{
		key_pressed = RIGHT_KEY_PRESSED;
 80055de:	4b29      	ldr	r3, [pc, #164]	; (8005684 <keys_action+0x128>)
 80055e0:	2202      	movs	r2, #2
 80055e2:	601a      	str	r2, [r3, #0]
		key_pressed_flag = NONE_KEY_PRESSED;
 80055e4:	4b26      	ldr	r3, [pc, #152]	; (8005680 <keys_action+0x124>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	e045      	b.n	8005678 <keys_action+0x11c>
	}
	else if(HAL_GPIO_ReadPin(ENTER_KEY_GPIO_Port,ENTER_KEY_Pin) == 1 && key_pressed_flag == NONE_KEY_PRESSED )
 80055ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055f0:	4822      	ldr	r0, [pc, #136]	; (800567c <keys_action+0x120>)
 80055f2:	f7fd f827 	bl	8002644 <HAL_GPIO_ReadPin>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d107      	bne.n	800560c <keys_action+0xb0>
 80055fc:	4b20      	ldr	r3, [pc, #128]	; (8005680 <keys_action+0x124>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d103      	bne.n	800560c <keys_action+0xb0>
	{
		key_pressed_flag = ENTER_KEY_PRESSED;
 8005604:	4b1e      	ldr	r3, [pc, #120]	; (8005680 <keys_action+0x124>)
 8005606:	2203      	movs	r2, #3
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	e035      	b.n	8005678 <keys_action+0x11c>
	}
	else if(HAL_GPIO_ReadPin(ENTER_KEY_GPIO_Port,ENTER_KEY_Pin) == 0 && key_pressed_flag == ENTER_KEY_PRESSED)
 800560c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005610:	481a      	ldr	r0, [pc, #104]	; (800567c <keys_action+0x120>)
 8005612:	f7fd f817 	bl	8002644 <HAL_GPIO_ReadPin>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10a      	bne.n	8005632 <keys_action+0xd6>
 800561c:	4b18      	ldr	r3, [pc, #96]	; (8005680 <keys_action+0x124>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b03      	cmp	r3, #3
 8005622:	d106      	bne.n	8005632 <keys_action+0xd6>
	{
		key_pressed = ENTER_KEY_PRESSED;
 8005624:	4b17      	ldr	r3, [pc, #92]	; (8005684 <keys_action+0x128>)
 8005626:	2203      	movs	r2, #3
 8005628:	601a      	str	r2, [r3, #0]
		key_pressed_flag = NONE_KEY_PRESSED;
 800562a:	4b15      	ldr	r3, [pc, #84]	; (8005680 <keys_action+0x124>)
 800562c:	2200      	movs	r2, #0
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	e022      	b.n	8005678 <keys_action+0x11c>
	}
	else if(HAL_GPIO_ReadPin(ESC_KEY_GPIO_Port,ESC_KEY_Pin) == 1 && key_pressed_flag == NONE_KEY_PRESSED )
 8005632:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005636:	4814      	ldr	r0, [pc, #80]	; (8005688 <keys_action+0x12c>)
 8005638:	f7fd f804 	bl	8002644 <HAL_GPIO_ReadPin>
 800563c:	4603      	mov	r3, r0
 800563e:	2b01      	cmp	r3, #1
 8005640:	d107      	bne.n	8005652 <keys_action+0xf6>
 8005642:	4b0f      	ldr	r3, [pc, #60]	; (8005680 <keys_action+0x124>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d103      	bne.n	8005652 <keys_action+0xf6>
	{
		key_pressed_flag = ESC_KEY_PRESSED;
 800564a:	4b0d      	ldr	r3, [pc, #52]	; (8005680 <keys_action+0x124>)
 800564c:	2204      	movs	r2, #4
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	e012      	b.n	8005678 <keys_action+0x11c>
	}
	else if(HAL_GPIO_ReadPin(ESC_KEY_GPIO_Port,ESC_KEY_Pin) == 0 && key_pressed_flag == ESC_KEY_PRESSED)
 8005652:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005656:	480c      	ldr	r0, [pc, #48]	; (8005688 <keys_action+0x12c>)
 8005658:	f7fc fff4 	bl	8002644 <HAL_GPIO_ReadPin>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10a      	bne.n	8005678 <keys_action+0x11c>
 8005662:	4b07      	ldr	r3, [pc, #28]	; (8005680 <keys_action+0x124>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b04      	cmp	r3, #4
 8005668:	d106      	bne.n	8005678 <keys_action+0x11c>
	{
		key_pressed = ESC_KEY_PRESSED;
 800566a:	4b06      	ldr	r3, [pc, #24]	; (8005684 <keys_action+0x128>)
 800566c:	2204      	movs	r2, #4
 800566e:	601a      	str	r2, [r3, #0]
		key_pressed_flag = NONE_KEY_PRESSED;
 8005670:	4b03      	ldr	r3, [pc, #12]	; (8005680 <keys_action+0x124>)
 8005672:	2200      	movs	r2, #0
 8005674:	601a      	str	r2, [r3, #0]
	}

}
 8005676:	e7ff      	b.n	8005678 <keys_action+0x11c>
 8005678:	bf00      	nop
 800567a:	bd80      	pop	{r7, pc}
 800567c:	40020c00 	.word	0x40020c00
 8005680:	20000760 	.word	0x20000760
 8005684:	2000020c 	.word	0x2000020c
 8005688:	40020400 	.word	0x40020400

0800568c <__settings_selection>:
/*******************************************************************************
 *  PRIVATE
 ******************************************************************************/
void
__settings_selection(uint8_t src, uint8_t dest)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af02      	add	r7, sp, #8
 8005692:	4603      	mov	r3, r0
 8005694:	460a      	mov	r2, r1
 8005696:	71fb      	strb	r3, [r7, #7]
 8005698:	4613      	mov	r3, r2
 800569a:	71bb      	strb	r3, [r7, #6]
	edit_settings_cmd_len = sprintf(edit_settings_cmd,"t%d.pco=65535%st%d.pco=63488%s",src,end_char,dest,end_char);
 800569c:	79f9      	ldrb	r1, [r7, #7]
 800569e:	79bb      	ldrb	r3, [r7, #6]
 80056a0:	4a0c      	ldr	r2, [pc, #48]	; (80056d4 <__settings_selection+0x48>)
 80056a2:	9201      	str	r2, [sp, #4]
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	4b0b      	ldr	r3, [pc, #44]	; (80056d4 <__settings_selection+0x48>)
 80056a8:	460a      	mov	r2, r1
 80056aa:	490b      	ldr	r1, [pc, #44]	; (80056d8 <__settings_selection+0x4c>)
 80056ac:	480b      	ldr	r0, [pc, #44]	; (80056dc <__settings_selection+0x50>)
 80056ae:	f004 fa8f 	bl	8009bd0 <siprintf>
 80056b2:	4602      	mov	r2, r0
 80056b4:	4b0a      	ldr	r3, [pc, #40]	; (80056e0 <__settings_selection+0x54>)
 80056b6:	601a      	str	r2, [r3, #0]
	lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 80056b8:	4b09      	ldr	r3, [pc, #36]	; (80056e0 <__settings_selection+0x54>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4619      	mov	r1, r3
 80056be:	4807      	ldr	r0, [pc, #28]	; (80056dc <__settings_selection+0x50>)
 80056c0:	f003 fbb8 	bl	8008e34 <lcd_send_cmd>
	key_pressed = NONE_KEY_PRESSED;
 80056c4:	4b07      	ldr	r3, [pc, #28]	; (80056e4 <__settings_selection+0x58>)
 80056c6:	2200      	movs	r2, #0
 80056c8:	601a      	str	r2, [r3, #0]
}
 80056ca:	bf00      	nop
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	2000000c 	.word	0x2000000c
 80056d8:	0800ca78 	.word	0x0800ca78
 80056dc:	20000764 	.word	0x20000764
 80056e0:	20000214 	.word	0x20000214
 80056e4:	2000020c 	.word	0x2000020c

080056e8 <__esc_settings_selection>:

void
__esc_settings_selection(uint8_t src, int8_t float_src, int8_t int_src)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af02      	add	r7, sp, #8
 80056ee:	4603      	mov	r3, r0
 80056f0:	71fb      	strb	r3, [r7, #7]
 80056f2:	460b      	mov	r3, r1
 80056f4:	71bb      	strb	r3, [r7, #6]
 80056f6:	4613      	mov	r3, r2
 80056f8:	717b      	strb	r3, [r7, #5]
	if(int_src != -1)
 80056fa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80056fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005702:	d00f      	beq.n	8005724 <__esc_settings_selection+0x3c>
	{
		edit_settings_cmd_len = sprintf(edit_settings_cmd,"t%d.pco=65535%sn%d.bco=65535%s",src,end_char,int_src,end_char);
 8005704:	79f9      	ldrb	r1, [r7, #7]
 8005706:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800570a:	4a22      	ldr	r2, [pc, #136]	; (8005794 <__esc_settings_selection+0xac>)
 800570c:	9201      	str	r2, [sp, #4]
 800570e:	9300      	str	r3, [sp, #0]
 8005710:	4b20      	ldr	r3, [pc, #128]	; (8005794 <__esc_settings_selection+0xac>)
 8005712:	460a      	mov	r2, r1
 8005714:	4920      	ldr	r1, [pc, #128]	; (8005798 <__esc_settings_selection+0xb0>)
 8005716:	4821      	ldr	r0, [pc, #132]	; (800579c <__esc_settings_selection+0xb4>)
 8005718:	f004 fa5a 	bl	8009bd0 <siprintf>
 800571c:	4602      	mov	r2, r0
 800571e:	4b20      	ldr	r3, [pc, #128]	; (80057a0 <__esc_settings_selection+0xb8>)
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	e01d      	b.n	8005760 <__esc_settings_selection+0x78>
	}
	else if(float_src != -1)
 8005724:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800572c:	d00f      	beq.n	800574e <__esc_settings_selection+0x66>
	{
		edit_settings_cmd_len = sprintf(edit_settings_cmd,"t%d.pco=65535%sx%d.bco=65535%s",src,end_char,float_src,end_char);
 800572e:	79f9      	ldrb	r1, [r7, #7]
 8005730:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005734:	4a17      	ldr	r2, [pc, #92]	; (8005794 <__esc_settings_selection+0xac>)
 8005736:	9201      	str	r2, [sp, #4]
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	4b16      	ldr	r3, [pc, #88]	; (8005794 <__esc_settings_selection+0xac>)
 800573c:	460a      	mov	r2, r1
 800573e:	4919      	ldr	r1, [pc, #100]	; (80057a4 <__esc_settings_selection+0xbc>)
 8005740:	4816      	ldr	r0, [pc, #88]	; (800579c <__esc_settings_selection+0xb4>)
 8005742:	f004 fa45 	bl	8009bd0 <siprintf>
 8005746:	4602      	mov	r2, r0
 8005748:	4b15      	ldr	r3, [pc, #84]	; (80057a0 <__esc_settings_selection+0xb8>)
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	e008      	b.n	8005760 <__esc_settings_selection+0x78>
	}
	else
	{
		edit_settings_cmd_len = sprintf(edit_settings_cmd,"t%d.pco=65535%s",src,end_char);
 800574e:	79fa      	ldrb	r2, [r7, #7]
 8005750:	4b10      	ldr	r3, [pc, #64]	; (8005794 <__esc_settings_selection+0xac>)
 8005752:	4915      	ldr	r1, [pc, #84]	; (80057a8 <__esc_settings_selection+0xc0>)
 8005754:	4811      	ldr	r0, [pc, #68]	; (800579c <__esc_settings_selection+0xb4>)
 8005756:	f004 fa3b 	bl	8009bd0 <siprintf>
 800575a:	4602      	mov	r2, r0
 800575c:	4b10      	ldr	r3, [pc, #64]	; (80057a0 <__esc_settings_selection+0xb8>)
 800575e:	601a      	str	r2, [r3, #0]
	}
	lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8005760:	4b0f      	ldr	r3, [pc, #60]	; (80057a0 <__esc_settings_selection+0xb8>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4619      	mov	r1, r3
 8005766:	480d      	ldr	r0, [pc, #52]	; (800579c <__esc_settings_selection+0xb4>)
 8005768:	f003 fb64 	bl	8008e34 <lcd_send_cmd>
	if(save_settings == 1)
 800576c:	4b0f      	ldr	r3, [pc, #60]	; (80057ac <__esc_settings_selection+0xc4>)
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d102      	bne.n	800577a <__esc_settings_selection+0x92>
	{
		save_settings = 2;
 8005774:	4b0d      	ldr	r3, [pc, #52]	; (80057ac <__esc_settings_selection+0xc4>)
 8005776:	2202      	movs	r2, #2
 8005778:	701a      	strb	r2, [r3, #0]
	}
	DisplayActions = display_screens;
 800577a:	4b0d      	ldr	r3, [pc, #52]	; (80057b0 <__esc_settings_selection+0xc8>)
 800577c:	4a0d      	ldr	r2, [pc, #52]	; (80057b4 <__esc_settings_selection+0xcc>)
 800577e:	601a      	str	r2, [r3, #0]
	key_pressed = NONE_KEY_PRESSED;
 8005780:	4b0d      	ldr	r3, [pc, #52]	; (80057b8 <__esc_settings_selection+0xd0>)
 8005782:	2200      	movs	r2, #0
 8005784:	601a      	str	r2, [r3, #0]
	current_edit_settings_state = GOTO_OFFSET_MAKE_UP_WATER;
 8005786:	4b0d      	ldr	r3, [pc, #52]	; (80057bc <__esc_settings_selection+0xd4>)
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]
}
 800578c:	bf00      	nop
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	2000000c 	.word	0x2000000c
 8005798:	0800ca98 	.word	0x0800ca98
 800579c:	20000764 	.word	0x20000764
 80057a0:	20000214 	.word	0x20000214
 80057a4:	0800cab8 	.word	0x0800cab8
 80057a8:	0800cad8 	.word	0x0800cad8
 80057ac:	200002a0 	.word	0x200002a0
 80057b0:	200006d4 	.word	0x200006d4
 80057b4:	08004e59 	.word	0x08004e59
 80057b8:	2000020c 	.word	0x2000020c
 80057bc:	20000210 	.word	0x20000210

080057c0 <__select_six_digits>:



void
__select_six_digits(uint8_t src)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b0a0      	sub	sp, #128	; 0x80
 80057c4:	af02      	add	r7, sp, #8
 80057c6:	4603      	mov	r3, r0
 80057c8:	71fb      	strb	r3, [r7, #7]
	char select_six_digits_cmd[100] = {0};
 80057ca:	f107 030c 	add.w	r3, r7, #12
 80057ce:	2264      	movs	r2, #100	; 0x64
 80057d0:	2100      	movs	r1, #0
 80057d2:	4618      	mov	r0, r3
 80057d4:	f003 fb7c 	bl	8008ed0 <memset>
	int select_six_digits_cmd_len = 0;
 80057d8:	2300      	movs	r3, #0
 80057da:	677b      	str	r3, [r7, #116]	; 0x74
	for(int i = src; i < (src + 6); i++)
 80057dc:	79fb      	ldrb	r3, [r7, #7]
 80057de:	673b      	str	r3, [r7, #112]	; 0x70
 80057e0:	e014      	b.n	800580c <__select_six_digits+0x4c>
	{
		select_six_digits_cmd_len += snprintf (select_six_digits_cmd+select_six_digits_cmd_len,100-select_six_digits_cmd_len,"n%d.pco=63488%s",i,end_char);
 80057e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057e4:	f107 020c 	add.w	r2, r7, #12
 80057e8:	18d0      	adds	r0, r2, r3
 80057ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057ec:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80057f0:	4619      	mov	r1, r3
 80057f2:	4b15      	ldr	r3, [pc, #84]	; (8005848 <__select_six_digits+0x88>)
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057f8:	4a14      	ldr	r2, [pc, #80]	; (800584c <__select_six_digits+0x8c>)
 80057fa:	f004 f9b5 	bl	8009b68 <sniprintf>
 80057fe:	4602      	mov	r2, r0
 8005800:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005802:	4413      	add	r3, r2
 8005804:	677b      	str	r3, [r7, #116]	; 0x74
	for(int i = src; i < (src + 6); i++)
 8005806:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005808:	3301      	adds	r3, #1
 800580a:	673b      	str	r3, [r7, #112]	; 0x70
 800580c:	79fb      	ldrb	r3, [r7, #7]
 800580e:	3306      	adds	r3, #6
 8005810:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005812:	429a      	cmp	r2, r3
 8005814:	dbe5      	blt.n	80057e2 <__select_six_digits+0x22>
	}
	edit_settings_cmd_len = sprintf(edit_settings_cmd,select_six_digits_cmd);
 8005816:	f107 030c 	add.w	r3, r7, #12
 800581a:	4619      	mov	r1, r3
 800581c:	480c      	ldr	r0, [pc, #48]	; (8005850 <__select_six_digits+0x90>)
 800581e:	f004 f9d7 	bl	8009bd0 <siprintf>
 8005822:	4602      	mov	r2, r0
 8005824:	4b0b      	ldr	r3, [pc, #44]	; (8005854 <__select_six_digits+0x94>)
 8005826:	601a      	str	r2, [r3, #0]
	lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8005828:	4b0a      	ldr	r3, [pc, #40]	; (8005854 <__select_six_digits+0x94>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4619      	mov	r1, r3
 800582e:	4808      	ldr	r0, [pc, #32]	; (8005850 <__select_six_digits+0x90>)
 8005830:	f003 fb00 	bl	8008e34 <lcd_send_cmd>
	DisplayActions = display_edit_digits;
 8005834:	4b08      	ldr	r3, [pc, #32]	; (8005858 <__select_six_digits+0x98>)
 8005836:	4a09      	ldr	r2, [pc, #36]	; (800585c <__select_six_digits+0x9c>)
 8005838:	601a      	str	r2, [r3, #0]
	key_pressed = NONE_KEY_PRESSED;
 800583a:	4b09      	ldr	r3, [pc, #36]	; (8005860 <__select_six_digits+0xa0>)
 800583c:	2200      	movs	r2, #0
 800583e:	601a      	str	r2, [r3, #0]
}
 8005840:	bf00      	nop
 8005842:	3778      	adds	r7, #120	; 0x78
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	2000000c 	.word	0x2000000c
 800584c:	0800cae8 	.word	0x0800cae8
 8005850:	20000764 	.word	0x20000764
 8005854:	20000214 	.word	0x20000214
 8005858:	200006d4 	.word	0x200006d4
 800585c:	08007915 	.word	0x08007915
 8005860:	2000020c 	.word	0x2000020c

08005864 <__select_digits>:

void
__select_digits(uint8_t src, uint8_t has_float)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	4603      	mov	r3, r0
 800586c:	460a      	mov	r2, r1
 800586e:	71fb      	strb	r3, [r7, #7]
 8005870:	4613      	mov	r3, r2
 8005872:	71bb      	strb	r3, [r7, #6]
	if(has_float != 1)
 8005874:	79bb      	ldrb	r3, [r7, #6]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d009      	beq.n	800588e <__select_digits+0x2a>
	{
		edit_settings_cmd_len = sprintf(edit_settings_cmd,"n%d.pco=63488%s",src,end_char);
 800587a:	79fa      	ldrb	r2, [r7, #7]
 800587c:	4b10      	ldr	r3, [pc, #64]	; (80058c0 <__select_digits+0x5c>)
 800587e:	4911      	ldr	r1, [pc, #68]	; (80058c4 <__select_digits+0x60>)
 8005880:	4811      	ldr	r0, [pc, #68]	; (80058c8 <__select_digits+0x64>)
 8005882:	f004 f9a5 	bl	8009bd0 <siprintf>
 8005886:	4602      	mov	r2, r0
 8005888:	4b10      	ldr	r3, [pc, #64]	; (80058cc <__select_digits+0x68>)
 800588a:	601a      	str	r2, [r3, #0]
 800588c:	e008      	b.n	80058a0 <__select_digits+0x3c>
	}
	else
	{
			edit_settings_cmd_len = sprintf(edit_settings_cmd,"x%d.pco=63488%s",src,end_char);
 800588e:	79fa      	ldrb	r2, [r7, #7]
 8005890:	4b0b      	ldr	r3, [pc, #44]	; (80058c0 <__select_digits+0x5c>)
 8005892:	490f      	ldr	r1, [pc, #60]	; (80058d0 <__select_digits+0x6c>)
 8005894:	480c      	ldr	r0, [pc, #48]	; (80058c8 <__select_digits+0x64>)
 8005896:	f004 f99b 	bl	8009bd0 <siprintf>
 800589a:	4602      	mov	r2, r0
 800589c:	4b0b      	ldr	r3, [pc, #44]	; (80058cc <__select_digits+0x68>)
 800589e:	601a      	str	r2, [r3, #0]
	}
	lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 80058a0:	4b0a      	ldr	r3, [pc, #40]	; (80058cc <__select_digits+0x68>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4619      	mov	r1, r3
 80058a6:	4808      	ldr	r0, [pc, #32]	; (80058c8 <__select_digits+0x64>)
 80058a8:	f003 fac4 	bl	8008e34 <lcd_send_cmd>
	DisplayActions = display_edit_digits;
 80058ac:	4b09      	ldr	r3, [pc, #36]	; (80058d4 <__select_digits+0x70>)
 80058ae:	4a0a      	ldr	r2, [pc, #40]	; (80058d8 <__select_digits+0x74>)
 80058b0:	601a      	str	r2, [r3, #0]
	key_pressed = NONE_KEY_PRESSED;
 80058b2:	4b0a      	ldr	r3, [pc, #40]	; (80058dc <__select_digits+0x78>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	601a      	str	r2, [r3, #0]
}
 80058b8:	bf00      	nop
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	2000000c 	.word	0x2000000c
 80058c4:	0800cae8 	.word	0x0800cae8
 80058c8:	20000764 	.word	0x20000764
 80058cc:	20000214 	.word	0x20000214
 80058d0:	0800caf8 	.word	0x0800caf8
 80058d4:	200006d4 	.word	0x200006d4
 80058d8:	08007915 	.word	0x08007915
 80058dc:	2000020c 	.word	0x2000020c

080058e0 <__select_button>:

void
__select_button(uint8_t src)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af02      	add	r7, sp, #8
 80058e6:	4603      	mov	r3, r0
 80058e8:	71fb      	strb	r3, [r7, #7]
	edit_settings_cmd_len = sprintf(edit_settings_cmd,"b%d.pco=63488%sb%d.pco2=63488%s",src,end_char,src,end_char);
 80058ea:	79f9      	ldrb	r1, [r7, #7]
 80058ec:	79fb      	ldrb	r3, [r7, #7]
 80058ee:	4a0e      	ldr	r2, [pc, #56]	; (8005928 <__select_button+0x48>)
 80058f0:	9201      	str	r2, [sp, #4]
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	4b0c      	ldr	r3, [pc, #48]	; (8005928 <__select_button+0x48>)
 80058f6:	460a      	mov	r2, r1
 80058f8:	490c      	ldr	r1, [pc, #48]	; (800592c <__select_button+0x4c>)
 80058fa:	480d      	ldr	r0, [pc, #52]	; (8005930 <__select_button+0x50>)
 80058fc:	f004 f968 	bl	8009bd0 <siprintf>
 8005900:	4602      	mov	r2, r0
 8005902:	4b0c      	ldr	r3, [pc, #48]	; (8005934 <__select_button+0x54>)
 8005904:	601a      	str	r2, [r3, #0]
	lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8005906:	4b0b      	ldr	r3, [pc, #44]	; (8005934 <__select_button+0x54>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4619      	mov	r1, r3
 800590c:	4808      	ldr	r0, [pc, #32]	; (8005930 <__select_button+0x50>)
 800590e:	f003 fa91 	bl	8008e34 <lcd_send_cmd>
	DisplayActions = display_edit_digits;
 8005912:	4b09      	ldr	r3, [pc, #36]	; (8005938 <__select_button+0x58>)
 8005914:	4a09      	ldr	r2, [pc, #36]	; (800593c <__select_button+0x5c>)
 8005916:	601a      	str	r2, [r3, #0]
	key_pressed = NONE_KEY_PRESSED;
 8005918:	4b09      	ldr	r3, [pc, #36]	; (8005940 <__select_button+0x60>)
 800591a:	2200      	movs	r2, #0
 800591c:	601a      	str	r2, [r3, #0]
}
 800591e:	bf00      	nop
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	2000000c 	.word	0x2000000c
 800592c:	0800cb08 	.word	0x0800cb08
 8005930:	20000764 	.word	0x20000764
 8005934:	20000214 	.word	0x20000214
 8005938:	200006d4 	.word	0x200006d4
 800593c:	08007915 	.word	0x08007915
 8005940:	2000020c 	.word	0x2000020c

08005944 <__store_six_digits>:

void
__store_six_digits(int *set_val, uint8_t onscreen_digit_loc)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b0bc      	sub	sp, #240	; 0xf0
 8005948:	af02      	add	r7, sp, #8
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	460b      	mov	r3, r1
 800594e:	70fb      	strb	r3, [r7, #3]
	onscreen_digit_loc += current_digit_loc;
 8005950:	4ba1      	ldr	r3, [pc, #644]	; (8005bd8 <__store_six_digits+0x294>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	b2da      	uxtb	r2, r3
 8005956:	78fb      	ldrb	r3, [r7, #3]
 8005958:	4413      	add	r3, r2
 800595a:	70fb      	strb	r3, [r7, #3]
	if(key_pressed == RIGHT_KEY_PRESSED)
 800595c:	4b9f      	ldr	r3, [pc, #636]	; (8005bdc <__store_six_digits+0x298>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2b02      	cmp	r3, #2
 8005962:	d12e      	bne.n	80059c2 <__store_six_digits+0x7e>
	{
		if(new_digits[current_digit_loc] == 0)
 8005964:	4b9c      	ldr	r3, [pc, #624]	; (8005bd8 <__store_six_digits+0x294>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a9d      	ldr	r2, [pc, #628]	; (8005be0 <__store_six_digits+0x29c>)
 800596a:	5cd3      	ldrb	r3, [r2, r3]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d105      	bne.n	800597c <__store_six_digits+0x38>
		{
			new_digits[current_digit_loc] = 9;
 8005970:	4b99      	ldr	r3, [pc, #612]	; (8005bd8 <__store_six_digits+0x294>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a9a      	ldr	r2, [pc, #616]	; (8005be0 <__store_six_digits+0x29c>)
 8005976:	2109      	movs	r1, #9
 8005978:	54d1      	strb	r1, [r2, r3]
 800597a:	e007      	b.n	800598c <__store_six_digits+0x48>
		}
		else
		{
			new_digits[current_digit_loc]--;
 800597c:	4b96      	ldr	r3, [pc, #600]	; (8005bd8 <__store_six_digits+0x294>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a97      	ldr	r2, [pc, #604]	; (8005be0 <__store_six_digits+0x29c>)
 8005982:	5cd2      	ldrb	r2, [r2, r3]
 8005984:	3a01      	subs	r2, #1
 8005986:	b2d1      	uxtb	r1, r2
 8005988:	4a95      	ldr	r2, [pc, #596]	; (8005be0 <__store_six_digits+0x29c>)
 800598a:	54d1      	strb	r1, [r2, r3]
		}
		edit_settings_cmd_len = sprintf(edit_settings_cmd,"n%d.val=%d%s",onscreen_digit_loc,new_digits[current_digit_loc],end_char);
 800598c:	78f9      	ldrb	r1, [r7, #3]
 800598e:	4b92      	ldr	r3, [pc, #584]	; (8005bd8 <__store_six_digits+0x294>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a93      	ldr	r2, [pc, #588]	; (8005be0 <__store_six_digits+0x29c>)
 8005994:	5cd3      	ldrb	r3, [r2, r3]
 8005996:	461a      	mov	r2, r3
 8005998:	4b92      	ldr	r3, [pc, #584]	; (8005be4 <__store_six_digits+0x2a0>)
 800599a:	9300      	str	r3, [sp, #0]
 800599c:	4613      	mov	r3, r2
 800599e:	460a      	mov	r2, r1
 80059a0:	4991      	ldr	r1, [pc, #580]	; (8005be8 <__store_six_digits+0x2a4>)
 80059a2:	4892      	ldr	r0, [pc, #584]	; (8005bec <__store_six_digits+0x2a8>)
 80059a4:	f004 f914 	bl	8009bd0 <siprintf>
 80059a8:	4602      	mov	r2, r0
 80059aa:	4b91      	ldr	r3, [pc, #580]	; (8005bf0 <__store_six_digits+0x2ac>)
 80059ac:	601a      	str	r2, [r3, #0]
		lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 80059ae:	4b90      	ldr	r3, [pc, #576]	; (8005bf0 <__store_six_digits+0x2ac>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4619      	mov	r1, r3
 80059b4:	488d      	ldr	r0, [pc, #564]	; (8005bec <__store_six_digits+0x2a8>)
 80059b6:	f003 fa3d 	bl	8008e34 <lcd_send_cmd>
		key_pressed = NONE_KEY_PRESSED;
 80059ba:	4b88      	ldr	r3, [pc, #544]	; (8005bdc <__store_six_digits+0x298>)
 80059bc:	2200      	movs	r2, #0
 80059be:	601a      	str	r2, [r3, #0]
 80059c0:	e106      	b.n	8005bd0 <__store_six_digits+0x28c>
	}
	else if(key_pressed == LEFT_KEY_PRESSED)
 80059c2:	4b86      	ldr	r3, [pc, #536]	; (8005bdc <__store_six_digits+0x298>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d12e      	bne.n	8005a28 <__store_six_digits+0xe4>
	{
		if(new_digits[current_digit_loc] == 9)
 80059ca:	4b83      	ldr	r3, [pc, #524]	; (8005bd8 <__store_six_digits+0x294>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a84      	ldr	r2, [pc, #528]	; (8005be0 <__store_six_digits+0x29c>)
 80059d0:	5cd3      	ldrb	r3, [r2, r3]
 80059d2:	2b09      	cmp	r3, #9
 80059d4:	d105      	bne.n	80059e2 <__store_six_digits+0x9e>
		{
			new_digits[current_digit_loc] = 0;
 80059d6:	4b80      	ldr	r3, [pc, #512]	; (8005bd8 <__store_six_digits+0x294>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a81      	ldr	r2, [pc, #516]	; (8005be0 <__store_six_digits+0x29c>)
 80059dc:	2100      	movs	r1, #0
 80059de:	54d1      	strb	r1, [r2, r3]
 80059e0:	e007      	b.n	80059f2 <__store_six_digits+0xae>
		}
		else
		{
			new_digits[current_digit_loc]++;
 80059e2:	4b7d      	ldr	r3, [pc, #500]	; (8005bd8 <__store_six_digits+0x294>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a7e      	ldr	r2, [pc, #504]	; (8005be0 <__store_six_digits+0x29c>)
 80059e8:	5cd2      	ldrb	r2, [r2, r3]
 80059ea:	3201      	adds	r2, #1
 80059ec:	b2d1      	uxtb	r1, r2
 80059ee:	4a7c      	ldr	r2, [pc, #496]	; (8005be0 <__store_six_digits+0x29c>)
 80059f0:	54d1      	strb	r1, [r2, r3]
		}
		edit_settings_cmd_len = sprintf(edit_settings_cmd,"n%d.val=%d%s",onscreen_digit_loc,new_digits[current_digit_loc],end_char);
 80059f2:	78f9      	ldrb	r1, [r7, #3]
 80059f4:	4b78      	ldr	r3, [pc, #480]	; (8005bd8 <__store_six_digits+0x294>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a79      	ldr	r2, [pc, #484]	; (8005be0 <__store_six_digits+0x29c>)
 80059fa:	5cd3      	ldrb	r3, [r2, r3]
 80059fc:	461a      	mov	r2, r3
 80059fe:	4b79      	ldr	r3, [pc, #484]	; (8005be4 <__store_six_digits+0x2a0>)
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	4613      	mov	r3, r2
 8005a04:	460a      	mov	r2, r1
 8005a06:	4978      	ldr	r1, [pc, #480]	; (8005be8 <__store_six_digits+0x2a4>)
 8005a08:	4878      	ldr	r0, [pc, #480]	; (8005bec <__store_six_digits+0x2a8>)
 8005a0a:	f004 f8e1 	bl	8009bd0 <siprintf>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	4b77      	ldr	r3, [pc, #476]	; (8005bf0 <__store_six_digits+0x2ac>)
 8005a12:	601a      	str	r2, [r3, #0]
		lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8005a14:	4b76      	ldr	r3, [pc, #472]	; (8005bf0 <__store_six_digits+0x2ac>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4619      	mov	r1, r3
 8005a1a:	4874      	ldr	r0, [pc, #464]	; (8005bec <__store_six_digits+0x2a8>)
 8005a1c:	f003 fa0a 	bl	8008e34 <lcd_send_cmd>
		key_pressed = NONE_KEY_PRESSED;
 8005a20:	4b6e      	ldr	r3, [pc, #440]	; (8005bdc <__store_six_digits+0x298>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	e0d3      	b.n	8005bd0 <__store_six_digits+0x28c>
	}
	else if(key_pressed == ENTER_KEY_PRESSED)
 8005a28:	4b6c      	ldr	r3, [pc, #432]	; (8005bdc <__store_six_digits+0x298>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b03      	cmp	r3, #3
 8005a2e:	d120      	bne.n	8005a72 <__store_six_digits+0x12e>
	{
		edit_settings_cmd_len = sprintf(edit_settings_cmd,"n%d.pco=0%s",onscreen_digit_loc,end_char);
 8005a30:	78fa      	ldrb	r2, [r7, #3]
 8005a32:	4b6c      	ldr	r3, [pc, #432]	; (8005be4 <__store_six_digits+0x2a0>)
 8005a34:	496f      	ldr	r1, [pc, #444]	; (8005bf4 <__store_six_digits+0x2b0>)
 8005a36:	486d      	ldr	r0, [pc, #436]	; (8005bec <__store_six_digits+0x2a8>)
 8005a38:	f004 f8ca 	bl	8009bd0 <siprintf>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	4b6c      	ldr	r3, [pc, #432]	; (8005bf0 <__store_six_digits+0x2ac>)
 8005a40:	601a      	str	r2, [r3, #0]
		lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8005a42:	4b6b      	ldr	r3, [pc, #428]	; (8005bf0 <__store_six_digits+0x2ac>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4619      	mov	r1, r3
 8005a48:	4868      	ldr	r0, [pc, #416]	; (8005bec <__store_six_digits+0x2a8>)
 8005a4a:	f003 f9f3 	bl	8008e34 <lcd_send_cmd>
		key_pressed = NONE_KEY_PRESSED;
 8005a4e:	4b63      	ldr	r3, [pc, #396]	; (8005bdc <__store_six_digits+0x298>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	601a      	str	r2, [r3, #0]
		current_digit_loc = (current_digit_loc == SIXTH_DIGIT) ? FIRST_DIGIT : current_digit_loc+1;
 8005a54:	4b60      	ldr	r3, [pc, #384]	; (8005bd8 <__store_six_digits+0x294>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b05      	cmp	r3, #5
 8005a5a:	d003      	beq.n	8005a64 <__store_six_digits+0x120>
 8005a5c:	4b5e      	ldr	r3, [pc, #376]	; (8005bd8 <__store_six_digits+0x294>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	3301      	adds	r3, #1
 8005a62:	e000      	b.n	8005a66 <__store_six_digits+0x122>
 8005a64:	2300      	movs	r3, #0
 8005a66:	4a5c      	ldr	r2, [pc, #368]	; (8005bd8 <__store_six_digits+0x294>)
 8005a68:	6013      	str	r3, [r2, #0]
		settings_semaphore = 2;
 8005a6a:	4b63      	ldr	r3, [pc, #396]	; (8005bf8 <__store_six_digits+0x2b4>)
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	601a      	str	r2, [r3, #0]
		return;
 8005a70:	e0ae      	b.n	8005bd0 <__store_six_digits+0x28c>
	}
	else if(key_pressed == ESC_KEY_PRESSED)
 8005a72:	4b5a      	ldr	r3, [pc, #360]	; (8005bdc <__store_six_digits+0x298>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b04      	cmp	r3, #4
 8005a78:	f040 80aa 	bne.w	8005bd0 <__store_six_digits+0x28c>
	{
		char digit_color_cmd[100] = {0};
 8005a7c:	f107 0308 	add.w	r3, r7, #8
 8005a80:	2264      	movs	r2, #100	; 0x64
 8005a82:	2100      	movs	r1, #0
 8005a84:	4618      	mov	r0, r3
 8005a86:	f003 fa23 	bl	8008ed0 <memset>
		int digit_color_cmd_len = 0;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		for(int i = onscreen_digit_loc; i < (onscreen_digit_loc - current_digit_loc + 6); i++)
 8005a90:	78fb      	ldrb	r3, [r7, #3]
 8005a92:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a96:	e01b      	b.n	8005ad0 <__store_six_digits+0x18c>
		{
			digit_color_cmd_len += snprintf (digit_color_cmd+digit_color_cmd_len,100-digit_color_cmd_len,"n%d.pco=0%s",i,end_char);
 8005a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a9c:	f107 0208 	add.w	r2, r7, #8
 8005aa0:	18d0      	adds	r0, r2, r3
 8005aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa6:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8005aaa:	4619      	mov	r1, r3
 8005aac:	4b4d      	ldr	r3, [pc, #308]	; (8005be4 <__store_six_digits+0x2a0>)
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ab4:	4a4f      	ldr	r2, [pc, #316]	; (8005bf4 <__store_six_digits+0x2b0>)
 8005ab6:	f004 f857 	bl	8009b68 <sniprintf>
 8005aba:	4602      	mov	r2, r0
 8005abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		for(int i = onscreen_digit_loc; i < (onscreen_digit_loc - current_digit_loc + 6); i++)
 8005ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aca:	3301      	adds	r3, #1
 8005acc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ad0:	78fa      	ldrb	r2, [r7, #3]
 8005ad2:	4b41      	ldr	r3, [pc, #260]	; (8005bd8 <__store_six_digits+0x294>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	3306      	adds	r3, #6
 8005ada:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	dbda      	blt.n	8005a98 <__store_six_digits+0x154>
		}
		char digit_val_cmd[100] = {0};
 8005ae2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005ae6:	2264      	movs	r2, #100	; 0x64
 8005ae8:	2100      	movs	r1, #0
 8005aea:	4618      	mov	r0, r3
 8005aec:	f003 f9f0 	bl	8008ed0 <memset>
		int digit_val_cmd_len = 0;
 8005af0:	2300      	movs	r3, #0
 8005af2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		int temp = *set_val;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		int digit = 0;
 8005afe:	2300      	movs	r3, #0
 8005b00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		for(int i = onscreen_digit_loc-current_digit_loc; i < (onscreen_digit_loc - current_digit_loc + 6); i++)
 8005b04:	78fa      	ldrb	r2, [r7, #3]
 8005b06:	4b34      	ldr	r3, [pc, #208]	; (8005bd8 <__store_six_digits+0x294>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005b10:	e037      	b.n	8005b82 <__store_six_digits+0x23e>
		{
			digit = temp % 10;
 8005b12:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8005b16:	4b39      	ldr	r3, [pc, #228]	; (8005bfc <__store_six_digits+0x2b8>)
 8005b18:	fb83 1302 	smull	r1, r3, r3, r2
 8005b1c:	1099      	asrs	r1, r3, #2
 8005b1e:	17d3      	asrs	r3, r2, #31
 8005b20:	1ac9      	subs	r1, r1, r3
 8005b22:	460b      	mov	r3, r1
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	440b      	add	r3, r1
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			temp = temp / 10;
 8005b30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b34:	4a31      	ldr	r2, [pc, #196]	; (8005bfc <__store_six_digits+0x2b8>)
 8005b36:	fb82 1203 	smull	r1, r2, r2, r3
 8005b3a:	1092      	asrs	r2, r2, #2
 8005b3c:	17db      	asrs	r3, r3, #31
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			digit_val_cmd_len += snprintf (digit_val_cmd+digit_val_cmd_len,100-digit_val_cmd_len,"n%d.val=%d%s",i,digit,end_char);
 8005b44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b48:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8005b4c:	18d0      	adds	r0, r2, r3
 8005b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b52:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8005b56:	4619      	mov	r1, r3
 8005b58:	4b22      	ldr	r3, [pc, #136]	; (8005be4 <__store_six_digits+0x2a0>)
 8005b5a:	9301      	str	r3, [sp, #4]
 8005b5c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b66:	4a20      	ldr	r2, [pc, #128]	; (8005be8 <__store_six_digits+0x2a4>)
 8005b68:	f003 fffe 	bl	8009b68 <sniprintf>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b72:	4413      	add	r3, r2
 8005b74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		for(int i = onscreen_digit_loc-current_digit_loc; i < (onscreen_digit_loc - current_digit_loc + 6); i++)
 8005b78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005b82:	78fa      	ldrb	r2, [r7, #3]
 8005b84:	4b14      	ldr	r3, [pc, #80]	; (8005bd8 <__store_six_digits+0x294>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	3306      	adds	r3, #6
 8005b8c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005b90:	429a      	cmp	r2, r3
 8005b92:	dbbe      	blt.n	8005b12 <__store_six_digits+0x1ce>
		}
		edit_settings_cmd_len = sprintf(edit_settings_cmd,"%s%s",digit_color_cmd,digit_val_cmd);
 8005b94:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005b98:	f107 0208 	add.w	r2, r7, #8
 8005b9c:	4918      	ldr	r1, [pc, #96]	; (8005c00 <__store_six_digits+0x2bc>)
 8005b9e:	4813      	ldr	r0, [pc, #76]	; (8005bec <__store_six_digits+0x2a8>)
 8005ba0:	f004 f816 	bl	8009bd0 <siprintf>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	4b12      	ldr	r3, [pc, #72]	; (8005bf0 <__store_six_digits+0x2ac>)
 8005ba8:	601a      	str	r2, [r3, #0]
		lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8005baa:	4b11      	ldr	r3, [pc, #68]	; (8005bf0 <__store_six_digits+0x2ac>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4619      	mov	r1, r3
 8005bb0:	480e      	ldr	r0, [pc, #56]	; (8005bec <__store_six_digits+0x2a8>)
 8005bb2:	f003 f93f 	bl	8008e34 <lcd_send_cmd>
		settings_semaphore = 0;
 8005bb6:	4b10      	ldr	r3, [pc, #64]	; (8005bf8 <__store_six_digits+0x2b4>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]
		current_digit_loc = FIRST_DIGIT;
 8005bbc:	4b06      	ldr	r3, [pc, #24]	; (8005bd8 <__store_six_digits+0x294>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	601a      	str	r2, [r3, #0]
		key_pressed = NONE_KEY_PRESSED;
 8005bc2:	4b06      	ldr	r3, [pc, #24]	; (8005bdc <__store_six_digits+0x298>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	601a      	str	r2, [r3, #0]
		DisplayActions = display_edit_settings;
 8005bc8:	4b0e      	ldr	r3, [pc, #56]	; (8005c04 <__store_six_digits+0x2c0>)
 8005bca:	4a0f      	ldr	r2, [pc, #60]	; (8005c08 <__store_six_digits+0x2c4>)
 8005bcc:	601a      	str	r2, [r3, #0]
		return;
 8005bce:	bf00      	nop
	}
}
 8005bd0:	37e8      	adds	r7, #232	; 0xe8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	2000021c 	.word	0x2000021c
 8005bdc:	2000020c 	.word	0x2000020c
 8005be0:	20000220 	.word	0x20000220
 8005be4:	2000000c 	.word	0x2000000c
 8005be8:	0800cb28 	.word	0x0800cb28
 8005bec:	20000764 	.word	0x20000764
 8005bf0:	20000214 	.word	0x20000214
 8005bf4:	0800cb38 	.word	0x0800cb38
 8005bf8:	20000218 	.word	0x20000218
 8005bfc:	66666667 	.word	0x66666667
 8005c00:	0800cb44 	.word	0x0800cb44
 8005c04:	200006d4 	.word	0x200006d4
 8005c08:	08006d35 	.word	0x08006d35

08005c0c <__check_and_print_four_digits_limit>:

void
__check_and_print_four_digits_limit(uint8_t src)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af02      	add	r7, sp, #8
 8005c12:	4603      	mov	r3, r0
 8005c14:	71fb      	strb	r3, [r7, #7]
	if(new_input_digits < 0)
 8005c16:	4b19      	ldr	r3, [pc, #100]	; (8005c7c <__check_and_print_four_digits_limit+0x70>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	da07      	bge.n	8005c2e <__check_and_print_four_digits_limit+0x22>
	{
		new_input_digits = 10000 + new_input_digits;
 8005c1e:	4b17      	ldr	r3, [pc, #92]	; (8005c7c <__check_and_print_four_digits_limit+0x70>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8005c26:	3310      	adds	r3, #16
 8005c28:	4a14      	ldr	r2, [pc, #80]	; (8005c7c <__check_and_print_four_digits_limit+0x70>)
 8005c2a:	6013      	str	r3, [r2, #0]
 8005c2c:	e00c      	b.n	8005c48 <__check_and_print_four_digits_limit+0x3c>
	}
	else if(new_input_digits > 9999)
 8005c2e:	4b13      	ldr	r3, [pc, #76]	; (8005c7c <__check_and_print_four_digits_limit+0x70>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f242 720f 	movw	r2, #9999	; 0x270f
 8005c36:	4293      	cmp	r3, r2
 8005c38:	dd06      	ble.n	8005c48 <__check_and_print_four_digits_limit+0x3c>
	{
		new_input_digits = new_input_digits - 10000;
 8005c3a:	4b10      	ldr	r3, [pc, #64]	; (8005c7c <__check_and_print_four_digits_limit+0x70>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8005c42:	3b10      	subs	r3, #16
 8005c44:	4a0d      	ldr	r2, [pc, #52]	; (8005c7c <__check_and_print_four_digits_limit+0x70>)
 8005c46:	6013      	str	r3, [r2, #0]
	}
	edit_settings_cmd_len = sprintf(edit_settings_cmd,"n%d.val=%d%s",src,new_input_digits,end_char);
 8005c48:	79fa      	ldrb	r2, [r7, #7]
 8005c4a:	4b0c      	ldr	r3, [pc, #48]	; (8005c7c <__check_and_print_four_digits_limit+0x70>)
 8005c4c:	6819      	ldr	r1, [r3, #0]
 8005c4e:	4b0c      	ldr	r3, [pc, #48]	; (8005c80 <__check_and_print_four_digits_limit+0x74>)
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	460b      	mov	r3, r1
 8005c54:	490b      	ldr	r1, [pc, #44]	; (8005c84 <__check_and_print_four_digits_limit+0x78>)
 8005c56:	480c      	ldr	r0, [pc, #48]	; (8005c88 <__check_and_print_four_digits_limit+0x7c>)
 8005c58:	f003 ffba 	bl	8009bd0 <siprintf>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	4b0b      	ldr	r3, [pc, #44]	; (8005c8c <__check_and_print_four_digits_limit+0x80>)
 8005c60:	601a      	str	r2, [r3, #0]
	lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8005c62:	4b0a      	ldr	r3, [pc, #40]	; (8005c8c <__check_and_print_four_digits_limit+0x80>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4619      	mov	r1, r3
 8005c68:	4807      	ldr	r0, [pc, #28]	; (8005c88 <__check_and_print_four_digits_limit+0x7c>)
 8005c6a:	f003 f8e3 	bl	8008e34 <lcd_send_cmd>
	key_pressed = NONE_KEY_PRESSED;
 8005c6e:	4b08      	ldr	r3, [pc, #32]	; (8005c90 <__check_and_print_four_digits_limit+0x84>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	601a      	str	r2, [r3, #0]
}
 8005c74:	bf00      	nop
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	20000228 	.word	0x20000228
 8005c80:	2000000c 	.word	0x2000000c
 8005c84:	0800cb28 	.word	0x0800cb28
 8005c88:	20000764 	.word	0x20000764
 8005c8c:	20000214 	.word	0x20000214
 8005c90:	2000020c 	.word	0x2000020c

08005c94 <__check_and_print_two_digits_limit>:

void
__check_and_print_two_digits_limit(uint8_t src, uint8_t has_float, uint8_t has_ph)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af02      	add	r7, sp, #8
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	71fb      	strb	r3, [r7, #7]
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	71bb      	strb	r3, [r7, #6]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	717b      	strb	r3, [r7, #5]
	uint8_t max_limit = 99;
 8005ca6:	2363      	movs	r3, #99	; 0x63
 8005ca8:	73fb      	strb	r3, [r7, #15]
	if(has_ph == 1)
 8005caa:	797b      	ldrb	r3, [r7, #5]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d101      	bne.n	8005cb4 <__check_and_print_two_digits_limit+0x20>
	{
		max_limit = 140;
 8005cb0:	238c      	movs	r3, #140	; 0x8c
 8005cb2:	73fb      	strb	r3, [r7, #15]
	}
	if(new_input_digits < 0)
 8005cb4:	4b21      	ldr	r3, [pc, #132]	; (8005d3c <__check_and_print_two_digits_limit+0xa8>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	da07      	bge.n	8005ccc <__check_and_print_two_digits_limit+0x38>
	{
		new_input_digits = (max_limit+1) + new_input_digits;
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
 8005cbe:	1c5a      	adds	r2, r3, #1
 8005cc0:	4b1e      	ldr	r3, [pc, #120]	; (8005d3c <__check_and_print_two_digits_limit+0xa8>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	4a1d      	ldr	r2, [pc, #116]	; (8005d3c <__check_and_print_two_digits_limit+0xa8>)
 8005cc8:	6013      	str	r3, [r2, #0]
 8005cca:	e00b      	b.n	8005ce4 <__check_and_print_two_digits_limit+0x50>
	}
	else if(new_input_digits > max_limit)
 8005ccc:	7bfa      	ldrb	r2, [r7, #15]
 8005cce:	4b1b      	ldr	r3, [pc, #108]	; (8005d3c <__check_and_print_two_digits_limit+0xa8>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	da06      	bge.n	8005ce4 <__check_and_print_two_digits_limit+0x50>
	{
		new_input_digits = new_input_digits - (max_limit+1);
 8005cd6:	4b19      	ldr	r3, [pc, #100]	; (8005d3c <__check_and_print_two_digits_limit+0xa8>)
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	7bfb      	ldrb	r3, [r7, #15]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	4a16      	ldr	r2, [pc, #88]	; (8005d3c <__check_and_print_two_digits_limit+0xa8>)
 8005ce2:	6013      	str	r3, [r2, #0]
	}
	if(has_float != 1)
 8005ce4:	79bb      	ldrb	r3, [r7, #6]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d00d      	beq.n	8005d06 <__check_and_print_two_digits_limit+0x72>
	{
		edit_settings_cmd_len = sprintf(edit_settings_cmd,"n%d.val=%d%s",src,new_input_digits,end_char);
 8005cea:	79fa      	ldrb	r2, [r7, #7]
 8005cec:	4b13      	ldr	r3, [pc, #76]	; (8005d3c <__check_and_print_two_digits_limit+0xa8>)
 8005cee:	6819      	ldr	r1, [r3, #0]
 8005cf0:	4b13      	ldr	r3, [pc, #76]	; (8005d40 <__check_and_print_two_digits_limit+0xac>)
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	4913      	ldr	r1, [pc, #76]	; (8005d44 <__check_and_print_two_digits_limit+0xb0>)
 8005cf8:	4813      	ldr	r0, [pc, #76]	; (8005d48 <__check_and_print_two_digits_limit+0xb4>)
 8005cfa:	f003 ff69 	bl	8009bd0 <siprintf>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	4b12      	ldr	r3, [pc, #72]	; (8005d4c <__check_and_print_two_digits_limit+0xb8>)
 8005d02:	601a      	str	r2, [r3, #0]
 8005d04:	e00c      	b.n	8005d20 <__check_and_print_two_digits_limit+0x8c>
	}
	else
	{
		edit_settings_cmd_len = sprintf(edit_settings_cmd,"x%d.val=%d%s",src,new_input_digits,end_char);
 8005d06:	79fa      	ldrb	r2, [r7, #7]
 8005d08:	4b0c      	ldr	r3, [pc, #48]	; (8005d3c <__check_and_print_two_digits_limit+0xa8>)
 8005d0a:	6819      	ldr	r1, [r3, #0]
 8005d0c:	4b0c      	ldr	r3, [pc, #48]	; (8005d40 <__check_and_print_two_digits_limit+0xac>)
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	460b      	mov	r3, r1
 8005d12:	490f      	ldr	r1, [pc, #60]	; (8005d50 <__check_and_print_two_digits_limit+0xbc>)
 8005d14:	480c      	ldr	r0, [pc, #48]	; (8005d48 <__check_and_print_two_digits_limit+0xb4>)
 8005d16:	f003 ff5b 	bl	8009bd0 <siprintf>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	4b0b      	ldr	r3, [pc, #44]	; (8005d4c <__check_and_print_two_digits_limit+0xb8>)
 8005d1e:	601a      	str	r2, [r3, #0]
	}
	lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8005d20:	4b0a      	ldr	r3, [pc, #40]	; (8005d4c <__check_and_print_two_digits_limit+0xb8>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4619      	mov	r1, r3
 8005d26:	4808      	ldr	r0, [pc, #32]	; (8005d48 <__check_and_print_two_digits_limit+0xb4>)
 8005d28:	f003 f884 	bl	8008e34 <lcd_send_cmd>
	key_pressed = NONE_KEY_PRESSED;
 8005d2c:	4b09      	ldr	r3, [pc, #36]	; (8005d54 <__check_and_print_two_digits_limit+0xc0>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	601a      	str	r2, [r3, #0]
}
 8005d32:	bf00      	nop
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	20000228 	.word	0x20000228
 8005d40:	2000000c 	.word	0x2000000c
 8005d44:	0800cb28 	.word	0x0800cb28
 8005d48:	20000764 	.word	0x20000764
 8005d4c:	20000214 	.word	0x20000214
 8005d50:	0800cb4c 	.word	0x0800cb4c
 8005d54:	2000020c 	.word	0x2000020c

08005d58 <__check_and_print_time_limit>:

void
__check_and_print_time_limit(uint8_t src)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af02      	add	r7, sp, #8
 8005d5e:	4603      	mov	r3, r0
 8005d60:	71fb      	strb	r3, [r7, #7]
	if(new_input_digits < 0)
 8005d62:	4b18      	ldr	r3, [pc, #96]	; (8005dc4 <__check_and_print_time_limit+0x6c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	da06      	bge.n	8005d78 <__check_and_print_time_limit+0x20>
	{
		new_input_digits = 2425 + new_input_digits;
 8005d6a:	4b16      	ldr	r3, [pc, #88]	; (8005dc4 <__check_and_print_time_limit+0x6c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f603 1379 	addw	r3, r3, #2425	; 0x979
 8005d72:	4a14      	ldr	r2, [pc, #80]	; (8005dc4 <__check_and_print_time_limit+0x6c>)
 8005d74:	6013      	str	r3, [r2, #0]
 8005d76:	e00a      	b.n	8005d8e <__check_and_print_time_limit+0x36>
	}
	else if(new_input_digits > 2400)
 8005d78:	4b12      	ldr	r3, [pc, #72]	; (8005dc4 <__check_and_print_time_limit+0x6c>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8005d80:	dd05      	ble.n	8005d8e <__check_and_print_time_limit+0x36>
	{
		new_input_digits = new_input_digits - 2425;
 8005d82:	4b10      	ldr	r3, [pc, #64]	; (8005dc4 <__check_and_print_time_limit+0x6c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f6a3 1379 	subw	r3, r3, #2425	; 0x979
 8005d8a:	4a0e      	ldr	r2, [pc, #56]	; (8005dc4 <__check_and_print_time_limit+0x6c>)
 8005d8c:	6013      	str	r3, [r2, #0]
	}
	edit_settings_cmd_len = sprintf(edit_settings_cmd,"x%d.val=%d%s",src,new_input_digits,end_char);
 8005d8e:	79fa      	ldrb	r2, [r7, #7]
 8005d90:	4b0c      	ldr	r3, [pc, #48]	; (8005dc4 <__check_and_print_time_limit+0x6c>)
 8005d92:	6819      	ldr	r1, [r3, #0]
 8005d94:	4b0c      	ldr	r3, [pc, #48]	; (8005dc8 <__check_and_print_time_limit+0x70>)
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	460b      	mov	r3, r1
 8005d9a:	490c      	ldr	r1, [pc, #48]	; (8005dcc <__check_and_print_time_limit+0x74>)
 8005d9c:	480c      	ldr	r0, [pc, #48]	; (8005dd0 <__check_and_print_time_limit+0x78>)
 8005d9e:	f003 ff17 	bl	8009bd0 <siprintf>
 8005da2:	4602      	mov	r2, r0
 8005da4:	4b0b      	ldr	r3, [pc, #44]	; (8005dd4 <__check_and_print_time_limit+0x7c>)
 8005da6:	601a      	str	r2, [r3, #0]
	lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8005da8:	4b0a      	ldr	r3, [pc, #40]	; (8005dd4 <__check_and_print_time_limit+0x7c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4619      	mov	r1, r3
 8005dae:	4808      	ldr	r0, [pc, #32]	; (8005dd0 <__check_and_print_time_limit+0x78>)
 8005db0:	f003 f840 	bl	8008e34 <lcd_send_cmd>
	key_pressed = NONE_KEY_PRESSED;
 8005db4:	4b08      	ldr	r3, [pc, #32]	; (8005dd8 <__check_and_print_time_limit+0x80>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	601a      	str	r2, [r3, #0]
}
 8005dba:	bf00      	nop
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	20000228 	.word	0x20000228
 8005dc8:	2000000c 	.word	0x2000000c
 8005dcc:	0800cb4c 	.word	0x0800cb4c
 8005dd0:	20000764 	.word	0x20000764
 8005dd4:	20000214 	.word	0x20000214
 8005dd8:	2000020c 	.word	0x2000020c

08005ddc <__edit_six_digits>:

void
__edit_six_digits(int *settings_val, uint8_t src)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	460b      	mov	r3, r1
 8005de6:	70fb      	strb	r3, [r7, #3]
	if(settings_semaphore == 0)
 8005de8:	4b4d      	ldr	r3, [pc, #308]	; (8005f20 <__edit_six_digits+0x144>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d129      	bne.n	8005e44 <__edit_six_digits+0x68>
	{
		settings_semaphore = 1;
 8005df0:	4b4b      	ldr	r3, [pc, #300]	; (8005f20 <__edit_six_digits+0x144>)
 8005df2:	2201      	movs	r2, #1
 8005df4:	601a      	str	r2, [r3, #0]
		int temp = *settings_val;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	617b      	str	r3, [r7, #20]
		for(int i = 0; i < 6; i++)
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	613b      	str	r3, [r7, #16]
 8005e00:	e01c      	b.n	8005e3c <__edit_six_digits+0x60>
		{
			new_digits[i] = temp % 10;
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	4b47      	ldr	r3, [pc, #284]	; (8005f24 <__edit_six_digits+0x148>)
 8005e06:	fb83 1302 	smull	r1, r3, r3, r2
 8005e0a:	1099      	asrs	r1, r3, #2
 8005e0c:	17d3      	asrs	r3, r2, #31
 8005e0e:	1ac9      	subs	r1, r1, r3
 8005e10:	460b      	mov	r3, r1
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	440b      	add	r3, r1
 8005e16:	005b      	lsls	r3, r3, #1
 8005e18:	1ad1      	subs	r1, r2, r3
 8005e1a:	b2c9      	uxtb	r1, r1
 8005e1c:	4a42      	ldr	r2, [pc, #264]	; (8005f28 <__edit_six_digits+0x14c>)
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	4413      	add	r3, r2
 8005e22:	460a      	mov	r2, r1
 8005e24:	701a      	strb	r2, [r3, #0]
			temp = temp / 10;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	4a3e      	ldr	r2, [pc, #248]	; (8005f24 <__edit_six_digits+0x148>)
 8005e2a:	fb82 1203 	smull	r1, r2, r2, r3
 8005e2e:	1092      	asrs	r2, r2, #2
 8005e30:	17db      	asrs	r3, r3, #31
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	617b      	str	r3, [r7, #20]
		for(int i = 0; i < 6; i++)
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	613b      	str	r3, [r7, #16]
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	2b05      	cmp	r3, #5
 8005e40:	dddf      	ble.n	8005e02 <__edit_six_digits+0x26>
					}
				}
				break;
		}
	}
}
 8005e42:	e069      	b.n	8005f18 <__edit_six_digits+0x13c>
		switch(current_digit_loc)
 8005e44:	4b39      	ldr	r3, [pc, #228]	; (8005f2c <__edit_six_digits+0x150>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b05      	cmp	r3, #5
 8005e4a:	d865      	bhi.n	8005f18 <__edit_six_digits+0x13c>
 8005e4c:	a201      	add	r2, pc, #4	; (adr r2, 8005e54 <__edit_six_digits+0x78>)
 8005e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e52:	bf00      	nop
 8005e54:	08005e6d 	.word	0x08005e6d
 8005e58:	08005e79 	.word	0x08005e79
 8005e5c:	08005e85 	.word	0x08005e85
 8005e60:	08005e91 	.word	0x08005e91
 8005e64:	08005e9d 	.word	0x08005e9d
 8005e68:	08005ea9 	.word	0x08005ea9
				__store_six_digits(settings_val,src);
 8005e6c:	78fb      	ldrb	r3, [r7, #3]
 8005e6e:	4619      	mov	r1, r3
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7ff fd67 	bl	8005944 <__store_six_digits>
				break;
 8005e76:	e04f      	b.n	8005f18 <__edit_six_digits+0x13c>
				__store_six_digits(settings_val,src);
 8005e78:	78fb      	ldrb	r3, [r7, #3]
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f7ff fd61 	bl	8005944 <__store_six_digits>
				break;
 8005e82:	e049      	b.n	8005f18 <__edit_six_digits+0x13c>
				__store_six_digits(settings_val,src);
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	4619      	mov	r1, r3
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f7ff fd5b 	bl	8005944 <__store_six_digits>
				break;
 8005e8e:	e043      	b.n	8005f18 <__edit_six_digits+0x13c>
				__store_six_digits(settings_val,src);
 8005e90:	78fb      	ldrb	r3, [r7, #3]
 8005e92:	4619      	mov	r1, r3
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7ff fd55 	bl	8005944 <__store_six_digits>
				break;
 8005e9a:	e03d      	b.n	8005f18 <__edit_six_digits+0x13c>
				__store_six_digits(settings_val,src);
 8005e9c:	78fb      	ldrb	r3, [r7, #3]
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7ff fd4f 	bl	8005944 <__store_six_digits>
				break;
 8005ea6:	e037      	b.n	8005f18 <__edit_six_digits+0x13c>
				__store_six_digits(settings_val,src);
 8005ea8:	78fb      	ldrb	r3, [r7, #3]
 8005eaa:	4619      	mov	r1, r3
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f7ff fd49 	bl	8005944 <__store_six_digits>
				if(current_digit_loc == FIRST_DIGIT && settings_semaphore == 2)
 8005eb2:	4b1e      	ldr	r3, [pc, #120]	; (8005f2c <__edit_six_digits+0x150>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d12d      	bne.n	8005f16 <__edit_six_digits+0x13a>
 8005eba:	4b19      	ldr	r3, [pc, #100]	; (8005f20 <__edit_six_digits+0x144>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d129      	bne.n	8005f16 <__edit_six_digits+0x13a>
					save_settings = 1;
 8005ec2:	4b1b      	ldr	r3, [pc, #108]	; (8005f30 <__edit_six_digits+0x154>)
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	701a      	strb	r2, [r3, #0]
					DisplayActions = display_edit_settings;
 8005ec8:	4b1a      	ldr	r3, [pc, #104]	; (8005f34 <__edit_six_digits+0x158>)
 8005eca:	4a1b      	ldr	r2, [pc, #108]	; (8005f38 <__edit_six_digits+0x15c>)
 8005ecc:	601a      	str	r2, [r3, #0]
					settings_semaphore = 0;
 8005ece:	4b14      	ldr	r3, [pc, #80]	; (8005f20 <__edit_six_digits+0x144>)
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	601a      	str	r2, [r3, #0]
					*settings_val = 0;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	601a      	str	r2, [r3, #0]
					int place_val = 1;
 8005eda:	2301      	movs	r3, #1
 8005edc:	60fb      	str	r3, [r7, #12]
					for(int i = 0 ; i < 6; i++)
 8005ede:	2300      	movs	r3, #0
 8005ee0:	60bb      	str	r3, [r7, #8]
 8005ee2:	e015      	b.n	8005f10 <__edit_six_digits+0x134>
						*settings_val += new_digits[i] * place_val;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	490f      	ldr	r1, [pc, #60]	; (8005f28 <__edit_six_digits+0x14c>)
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	440b      	add	r3, r1
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	fb03 f301 	mul.w	r3, r3, r1
 8005ef8:	441a      	add	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	601a      	str	r2, [r3, #0]
						place_val *= 10;
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	4613      	mov	r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4413      	add	r3, r2
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	60fb      	str	r3, [r7, #12]
					for(int i = 0 ; i < 6; i++)
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	60bb      	str	r3, [r7, #8]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2b05      	cmp	r3, #5
 8005f14:	dde6      	ble.n	8005ee4 <__edit_six_digits+0x108>
				break;
 8005f16:	bf00      	nop
}
 8005f18:	bf00      	nop
 8005f1a:	3718      	adds	r7, #24
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	20000218 	.word	0x20000218
 8005f24:	66666667 	.word	0x66666667
 8005f28:	20000220 	.word	0x20000220
 8005f2c:	2000021c 	.word	0x2000021c
 8005f30:	200002a0 	.word	0x200002a0
 8005f34:	200006d4 	.word	0x200006d4
 8005f38:	08006d35 	.word	0x08006d35

08005f3c <__edit_digits>:

void
__edit_digits(int *settings_val, uint8_t src, uint8_t no_of_digits, uint8_t has_float, uint8_t has_ph)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af04      	add	r7, sp, #16
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	4608      	mov	r0, r1
 8005f46:	4611      	mov	r1, r2
 8005f48:	461a      	mov	r2, r3
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	70fb      	strb	r3, [r7, #3]
 8005f4e:	460b      	mov	r3, r1
 8005f50:	70bb      	strb	r3, [r7, #2]
 8005f52:	4613      	mov	r3, r2
 8005f54:	707b      	strb	r3, [r7, #1]
	if(settings_semaphore == 0)
 8005f56:	4b98      	ldr	r3, [pc, #608]	; (80061b8 <__edit_digits+0x27c>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d107      	bne.n	8005f6e <__edit_digits+0x32>
	{
		settings_semaphore = 1;
 8005f5e:	4b96      	ldr	r3, [pc, #600]	; (80061b8 <__edit_digits+0x27c>)
 8005f60:	2201      	movs	r2, #1
 8005f62:	601a      	str	r2, [r3, #0]
		new_input_digits = *settings_val;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a94      	ldr	r2, [pc, #592]	; (80061bc <__edit_digits+0x280>)
 8005f6a:	6013      	str	r3, [r2, #0]
			settings_semaphore = 0;
			key_pressed = NONE_KEY_PRESSED;
			DisplayActions = display_edit_settings;
		}
	}
}
 8005f6c:	e183      	b.n	8006276 <__edit_digits+0x33a>
	else if(settings_semaphore == 1)
 8005f6e:	4b92      	ldr	r3, [pc, #584]	; (80061b8 <__edit_digits+0x27c>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	f040 8093 	bne.w	800609e <__edit_digits+0x162>
		if(key_pressed == LEFT_KEY_PRESSED && key_pressed_flag == NONE_KEY_PRESSED)
 8005f78:	4b91      	ldr	r3, [pc, #580]	; (80061c0 <__edit_digits+0x284>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d11b      	bne.n	8005fb8 <__edit_digits+0x7c>
 8005f80:	4b90      	ldr	r3, [pc, #576]	; (80061c4 <__edit_digits+0x288>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d117      	bne.n	8005fb8 <__edit_digits+0x7c>
			new_input_digits++;
 8005f88:	4b8c      	ldr	r3, [pc, #560]	; (80061bc <__edit_digits+0x280>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	4a8b      	ldr	r2, [pc, #556]	; (80061bc <__edit_digits+0x280>)
 8005f90:	6013      	str	r3, [r2, #0]
			if(no_of_digits == 4)
 8005f92:	78bb      	ldrb	r3, [r7, #2]
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	d104      	bne.n	8005fa2 <__edit_digits+0x66>
				__check_and_print_four_digits_limit(src);
 8005f98:	78fb      	ldrb	r3, [r7, #3]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7ff fe36 	bl	8005c0c <__check_and_print_four_digits_limit>
			if(no_of_digits == 4)
 8005fa0:	e162      	b.n	8006268 <__edit_digits+0x32c>
			else if(no_of_digits == 2)
 8005fa2:	78bb      	ldrb	r3, [r7, #2]
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	f040 815f 	bne.w	8006268 <__edit_digits+0x32c>
				__check_and_print_two_digits_limit(src,has_float,has_ph);
 8005faa:	7c3a      	ldrb	r2, [r7, #16]
 8005fac:	7879      	ldrb	r1, [r7, #1]
 8005fae:	78fb      	ldrb	r3, [r7, #3]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7ff fe6f 	bl	8005c94 <__check_and_print_two_digits_limit>
			if(no_of_digits == 4)
 8005fb6:	e157      	b.n	8006268 <__edit_digits+0x32c>
		else if(key_pressed == RIGHT_KEY_PRESSED && key_pressed_flag == NONE_KEY_PRESSED)
 8005fb8:	4b81      	ldr	r3, [pc, #516]	; (80061c0 <__edit_digits+0x284>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d11b      	bne.n	8005ff8 <__edit_digits+0xbc>
 8005fc0:	4b80      	ldr	r3, [pc, #512]	; (80061c4 <__edit_digits+0x288>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d117      	bne.n	8005ff8 <__edit_digits+0xbc>
			new_input_digits--;
 8005fc8:	4b7c      	ldr	r3, [pc, #496]	; (80061bc <__edit_digits+0x280>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	4a7b      	ldr	r2, [pc, #492]	; (80061bc <__edit_digits+0x280>)
 8005fd0:	6013      	str	r3, [r2, #0]
			if(no_of_digits == 4)
 8005fd2:	78bb      	ldrb	r3, [r7, #2]
 8005fd4:	2b04      	cmp	r3, #4
 8005fd6:	d104      	bne.n	8005fe2 <__edit_digits+0xa6>
				__check_and_print_four_digits_limit(src);
 8005fd8:	78fb      	ldrb	r3, [r7, #3]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7ff fe16 	bl	8005c0c <__check_and_print_four_digits_limit>
			if(no_of_digits == 4)
 8005fe0:	e144      	b.n	800626c <__edit_digits+0x330>
			else if(no_of_digits == 2)
 8005fe2:	78bb      	ldrb	r3, [r7, #2]
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	f040 8141 	bne.w	800626c <__edit_digits+0x330>
				__check_and_print_two_digits_limit(src,has_float,has_ph);
 8005fea:	7c3a      	ldrb	r2, [r7, #16]
 8005fec:	7879      	ldrb	r1, [r7, #1]
 8005fee:	78fb      	ldrb	r3, [r7, #3]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7ff fe4f 	bl	8005c94 <__check_and_print_two_digits_limit>
			if(no_of_digits == 4)
 8005ff6:	e139      	b.n	800626c <__edit_digits+0x330>
		else if(key_pressed == ENTER_KEY_PRESSED && key_pressed_flag == NONE_KEY_PRESSED)
 8005ff8:	4b71      	ldr	r3, [pc, #452]	; (80061c0 <__edit_digits+0x284>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	d10c      	bne.n	800601a <__edit_digits+0xde>
 8006000:	4b70      	ldr	r3, [pc, #448]	; (80061c4 <__edit_digits+0x288>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d108      	bne.n	800601a <__edit_digits+0xde>
			settings_semaphore++;
 8006008:	4b6b      	ldr	r3, [pc, #428]	; (80061b8 <__edit_digits+0x27c>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3301      	adds	r3, #1
 800600e:	4a6a      	ldr	r2, [pc, #424]	; (80061b8 <__edit_digits+0x27c>)
 8006010:	6013      	str	r3, [r2, #0]
			key_pressed = NONE_KEY_PRESSED;
 8006012:	4b6b      	ldr	r3, [pc, #428]	; (80061c0 <__edit_digits+0x284>)
 8006014:	2200      	movs	r2, #0
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	e12d      	b.n	8006276 <__edit_digits+0x33a>
		else if(key_pressed == ESC_KEY_PRESSED && key_pressed_flag == NONE_KEY_PRESSED)
 800601a:	4b69      	ldr	r3, [pc, #420]	; (80061c0 <__edit_digits+0x284>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b04      	cmp	r3, #4
 8006020:	f040 8129 	bne.w	8006276 <__edit_digits+0x33a>
 8006024:	4b67      	ldr	r3, [pc, #412]	; (80061c4 <__edit_digits+0x288>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	f040 8124 	bne.w	8006276 <__edit_digits+0x33a>
			if(has_float != 1)
 800602e:	787b      	ldrb	r3, [r7, #1]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d012      	beq.n	800605a <__edit_digits+0x11e>
				edit_settings_cmd_len = sprintf(edit_settings_cmd,"n%d.val=%d%sn%d.pco=0%s",src, *settings_val,end_char,src,end_char);
 8006034:	78f9      	ldrb	r1, [r7, #3]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6818      	ldr	r0, [r3, #0]
 800603a:	78fb      	ldrb	r3, [r7, #3]
 800603c:	4a62      	ldr	r2, [pc, #392]	; (80061c8 <__edit_digits+0x28c>)
 800603e:	9202      	str	r2, [sp, #8]
 8006040:	9301      	str	r3, [sp, #4]
 8006042:	4b61      	ldr	r3, [pc, #388]	; (80061c8 <__edit_digits+0x28c>)
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	4603      	mov	r3, r0
 8006048:	460a      	mov	r2, r1
 800604a:	4960      	ldr	r1, [pc, #384]	; (80061cc <__edit_digits+0x290>)
 800604c:	4860      	ldr	r0, [pc, #384]	; (80061d0 <__edit_digits+0x294>)
 800604e:	f003 fdbf 	bl	8009bd0 <siprintf>
 8006052:	4602      	mov	r2, r0
 8006054:	4b5f      	ldr	r3, [pc, #380]	; (80061d4 <__edit_digits+0x298>)
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	e011      	b.n	800607e <__edit_digits+0x142>
				edit_settings_cmd_len = sprintf(edit_settings_cmd,"x%d.val=%d%sx%d.pco=0%s",src, *settings_val,end_char,src,end_char);
 800605a:	78f9      	ldrb	r1, [r7, #3]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6818      	ldr	r0, [r3, #0]
 8006060:	78fb      	ldrb	r3, [r7, #3]
 8006062:	4a59      	ldr	r2, [pc, #356]	; (80061c8 <__edit_digits+0x28c>)
 8006064:	9202      	str	r2, [sp, #8]
 8006066:	9301      	str	r3, [sp, #4]
 8006068:	4b57      	ldr	r3, [pc, #348]	; (80061c8 <__edit_digits+0x28c>)
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	4603      	mov	r3, r0
 800606e:	460a      	mov	r2, r1
 8006070:	4959      	ldr	r1, [pc, #356]	; (80061d8 <__edit_digits+0x29c>)
 8006072:	4857      	ldr	r0, [pc, #348]	; (80061d0 <__edit_digits+0x294>)
 8006074:	f003 fdac 	bl	8009bd0 <siprintf>
 8006078:	4602      	mov	r2, r0
 800607a:	4b56      	ldr	r3, [pc, #344]	; (80061d4 <__edit_digits+0x298>)
 800607c:	601a      	str	r2, [r3, #0]
			lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 800607e:	4b55      	ldr	r3, [pc, #340]	; (80061d4 <__edit_digits+0x298>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4619      	mov	r1, r3
 8006084:	4852      	ldr	r0, [pc, #328]	; (80061d0 <__edit_digits+0x294>)
 8006086:	f002 fed5 	bl	8008e34 <lcd_send_cmd>
			settings_semaphore = 0;
 800608a:	4b4b      	ldr	r3, [pc, #300]	; (80061b8 <__edit_digits+0x27c>)
 800608c:	2200      	movs	r2, #0
 800608e:	601a      	str	r2, [r3, #0]
			key_pressed = NONE_KEY_PRESSED;
 8006090:	4b4b      	ldr	r3, [pc, #300]	; (80061c0 <__edit_digits+0x284>)
 8006092:	2200      	movs	r2, #0
 8006094:	601a      	str	r2, [r3, #0]
			DisplayActions = display_edit_settings;
 8006096:	4b51      	ldr	r3, [pc, #324]	; (80061dc <__edit_digits+0x2a0>)
 8006098:	4a51      	ldr	r2, [pc, #324]	; (80061e0 <__edit_digits+0x2a4>)
 800609a:	601a      	str	r2, [r3, #0]
}
 800609c:	e0eb      	b.n	8006276 <__edit_digits+0x33a>
	else if(settings_semaphore == 2)
 800609e:	4b46      	ldr	r3, [pc, #280]	; (80061b8 <__edit_digits+0x27c>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	f040 80e7 	bne.w	8006276 <__edit_digits+0x33a>
		if(key_pressed == LEFT_KEY_PRESSED && key_pressed_flag == NONE_KEY_PRESSED)
 80060a8:	4b45      	ldr	r3, [pc, #276]	; (80061c0 <__edit_digits+0x284>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d11b      	bne.n	80060e8 <__edit_digits+0x1ac>
 80060b0:	4b44      	ldr	r3, [pc, #272]	; (80061c4 <__edit_digits+0x288>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d117      	bne.n	80060e8 <__edit_digits+0x1ac>
			new_input_digits+=10;
 80060b8:	4b40      	ldr	r3, [pc, #256]	; (80061bc <__edit_digits+0x280>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	330a      	adds	r3, #10
 80060be:	4a3f      	ldr	r2, [pc, #252]	; (80061bc <__edit_digits+0x280>)
 80060c0:	6013      	str	r3, [r2, #0]
			if(no_of_digits == 4)
 80060c2:	78bb      	ldrb	r3, [r7, #2]
 80060c4:	2b04      	cmp	r3, #4
 80060c6:	d104      	bne.n	80060d2 <__edit_digits+0x196>
				__check_and_print_four_digits_limit(src);
 80060c8:	78fb      	ldrb	r3, [r7, #3]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7ff fd9e 	bl	8005c0c <__check_and_print_four_digits_limit>
			if(no_of_digits == 4)
 80060d0:	e0ce      	b.n	8006270 <__edit_digits+0x334>
			else if(no_of_digits == 2)
 80060d2:	78bb      	ldrb	r3, [r7, #2]
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	f040 80cb 	bne.w	8006270 <__edit_digits+0x334>
				__check_and_print_two_digits_limit(src,has_float,has_ph);
 80060da:	7c3a      	ldrb	r2, [r7, #16]
 80060dc:	7879      	ldrb	r1, [r7, #1]
 80060de:	78fb      	ldrb	r3, [r7, #3]
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7ff fdd7 	bl	8005c94 <__check_and_print_two_digits_limit>
			if(no_of_digits == 4)
 80060e6:	e0c3      	b.n	8006270 <__edit_digits+0x334>
		else if(key_pressed == RIGHT_KEY_PRESSED && key_pressed_flag == NONE_KEY_PRESSED)
 80060e8:	4b35      	ldr	r3, [pc, #212]	; (80061c0 <__edit_digits+0x284>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d11b      	bne.n	8006128 <__edit_digits+0x1ec>
 80060f0:	4b34      	ldr	r3, [pc, #208]	; (80061c4 <__edit_digits+0x288>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d117      	bne.n	8006128 <__edit_digits+0x1ec>
			new_input_digits-=10;
 80060f8:	4b30      	ldr	r3, [pc, #192]	; (80061bc <__edit_digits+0x280>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	3b0a      	subs	r3, #10
 80060fe:	4a2f      	ldr	r2, [pc, #188]	; (80061bc <__edit_digits+0x280>)
 8006100:	6013      	str	r3, [r2, #0]
			if(no_of_digits == 4)
 8006102:	78bb      	ldrb	r3, [r7, #2]
 8006104:	2b04      	cmp	r3, #4
 8006106:	d104      	bne.n	8006112 <__edit_digits+0x1d6>
				__check_and_print_four_digits_limit(src);
 8006108:	78fb      	ldrb	r3, [r7, #3]
 800610a:	4618      	mov	r0, r3
 800610c:	f7ff fd7e 	bl	8005c0c <__check_and_print_four_digits_limit>
			if(no_of_digits == 4)
 8006110:	e0b0      	b.n	8006274 <__edit_digits+0x338>
			else if(no_of_digits == 2)
 8006112:	78bb      	ldrb	r3, [r7, #2]
 8006114:	2b02      	cmp	r3, #2
 8006116:	f040 80ad 	bne.w	8006274 <__edit_digits+0x338>
				__check_and_print_two_digits_limit(src,has_float,has_ph);
 800611a:	7c3a      	ldrb	r2, [r7, #16]
 800611c:	7879      	ldrb	r1, [r7, #1]
 800611e:	78fb      	ldrb	r3, [r7, #3]
 8006120:	4618      	mov	r0, r3
 8006122:	f7ff fdb7 	bl	8005c94 <__check_and_print_two_digits_limit>
			if(no_of_digits == 4)
 8006126:	e0a5      	b.n	8006274 <__edit_digits+0x338>
		else if(key_pressed == ENTER_KEY_PRESSED && key_pressed_flag == NONE_KEY_PRESSED)
 8006128:	4b25      	ldr	r3, [pc, #148]	; (80061c0 <__edit_digits+0x284>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2b03      	cmp	r3, #3
 800612e:	d15b      	bne.n	80061e8 <__edit_digits+0x2ac>
 8006130:	4b24      	ldr	r3, [pc, #144]	; (80061c4 <__edit_digits+0x288>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d157      	bne.n	80061e8 <__edit_digits+0x2ac>
			*settings_val = new_input_digits;
 8006138:	4b20      	ldr	r3, [pc, #128]	; (80061bc <__edit_digits+0x280>)
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	601a      	str	r2, [r3, #0]
			settings_semaphore=0;
 8006140:	4b1d      	ldr	r3, [pc, #116]	; (80061b8 <__edit_digits+0x27c>)
 8006142:	2200      	movs	r2, #0
 8006144:	601a      	str	r2, [r3, #0]
			if(has_float != 1)
 8006146:	787b      	ldrb	r3, [r7, #1]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d012      	beq.n	8006172 <__edit_digits+0x236>
				edit_settings_cmd_len = sprintf(edit_settings_cmd,"n%d.val=%d%sn%d.pco=0%s",src, *settings_val,end_char,src,end_char);
 800614c:	78f9      	ldrb	r1, [r7, #3]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6818      	ldr	r0, [r3, #0]
 8006152:	78fb      	ldrb	r3, [r7, #3]
 8006154:	4a1c      	ldr	r2, [pc, #112]	; (80061c8 <__edit_digits+0x28c>)
 8006156:	9202      	str	r2, [sp, #8]
 8006158:	9301      	str	r3, [sp, #4]
 800615a:	4b1b      	ldr	r3, [pc, #108]	; (80061c8 <__edit_digits+0x28c>)
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	4603      	mov	r3, r0
 8006160:	460a      	mov	r2, r1
 8006162:	491a      	ldr	r1, [pc, #104]	; (80061cc <__edit_digits+0x290>)
 8006164:	481a      	ldr	r0, [pc, #104]	; (80061d0 <__edit_digits+0x294>)
 8006166:	f003 fd33 	bl	8009bd0 <siprintf>
 800616a:	4602      	mov	r2, r0
 800616c:	4b19      	ldr	r3, [pc, #100]	; (80061d4 <__edit_digits+0x298>)
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	e011      	b.n	8006196 <__edit_digits+0x25a>
				edit_settings_cmd_len = sprintf(edit_settings_cmd,"x%d.val=%d%sx%d.pco=0%s",src, *settings_val,end_char,src,end_char);
 8006172:	78f9      	ldrb	r1, [r7, #3]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6818      	ldr	r0, [r3, #0]
 8006178:	78fb      	ldrb	r3, [r7, #3]
 800617a:	4a13      	ldr	r2, [pc, #76]	; (80061c8 <__edit_digits+0x28c>)
 800617c:	9202      	str	r2, [sp, #8]
 800617e:	9301      	str	r3, [sp, #4]
 8006180:	4b11      	ldr	r3, [pc, #68]	; (80061c8 <__edit_digits+0x28c>)
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	4603      	mov	r3, r0
 8006186:	460a      	mov	r2, r1
 8006188:	4913      	ldr	r1, [pc, #76]	; (80061d8 <__edit_digits+0x29c>)
 800618a:	4811      	ldr	r0, [pc, #68]	; (80061d0 <__edit_digits+0x294>)
 800618c:	f003 fd20 	bl	8009bd0 <siprintf>
 8006190:	4602      	mov	r2, r0
 8006192:	4b10      	ldr	r3, [pc, #64]	; (80061d4 <__edit_digits+0x298>)
 8006194:	601a      	str	r2, [r3, #0]
			lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8006196:	4b0f      	ldr	r3, [pc, #60]	; (80061d4 <__edit_digits+0x298>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4619      	mov	r1, r3
 800619c:	480c      	ldr	r0, [pc, #48]	; (80061d0 <__edit_digits+0x294>)
 800619e:	f002 fe49 	bl	8008e34 <lcd_send_cmd>
			key_pressed = NONE_KEY_PRESSED;
 80061a2:	4b07      	ldr	r3, [pc, #28]	; (80061c0 <__edit_digits+0x284>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	601a      	str	r2, [r3, #0]
			save_settings = 1;
 80061a8:	4b0e      	ldr	r3, [pc, #56]	; (80061e4 <__edit_digits+0x2a8>)
 80061aa:	2201      	movs	r2, #1
 80061ac:	701a      	strb	r2, [r3, #0]
			DisplayActions = display_edit_settings;
 80061ae:	4b0b      	ldr	r3, [pc, #44]	; (80061dc <__edit_digits+0x2a0>)
 80061b0:	4a0b      	ldr	r2, [pc, #44]	; (80061e0 <__edit_digits+0x2a4>)
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	e05f      	b.n	8006276 <__edit_digits+0x33a>
 80061b6:	bf00      	nop
 80061b8:	20000218 	.word	0x20000218
 80061bc:	20000228 	.word	0x20000228
 80061c0:	2000020c 	.word	0x2000020c
 80061c4:	20000760 	.word	0x20000760
 80061c8:	2000000c 	.word	0x2000000c
 80061cc:	0800cb5c 	.word	0x0800cb5c
 80061d0:	20000764 	.word	0x20000764
 80061d4:	20000214 	.word	0x20000214
 80061d8:	0800cb74 	.word	0x0800cb74
 80061dc:	200006d4 	.word	0x200006d4
 80061e0:	08006d35 	.word	0x08006d35
 80061e4:	200002a0 	.word	0x200002a0
		else if(key_pressed == ESC_KEY_PRESSED && key_pressed_flag == NONE_KEY_PRESSED)
 80061e8:	4b25      	ldr	r3, [pc, #148]	; (8006280 <__edit_digits+0x344>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b04      	cmp	r3, #4
 80061ee:	d142      	bne.n	8006276 <__edit_digits+0x33a>
 80061f0:	4b24      	ldr	r3, [pc, #144]	; (8006284 <__edit_digits+0x348>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d13e      	bne.n	8006276 <__edit_digits+0x33a>
			if(has_float != 1)
 80061f8:	787b      	ldrb	r3, [r7, #1]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d012      	beq.n	8006224 <__edit_digits+0x2e8>
				edit_settings_cmd_len = sprintf(edit_settings_cmd,"n%d.val=%d%sn%d.pco=0%s",src, *settings_val,end_char,src,end_char);
 80061fe:	78f9      	ldrb	r1, [r7, #3]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6818      	ldr	r0, [r3, #0]
 8006204:	78fb      	ldrb	r3, [r7, #3]
 8006206:	4a20      	ldr	r2, [pc, #128]	; (8006288 <__edit_digits+0x34c>)
 8006208:	9202      	str	r2, [sp, #8]
 800620a:	9301      	str	r3, [sp, #4]
 800620c:	4b1e      	ldr	r3, [pc, #120]	; (8006288 <__edit_digits+0x34c>)
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	4603      	mov	r3, r0
 8006212:	460a      	mov	r2, r1
 8006214:	491d      	ldr	r1, [pc, #116]	; (800628c <__edit_digits+0x350>)
 8006216:	481e      	ldr	r0, [pc, #120]	; (8006290 <__edit_digits+0x354>)
 8006218:	f003 fcda 	bl	8009bd0 <siprintf>
 800621c:	4602      	mov	r2, r0
 800621e:	4b1d      	ldr	r3, [pc, #116]	; (8006294 <__edit_digits+0x358>)
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	e011      	b.n	8006248 <__edit_digits+0x30c>
				edit_settings_cmd_len = sprintf(edit_settings_cmd,"x%d.val=%d%sx%d.pco=0%s",src, *settings_val,end_char,src,end_char);
 8006224:	78f9      	ldrb	r1, [r7, #3]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6818      	ldr	r0, [r3, #0]
 800622a:	78fb      	ldrb	r3, [r7, #3]
 800622c:	4a16      	ldr	r2, [pc, #88]	; (8006288 <__edit_digits+0x34c>)
 800622e:	9202      	str	r2, [sp, #8]
 8006230:	9301      	str	r3, [sp, #4]
 8006232:	4b15      	ldr	r3, [pc, #84]	; (8006288 <__edit_digits+0x34c>)
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	4603      	mov	r3, r0
 8006238:	460a      	mov	r2, r1
 800623a:	4917      	ldr	r1, [pc, #92]	; (8006298 <__edit_digits+0x35c>)
 800623c:	4814      	ldr	r0, [pc, #80]	; (8006290 <__edit_digits+0x354>)
 800623e:	f003 fcc7 	bl	8009bd0 <siprintf>
 8006242:	4602      	mov	r2, r0
 8006244:	4b13      	ldr	r3, [pc, #76]	; (8006294 <__edit_digits+0x358>)
 8006246:	601a      	str	r2, [r3, #0]
			lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8006248:	4b12      	ldr	r3, [pc, #72]	; (8006294 <__edit_digits+0x358>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4619      	mov	r1, r3
 800624e:	4810      	ldr	r0, [pc, #64]	; (8006290 <__edit_digits+0x354>)
 8006250:	f002 fdf0 	bl	8008e34 <lcd_send_cmd>
			settings_semaphore = 0;
 8006254:	4b11      	ldr	r3, [pc, #68]	; (800629c <__edit_digits+0x360>)
 8006256:	2200      	movs	r2, #0
 8006258:	601a      	str	r2, [r3, #0]
			key_pressed = NONE_KEY_PRESSED;
 800625a:	4b09      	ldr	r3, [pc, #36]	; (8006280 <__edit_digits+0x344>)
 800625c:	2200      	movs	r2, #0
 800625e:	601a      	str	r2, [r3, #0]
			DisplayActions = display_edit_settings;
 8006260:	4b0f      	ldr	r3, [pc, #60]	; (80062a0 <__edit_digits+0x364>)
 8006262:	4a10      	ldr	r2, [pc, #64]	; (80062a4 <__edit_digits+0x368>)
 8006264:	601a      	str	r2, [r3, #0]
}
 8006266:	e006      	b.n	8006276 <__edit_digits+0x33a>
			if(no_of_digits == 4)
 8006268:	bf00      	nop
 800626a:	e004      	b.n	8006276 <__edit_digits+0x33a>
			if(no_of_digits == 4)
 800626c:	bf00      	nop
 800626e:	e002      	b.n	8006276 <__edit_digits+0x33a>
			if(no_of_digits == 4)
 8006270:	bf00      	nop
 8006272:	e000      	b.n	8006276 <__edit_digits+0x33a>
			if(no_of_digits == 4)
 8006274:	bf00      	nop
}
 8006276:	bf00      	nop
 8006278:	3708      	adds	r7, #8
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	2000020c 	.word	0x2000020c
 8006284:	20000760 	.word	0x20000760
 8006288:	2000000c 	.word	0x2000000c
 800628c:	0800cb5c 	.word	0x0800cb5c
 8006290:	20000764 	.word	0x20000764
 8006294:	20000214 	.word	0x20000214
 8006298:	0800cb74 	.word	0x0800cb74
 800629c:	20000218 	.word	0x20000218
 80062a0:	200006d4 	.word	0x200006d4
 80062a4:	08006d35 	.word	0x08006d35

080062a8 <__edit_button_selection>:

void
__edit_button_selection(uint8_t *settings_val)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af04      	add	r7, sp, #16
 80062ae:	6078      	str	r0, [r7, #4]
	if(key_pressed == LEFT_KEY_PRESSED)
 80062b0:	4b4f      	ldr	r3, [pc, #316]	; (80063f0 <__edit_button_selection+0x148>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d119      	bne.n	80062ec <__edit_button_selection+0x44>
	{
		button_state = 1;
 80062b8:	4b4e      	ldr	r3, [pc, #312]	; (80063f4 <__edit_button_selection+0x14c>)
 80062ba:	2201      	movs	r2, #1
 80062bc:	701a      	strb	r2, [r3, #0]
		edit_settings_cmd_len = sprintf(edit_settings_cmd,"b1.pco=63488%sb1.pco2=63488%sb0.pco=65535%sb1.pco2=65535%s",end_char,end_char,end_char,end_char);
 80062be:	4b4e      	ldr	r3, [pc, #312]	; (80063f8 <__edit_button_selection+0x150>)
 80062c0:	9301      	str	r3, [sp, #4]
 80062c2:	4b4d      	ldr	r3, [pc, #308]	; (80063f8 <__edit_button_selection+0x150>)
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	4b4c      	ldr	r3, [pc, #304]	; (80063f8 <__edit_button_selection+0x150>)
 80062c8:	4a4b      	ldr	r2, [pc, #300]	; (80063f8 <__edit_button_selection+0x150>)
 80062ca:	494c      	ldr	r1, [pc, #304]	; (80063fc <__edit_button_selection+0x154>)
 80062cc:	484c      	ldr	r0, [pc, #304]	; (8006400 <__edit_button_selection+0x158>)
 80062ce:	f003 fc7f 	bl	8009bd0 <siprintf>
 80062d2:	4602      	mov	r2, r0
 80062d4:	4b4b      	ldr	r3, [pc, #300]	; (8006404 <__edit_button_selection+0x15c>)
 80062d6:	601a      	str	r2, [r3, #0]
		lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 80062d8:	4b4a      	ldr	r3, [pc, #296]	; (8006404 <__edit_button_selection+0x15c>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4619      	mov	r1, r3
 80062de:	4848      	ldr	r0, [pc, #288]	; (8006400 <__edit_button_selection+0x158>)
 80062e0:	f002 fda8 	bl	8008e34 <lcd_send_cmd>
		key_pressed = NONE_KEY_PRESSED;
 80062e4:	4b42      	ldr	r3, [pc, #264]	; (80063f0 <__edit_button_selection+0x148>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	601a      	str	r2, [r3, #0]
		edit_settings_cmd_len = sprintf(edit_settings_cmd,"b1.pco=65535%sb1.pco2=65535%sb0.pco=65535%sb0.pco2=65535%s",end_char,end_char,end_char,end_char);
		lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
		key_pressed = NONE_KEY_PRESSED;
		DisplayActions = display_edit_settings;
	}
}
 80062ea:	e07d      	b.n	80063e8 <__edit_button_selection+0x140>
	else if(key_pressed == RIGHT_KEY_PRESSED)
 80062ec:	4b40      	ldr	r3, [pc, #256]	; (80063f0 <__edit_button_selection+0x148>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d119      	bne.n	8006328 <__edit_button_selection+0x80>
		button_state = 0;
 80062f4:	4b3f      	ldr	r3, [pc, #252]	; (80063f4 <__edit_button_selection+0x14c>)
 80062f6:	2200      	movs	r2, #0
 80062f8:	701a      	strb	r2, [r3, #0]
		edit_settings_cmd_len = sprintf(edit_settings_cmd,"b0.pco=63488%sb0.pco2=63488%sb1.pco=65535%sb1.pco2=65535%s",end_char,end_char,end_char,end_char);
 80062fa:	4b3f      	ldr	r3, [pc, #252]	; (80063f8 <__edit_button_selection+0x150>)
 80062fc:	9301      	str	r3, [sp, #4]
 80062fe:	4b3e      	ldr	r3, [pc, #248]	; (80063f8 <__edit_button_selection+0x150>)
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	4b3d      	ldr	r3, [pc, #244]	; (80063f8 <__edit_button_selection+0x150>)
 8006304:	4a3c      	ldr	r2, [pc, #240]	; (80063f8 <__edit_button_selection+0x150>)
 8006306:	4940      	ldr	r1, [pc, #256]	; (8006408 <__edit_button_selection+0x160>)
 8006308:	483d      	ldr	r0, [pc, #244]	; (8006400 <__edit_button_selection+0x158>)
 800630a:	f003 fc61 	bl	8009bd0 <siprintf>
 800630e:	4602      	mov	r2, r0
 8006310:	4b3c      	ldr	r3, [pc, #240]	; (8006404 <__edit_button_selection+0x15c>)
 8006312:	601a      	str	r2, [r3, #0]
		lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8006314:	4b3b      	ldr	r3, [pc, #236]	; (8006404 <__edit_button_selection+0x15c>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4619      	mov	r1, r3
 800631a:	4839      	ldr	r0, [pc, #228]	; (8006400 <__edit_button_selection+0x158>)
 800631c:	f002 fd8a 	bl	8008e34 <lcd_send_cmd>
		key_pressed = NONE_KEY_PRESSED;
 8006320:	4b33      	ldr	r3, [pc, #204]	; (80063f0 <__edit_button_selection+0x148>)
 8006322:	2200      	movs	r2, #0
 8006324:	601a      	str	r2, [r3, #0]
}
 8006326:	e05f      	b.n	80063e8 <__edit_button_selection+0x140>
	else if(key_pressed == ENTER_KEY_PRESSED)
 8006328:	4b31      	ldr	r3, [pc, #196]	; (80063f0 <__edit_button_selection+0x148>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b03      	cmp	r3, #3
 800632e:	d13e      	bne.n	80063ae <__edit_button_selection+0x106>
		*settings_val = button_state;
 8006330:	4b30      	ldr	r3, [pc, #192]	; (80063f4 <__edit_button_selection+0x14c>)
 8006332:	781a      	ldrb	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	701a      	strb	r2, [r3, #0]
		if(button_state == 0)
 8006338:	4b2e      	ldr	r3, [pc, #184]	; (80063f4 <__edit_button_selection+0x14c>)
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d111      	bne.n	8006364 <__edit_button_selection+0xbc>
			edit_settings_cmd_len = sprintf(edit_settings_cmd,"b0.pic=6%sb1.pic=5%sb1.pco=65535%sb1.pco2=65535%sb0.pco=65535%sb0.pco2=65535%s",end_char,end_char,end_char,end_char,end_char,end_char);
 8006340:	4b2d      	ldr	r3, [pc, #180]	; (80063f8 <__edit_button_selection+0x150>)
 8006342:	9303      	str	r3, [sp, #12]
 8006344:	4b2c      	ldr	r3, [pc, #176]	; (80063f8 <__edit_button_selection+0x150>)
 8006346:	9302      	str	r3, [sp, #8]
 8006348:	4b2b      	ldr	r3, [pc, #172]	; (80063f8 <__edit_button_selection+0x150>)
 800634a:	9301      	str	r3, [sp, #4]
 800634c:	4b2a      	ldr	r3, [pc, #168]	; (80063f8 <__edit_button_selection+0x150>)
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	4b29      	ldr	r3, [pc, #164]	; (80063f8 <__edit_button_selection+0x150>)
 8006352:	4a29      	ldr	r2, [pc, #164]	; (80063f8 <__edit_button_selection+0x150>)
 8006354:	492d      	ldr	r1, [pc, #180]	; (800640c <__edit_button_selection+0x164>)
 8006356:	482a      	ldr	r0, [pc, #168]	; (8006400 <__edit_button_selection+0x158>)
 8006358:	f003 fc3a 	bl	8009bd0 <siprintf>
 800635c:	4602      	mov	r2, r0
 800635e:	4b29      	ldr	r3, [pc, #164]	; (8006404 <__edit_button_selection+0x15c>)
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	e014      	b.n	800638e <__edit_button_selection+0xe6>
		else if(button_state == 1)
 8006364:	4b23      	ldr	r3, [pc, #140]	; (80063f4 <__edit_button_selection+0x14c>)
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d110      	bne.n	800638e <__edit_button_selection+0xe6>
			edit_settings_cmd_len = sprintf(edit_settings_cmd,"b1.pic=4%sb0.pic=5%sb1.pco=65535%sb1.pco2=65535%sb0.pco=65535%sb0.pco2=65535%s",end_char,end_char,end_char,end_char,end_char,end_char);
 800636c:	4b22      	ldr	r3, [pc, #136]	; (80063f8 <__edit_button_selection+0x150>)
 800636e:	9303      	str	r3, [sp, #12]
 8006370:	4b21      	ldr	r3, [pc, #132]	; (80063f8 <__edit_button_selection+0x150>)
 8006372:	9302      	str	r3, [sp, #8]
 8006374:	4b20      	ldr	r3, [pc, #128]	; (80063f8 <__edit_button_selection+0x150>)
 8006376:	9301      	str	r3, [sp, #4]
 8006378:	4b1f      	ldr	r3, [pc, #124]	; (80063f8 <__edit_button_selection+0x150>)
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	4b1e      	ldr	r3, [pc, #120]	; (80063f8 <__edit_button_selection+0x150>)
 800637e:	4a1e      	ldr	r2, [pc, #120]	; (80063f8 <__edit_button_selection+0x150>)
 8006380:	4923      	ldr	r1, [pc, #140]	; (8006410 <__edit_button_selection+0x168>)
 8006382:	481f      	ldr	r0, [pc, #124]	; (8006400 <__edit_button_selection+0x158>)
 8006384:	f003 fc24 	bl	8009bd0 <siprintf>
 8006388:	4602      	mov	r2, r0
 800638a:	4b1e      	ldr	r3, [pc, #120]	; (8006404 <__edit_button_selection+0x15c>)
 800638c:	601a      	str	r2, [r3, #0]
		lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 800638e:	4b1d      	ldr	r3, [pc, #116]	; (8006404 <__edit_button_selection+0x15c>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4619      	mov	r1, r3
 8006394:	481a      	ldr	r0, [pc, #104]	; (8006400 <__edit_button_selection+0x158>)
 8006396:	f002 fd4d 	bl	8008e34 <lcd_send_cmd>
		key_pressed = NONE_KEY_PRESSED;
 800639a:	4b15      	ldr	r3, [pc, #84]	; (80063f0 <__edit_button_selection+0x148>)
 800639c:	2200      	movs	r2, #0
 800639e:	601a      	str	r2, [r3, #0]
		save_settings = 1;
 80063a0:	4b1c      	ldr	r3, [pc, #112]	; (8006414 <__edit_button_selection+0x16c>)
 80063a2:	2201      	movs	r2, #1
 80063a4:	701a      	strb	r2, [r3, #0]
		DisplayActions = display_edit_settings;
 80063a6:	4b1c      	ldr	r3, [pc, #112]	; (8006418 <__edit_button_selection+0x170>)
 80063a8:	4a1c      	ldr	r2, [pc, #112]	; (800641c <__edit_button_selection+0x174>)
 80063aa:	601a      	str	r2, [r3, #0]
}
 80063ac:	e01c      	b.n	80063e8 <__edit_button_selection+0x140>
	else if(key_pressed == ESC_KEY_PRESSED)
 80063ae:	4b10      	ldr	r3, [pc, #64]	; (80063f0 <__edit_button_selection+0x148>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b04      	cmp	r3, #4
 80063b4:	d118      	bne.n	80063e8 <__edit_button_selection+0x140>
		edit_settings_cmd_len = sprintf(edit_settings_cmd,"b1.pco=65535%sb1.pco2=65535%sb0.pco=65535%sb0.pco2=65535%s",end_char,end_char,end_char,end_char);
 80063b6:	4b10      	ldr	r3, [pc, #64]	; (80063f8 <__edit_button_selection+0x150>)
 80063b8:	9301      	str	r3, [sp, #4]
 80063ba:	4b0f      	ldr	r3, [pc, #60]	; (80063f8 <__edit_button_selection+0x150>)
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	4b0e      	ldr	r3, [pc, #56]	; (80063f8 <__edit_button_selection+0x150>)
 80063c0:	4a0d      	ldr	r2, [pc, #52]	; (80063f8 <__edit_button_selection+0x150>)
 80063c2:	4917      	ldr	r1, [pc, #92]	; (8006420 <__edit_button_selection+0x178>)
 80063c4:	480e      	ldr	r0, [pc, #56]	; (8006400 <__edit_button_selection+0x158>)
 80063c6:	f003 fc03 	bl	8009bd0 <siprintf>
 80063ca:	4602      	mov	r2, r0
 80063cc:	4b0d      	ldr	r3, [pc, #52]	; (8006404 <__edit_button_selection+0x15c>)
 80063ce:	601a      	str	r2, [r3, #0]
		lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 80063d0:	4b0c      	ldr	r3, [pc, #48]	; (8006404 <__edit_button_selection+0x15c>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4619      	mov	r1, r3
 80063d6:	480a      	ldr	r0, [pc, #40]	; (8006400 <__edit_button_selection+0x158>)
 80063d8:	f002 fd2c 	bl	8008e34 <lcd_send_cmd>
		key_pressed = NONE_KEY_PRESSED;
 80063dc:	4b04      	ldr	r3, [pc, #16]	; (80063f0 <__edit_button_selection+0x148>)
 80063de:	2200      	movs	r2, #0
 80063e0:	601a      	str	r2, [r3, #0]
		DisplayActions = display_edit_settings;
 80063e2:	4b0d      	ldr	r3, [pc, #52]	; (8006418 <__edit_button_selection+0x170>)
 80063e4:	4a0d      	ldr	r2, [pc, #52]	; (800641c <__edit_button_selection+0x174>)
 80063e6:	601a      	str	r2, [r3, #0]
}
 80063e8:	bf00      	nop
 80063ea:	3708      	adds	r7, #8
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	2000020c 	.word	0x2000020c
 80063f4:	2000022c 	.word	0x2000022c
 80063f8:	2000000c 	.word	0x2000000c
 80063fc:	0800cb8c 	.word	0x0800cb8c
 8006400:	20000764 	.word	0x20000764
 8006404:	20000214 	.word	0x20000214
 8006408:	0800cbc8 	.word	0x0800cbc8
 800640c:	0800cc04 	.word	0x0800cc04
 8006410:	0800cc54 	.word	0x0800cc54
 8006414:	200002a0 	.word	0x200002a0
 8006418:	200006d4 	.word	0x200006d4
 800641c:	08006d35 	.word	0x08006d35
 8006420:	0800cca4 	.word	0x0800cca4

08006424 <__edit_cool_down_time>:

void
__edit_cool_down_time(int *settings_val, uint8_t src)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af04      	add	r7, sp, #16
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	460b      	mov	r3, r1
 800642e:	70fb      	strb	r3, [r7, #3]
	if(settings_semaphore == 0)
 8006430:	4b50      	ldr	r3, [pc, #320]	; (8006574 <__edit_cool_down_time+0x150>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d127      	bne.n	8006488 <__edit_cool_down_time+0x64>
		{
			settings_semaphore = 1;
 8006438:	4b4e      	ldr	r3, [pc, #312]	; (8006574 <__edit_cool_down_time+0x150>)
 800643a:	2201      	movs	r2, #1
 800643c:	601a      	str	r2, [r3, #0]
			new_input_digits = *settings_val;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a4d      	ldr	r2, [pc, #308]	; (8006578 <__edit_cool_down_time+0x154>)
 8006444:	6013      	str	r3, [r2, #0]
			if(new_input_digits % 25 !=0 )
 8006446:	4b4c      	ldr	r3, [pc, #304]	; (8006578 <__edit_cool_down_time+0x154>)
 8006448:	6819      	ldr	r1, [r3, #0]
 800644a:	4b4c      	ldr	r3, [pc, #304]	; (800657c <__edit_cool_down_time+0x158>)
 800644c:	fb83 2301 	smull	r2, r3, r3, r1
 8006450:	10da      	asrs	r2, r3, #3
 8006452:	17cb      	asrs	r3, r1, #31
 8006454:	1ad2      	subs	r2, r2, r3
 8006456:	4613      	mov	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	009a      	lsls	r2, r3, #2
 800645e:	4413      	add	r3, r2
 8006460:	1aca      	subs	r2, r1, r3
 8006462:	2a00      	cmp	r2, #0
 8006464:	f000 8082 	beq.w	800656c <__edit_cool_down_time+0x148>
			{
				new_input_digits = (new_input_digits/25) * 25;
 8006468:	4b43      	ldr	r3, [pc, #268]	; (8006578 <__edit_cool_down_time+0x154>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a43      	ldr	r2, [pc, #268]	; (800657c <__edit_cool_down_time+0x158>)
 800646e:	fb82 1203 	smull	r1, r2, r2, r3
 8006472:	10d2      	asrs	r2, r2, #3
 8006474:	17db      	asrs	r3, r3, #31
 8006476:	1ad2      	subs	r2, r2, r3
 8006478:	4613      	mov	r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4413      	add	r3, r2
 800647e:	009a      	lsls	r2, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	4a3d      	ldr	r2, [pc, #244]	; (8006578 <__edit_cool_down_time+0x154>)
 8006484:	6013      	str	r3, [r2, #0]
			settings_semaphore = 0;
			key_pressed = NONE_KEY_PRESSED;
			DisplayActions = display_edit_settings;
		}
	}
}
 8006486:	e071      	b.n	800656c <__edit_cool_down_time+0x148>
	else if(settings_semaphore == 1)
 8006488:	4b3a      	ldr	r3, [pc, #232]	; (8006574 <__edit_cool_down_time+0x150>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d16d      	bne.n	800656c <__edit_cool_down_time+0x148>
		if(key_pressed == LEFT_KEY_PRESSED)
 8006490:	4b3b      	ldr	r3, [pc, #236]	; (8006580 <__edit_cool_down_time+0x15c>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d109      	bne.n	80064ac <__edit_cool_down_time+0x88>
			new_input_digits += 25;
 8006498:	4b37      	ldr	r3, [pc, #220]	; (8006578 <__edit_cool_down_time+0x154>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	3319      	adds	r3, #25
 800649e:	4a36      	ldr	r2, [pc, #216]	; (8006578 <__edit_cool_down_time+0x154>)
 80064a0:	6013      	str	r3, [r2, #0]
			__check_and_print_time_limit(src);
 80064a2:	78fb      	ldrb	r3, [r7, #3]
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7ff fc57 	bl	8005d58 <__check_and_print_time_limit>
}
 80064aa:	e05f      	b.n	800656c <__edit_cool_down_time+0x148>
		else if(key_pressed == RIGHT_KEY_PRESSED)
 80064ac:	4b34      	ldr	r3, [pc, #208]	; (8006580 <__edit_cool_down_time+0x15c>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d109      	bne.n	80064c8 <__edit_cool_down_time+0xa4>
			new_input_digits -= 25;
 80064b4:	4b30      	ldr	r3, [pc, #192]	; (8006578 <__edit_cool_down_time+0x154>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3b19      	subs	r3, #25
 80064ba:	4a2f      	ldr	r2, [pc, #188]	; (8006578 <__edit_cool_down_time+0x154>)
 80064bc:	6013      	str	r3, [r2, #0]
			__check_and_print_time_limit(src);
 80064be:	78fb      	ldrb	r3, [r7, #3]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7ff fc49 	bl	8005d58 <__check_and_print_time_limit>
}
 80064c6:	e051      	b.n	800656c <__edit_cool_down_time+0x148>
		else if(key_pressed == ENTER_KEY_PRESSED)
 80064c8:	4b2d      	ldr	r3, [pc, #180]	; (8006580 <__edit_cool_down_time+0x15c>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b03      	cmp	r3, #3
 80064ce:	d128      	bne.n	8006522 <__edit_cool_down_time+0xfe>
			*settings_val = new_input_digits;
 80064d0:	4b29      	ldr	r3, [pc, #164]	; (8006578 <__edit_cool_down_time+0x154>)
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	601a      	str	r2, [r3, #0]
			edit_settings_cmd_len = sprintf(edit_settings_cmd,"x%d.val=%d%sx%d.pco=0%s",src, *settings_val,end_char,src,end_char);
 80064d8:	78f9      	ldrb	r1, [r7, #3]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6818      	ldr	r0, [r3, #0]
 80064de:	78fb      	ldrb	r3, [r7, #3]
 80064e0:	4a28      	ldr	r2, [pc, #160]	; (8006584 <__edit_cool_down_time+0x160>)
 80064e2:	9202      	str	r2, [sp, #8]
 80064e4:	9301      	str	r3, [sp, #4]
 80064e6:	4b27      	ldr	r3, [pc, #156]	; (8006584 <__edit_cool_down_time+0x160>)
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	4603      	mov	r3, r0
 80064ec:	460a      	mov	r2, r1
 80064ee:	4926      	ldr	r1, [pc, #152]	; (8006588 <__edit_cool_down_time+0x164>)
 80064f0:	4826      	ldr	r0, [pc, #152]	; (800658c <__edit_cool_down_time+0x168>)
 80064f2:	f003 fb6d 	bl	8009bd0 <siprintf>
 80064f6:	4602      	mov	r2, r0
 80064f8:	4b25      	ldr	r3, [pc, #148]	; (8006590 <__edit_cool_down_time+0x16c>)
 80064fa:	601a      	str	r2, [r3, #0]
			lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 80064fc:	4b24      	ldr	r3, [pc, #144]	; (8006590 <__edit_cool_down_time+0x16c>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4619      	mov	r1, r3
 8006502:	4822      	ldr	r0, [pc, #136]	; (800658c <__edit_cool_down_time+0x168>)
 8006504:	f002 fc96 	bl	8008e34 <lcd_send_cmd>
			settings_semaphore = 0;
 8006508:	4b1a      	ldr	r3, [pc, #104]	; (8006574 <__edit_cool_down_time+0x150>)
 800650a:	2200      	movs	r2, #0
 800650c:	601a      	str	r2, [r3, #0]
			key_pressed = NONE_KEY_PRESSED;
 800650e:	4b1c      	ldr	r3, [pc, #112]	; (8006580 <__edit_cool_down_time+0x15c>)
 8006510:	2200      	movs	r2, #0
 8006512:	601a      	str	r2, [r3, #0]
			save_settings = 1;
 8006514:	4b1f      	ldr	r3, [pc, #124]	; (8006594 <__edit_cool_down_time+0x170>)
 8006516:	2201      	movs	r2, #1
 8006518:	701a      	strb	r2, [r3, #0]
			DisplayActions = display_edit_settings;
 800651a:	4b1f      	ldr	r3, [pc, #124]	; (8006598 <__edit_cool_down_time+0x174>)
 800651c:	4a1f      	ldr	r2, [pc, #124]	; (800659c <__edit_cool_down_time+0x178>)
 800651e:	601a      	str	r2, [r3, #0]
}
 8006520:	e024      	b.n	800656c <__edit_cool_down_time+0x148>
		else if(key_pressed == ESC_KEY_PRESSED)
 8006522:	4b17      	ldr	r3, [pc, #92]	; (8006580 <__edit_cool_down_time+0x15c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b04      	cmp	r3, #4
 8006528:	d120      	bne.n	800656c <__edit_cool_down_time+0x148>
			edit_settings_cmd_len = sprintf(edit_settings_cmd,"x%d.val=%d%sx%d.pco=0%s",src, *settings_val,end_char,src,end_char);
 800652a:	78f9      	ldrb	r1, [r7, #3]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6818      	ldr	r0, [r3, #0]
 8006530:	78fb      	ldrb	r3, [r7, #3]
 8006532:	4a14      	ldr	r2, [pc, #80]	; (8006584 <__edit_cool_down_time+0x160>)
 8006534:	9202      	str	r2, [sp, #8]
 8006536:	9301      	str	r3, [sp, #4]
 8006538:	4b12      	ldr	r3, [pc, #72]	; (8006584 <__edit_cool_down_time+0x160>)
 800653a:	9300      	str	r3, [sp, #0]
 800653c:	4603      	mov	r3, r0
 800653e:	460a      	mov	r2, r1
 8006540:	4911      	ldr	r1, [pc, #68]	; (8006588 <__edit_cool_down_time+0x164>)
 8006542:	4812      	ldr	r0, [pc, #72]	; (800658c <__edit_cool_down_time+0x168>)
 8006544:	f003 fb44 	bl	8009bd0 <siprintf>
 8006548:	4602      	mov	r2, r0
 800654a:	4b11      	ldr	r3, [pc, #68]	; (8006590 <__edit_cool_down_time+0x16c>)
 800654c:	601a      	str	r2, [r3, #0]
			lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 800654e:	4b10      	ldr	r3, [pc, #64]	; (8006590 <__edit_cool_down_time+0x16c>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4619      	mov	r1, r3
 8006554:	480d      	ldr	r0, [pc, #52]	; (800658c <__edit_cool_down_time+0x168>)
 8006556:	f002 fc6d 	bl	8008e34 <lcd_send_cmd>
			settings_semaphore = 0;
 800655a:	4b06      	ldr	r3, [pc, #24]	; (8006574 <__edit_cool_down_time+0x150>)
 800655c:	2200      	movs	r2, #0
 800655e:	601a      	str	r2, [r3, #0]
			key_pressed = NONE_KEY_PRESSED;
 8006560:	4b07      	ldr	r3, [pc, #28]	; (8006580 <__edit_cool_down_time+0x15c>)
 8006562:	2200      	movs	r2, #0
 8006564:	601a      	str	r2, [r3, #0]
			DisplayActions = display_edit_settings;
 8006566:	4b0c      	ldr	r3, [pc, #48]	; (8006598 <__edit_cool_down_time+0x174>)
 8006568:	4a0c      	ldr	r2, [pc, #48]	; (800659c <__edit_cool_down_time+0x178>)
 800656a:	601a      	str	r2, [r3, #0]
}
 800656c:	bf00      	nop
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	20000218 	.word	0x20000218
 8006578:	20000228 	.word	0x20000228
 800657c:	51eb851f 	.word	0x51eb851f
 8006580:	2000020c 	.word	0x2000020c
 8006584:	2000000c 	.word	0x2000000c
 8006588:	0800cb74 	.word	0x0800cb74
 800658c:	20000764 	.word	0x20000764
 8006590:	20000214 	.word	0x20000214
 8006594:	200002a0 	.word	0x200002a0
 8006598:	200006d4 	.word	0x200006d4
 800659c:	08006d35 	.word	0x08006d35

080065a0 <__update_offset_makeup_water_added>:

void __update_offset_makeup_water_added(char *disp_mwa_cmd, int *disp_mwa_cmd_len)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b088      	sub	sp, #32
 80065a4:	af02      	add	r7, sp, #8
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
	uint8_t n[6];
	int temp = yorker_settings.offset_mkupwater;
 80065aa:	4b24      	ldr	r3, [pc, #144]	; (800663c <__update_offset_makeup_water_added+0x9c>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 6; i++)
 80065b0:	2300      	movs	r3, #0
 80065b2:	613b      	str	r3, [r7, #16]
 80065b4:	e03a      	b.n	800662c <__update_offset_makeup_water_added+0x8c>
	{
		n[i] = temp % 10;
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	4b21      	ldr	r3, [pc, #132]	; (8006640 <__update_offset_makeup_water_added+0xa0>)
 80065ba:	fb83 1302 	smull	r1, r3, r3, r2
 80065be:	1099      	asrs	r1, r3, #2
 80065c0:	17d3      	asrs	r3, r2, #31
 80065c2:	1ac9      	subs	r1, r1, r3
 80065c4:	460b      	mov	r3, r1
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	440b      	add	r3, r1
 80065ca:	005b      	lsls	r3, r3, #1
 80065cc:	1ad1      	subs	r1, r2, r3
 80065ce:	b2c9      	uxtb	r1, r1
 80065d0:	f107 0208 	add.w	r2, r7, #8
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	4413      	add	r3, r2
 80065d8:	460a      	mov	r2, r1
 80065da:	701a      	strb	r2, [r3, #0]
		temp = temp / 10;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	4a18      	ldr	r2, [pc, #96]	; (8006640 <__update_offset_makeup_water_added+0xa0>)
 80065e0:	fb82 1203 	smull	r1, r2, r2, r3
 80065e4:	1092      	asrs	r2, r2, #2
 80065e6:	17db      	asrs	r3, r3, #31
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	617b      	str	r3, [r7, #20]
		*disp_mwa_cmd_len += snprintf (disp_mwa_cmd+(*disp_mwa_cmd_len),1024-(*disp_mwa_cmd_len),"n%d.val=%d%s",i,n[i],end_char);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	461a      	mov	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	1898      	adds	r0, r3, r2
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80065fe:	4619      	mov	r1, r3
 8006600:	f107 0208 	add.w	r2, r7, #8
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	4413      	add	r3, r2
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	461a      	mov	r2, r3
 800660c:	4b0d      	ldr	r3, [pc, #52]	; (8006644 <__update_offset_makeup_water_added+0xa4>)
 800660e:	9301      	str	r3, [sp, #4]
 8006610:	9200      	str	r2, [sp, #0]
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	4a0c      	ldr	r2, [pc, #48]	; (8006648 <__update_offset_makeup_water_added+0xa8>)
 8006616:	f003 faa7 	bl	8009b68 <sniprintf>
 800661a:	4602      	mov	r2, r0
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	441a      	add	r2, r3
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 6; i++)
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	3301      	adds	r3, #1
 800662a:	613b      	str	r3, [r7, #16]
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	2b05      	cmp	r3, #5
 8006630:	ddc1      	ble.n	80065b6 <__update_offset_makeup_water_added+0x16>
	}
}
 8006632:	bf00      	nop
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	2000024c 	.word	0x2000024c
 8006640:	66666667 	.word	0x66666667
 8006644:	2000000c 	.word	0x2000000c
 8006648:	0800cb28 	.word	0x0800cb28

0800664c <__update_offset_blowdown_water>:

void __update_offset_blowdown_water(char *disp_mwa_cmd, int *disp_mwa_cmd_len)
{
 800664c:	b590      	push	{r4, r7, lr}
 800664e:	b089      	sub	sp, #36	; 0x24
 8006650:	af02      	add	r7, sp, #8
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
	uint8_t n[6];
	int temp = yorker_settings.offset_blowdown;
 8006656:	4b25      	ldr	r3, [pc, #148]	; (80066ec <__update_offset_blowdown_water+0xa0>)
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 6; i++)
 800665c:	2300      	movs	r3, #0
 800665e:	613b      	str	r3, [r7, #16]
 8006660:	e03d      	b.n	80066de <__update_offset_blowdown_water+0x92>
	{
		n[i] = temp % 10;
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	4b22      	ldr	r3, [pc, #136]	; (80066f0 <__update_offset_blowdown_water+0xa4>)
 8006666:	fb83 1302 	smull	r1, r3, r3, r2
 800666a:	1099      	asrs	r1, r3, #2
 800666c:	17d3      	asrs	r3, r2, #31
 800666e:	1ac9      	subs	r1, r1, r3
 8006670:	460b      	mov	r3, r1
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	440b      	add	r3, r1
 8006676:	005b      	lsls	r3, r3, #1
 8006678:	1ad1      	subs	r1, r2, r3
 800667a:	b2c9      	uxtb	r1, r1
 800667c:	f107 0208 	add.w	r2, r7, #8
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	4413      	add	r3, r2
 8006684:	460a      	mov	r2, r1
 8006686:	701a      	strb	r2, [r3, #0]
		temp = temp / 10;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	4a19      	ldr	r2, [pc, #100]	; (80066f0 <__update_offset_blowdown_water+0xa4>)
 800668c:	fb82 1203 	smull	r1, r2, r2, r3
 8006690:	1092      	asrs	r2, r2, #2
 8006692:	17db      	asrs	r3, r3, #31
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	617b      	str	r3, [r7, #20]
		*disp_mwa_cmd_len += snprintf (disp_mwa_cmd+(*disp_mwa_cmd_len),1024-(*disp_mwa_cmd_len),"n%d.val=%d%s",i+6,n[i],end_char);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	461a      	mov	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	1898      	adds	r0, r3, r2
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80066aa:	461c      	mov	r4, r3
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	1d99      	adds	r1, r3, #6
 80066b0:	f107 0208 	add.w	r2, r7, #8
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	4413      	add	r3, r2
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	461a      	mov	r2, r3
 80066bc:	4b0d      	ldr	r3, [pc, #52]	; (80066f4 <__update_offset_blowdown_water+0xa8>)
 80066be:	9301      	str	r3, [sp, #4]
 80066c0:	9200      	str	r2, [sp, #0]
 80066c2:	460b      	mov	r3, r1
 80066c4:	4a0c      	ldr	r2, [pc, #48]	; (80066f8 <__update_offset_blowdown_water+0xac>)
 80066c6:	4621      	mov	r1, r4
 80066c8:	f003 fa4e 	bl	8009b68 <sniprintf>
 80066cc:	4602      	mov	r2, r0
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	441a      	add	r2, r3
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 6; i++)
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	3301      	adds	r3, #1
 80066dc:	613b      	str	r3, [r7, #16]
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	2b05      	cmp	r3, #5
 80066e2:	ddbe      	ble.n	8006662 <__update_offset_blowdown_water+0x16>
	}
}
 80066e4:	bf00      	nop
 80066e6:	371c      	adds	r7, #28
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd90      	pop	{r4, r7, pc}
 80066ec:	2000024c 	.word	0x2000024c
 80066f0:	66666667 	.word	0x66666667
 80066f4:	2000000c 	.word	0x2000000c
 80066f8:	0800cb28 	.word	0x0800cb28

080066fc <__update_pump1_lts_per_pulse>:

void __update_pump1_lts_per_pulse(char *disp_mwa_cmd, int *disp_mwa_cmd_len)
{
 80066fc:	b590      	push	{r4, r7, lr}
 80066fe:	b089      	sub	sp, #36	; 0x24
 8006700:	af02      	add	r7, sp, #8
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
	uint8_t n[6];
	int temp = yorker_settings.pump1_lts_per_pulse;
 8006706:	4b26      	ldr	r3, [pc, #152]	; (80067a0 <__update_pump1_lts_per_pulse+0xa4>)
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 6; i++)
 800670c:	2300      	movs	r3, #0
 800670e:	613b      	str	r3, [r7, #16]
 8006710:	e03e      	b.n	8006790 <__update_pump1_lts_per_pulse+0x94>
	{
		n[i] = temp % 10;
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	4b23      	ldr	r3, [pc, #140]	; (80067a4 <__update_pump1_lts_per_pulse+0xa8>)
 8006716:	fb83 1302 	smull	r1, r3, r3, r2
 800671a:	1099      	asrs	r1, r3, #2
 800671c:	17d3      	asrs	r3, r2, #31
 800671e:	1ac9      	subs	r1, r1, r3
 8006720:	460b      	mov	r3, r1
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	440b      	add	r3, r1
 8006726:	005b      	lsls	r3, r3, #1
 8006728:	1ad1      	subs	r1, r2, r3
 800672a:	b2c9      	uxtb	r1, r1
 800672c:	f107 0208 	add.w	r2, r7, #8
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	4413      	add	r3, r2
 8006734:	460a      	mov	r2, r1
 8006736:	701a      	strb	r2, [r3, #0]
		temp = temp / 10;
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	4a1a      	ldr	r2, [pc, #104]	; (80067a4 <__update_pump1_lts_per_pulse+0xa8>)
 800673c:	fb82 1203 	smull	r1, r2, r2, r3
 8006740:	1092      	asrs	r2, r2, #2
 8006742:	17db      	asrs	r3, r3, #31
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	617b      	str	r3, [r7, #20]
		*disp_mwa_cmd_len += snprintf (disp_mwa_cmd+(*disp_mwa_cmd_len),1024-(*disp_mwa_cmd_len),"n%d.val=%d%s",i+12,n[i],end_char);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	461a      	mov	r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	1898      	adds	r0, r3, r2
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800675a:	461c      	mov	r4, r3
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	f103 010c 	add.w	r1, r3, #12
 8006762:	f107 0208 	add.w	r2, r7, #8
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	4413      	add	r3, r2
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	461a      	mov	r2, r3
 800676e:	4b0e      	ldr	r3, [pc, #56]	; (80067a8 <__update_pump1_lts_per_pulse+0xac>)
 8006770:	9301      	str	r3, [sp, #4]
 8006772:	9200      	str	r2, [sp, #0]
 8006774:	460b      	mov	r3, r1
 8006776:	4a0d      	ldr	r2, [pc, #52]	; (80067ac <__update_pump1_lts_per_pulse+0xb0>)
 8006778:	4621      	mov	r1, r4
 800677a:	f003 f9f5 	bl	8009b68 <sniprintf>
 800677e:	4602      	mov	r2, r0
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	441a      	add	r2, r3
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 6; i++)
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	3301      	adds	r3, #1
 800678e:	613b      	str	r3, [r7, #16]
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	2b05      	cmp	r3, #5
 8006794:	ddbd      	ble.n	8006712 <__update_pump1_lts_per_pulse+0x16>
	}
}
 8006796:	bf00      	nop
 8006798:	371c      	adds	r7, #28
 800679a:	46bd      	mov	sp, r7
 800679c:	bd90      	pop	{r4, r7, pc}
 800679e:	bf00      	nop
 80067a0:	2000024c 	.word	0x2000024c
 80067a4:	66666667 	.word	0x66666667
 80067a8:	2000000c 	.word	0x2000000c
 80067ac:	0800cb28 	.word	0x0800cb28

080067b0 <__update_pump2_lts_per_pulse>:

void __update_pump2_lts_per_pulse(char *disp_mwa_cmd, int *disp_mwa_cmd_len)
{
 80067b0:	b590      	push	{r4, r7, lr}
 80067b2:	b089      	sub	sp, #36	; 0x24
 80067b4:	af02      	add	r7, sp, #8
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
	uint8_t n[6];
	int temp = yorker_settings.pump2_lts_per_pulse;
 80067ba:	4b26      	ldr	r3, [pc, #152]	; (8006854 <__update_pump2_lts_per_pulse+0xa4>)
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 6; i++)
 80067c0:	2300      	movs	r3, #0
 80067c2:	613b      	str	r3, [r7, #16]
 80067c4:	e03e      	b.n	8006844 <__update_pump2_lts_per_pulse+0x94>
	{
		n[i] = temp % 10;
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	4b23      	ldr	r3, [pc, #140]	; (8006858 <__update_pump2_lts_per_pulse+0xa8>)
 80067ca:	fb83 1302 	smull	r1, r3, r3, r2
 80067ce:	1099      	asrs	r1, r3, #2
 80067d0:	17d3      	asrs	r3, r2, #31
 80067d2:	1ac9      	subs	r1, r1, r3
 80067d4:	460b      	mov	r3, r1
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	440b      	add	r3, r1
 80067da:	005b      	lsls	r3, r3, #1
 80067dc:	1ad1      	subs	r1, r2, r3
 80067de:	b2c9      	uxtb	r1, r1
 80067e0:	f107 0208 	add.w	r2, r7, #8
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	4413      	add	r3, r2
 80067e8:	460a      	mov	r2, r1
 80067ea:	701a      	strb	r2, [r3, #0]
		temp = temp / 10;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	4a1a      	ldr	r2, [pc, #104]	; (8006858 <__update_pump2_lts_per_pulse+0xa8>)
 80067f0:	fb82 1203 	smull	r1, r2, r2, r3
 80067f4:	1092      	asrs	r2, r2, #2
 80067f6:	17db      	asrs	r3, r3, #31
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	617b      	str	r3, [r7, #20]
		*disp_mwa_cmd_len += snprintf (disp_mwa_cmd+(*disp_mwa_cmd_len),1024-(*disp_mwa_cmd_len),"n%d.val=%d%s",i+18,n[i],end_char);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	461a      	mov	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	1898      	adds	r0, r3, r2
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800680e:	461c      	mov	r4, r3
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	f103 0112 	add.w	r1, r3, #18
 8006816:	f107 0208 	add.w	r2, r7, #8
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	4413      	add	r3, r2
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	461a      	mov	r2, r3
 8006822:	4b0e      	ldr	r3, [pc, #56]	; (800685c <__update_pump2_lts_per_pulse+0xac>)
 8006824:	9301      	str	r3, [sp, #4]
 8006826:	9200      	str	r2, [sp, #0]
 8006828:	460b      	mov	r3, r1
 800682a:	4a0d      	ldr	r2, [pc, #52]	; (8006860 <__update_pump2_lts_per_pulse+0xb0>)
 800682c:	4621      	mov	r1, r4
 800682e:	f003 f99b 	bl	8009b68 <sniprintf>
 8006832:	4602      	mov	r2, r0
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	441a      	add	r2, r3
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 6; i++)
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	3301      	adds	r3, #1
 8006842:	613b      	str	r3, [r7, #16]
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	2b05      	cmp	r3, #5
 8006848:	ddbd      	ble.n	80067c6 <__update_pump2_lts_per_pulse+0x16>
	}
}
 800684a:	bf00      	nop
 800684c:	371c      	adds	r7, #28
 800684e:	46bd      	mov	sp, r7
 8006850:	bd90      	pop	{r4, r7, pc}
 8006852:	bf00      	nop
 8006854:	2000024c 	.word	0x2000024c
 8006858:	66666667 	.word	0x66666667
 800685c:	2000000c 	.word	0x2000000c
 8006860:	0800cb28 	.word	0x0800cb28

08006864 <__update_ratio_1>:

void __update_ratio_1(char *disp_mwa_cmd, int *disp_mwa_cmd_len)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af02      	add	r7, sp, #8
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
	*disp_mwa_cmd_len += snprintf (disp_mwa_cmd+(*disp_mwa_cmd_len),1024-(*disp_mwa_cmd_len),"n%d.val=%d%s",24,yorker_settings.ratio_1,end_char);
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	461a      	mov	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	1898      	adds	r0, r3, r2
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8006880:	4619      	mov	r1, r3
 8006882:	4b09      	ldr	r3, [pc, #36]	; (80068a8 <__update_ratio_1+0x44>)
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	4a09      	ldr	r2, [pc, #36]	; (80068ac <__update_ratio_1+0x48>)
 8006888:	9201      	str	r2, [sp, #4]
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	2318      	movs	r3, #24
 800688e:	4a08      	ldr	r2, [pc, #32]	; (80068b0 <__update_ratio_1+0x4c>)
 8006890:	f003 f96a 	bl	8009b68 <sniprintf>
 8006894:	4602      	mov	r2, r0
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	441a      	add	r2, r3
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	601a      	str	r2, [r3, #0]
}
 80068a0:	bf00      	nop
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	2000024c 	.word	0x2000024c
 80068ac:	2000000c 	.word	0x2000000c
 80068b0:	0800cb28 	.word	0x0800cb28

080068b4 <__update_ratio_2>:

void __update_ratio_2(char *disp_mwa_cmd, int *disp_mwa_cmd_len)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af02      	add	r7, sp, #8
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
	*disp_mwa_cmd_len += snprintf (disp_mwa_cmd+(*disp_mwa_cmd_len),1024-(*disp_mwa_cmd_len),"n%d.val=%d%s",25,yorker_settings.ratio_2,end_char);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	1898      	adds	r0, r3, r2
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80068d0:	4619      	mov	r1, r3
 80068d2:	4b09      	ldr	r3, [pc, #36]	; (80068f8 <__update_ratio_2+0x44>)
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	4a09      	ldr	r2, [pc, #36]	; (80068fc <__update_ratio_2+0x48>)
 80068d8:	9201      	str	r2, [sp, #4]
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	2319      	movs	r3, #25
 80068de:	4a08      	ldr	r2, [pc, #32]	; (8006900 <__update_ratio_2+0x4c>)
 80068e0:	f003 f942 	bl	8009b68 <sniprintf>
 80068e4:	4602      	mov	r2, r0
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	441a      	add	r2, r3
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	601a      	str	r2, [r3, #0]
}
 80068f0:	bf00      	nop
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	2000024c 	.word	0x2000024c
 80068fc:	2000000c 	.word	0x2000000c
 8006900:	0800cb28 	.word	0x0800cb28

08006904 <__update_auto_blowdown>:

void __update_auto_blowdown(char *disp_mwa_cmd, int *disp_mwa_cmd_len)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b088      	sub	sp, #32
 8006908:	af06      	add	r7, sp, #24
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
	if( yorker_settings.auto_blowdown == 0)
 800690e:	4b24      	ldr	r3, [pc, #144]	; (80069a0 <__update_auto_blowdown+0x9c>)
 8006910:	7e1b      	ldrb	r3, [r3, #24]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d11e      	bne.n	8006954 <__update_auto_blowdown+0x50>
	{
		*disp_mwa_cmd_len += snprintf (disp_mwa_cmd+(*disp_mwa_cmd_len),1024-(*disp_mwa_cmd_len),"b0.pic=6%sb1.pic=5%sb1.pco=65535%sb1.pco2=65535%sb0.pco=65535%sb0.pco2=65535%s",end_char,end_char,end_char,end_char,end_char,end_char);
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	461a      	mov	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	1898      	adds	r0, r3, r2
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8006928:	4619      	mov	r1, r3
 800692a:	4b1e      	ldr	r3, [pc, #120]	; (80069a4 <__update_auto_blowdown+0xa0>)
 800692c:	9304      	str	r3, [sp, #16]
 800692e:	4b1d      	ldr	r3, [pc, #116]	; (80069a4 <__update_auto_blowdown+0xa0>)
 8006930:	9303      	str	r3, [sp, #12]
 8006932:	4b1c      	ldr	r3, [pc, #112]	; (80069a4 <__update_auto_blowdown+0xa0>)
 8006934:	9302      	str	r3, [sp, #8]
 8006936:	4b1b      	ldr	r3, [pc, #108]	; (80069a4 <__update_auto_blowdown+0xa0>)
 8006938:	9301      	str	r3, [sp, #4]
 800693a:	4b1a      	ldr	r3, [pc, #104]	; (80069a4 <__update_auto_blowdown+0xa0>)
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	4b19      	ldr	r3, [pc, #100]	; (80069a4 <__update_auto_blowdown+0xa0>)
 8006940:	4a19      	ldr	r2, [pc, #100]	; (80069a8 <__update_auto_blowdown+0xa4>)
 8006942:	f003 f911 	bl	8009b68 <sniprintf>
 8006946:	4602      	mov	r2, r0
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	441a      	add	r2, r3
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	601a      	str	r2, [r3, #0]
	}
	else if(yorker_settings.auto_blowdown == 1)
	{
		*disp_mwa_cmd_len += snprintf (disp_mwa_cmd+(*disp_mwa_cmd_len),1024-(*disp_mwa_cmd_len),"b1.pic=4%sb0.pic=5%sb1.pco=65535%sb1.pco2=65535%sb0.pco=65535%sb0.pco2=65535%s",end_char,end_char,end_char,end_char,end_char,end_char);
	}
}
 8006952:	e021      	b.n	8006998 <__update_auto_blowdown+0x94>
	else if(yorker_settings.auto_blowdown == 1)
 8006954:	4b12      	ldr	r3, [pc, #72]	; (80069a0 <__update_auto_blowdown+0x9c>)
 8006956:	7e1b      	ldrb	r3, [r3, #24]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d11d      	bne.n	8006998 <__update_auto_blowdown+0x94>
		*disp_mwa_cmd_len += snprintf (disp_mwa_cmd+(*disp_mwa_cmd_len),1024-(*disp_mwa_cmd_len),"b1.pic=4%sb0.pic=5%sb1.pco=65535%sb1.pco2=65535%sb0.pco=65535%sb0.pco2=65535%s",end_char,end_char,end_char,end_char,end_char,end_char);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	461a      	mov	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	1898      	adds	r0, r3, r2
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800696e:	4619      	mov	r1, r3
 8006970:	4b0c      	ldr	r3, [pc, #48]	; (80069a4 <__update_auto_blowdown+0xa0>)
 8006972:	9304      	str	r3, [sp, #16]
 8006974:	4b0b      	ldr	r3, [pc, #44]	; (80069a4 <__update_auto_blowdown+0xa0>)
 8006976:	9303      	str	r3, [sp, #12]
 8006978:	4b0a      	ldr	r3, [pc, #40]	; (80069a4 <__update_auto_blowdown+0xa0>)
 800697a:	9302      	str	r3, [sp, #8]
 800697c:	4b09      	ldr	r3, [pc, #36]	; (80069a4 <__update_auto_blowdown+0xa0>)
 800697e:	9301      	str	r3, [sp, #4]
 8006980:	4b08      	ldr	r3, [pc, #32]	; (80069a4 <__update_auto_blowdown+0xa0>)
 8006982:	9300      	str	r3, [sp, #0]
 8006984:	4b07      	ldr	r3, [pc, #28]	; (80069a4 <__update_auto_blowdown+0xa0>)
 8006986:	4a09      	ldr	r2, [pc, #36]	; (80069ac <__update_auto_blowdown+0xa8>)
 8006988:	f003 f8ee 	bl	8009b68 <sniprintf>
 800698c:	4602      	mov	r2, r0
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	441a      	add	r2, r3
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	601a      	str	r2, [r3, #0]
}
 8006998:	bf00      	nop
 800699a:	3708      	adds	r7, #8
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	2000024c 	.word	0x2000024c
 80069a4:	2000000c 	.word	0x2000000c
 80069a8:	0800cc04 	.word	0x0800cc04
 80069ac:	0800cc54 	.word	0x0800cc54

080069b0 <__update_set_blowdown_tds>:

void __update_set_blowdown_tds(char *disp_mwa_cmd, int *disp_mwa_cmd_len)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af02      	add	r7, sp, #8
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
	*disp_mwa_cmd_len += snprintf (disp_mwa_cmd+(*disp_mwa_cmd_len),1024-(*disp_mwa_cmd_len),"n%d.val=%d%s",26,yorker_settings.set_blowdown_tds,end_char);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	461a      	mov	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	1898      	adds	r0, r3, r2
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80069cc:	4619      	mov	r1, r3
 80069ce:	4b09      	ldr	r3, [pc, #36]	; (80069f4 <__update_set_blowdown_tds+0x44>)
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	4a09      	ldr	r2, [pc, #36]	; (80069f8 <__update_set_blowdown_tds+0x48>)
 80069d4:	9201      	str	r2, [sp, #4]
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	231a      	movs	r3, #26
 80069da:	4a08      	ldr	r2, [pc, #32]	; (80069fc <__update_set_blowdown_tds+0x4c>)
 80069dc:	f003 f8c4 	bl	8009b68 <sniprintf>
 80069e0:	4602      	mov	r2, r0
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	441a      	add	r2, r3
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	601a      	str	r2, [r3, #0]
}
 80069ec:	bf00      	nop
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	2000024c 	.word	0x2000024c
 80069f8:	2000000c 	.word	0x2000000c
 80069fc:	0800cb28 	.word	0x0800cb28

08006a00 <__update_set_cool_off_time>:

void __update_set_cool_off_time(char *disp_cft_cmd, int *disp_cft_cmd_len)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af02      	add	r7, sp, #8
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
	*disp_cft_cmd_len += snprintf (disp_cft_cmd+(*disp_cft_cmd_len),1024-(*disp_cft_cmd_len),"x%d.val=%d%s",0,yorker_settings.set_cool_off_time,end_char);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	1898      	adds	r0, r3, r2
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	4b09      	ldr	r3, [pc, #36]	; (8006a44 <__update_set_cool_off_time+0x44>)
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	4a09      	ldr	r2, [pc, #36]	; (8006a48 <__update_set_cool_off_time+0x48>)
 8006a24:	9201      	str	r2, [sp, #4]
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	2300      	movs	r3, #0
 8006a2a:	4a08      	ldr	r2, [pc, #32]	; (8006a4c <__update_set_cool_off_time+0x4c>)
 8006a2c:	f003 f89c 	bl	8009b68 <sniprintf>
 8006a30:	4602      	mov	r2, r0
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	441a      	add	r2, r3
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	601a      	str	r2, [r3, #0]
}
 8006a3c:	bf00      	nop
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	2000024c 	.word	0x2000024c
 8006a48:	2000000c 	.word	0x2000000c
 8006a4c:	0800cb4c 	.word	0x0800cb4c

08006a50 <__update_set_blowdown_in_m3>:

void __update_set_blowdown_in_m3(char *disp_mwa_cmd, int *disp_mwa_cmd_len)
{
 8006a50:	b590      	push	{r4, r7, lr}
 8006a52:	b089      	sub	sp, #36	; 0x24
 8006a54:	af02      	add	r7, sp, #8
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
	uint8_t n[6];
	int temp = yorker_settings.set_blowdown_in_m3;
 8006a5a:	4b26      	ldr	r3, [pc, #152]	; (8006af4 <__update_set_blowdown_in_m3+0xa4>)
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5e:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 6; i++)
 8006a60:	2300      	movs	r3, #0
 8006a62:	613b      	str	r3, [r7, #16]
 8006a64:	e03e      	b.n	8006ae4 <__update_set_blowdown_in_m3+0x94>
	{
		n[i] = temp % 10;
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	4b23      	ldr	r3, [pc, #140]	; (8006af8 <__update_set_blowdown_in_m3+0xa8>)
 8006a6a:	fb83 1302 	smull	r1, r3, r3, r2
 8006a6e:	1099      	asrs	r1, r3, #2
 8006a70:	17d3      	asrs	r3, r2, #31
 8006a72:	1ac9      	subs	r1, r1, r3
 8006a74:	460b      	mov	r3, r1
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	440b      	add	r3, r1
 8006a7a:	005b      	lsls	r3, r3, #1
 8006a7c:	1ad1      	subs	r1, r2, r3
 8006a7e:	b2c9      	uxtb	r1, r1
 8006a80:	f107 0208 	add.w	r2, r7, #8
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	4413      	add	r3, r2
 8006a88:	460a      	mov	r2, r1
 8006a8a:	701a      	strb	r2, [r3, #0]
		temp = temp / 10;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	4a1a      	ldr	r2, [pc, #104]	; (8006af8 <__update_set_blowdown_in_m3+0xa8>)
 8006a90:	fb82 1203 	smull	r1, r2, r2, r3
 8006a94:	1092      	asrs	r2, r2, #2
 8006a96:	17db      	asrs	r3, r3, #31
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	617b      	str	r3, [r7, #20]
		*disp_mwa_cmd_len += snprintf (disp_mwa_cmd+(*disp_mwa_cmd_len),1024-(*disp_mwa_cmd_len),"n%d.val=%d%s",i+27,n[i],end_char);
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	1898      	adds	r0, r3, r2
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8006aae:	461c      	mov	r4, r3
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	f103 011b 	add.w	r1, r3, #27
 8006ab6:	f107 0208 	add.w	r2, r7, #8
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	4413      	add	r3, r2
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	4b0e      	ldr	r3, [pc, #56]	; (8006afc <__update_set_blowdown_in_m3+0xac>)
 8006ac4:	9301      	str	r3, [sp, #4]
 8006ac6:	9200      	str	r2, [sp, #0]
 8006ac8:	460b      	mov	r3, r1
 8006aca:	4a0d      	ldr	r2, [pc, #52]	; (8006b00 <__update_set_blowdown_in_m3+0xb0>)
 8006acc:	4621      	mov	r1, r4
 8006ace:	f003 f84b 	bl	8009b68 <sniprintf>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	441a      	add	r2, r3
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 6; i++)
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	613b      	str	r3, [r7, #16]
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	2b05      	cmp	r3, #5
 8006ae8:	ddbd      	ble.n	8006a66 <__update_set_blowdown_in_m3+0x16>
	}
}
 8006aea:	bf00      	nop
 8006aec:	371c      	adds	r7, #28
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd90      	pop	{r4, r7, pc}
 8006af2:	bf00      	nop
 8006af4:	2000024c 	.word	0x2000024c
 8006af8:	66666667 	.word	0x66666667
 8006afc:	2000000c 	.word	0x2000000c
 8006b00:	0800cb28 	.word	0x0800cb28

08006b04 <__update_inlet_water_ph>:

void __update_inlet_water_ph(char *disp_cft_cmd, int *disp_cft_cmd_len)
{
 8006b04:	b590      	push	{r4, r7, lr}
 8006b06:	b089      	sub	sp, #36	; 0x24
 8006b08:	af06      	add	r7, sp, #24
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
	*disp_cft_cmd_len += snprintf (disp_cft_cmd+(*disp_cft_cmd_len),1024-(*disp_cft_cmd_len),"x%d.val=%d%sx%d.val=%d%s",0,yorker_settings.set_inlet_water_ph_min,end_char,1,yorker_settings.set_inlet_water_ph_max,end_char);
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	461a      	mov	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	1898      	adds	r0, r3, r2
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8006b20:	461c      	mov	r4, r3
 8006b22:	4b0d      	ldr	r3, [pc, #52]	; (8006b58 <__update_inlet_water_ph+0x54>)
 8006b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b26:	4a0c      	ldr	r2, [pc, #48]	; (8006b58 <__update_inlet_water_ph+0x54>)
 8006b28:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006b2a:	490c      	ldr	r1, [pc, #48]	; (8006b5c <__update_inlet_water_ph+0x58>)
 8006b2c:	9104      	str	r1, [sp, #16]
 8006b2e:	9203      	str	r2, [sp, #12]
 8006b30:	2201      	movs	r2, #1
 8006b32:	9202      	str	r2, [sp, #8]
 8006b34:	4a09      	ldr	r2, [pc, #36]	; (8006b5c <__update_inlet_water_ph+0x58>)
 8006b36:	9201      	str	r2, [sp, #4]
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	4a08      	ldr	r2, [pc, #32]	; (8006b60 <__update_inlet_water_ph+0x5c>)
 8006b3e:	4621      	mov	r1, r4
 8006b40:	f003 f812 	bl	8009b68 <sniprintf>
 8006b44:	4602      	mov	r2, r0
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	441a      	add	r2, r3
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	601a      	str	r2, [r3, #0]
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd90      	pop	{r4, r7, pc}
 8006b58:	2000024c 	.word	0x2000024c
 8006b5c:	2000000c 	.word	0x2000000c
 8006b60:	0800cce0 	.word	0x0800cce0

08006b64 <__update_inlet_water_tds>:

void __update_inlet_water_tds(char *disp_cft_cmd, int *disp_cft_cmd_len)
{
 8006b64:	b590      	push	{r4, r7, lr}
 8006b66:	b089      	sub	sp, #36	; 0x24
 8006b68:	af06      	add	r7, sp, #24
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
	*disp_cft_cmd_len += snprintf (disp_cft_cmd+(*disp_cft_cmd_len),1024-(*disp_cft_cmd_len),"n%d.val=%d%sn%d.val=%d%s",2,yorker_settings.set_inlet_water_tds_min,end_char,3,yorker_settings.set_inlet_water_tds_max,end_char);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	461a      	mov	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	1898      	adds	r0, r3, r2
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8006b80:	461c      	mov	r4, r3
 8006b82:	4b0d      	ldr	r3, [pc, #52]	; (8006bb8 <__update_inlet_water_tds+0x54>)
 8006b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b86:	4a0c      	ldr	r2, [pc, #48]	; (8006bb8 <__update_inlet_water_tds+0x54>)
 8006b88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b8a:	490c      	ldr	r1, [pc, #48]	; (8006bbc <__update_inlet_water_tds+0x58>)
 8006b8c:	9104      	str	r1, [sp, #16]
 8006b8e:	9203      	str	r2, [sp, #12]
 8006b90:	2203      	movs	r2, #3
 8006b92:	9202      	str	r2, [sp, #8]
 8006b94:	4a09      	ldr	r2, [pc, #36]	; (8006bbc <__update_inlet_water_tds+0x58>)
 8006b96:	9201      	str	r2, [sp, #4]
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	2302      	movs	r3, #2
 8006b9c:	4a08      	ldr	r2, [pc, #32]	; (8006bc0 <__update_inlet_water_tds+0x5c>)
 8006b9e:	4621      	mov	r1, r4
 8006ba0:	f002 ffe2 	bl	8009b68 <sniprintf>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	441a      	add	r2, r3
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	601a      	str	r2, [r3, #0]
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd90      	pop	{r4, r7, pc}
 8006bb8:	2000024c 	.word	0x2000024c
 8006bbc:	2000000c 	.word	0x2000000c
 8006bc0:	0800ccfc 	.word	0x0800ccfc

08006bc4 <__update_outlet_water_ph>:

void __update_outlet_water_ph(char *disp_cft_cmd, int *disp_cft_cmd_len)
{
 8006bc4:	b590      	push	{r4, r7, lr}
 8006bc6:	b089      	sub	sp, #36	; 0x24
 8006bc8:	af06      	add	r7, sp, #24
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
	*disp_cft_cmd_len += snprintf (disp_cft_cmd+(*disp_cft_cmd_len),1024-(*disp_cft_cmd_len),"x%d.val=%d%sx%d.val=%d%s",2,yorker_settings.set_outlet_water_ph_min,end_char,3,yorker_settings.set_outlet_water_ph_max,end_char);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	1898      	adds	r0, r3, r2
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8006be0:	461c      	mov	r4, r3
 8006be2:	4b0d      	ldr	r3, [pc, #52]	; (8006c18 <__update_outlet_water_ph+0x54>)
 8006be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be6:	4a0c      	ldr	r2, [pc, #48]	; (8006c18 <__update_outlet_water_ph+0x54>)
 8006be8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006bea:	490c      	ldr	r1, [pc, #48]	; (8006c1c <__update_outlet_water_ph+0x58>)
 8006bec:	9104      	str	r1, [sp, #16]
 8006bee:	9203      	str	r2, [sp, #12]
 8006bf0:	2203      	movs	r2, #3
 8006bf2:	9202      	str	r2, [sp, #8]
 8006bf4:	4a09      	ldr	r2, [pc, #36]	; (8006c1c <__update_outlet_water_ph+0x58>)
 8006bf6:	9201      	str	r2, [sp, #4]
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	4a08      	ldr	r2, [pc, #32]	; (8006c20 <__update_outlet_water_ph+0x5c>)
 8006bfe:	4621      	mov	r1, r4
 8006c00:	f002 ffb2 	bl	8009b68 <sniprintf>
 8006c04:	4602      	mov	r2, r0
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	441a      	add	r2, r3
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	601a      	str	r2, [r3, #0]
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd90      	pop	{r4, r7, pc}
 8006c18:	2000024c 	.word	0x2000024c
 8006c1c:	2000000c 	.word	0x2000000c
 8006c20:	0800cce0 	.word	0x0800cce0

08006c24 <__update_outlet_water_tds>:

void __update_outlet_water_tds(char *disp_cft_cmd, int *disp_cft_cmd_len)
{
 8006c24:	b590      	push	{r4, r7, lr}
 8006c26:	b089      	sub	sp, #36	; 0x24
 8006c28:	af06      	add	r7, sp, #24
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
	*disp_cft_cmd_len += snprintf (disp_cft_cmd+(*disp_cft_cmd_len),1024-(*disp_cft_cmd_len),"n%d.val=%d%sn%d.val=%d%s",7,yorker_settings.set_outlet_water_tds_min,end_char,6,yorker_settings.set_outlet_water_tds_max,end_char);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	461a      	mov	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	1898      	adds	r0, r3, r2
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8006c40:	461c      	mov	r4, r3
 8006c42:	4b0d      	ldr	r3, [pc, #52]	; (8006c78 <__update_outlet_water_tds+0x54>)
 8006c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c46:	4a0c      	ldr	r2, [pc, #48]	; (8006c78 <__update_outlet_water_tds+0x54>)
 8006c48:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006c4a:	490c      	ldr	r1, [pc, #48]	; (8006c7c <__update_outlet_water_tds+0x58>)
 8006c4c:	9104      	str	r1, [sp, #16]
 8006c4e:	9203      	str	r2, [sp, #12]
 8006c50:	2206      	movs	r2, #6
 8006c52:	9202      	str	r2, [sp, #8]
 8006c54:	4a09      	ldr	r2, [pc, #36]	; (8006c7c <__update_outlet_water_tds+0x58>)
 8006c56:	9201      	str	r2, [sp, #4]
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	2307      	movs	r3, #7
 8006c5c:	4a08      	ldr	r2, [pc, #32]	; (8006c80 <__update_outlet_water_tds+0x5c>)
 8006c5e:	4621      	mov	r1, r4
 8006c60:	f002 ff82 	bl	8009b68 <sniprintf>
 8006c64:	4602      	mov	r2, r0
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	441a      	add	r2, r3
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	601a      	str	r2, [r3, #0]
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd90      	pop	{r4, r7, pc}
 8006c78:	2000024c 	.word	0x2000024c
 8006c7c:	2000000c 	.word	0x2000000c
 8006c80:	0800ccfc 	.word	0x0800ccfc

08006c84 <__update_pump_capacity>:

void __update_pump_capacity(char *disp_mwa_cmd, int *disp_mwa_cmd_len)
{
 8006c84:	b590      	push	{r4, r7, lr}
 8006c86:	b089      	sub	sp, #36	; 0x24
 8006c88:	af06      	add	r7, sp, #24
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
	*disp_mwa_cmd_len += snprintf (disp_mwa_cmd+(*disp_mwa_cmd_len),1024-(*disp_mwa_cmd_len),"n%d.val=%d%sn%d.val=%d%s",8,yorker_settings.pump1_capacity,end_char,9,yorker_settings.pump2_capacity,end_char);
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	461a      	mov	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	1898      	adds	r0, r3, r2
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8006ca0:	461c      	mov	r4, r3
 8006ca2:	4b0d      	ldr	r3, [pc, #52]	; (8006cd8 <__update_pump_capacity+0x54>)
 8006ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ca6:	4a0c      	ldr	r2, [pc, #48]	; (8006cd8 <__update_pump_capacity+0x54>)
 8006ca8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006caa:	490c      	ldr	r1, [pc, #48]	; (8006cdc <__update_pump_capacity+0x58>)
 8006cac:	9104      	str	r1, [sp, #16]
 8006cae:	9203      	str	r2, [sp, #12]
 8006cb0:	2209      	movs	r2, #9
 8006cb2:	9202      	str	r2, [sp, #8]
 8006cb4:	4a09      	ldr	r2, [pc, #36]	; (8006cdc <__update_pump_capacity+0x58>)
 8006cb6:	9201      	str	r2, [sp, #4]
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	2308      	movs	r3, #8
 8006cbc:	4a08      	ldr	r2, [pc, #32]	; (8006ce0 <__update_pump_capacity+0x5c>)
 8006cbe:	4621      	mov	r1, r4
 8006cc0:	f002 ff52 	bl	8009b68 <sniprintf>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	441a      	add	r2, r3
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	601a      	str	r2, [r3, #0]
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd90      	pop	{r4, r7, pc}
 8006cd8:	2000024c 	.word	0x2000024c
 8006cdc:	2000000c 	.word	0x2000000c
 8006ce0:	0800ccfc 	.word	0x0800ccfc

08006ce4 <__update_processing_rate>:

void __update_processing_rate(char *disp_mwa_cmd, int *disp_mwa_cmd_len)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af02      	add	r7, sp, #8
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
	*disp_mwa_cmd_len += snprintf (disp_mwa_cmd+(*disp_mwa_cmd_len),1024-(*disp_mwa_cmd_len),"n%d.val=%d%s",10,yorker_settings.processing_rate,end_char);
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	1898      	adds	r0, r3, r2
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8006d00:	4619      	mov	r1, r3
 8006d02:	4b09      	ldr	r3, [pc, #36]	; (8006d28 <__update_processing_rate+0x44>)
 8006d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d06:	4a09      	ldr	r2, [pc, #36]	; (8006d2c <__update_processing_rate+0x48>)
 8006d08:	9201      	str	r2, [sp, #4]
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	230a      	movs	r3, #10
 8006d0e:	4a08      	ldr	r2, [pc, #32]	; (8006d30 <__update_processing_rate+0x4c>)
 8006d10:	f002 ff2a 	bl	8009b68 <sniprintf>
 8006d14:	4602      	mov	r2, r0
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	441a      	add	r2, r3
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	601a      	str	r2, [r3, #0]
}
 8006d20:	bf00      	nop
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	2000024c 	.word	0x2000024c
 8006d2c:	2000000c 	.word	0x2000000c
 8006d30:	0800cb28 	.word	0x0800cb28

08006d34 <display_edit_settings>:
/*******************************************************************************
 *  PUBLIC
 ******************************************************************************/
void display_edit_settings()
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af02      	add	r7, sp, #8
	if(current_screen_state == SETTINGS_SCREEN2 && current_edit_settings_state == GOTO_OFFSET_MAKE_UP_WATER)
 8006d3a:	4bbe      	ldr	r3, [pc, #760]	; (8007034 <display_edit_settings+0x300>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	d106      	bne.n	8006d50 <display_edit_settings+0x1c>
 8006d42:	4bbd      	ldr	r3, [pc, #756]	; (8007038 <display_edit_settings+0x304>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d102      	bne.n	8006d50 <display_edit_settings+0x1c>
	{
		current_edit_settings_state = GOTO_SET_INLET_WATER_PH_MIN;
 8006d4a:	4bbb      	ldr	r3, [pc, #748]	; (8007038 <display_edit_settings+0x304>)
 8006d4c:	220b      	movs	r2, #11
 8006d4e:	601a      	str	r2, [r3, #0]
	}
	switch(current_edit_settings_state)
 8006d50:	4bb9      	ldr	r3, [pc, #740]	; (8007038 <display_edit_settings+0x304>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2b16      	cmp	r3, #22
 8006d56:	f200 85cd 	bhi.w	80078f4 <display_edit_settings+0xbc0>
 8006d5a:	a201      	add	r2, pc, #4	; (adr r2, 8006d60 <display_edit_settings+0x2c>)
 8006d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d60:	08006dbd 	.word	0x08006dbd
 8006d64:	08006de3 	.word	0x08006de3
 8006d68:	08006e45 	.word	0x08006e45
 8006d6c:	08006ea7 	.word	0x08006ea7
 8006d70:	08006f09 	.word	0x08006f09
 8006d74:	08006f6b 	.word	0x08006f6b
 8006d78:	08006fcf 	.word	0x08006fcf
 8006d7c:	08007051 	.word	0x08007051
 8006d80:	080070b3 	.word	0x080070b3
 8006d84:	0800710f 	.word	0x0800710f
 8006d88:	0800716b 	.word	0x0800716b
 8006d8c:	080071c5 	.word	0x080071c5
 8006d90:	080071eb 	.word	0x080071eb
 8006d94:	08007253 	.word	0x08007253
 8006d98:	08007311 	.word	0x08007311
 8006d9c:	080073ab 	.word	0x080073ab
 8006da0:	08007445 	.word	0x08007445
 8006da4:	080074df 	.word	0x080074df
 8006da8:	080075ad 	.word	0x080075ad
 8006dac:	08007647 	.word	0x08007647
 8006db0:	080076dd 	.word	0x080076dd
 8006db4:	08007775 	.word	0x08007775
 8006db8:	0800783d 	.word	0x0800783d
	{
		case GOTO_OFFSET_MAKE_UP_WATER:
			edit_settings_cmd_len = sprintf(edit_settings_cmd,"t7.pco=63488%s",end_char);
 8006dbc:	4a9f      	ldr	r2, [pc, #636]	; (800703c <display_edit_settings+0x308>)
 8006dbe:	49a0      	ldr	r1, [pc, #640]	; (8007040 <display_edit_settings+0x30c>)
 8006dc0:	48a0      	ldr	r0, [pc, #640]	; (8007044 <display_edit_settings+0x310>)
 8006dc2:	f002 ff05 	bl	8009bd0 <siprintf>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	4b9f      	ldr	r3, [pc, #636]	; (8007048 <display_edit_settings+0x314>)
 8006dca:	601a      	str	r2, [r3, #0]
			lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8006dcc:	4b9e      	ldr	r3, [pc, #632]	; (8007048 <display_edit_settings+0x314>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	489c      	ldr	r0, [pc, #624]	; (8007044 <display_edit_settings+0x310>)
 8006dd4:	f002 f82e 	bl	8008e34 <lcd_send_cmd>
			current_edit_settings_state = OFFSET_MAKE_UP_WATER;
 8006dd8:	4b97      	ldr	r3, [pc, #604]	; (8007038 <display_edit_settings+0x304>)
 8006dda:	2201      	movs	r2, #1
 8006ddc:	601a      	str	r2, [r3, #0]
			break;
 8006dde:	f000 bd89 	b.w	80078f4 <display_edit_settings+0xbc0>

		case OFFSET_MAKE_UP_WATER:
			if(key_pressed == RIGHT_KEY_PRESSED)
 8006de2:	4b9a      	ldr	r3, [pc, #616]	; (800704c <display_edit_settings+0x318>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d108      	bne.n	8006dfc <display_edit_settings+0xc8>
			{
				__settings_selection(7,9);
 8006dea:	2109      	movs	r1, #9
 8006dec:	2007      	movs	r0, #7
 8006dee:	f7fe fc4d 	bl	800568c <__settings_selection>
				current_edit_settings_state = OFFSET_BLOWDOWN;
 8006df2:	4b91      	ldr	r3, [pc, #580]	; (8007038 <display_edit_settings+0x304>)
 8006df4:	2202      	movs	r2, #2
 8006df6:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_six_digits(0);
			}
			break;
 8006df8:	f000 bd53 	b.w	80078a2 <display_edit_settings+0xb6e>
			else if(key_pressed == LEFT_KEY_PRESSED)
 8006dfc:	4b93      	ldr	r3, [pc, #588]	; (800704c <display_edit_settings+0x318>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d108      	bne.n	8006e16 <display_edit_settings+0xe2>
				__settings_selection(7,18);
 8006e04:	2112      	movs	r1, #18
 8006e06:	2007      	movs	r0, #7
 8006e08:	f7fe fc40 	bl	800568c <__settings_selection>
				current_edit_settings_state = SET_BLOWDOWN_IN_M3;
 8006e0c:	4b8a      	ldr	r3, [pc, #552]	; (8007038 <display_edit_settings+0x304>)
 8006e0e:	220a      	movs	r2, #10
 8006e10:	601a      	str	r2, [r3, #0]
			break;
 8006e12:	f000 bd46 	b.w	80078a2 <display_edit_settings+0xb6e>
			else if(key_pressed == ESC_KEY_PRESSED)
 8006e16:	4b8d      	ldr	r3, [pc, #564]	; (800704c <display_edit_settings+0x318>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b04      	cmp	r3, #4
 8006e1c:	d108      	bne.n	8006e30 <display_edit_settings+0xfc>
				__esc_settings_selection(7,-1,-1);
 8006e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e22:	f04f 31ff 	mov.w	r1, #4294967295
 8006e26:	2007      	movs	r0, #7
 8006e28:	f7fe fc5e 	bl	80056e8 <__esc_settings_selection>
			break;
 8006e2c:	f000 bd39 	b.w	80078a2 <display_edit_settings+0xb6e>
			else if(key_pressed == ENTER_KEY_PRESSED)
 8006e30:	4b86      	ldr	r3, [pc, #536]	; (800704c <display_edit_settings+0x318>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2b03      	cmp	r3, #3
 8006e36:	f040 8534 	bne.w	80078a2 <display_edit_settings+0xb6e>
				__select_six_digits(0);
 8006e3a:	2000      	movs	r0, #0
 8006e3c:	f7fe fcc0 	bl	80057c0 <__select_six_digits>
			break;
 8006e40:	f000 bd2f 	b.w	80078a2 <display_edit_settings+0xb6e>
		case OFFSET_BLOWDOWN:
			if(key_pressed == RIGHT_KEY_PRESSED)
 8006e44:	4b81      	ldr	r3, [pc, #516]	; (800704c <display_edit_settings+0x318>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d108      	bne.n	8006e5e <display_edit_settings+0x12a>
			{
				__settings_selection(9,19);
 8006e4c:	2113      	movs	r1, #19
 8006e4e:	2009      	movs	r0, #9
 8006e50:	f7fe fc1c 	bl	800568c <__settings_selection>
				current_edit_settings_state = PUMP1_LTS_PER_PULSE;
 8006e54:	4b78      	ldr	r3, [pc, #480]	; (8007038 <display_edit_settings+0x304>)
 8006e56:	2203      	movs	r2, #3
 8006e58:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_six_digits(6);
			}
			break;
 8006e5a:	f000 bd24 	b.w	80078a6 <display_edit_settings+0xb72>
			else if(key_pressed == LEFT_KEY_PRESSED)
 8006e5e:	4b7b      	ldr	r3, [pc, #492]	; (800704c <display_edit_settings+0x318>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d108      	bne.n	8006e78 <display_edit_settings+0x144>
				__settings_selection(9,7);
 8006e66:	2107      	movs	r1, #7
 8006e68:	2009      	movs	r0, #9
 8006e6a:	f7fe fc0f 	bl	800568c <__settings_selection>
				current_edit_settings_state = OFFSET_MAKE_UP_WATER;
 8006e6e:	4b72      	ldr	r3, [pc, #456]	; (8007038 <display_edit_settings+0x304>)
 8006e70:	2201      	movs	r2, #1
 8006e72:	601a      	str	r2, [r3, #0]
			break;
 8006e74:	f000 bd17 	b.w	80078a6 <display_edit_settings+0xb72>
			else if(key_pressed == ESC_KEY_PRESSED)
 8006e78:	4b74      	ldr	r3, [pc, #464]	; (800704c <display_edit_settings+0x318>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	d108      	bne.n	8006e92 <display_edit_settings+0x15e>
				__esc_settings_selection(9,-1,-1);
 8006e80:	f04f 32ff 	mov.w	r2, #4294967295
 8006e84:	f04f 31ff 	mov.w	r1, #4294967295
 8006e88:	2009      	movs	r0, #9
 8006e8a:	f7fe fc2d 	bl	80056e8 <__esc_settings_selection>
			break;
 8006e8e:	f000 bd0a 	b.w	80078a6 <display_edit_settings+0xb72>
			else if(key_pressed == ENTER_KEY_PRESSED)
 8006e92:	4b6e      	ldr	r3, [pc, #440]	; (800704c <display_edit_settings+0x318>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b03      	cmp	r3, #3
 8006e98:	f040 8505 	bne.w	80078a6 <display_edit_settings+0xb72>
				__select_six_digits(6);
 8006e9c:	2006      	movs	r0, #6
 8006e9e:	f7fe fc8f 	bl	80057c0 <__select_six_digits>
			break;
 8006ea2:	f000 bd00 	b.w	80078a6 <display_edit_settings+0xb72>
		case PUMP1_LTS_PER_PULSE:
			if(key_pressed == RIGHT_KEY_PRESSED)
 8006ea6:	4b69      	ldr	r3, [pc, #420]	; (800704c <display_edit_settings+0x318>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d108      	bne.n	8006ec0 <display_edit_settings+0x18c>
			{
				__settings_selection(19,21);
 8006eae:	2115      	movs	r1, #21
 8006eb0:	2013      	movs	r0, #19
 8006eb2:	f7fe fbeb 	bl	800568c <__settings_selection>
				current_edit_settings_state = PUMP2_LTS_PER_PULSE;
 8006eb6:	4b60      	ldr	r3, [pc, #384]	; (8007038 <display_edit_settings+0x304>)
 8006eb8:	2204      	movs	r2, #4
 8006eba:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_six_digits(12);
			}
			break;
 8006ebc:	f000 bcf5 	b.w	80078aa <display_edit_settings+0xb76>
			else if(key_pressed == LEFT_KEY_PRESSED)
 8006ec0:	4b62      	ldr	r3, [pc, #392]	; (800704c <display_edit_settings+0x318>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d108      	bne.n	8006eda <display_edit_settings+0x1a6>
				__settings_selection(19,9);
 8006ec8:	2109      	movs	r1, #9
 8006eca:	2013      	movs	r0, #19
 8006ecc:	f7fe fbde 	bl	800568c <__settings_selection>
				current_edit_settings_state = OFFSET_BLOWDOWN;
 8006ed0:	4b59      	ldr	r3, [pc, #356]	; (8007038 <display_edit_settings+0x304>)
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	601a      	str	r2, [r3, #0]
			break;
 8006ed6:	f000 bce8 	b.w	80078aa <display_edit_settings+0xb76>
			else if(key_pressed == ESC_KEY_PRESSED)
 8006eda:	4b5c      	ldr	r3, [pc, #368]	; (800704c <display_edit_settings+0x318>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2b04      	cmp	r3, #4
 8006ee0:	d108      	bne.n	8006ef4 <display_edit_settings+0x1c0>
				__esc_settings_selection(19,-1,-1);
 8006ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ee6:	f04f 31ff 	mov.w	r1, #4294967295
 8006eea:	2013      	movs	r0, #19
 8006eec:	f7fe fbfc 	bl	80056e8 <__esc_settings_selection>
			break;
 8006ef0:	f000 bcdb 	b.w	80078aa <display_edit_settings+0xb76>
			else if(key_pressed == ENTER_KEY_PRESSED)
 8006ef4:	4b55      	ldr	r3, [pc, #340]	; (800704c <display_edit_settings+0x318>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2b03      	cmp	r3, #3
 8006efa:	f040 84d6 	bne.w	80078aa <display_edit_settings+0xb76>
				__select_six_digits(12);
 8006efe:	200c      	movs	r0, #12
 8006f00:	f7fe fc5e 	bl	80057c0 <__select_six_digits>
			break;
 8006f04:	f000 bcd1 	b.w	80078aa <display_edit_settings+0xb76>
		case PUMP2_LTS_PER_PULSE:
			if(key_pressed == RIGHT_KEY_PRESSED)
 8006f08:	4b50      	ldr	r3, [pc, #320]	; (800704c <display_edit_settings+0x318>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d108      	bne.n	8006f22 <display_edit_settings+0x1ee>
			{
				__settings_selection(21,13);
 8006f10:	210d      	movs	r1, #13
 8006f12:	2015      	movs	r0, #21
 8006f14:	f7fe fbba 	bl	800568c <__settings_selection>
				current_edit_settings_state = RATIO_1;
 8006f18:	4b47      	ldr	r3, [pc, #284]	; (8007038 <display_edit_settings+0x304>)
 8006f1a:	2205      	movs	r2, #5
 8006f1c:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_six_digits(18);
			}
			break;
 8006f1e:	f000 bcc6 	b.w	80078ae <display_edit_settings+0xb7a>
			else if(key_pressed == LEFT_KEY_PRESSED)
 8006f22:	4b4a      	ldr	r3, [pc, #296]	; (800704c <display_edit_settings+0x318>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d108      	bne.n	8006f3c <display_edit_settings+0x208>
				__settings_selection(21,19);
 8006f2a:	2113      	movs	r1, #19
 8006f2c:	2015      	movs	r0, #21
 8006f2e:	f7fe fbad 	bl	800568c <__settings_selection>
				current_edit_settings_state = PUMP1_LTS_PER_PULSE;
 8006f32:	4b41      	ldr	r3, [pc, #260]	; (8007038 <display_edit_settings+0x304>)
 8006f34:	2203      	movs	r2, #3
 8006f36:	601a      	str	r2, [r3, #0]
			break;
 8006f38:	f000 bcb9 	b.w	80078ae <display_edit_settings+0xb7a>
			else if(key_pressed == ESC_KEY_PRESSED)
 8006f3c:	4b43      	ldr	r3, [pc, #268]	; (800704c <display_edit_settings+0x318>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2b04      	cmp	r3, #4
 8006f42:	d108      	bne.n	8006f56 <display_edit_settings+0x222>
				__esc_settings_selection(21,-1,-1);
 8006f44:	f04f 32ff 	mov.w	r2, #4294967295
 8006f48:	f04f 31ff 	mov.w	r1, #4294967295
 8006f4c:	2015      	movs	r0, #21
 8006f4e:	f7fe fbcb 	bl	80056e8 <__esc_settings_selection>
			break;
 8006f52:	f000 bcac 	b.w	80078ae <display_edit_settings+0xb7a>
			else if(key_pressed == ENTER_KEY_PRESSED)
 8006f56:	4b3d      	ldr	r3, [pc, #244]	; (800704c <display_edit_settings+0x318>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b03      	cmp	r3, #3
 8006f5c:	f040 84a7 	bne.w	80078ae <display_edit_settings+0xb7a>
				__select_six_digits(18);
 8006f60:	2012      	movs	r0, #18
 8006f62:	f7fe fc2d 	bl	80057c0 <__select_six_digits>
			break;
 8006f66:	f000 bca2 	b.w	80078ae <display_edit_settings+0xb7a>
		case RATIO_1:
			if(key_pressed == RIGHT_KEY_PRESSED)
 8006f6a:	4b38      	ldr	r3, [pc, #224]	; (800704c <display_edit_settings+0x318>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d108      	bne.n	8006f84 <display_edit_settings+0x250>
			{
				__settings_selection(13,29);
 8006f72:	211d      	movs	r1, #29
 8006f74:	200d      	movs	r0, #13
 8006f76:	f7fe fb89 	bl	800568c <__settings_selection>
				current_edit_settings_state = RATIO_2;
 8006f7a:	4b2f      	ldr	r3, [pc, #188]	; (8007038 <display_edit_settings+0x304>)
 8006f7c:	2206      	movs	r2, #6
 8006f7e:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_digits(24,0);
			}
			break;
 8006f80:	f000 bc97 	b.w	80078b2 <display_edit_settings+0xb7e>
			else if(key_pressed == LEFT_KEY_PRESSED)
 8006f84:	4b31      	ldr	r3, [pc, #196]	; (800704c <display_edit_settings+0x318>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d108      	bne.n	8006f9e <display_edit_settings+0x26a>
				__settings_selection(13,21);
 8006f8c:	2115      	movs	r1, #21
 8006f8e:	200d      	movs	r0, #13
 8006f90:	f7fe fb7c 	bl	800568c <__settings_selection>
				current_edit_settings_state = PUMP2_LTS_PER_PULSE;
 8006f94:	4b28      	ldr	r3, [pc, #160]	; (8007038 <display_edit_settings+0x304>)
 8006f96:	2204      	movs	r2, #4
 8006f98:	601a      	str	r2, [r3, #0]
			break;
 8006f9a:	f000 bc8a 	b.w	80078b2 <display_edit_settings+0xb7e>
			else if(key_pressed == ESC_KEY_PRESSED)
 8006f9e:	4b2b      	ldr	r3, [pc, #172]	; (800704c <display_edit_settings+0x318>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2b04      	cmp	r3, #4
 8006fa4:	d108      	bne.n	8006fb8 <display_edit_settings+0x284>
				__esc_settings_selection(13,-1,-1);
 8006fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8006faa:	f04f 31ff 	mov.w	r1, #4294967295
 8006fae:	200d      	movs	r0, #13
 8006fb0:	f7fe fb9a 	bl	80056e8 <__esc_settings_selection>
			break;
 8006fb4:	f000 bc7d 	b.w	80078b2 <display_edit_settings+0xb7e>
			else if(key_pressed == ENTER_KEY_PRESSED)
 8006fb8:	4b24      	ldr	r3, [pc, #144]	; (800704c <display_edit_settings+0x318>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2b03      	cmp	r3, #3
 8006fbe:	f040 8478 	bne.w	80078b2 <display_edit_settings+0xb7e>
				__select_digits(24,0);
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	2018      	movs	r0, #24
 8006fc6:	f7fe fc4d 	bl	8005864 <__select_digits>
			break;
 8006fca:	f000 bc72 	b.w	80078b2 <display_edit_settings+0xb7e>
		case RATIO_2:
			if(key_pressed == RIGHT_KEY_PRESSED)
 8006fce:	4b1f      	ldr	r3, [pc, #124]	; (800704c <display_edit_settings+0x318>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d108      	bne.n	8006fe8 <display_edit_settings+0x2b4>
			{
				__settings_selection(29,24);
 8006fd6:	2118      	movs	r1, #24
 8006fd8:	201d      	movs	r0, #29
 8006fda:	f7fe fb57 	bl	800568c <__settings_selection>
				current_edit_settings_state = AUTO_BLOWDOWN;
 8006fde:	4b16      	ldr	r3, [pc, #88]	; (8007038 <display_edit_settings+0x304>)
 8006fe0:	2207      	movs	r2, #7
 8006fe2:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_digits(25,0);
			}
			break;
 8006fe4:	f000 bc67 	b.w	80078b6 <display_edit_settings+0xb82>
			else if(key_pressed == LEFT_KEY_PRESSED)
 8006fe8:	4b18      	ldr	r3, [pc, #96]	; (800704c <display_edit_settings+0x318>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d108      	bne.n	8007002 <display_edit_settings+0x2ce>
				__settings_selection(29,13);
 8006ff0:	210d      	movs	r1, #13
 8006ff2:	201d      	movs	r0, #29
 8006ff4:	f7fe fb4a 	bl	800568c <__settings_selection>
				current_edit_settings_state = RATIO_1;
 8006ff8:	4b0f      	ldr	r3, [pc, #60]	; (8007038 <display_edit_settings+0x304>)
 8006ffa:	2205      	movs	r2, #5
 8006ffc:	601a      	str	r2, [r3, #0]
			break;
 8006ffe:	f000 bc5a 	b.w	80078b6 <display_edit_settings+0xb82>
			else if(key_pressed == ESC_KEY_PRESSED)
 8007002:	4b12      	ldr	r3, [pc, #72]	; (800704c <display_edit_settings+0x318>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2b04      	cmp	r3, #4
 8007008:	d108      	bne.n	800701c <display_edit_settings+0x2e8>
				__esc_settings_selection(29,-1,-1);
 800700a:	f04f 32ff 	mov.w	r2, #4294967295
 800700e:	f04f 31ff 	mov.w	r1, #4294967295
 8007012:	201d      	movs	r0, #29
 8007014:	f7fe fb68 	bl	80056e8 <__esc_settings_selection>
			break;
 8007018:	f000 bc4d 	b.w	80078b6 <display_edit_settings+0xb82>
			else if(key_pressed == ENTER_KEY_PRESSED)
 800701c:	4b0b      	ldr	r3, [pc, #44]	; (800704c <display_edit_settings+0x318>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b03      	cmp	r3, #3
 8007022:	f040 8448 	bne.w	80078b6 <display_edit_settings+0xb82>
				__select_digits(25,0);
 8007026:	2100      	movs	r1, #0
 8007028:	2019      	movs	r0, #25
 800702a:	f7fe fc1b 	bl	8005864 <__select_digits>
			break;
 800702e:	f000 bc42 	b.w	80078b6 <display_edit_settings+0xb82>
 8007032:	bf00      	nop
 8007034:	20000204 	.word	0x20000204
 8007038:	20000210 	.word	0x20000210
 800703c:	2000000c 	.word	0x2000000c
 8007040:	0800cd18 	.word	0x0800cd18
 8007044:	20000764 	.word	0x20000764
 8007048:	20000214 	.word	0x20000214
 800704c:	2000020c 	.word	0x2000020c
		case AUTO_BLOWDOWN:
			if(key_pressed == RIGHT_KEY_PRESSED)
 8007050:	4ba6      	ldr	r3, [pc, #664]	; (80072ec <display_edit_settings+0x5b8>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2b02      	cmp	r3, #2
 8007056:	d108      	bne.n	800706a <display_edit_settings+0x336>
			{
				__settings_selection(24,14);
 8007058:	210e      	movs	r1, #14
 800705a:	2018      	movs	r0, #24
 800705c:	f7fe fb16 	bl	800568c <__settings_selection>
				current_edit_settings_state = SET_BLOWDOWN_TDS;
 8007060:	4ba3      	ldr	r3, [pc, #652]	; (80072f0 <display_edit_settings+0x5bc>)
 8007062:	2208      	movs	r2, #8
 8007064:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_button(0);
			}
			break;
 8007066:	f000 bc28 	b.w	80078ba <display_edit_settings+0xb86>
			else if(key_pressed == LEFT_KEY_PRESSED)
 800706a:	4ba0      	ldr	r3, [pc, #640]	; (80072ec <display_edit_settings+0x5b8>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d108      	bne.n	8007084 <display_edit_settings+0x350>
				__settings_selection(24,29);
 8007072:	211d      	movs	r1, #29
 8007074:	2018      	movs	r0, #24
 8007076:	f7fe fb09 	bl	800568c <__settings_selection>
				current_edit_settings_state = RATIO_2;
 800707a:	4b9d      	ldr	r3, [pc, #628]	; (80072f0 <display_edit_settings+0x5bc>)
 800707c:	2206      	movs	r2, #6
 800707e:	601a      	str	r2, [r3, #0]
			break;
 8007080:	f000 bc1b 	b.w	80078ba <display_edit_settings+0xb86>
			else if(key_pressed == ESC_KEY_PRESSED)
 8007084:	4b99      	ldr	r3, [pc, #612]	; (80072ec <display_edit_settings+0x5b8>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2b04      	cmp	r3, #4
 800708a:	d108      	bne.n	800709e <display_edit_settings+0x36a>
				__esc_settings_selection(24,-1,-1);
 800708c:	f04f 32ff 	mov.w	r2, #4294967295
 8007090:	f04f 31ff 	mov.w	r1, #4294967295
 8007094:	2018      	movs	r0, #24
 8007096:	f7fe fb27 	bl	80056e8 <__esc_settings_selection>
			break;
 800709a:	f000 bc0e 	b.w	80078ba <display_edit_settings+0xb86>
			else if(key_pressed == ENTER_KEY_PRESSED)
 800709e:	4b93      	ldr	r3, [pc, #588]	; (80072ec <display_edit_settings+0x5b8>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b03      	cmp	r3, #3
 80070a4:	f040 8409 	bne.w	80078ba <display_edit_settings+0xb86>
				__select_button(0);
 80070a8:	2000      	movs	r0, #0
 80070aa:	f7fe fc19 	bl	80058e0 <__select_button>
			break;
 80070ae:	f000 bc04 	b.w	80078ba <display_edit_settings+0xb86>
		case SET_BLOWDOWN_TDS:
			if(key_pressed == RIGHT_KEY_PRESSED)
 80070b2:	4b8e      	ldr	r3, [pc, #568]	; (80072ec <display_edit_settings+0x5b8>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d107      	bne.n	80070ca <display_edit_settings+0x396>
			{
				__settings_selection(14,23);
 80070ba:	2117      	movs	r1, #23
 80070bc:	200e      	movs	r0, #14
 80070be:	f7fe fae5 	bl	800568c <__settings_selection>
				current_edit_settings_state = SET_COOL_OFF_TIME;
 80070c2:	4b8b      	ldr	r3, [pc, #556]	; (80072f0 <display_edit_settings+0x5bc>)
 80070c4:	2209      	movs	r2, #9
 80070c6:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_digits(26,0);
			}
			break;
 80070c8:	e3f9      	b.n	80078be <display_edit_settings+0xb8a>
			else if(key_pressed == LEFT_KEY_PRESSED)
 80070ca:	4b88      	ldr	r3, [pc, #544]	; (80072ec <display_edit_settings+0x5b8>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d107      	bne.n	80070e2 <display_edit_settings+0x3ae>
				__settings_selection(14,24);
 80070d2:	2118      	movs	r1, #24
 80070d4:	200e      	movs	r0, #14
 80070d6:	f7fe fad9 	bl	800568c <__settings_selection>
				current_edit_settings_state = AUTO_BLOWDOWN;
 80070da:	4b85      	ldr	r3, [pc, #532]	; (80072f0 <display_edit_settings+0x5bc>)
 80070dc:	2207      	movs	r2, #7
 80070de:	601a      	str	r2, [r3, #0]
			break;
 80070e0:	e3ed      	b.n	80078be <display_edit_settings+0xb8a>
			else if(key_pressed == ESC_KEY_PRESSED)
 80070e2:	4b82      	ldr	r3, [pc, #520]	; (80072ec <display_edit_settings+0x5b8>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2b04      	cmp	r3, #4
 80070e8:	d107      	bne.n	80070fa <display_edit_settings+0x3c6>
				__esc_settings_selection(14,-1,-1);
 80070ea:	f04f 32ff 	mov.w	r2, #4294967295
 80070ee:	f04f 31ff 	mov.w	r1, #4294967295
 80070f2:	200e      	movs	r0, #14
 80070f4:	f7fe faf8 	bl	80056e8 <__esc_settings_selection>
			break;
 80070f8:	e3e1      	b.n	80078be <display_edit_settings+0xb8a>
			else if(key_pressed == ENTER_KEY_PRESSED)
 80070fa:	4b7c      	ldr	r3, [pc, #496]	; (80072ec <display_edit_settings+0x5b8>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2b03      	cmp	r3, #3
 8007100:	f040 83dd 	bne.w	80078be <display_edit_settings+0xb8a>
				__select_digits(26,0);
 8007104:	2100      	movs	r1, #0
 8007106:	201a      	movs	r0, #26
 8007108:	f7fe fbac 	bl	8005864 <__select_digits>
			break;
 800710c:	e3d7      	b.n	80078be <display_edit_settings+0xb8a>
		case SET_COOL_OFF_TIME:
			if(key_pressed == RIGHT_KEY_PRESSED)
 800710e:	4b77      	ldr	r3, [pc, #476]	; (80072ec <display_edit_settings+0x5b8>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b02      	cmp	r3, #2
 8007114:	d107      	bne.n	8007126 <display_edit_settings+0x3f2>
			{
				__settings_selection(23,18);
 8007116:	2112      	movs	r1, #18
 8007118:	2017      	movs	r0, #23
 800711a:	f7fe fab7 	bl	800568c <__settings_selection>
				current_edit_settings_state = SET_BLOWDOWN_IN_M3;
 800711e:	4b74      	ldr	r3, [pc, #464]	; (80072f0 <display_edit_settings+0x5bc>)
 8007120:	220a      	movs	r2, #10
 8007122:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_digits(0,1);
			}
			break;
 8007124:	e3cd      	b.n	80078c2 <display_edit_settings+0xb8e>
			else if(key_pressed == LEFT_KEY_PRESSED)
 8007126:	4b71      	ldr	r3, [pc, #452]	; (80072ec <display_edit_settings+0x5b8>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d107      	bne.n	800713e <display_edit_settings+0x40a>
				__settings_selection(23,14);
 800712e:	210e      	movs	r1, #14
 8007130:	2017      	movs	r0, #23
 8007132:	f7fe faab 	bl	800568c <__settings_selection>
				current_edit_settings_state = SET_BLOWDOWN_TDS;
 8007136:	4b6e      	ldr	r3, [pc, #440]	; (80072f0 <display_edit_settings+0x5bc>)
 8007138:	2208      	movs	r2, #8
 800713a:	601a      	str	r2, [r3, #0]
			break;
 800713c:	e3c1      	b.n	80078c2 <display_edit_settings+0xb8e>
			else if(key_pressed == ESC_KEY_PRESSED)
 800713e:	4b6b      	ldr	r3, [pc, #428]	; (80072ec <display_edit_settings+0x5b8>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2b04      	cmp	r3, #4
 8007144:	d107      	bne.n	8007156 <display_edit_settings+0x422>
				__esc_settings_selection(23,-1,-1);
 8007146:	f04f 32ff 	mov.w	r2, #4294967295
 800714a:	f04f 31ff 	mov.w	r1, #4294967295
 800714e:	2017      	movs	r0, #23
 8007150:	f7fe faca 	bl	80056e8 <__esc_settings_selection>
			break;
 8007154:	e3b5      	b.n	80078c2 <display_edit_settings+0xb8e>
			else if(key_pressed == ENTER_KEY_PRESSED)
 8007156:	4b65      	ldr	r3, [pc, #404]	; (80072ec <display_edit_settings+0x5b8>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2b03      	cmp	r3, #3
 800715c:	f040 83b1 	bne.w	80078c2 <display_edit_settings+0xb8e>
				__select_digits(0,1);
 8007160:	2101      	movs	r1, #1
 8007162:	2000      	movs	r0, #0
 8007164:	f7fe fb7e 	bl	8005864 <__select_digits>
			break;
 8007168:	e3ab      	b.n	80078c2 <display_edit_settings+0xb8e>
		case SET_BLOWDOWN_IN_M3:
			if(key_pressed == RIGHT_KEY_PRESSED)
 800716a:	4b60      	ldr	r3, [pc, #384]	; (80072ec <display_edit_settings+0x5b8>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b02      	cmp	r3, #2
 8007170:	d107      	bne.n	8007182 <display_edit_settings+0x44e>
			{
				__settings_selection(18,7);
 8007172:	2107      	movs	r1, #7
 8007174:	2012      	movs	r0, #18
 8007176:	f7fe fa89 	bl	800568c <__settings_selection>
				current_edit_settings_state = OFFSET_MAKE_UP_WATER;
 800717a:	4b5d      	ldr	r3, [pc, #372]	; (80072f0 <display_edit_settings+0x5bc>)
 800717c:	2201      	movs	r2, #1
 800717e:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_six_digits(27);
			}
			break;
 8007180:	e3a1      	b.n	80078c6 <display_edit_settings+0xb92>
			else if(key_pressed == LEFT_KEY_PRESSED)
 8007182:	4b5a      	ldr	r3, [pc, #360]	; (80072ec <display_edit_settings+0x5b8>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d107      	bne.n	800719a <display_edit_settings+0x466>
				__settings_selection(18,23);
 800718a:	2117      	movs	r1, #23
 800718c:	2012      	movs	r0, #18
 800718e:	f7fe fa7d 	bl	800568c <__settings_selection>
				current_edit_settings_state = SET_COOL_OFF_TIME;
 8007192:	4b57      	ldr	r3, [pc, #348]	; (80072f0 <display_edit_settings+0x5bc>)
 8007194:	2209      	movs	r2, #9
 8007196:	601a      	str	r2, [r3, #0]
			break;
 8007198:	e395      	b.n	80078c6 <display_edit_settings+0xb92>
			else if(key_pressed == ESC_KEY_PRESSED)
 800719a:	4b54      	ldr	r3, [pc, #336]	; (80072ec <display_edit_settings+0x5b8>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b04      	cmp	r3, #4
 80071a0:	d107      	bne.n	80071b2 <display_edit_settings+0x47e>
				__esc_settings_selection(18,-1,-1);
 80071a2:	f04f 32ff 	mov.w	r2, #4294967295
 80071a6:	f04f 31ff 	mov.w	r1, #4294967295
 80071aa:	2012      	movs	r0, #18
 80071ac:	f7fe fa9c 	bl	80056e8 <__esc_settings_selection>
			break;
 80071b0:	e389      	b.n	80078c6 <display_edit_settings+0xb92>
			else if(key_pressed == ENTER_KEY_PRESSED)
 80071b2:	4b4e      	ldr	r3, [pc, #312]	; (80072ec <display_edit_settings+0x5b8>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2b03      	cmp	r3, #3
 80071b8:	f040 8385 	bne.w	80078c6 <display_edit_settings+0xb92>
				__select_six_digits(27);
 80071bc:	201b      	movs	r0, #27
 80071be:	f7fe faff 	bl	80057c0 <__select_six_digits>
			break;
 80071c2:	e380      	b.n	80078c6 <display_edit_settings+0xb92>
		case GOTO_SET_INLET_WATER_PH_MIN:
			edit_settings_cmd_len = sprintf(edit_settings_cmd,"t7.pco=63488%sx0.bco=33808%s",end_char,end_char);
 80071c4:	4b4b      	ldr	r3, [pc, #300]	; (80072f4 <display_edit_settings+0x5c0>)
 80071c6:	4a4b      	ldr	r2, [pc, #300]	; (80072f4 <display_edit_settings+0x5c0>)
 80071c8:	494b      	ldr	r1, [pc, #300]	; (80072f8 <display_edit_settings+0x5c4>)
 80071ca:	484c      	ldr	r0, [pc, #304]	; (80072fc <display_edit_settings+0x5c8>)
 80071cc:	f002 fd00 	bl	8009bd0 <siprintf>
 80071d0:	4602      	mov	r2, r0
 80071d2:	4b4b      	ldr	r3, [pc, #300]	; (8007300 <display_edit_settings+0x5cc>)
 80071d4:	601a      	str	r2, [r3, #0]
			lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 80071d6:	4b4a      	ldr	r3, [pc, #296]	; (8007300 <display_edit_settings+0x5cc>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4619      	mov	r1, r3
 80071dc:	4847      	ldr	r0, [pc, #284]	; (80072fc <display_edit_settings+0x5c8>)
 80071de:	f001 fe29 	bl	8008e34 <lcd_send_cmd>
			current_edit_settings_state = SET_INLET_WATER_PH_MIN;
 80071e2:	4b43      	ldr	r3, [pc, #268]	; (80072f0 <display_edit_settings+0x5bc>)
 80071e4:	220c      	movs	r2, #12
 80071e6:	601a      	str	r2, [r3, #0]
			break;
 80071e8:	e384      	b.n	80078f4 <display_edit_settings+0xbc0>
		case SET_INLET_WATER_PH_MIN:
			if(key_pressed == RIGHT_KEY_PRESSED)
 80071ea:	4b40      	ldr	r3, [pc, #256]	; (80072ec <display_edit_settings+0x5b8>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d115      	bne.n	800721e <display_edit_settings+0x4ea>
			{
				edit_settings_cmd_len = sprintf(edit_settings_cmd,"x0.bco=65535%sx1.bco=33808%s",end_char,end_char);
 80071f2:	4b40      	ldr	r3, [pc, #256]	; (80072f4 <display_edit_settings+0x5c0>)
 80071f4:	4a3f      	ldr	r2, [pc, #252]	; (80072f4 <display_edit_settings+0x5c0>)
 80071f6:	4943      	ldr	r1, [pc, #268]	; (8007304 <display_edit_settings+0x5d0>)
 80071f8:	4840      	ldr	r0, [pc, #256]	; (80072fc <display_edit_settings+0x5c8>)
 80071fa:	f002 fce9 	bl	8009bd0 <siprintf>
 80071fe:	4602      	mov	r2, r0
 8007200:	4b3f      	ldr	r3, [pc, #252]	; (8007300 <display_edit_settings+0x5cc>)
 8007202:	601a      	str	r2, [r3, #0]
				lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8007204:	4b3e      	ldr	r3, [pc, #248]	; (8007300 <display_edit_settings+0x5cc>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4619      	mov	r1, r3
 800720a:	483c      	ldr	r0, [pc, #240]	; (80072fc <display_edit_settings+0x5c8>)
 800720c:	f001 fe12 	bl	8008e34 <lcd_send_cmd>
				key_pressed = NONE_KEY_PRESSED;
 8007210:	4b36      	ldr	r3, [pc, #216]	; (80072ec <display_edit_settings+0x5b8>)
 8007212:	2200      	movs	r2, #0
 8007214:	601a      	str	r2, [r3, #0]
				current_edit_settings_state = SET_INLET_WATER_PH_MAX;
 8007216:	4b36      	ldr	r3, [pc, #216]	; (80072f0 <display_edit_settings+0x5bc>)
 8007218:	220d      	movs	r2, #13
 800721a:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_digits(0,1);
			}
			break;
 800721c:	e355      	b.n	80078ca <display_edit_settings+0xb96>
			else if(key_pressed == LEFT_KEY_PRESSED)
 800721e:	4b33      	ldr	r3, [pc, #204]	; (80072ec <display_edit_settings+0x5b8>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b01      	cmp	r3, #1
 8007224:	f000 8351 	beq.w	80078ca <display_edit_settings+0xb96>
			else if(key_pressed == ESC_KEY_PRESSED)
 8007228:	4b30      	ldr	r3, [pc, #192]	; (80072ec <display_edit_settings+0x5b8>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b04      	cmp	r3, #4
 800722e:	d106      	bne.n	800723e <display_edit_settings+0x50a>
				__esc_settings_selection(7,0,-1);
 8007230:	f04f 32ff 	mov.w	r2, #4294967295
 8007234:	2100      	movs	r1, #0
 8007236:	2007      	movs	r0, #7
 8007238:	f7fe fa56 	bl	80056e8 <__esc_settings_selection>
			break;
 800723c:	e345      	b.n	80078ca <display_edit_settings+0xb96>
			else if(key_pressed == ENTER_KEY_PRESSED)
 800723e:	4b2b      	ldr	r3, [pc, #172]	; (80072ec <display_edit_settings+0x5b8>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2b03      	cmp	r3, #3
 8007244:	f040 8341 	bne.w	80078ca <display_edit_settings+0xb96>
				__select_digits(0,1);
 8007248:	2101      	movs	r1, #1
 800724a:	2000      	movs	r0, #0
 800724c:	f7fe fb0a 	bl	8005864 <__select_digits>
			break;
 8007250:	e33b      	b.n	80078ca <display_edit_settings+0xb96>
		case SET_INLET_WATER_PH_MAX:
			if(key_pressed == RIGHT_KEY_PRESSED)
 8007252:	4b26      	ldr	r3, [pc, #152]	; (80072ec <display_edit_settings+0x5b8>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2b02      	cmp	r3, #2
 8007258:	d119      	bne.n	800728e <display_edit_settings+0x55a>
			{
				edit_settings_cmd_len = sprintf(edit_settings_cmd,"t7.pco=65535%sx1.bco=65535%st8.pco=63488%sn2.bco=33808%s",end_char,end_char,end_char,end_char);
 800725a:	4b26      	ldr	r3, [pc, #152]	; (80072f4 <display_edit_settings+0x5c0>)
 800725c:	9301      	str	r3, [sp, #4]
 800725e:	4b25      	ldr	r3, [pc, #148]	; (80072f4 <display_edit_settings+0x5c0>)
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	4b24      	ldr	r3, [pc, #144]	; (80072f4 <display_edit_settings+0x5c0>)
 8007264:	4a23      	ldr	r2, [pc, #140]	; (80072f4 <display_edit_settings+0x5c0>)
 8007266:	4928      	ldr	r1, [pc, #160]	; (8007308 <display_edit_settings+0x5d4>)
 8007268:	4824      	ldr	r0, [pc, #144]	; (80072fc <display_edit_settings+0x5c8>)
 800726a:	f002 fcb1 	bl	8009bd0 <siprintf>
 800726e:	4602      	mov	r2, r0
 8007270:	4b23      	ldr	r3, [pc, #140]	; (8007300 <display_edit_settings+0x5cc>)
 8007272:	601a      	str	r2, [r3, #0]
				lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8007274:	4b22      	ldr	r3, [pc, #136]	; (8007300 <display_edit_settings+0x5cc>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4619      	mov	r1, r3
 800727a:	4820      	ldr	r0, [pc, #128]	; (80072fc <display_edit_settings+0x5c8>)
 800727c:	f001 fdda 	bl	8008e34 <lcd_send_cmd>
				key_pressed = NONE_KEY_PRESSED;
 8007280:	4b1a      	ldr	r3, [pc, #104]	; (80072ec <display_edit_settings+0x5b8>)
 8007282:	2200      	movs	r2, #0
 8007284:	601a      	str	r2, [r3, #0]
				current_edit_settings_state = SET_INLET_WATER_TDS_MIN;
 8007286:	4b1a      	ldr	r3, [pc, #104]	; (80072f0 <display_edit_settings+0x5bc>)
 8007288:	220e      	movs	r2, #14
 800728a:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_digits(1,1);
			}
			break;
 800728c:	e31f      	b.n	80078ce <display_edit_settings+0xb9a>
			else if(key_pressed == LEFT_KEY_PRESSED)
 800728e:	4b17      	ldr	r3, [pc, #92]	; (80072ec <display_edit_settings+0x5b8>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d115      	bne.n	80072c2 <display_edit_settings+0x58e>
				edit_settings_cmd_len = sprintf(edit_settings_cmd,"x1.bco=65535%sx0.bco=33808%s",end_char,end_char);
 8007296:	4b17      	ldr	r3, [pc, #92]	; (80072f4 <display_edit_settings+0x5c0>)
 8007298:	4a16      	ldr	r2, [pc, #88]	; (80072f4 <display_edit_settings+0x5c0>)
 800729a:	491c      	ldr	r1, [pc, #112]	; (800730c <display_edit_settings+0x5d8>)
 800729c:	4817      	ldr	r0, [pc, #92]	; (80072fc <display_edit_settings+0x5c8>)
 800729e:	f002 fc97 	bl	8009bd0 <siprintf>
 80072a2:	4602      	mov	r2, r0
 80072a4:	4b16      	ldr	r3, [pc, #88]	; (8007300 <display_edit_settings+0x5cc>)
 80072a6:	601a      	str	r2, [r3, #0]
				lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 80072a8:	4b15      	ldr	r3, [pc, #84]	; (8007300 <display_edit_settings+0x5cc>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4619      	mov	r1, r3
 80072ae:	4813      	ldr	r0, [pc, #76]	; (80072fc <display_edit_settings+0x5c8>)
 80072b0:	f001 fdc0 	bl	8008e34 <lcd_send_cmd>
				key_pressed = NONE_KEY_PRESSED;
 80072b4:	4b0d      	ldr	r3, [pc, #52]	; (80072ec <display_edit_settings+0x5b8>)
 80072b6:	2200      	movs	r2, #0
 80072b8:	601a      	str	r2, [r3, #0]
				current_edit_settings_state = SET_INLET_WATER_PH_MIN;
 80072ba:	4b0d      	ldr	r3, [pc, #52]	; (80072f0 <display_edit_settings+0x5bc>)
 80072bc:	220c      	movs	r2, #12
 80072be:	601a      	str	r2, [r3, #0]
			break;
 80072c0:	e305      	b.n	80078ce <display_edit_settings+0xb9a>
			else if(key_pressed == ESC_KEY_PRESSED)
 80072c2:	4b0a      	ldr	r3, [pc, #40]	; (80072ec <display_edit_settings+0x5b8>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b04      	cmp	r3, #4
 80072c8:	d106      	bne.n	80072d8 <display_edit_settings+0x5a4>
				__esc_settings_selection(7,1,-1);
 80072ca:	f04f 32ff 	mov.w	r2, #4294967295
 80072ce:	2101      	movs	r1, #1
 80072d0:	2007      	movs	r0, #7
 80072d2:	f7fe fa09 	bl	80056e8 <__esc_settings_selection>
			break;
 80072d6:	e2fa      	b.n	80078ce <display_edit_settings+0xb9a>
			else if(key_pressed == ENTER_KEY_PRESSED)
 80072d8:	4b04      	ldr	r3, [pc, #16]	; (80072ec <display_edit_settings+0x5b8>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b03      	cmp	r3, #3
 80072de:	f040 82f6 	bne.w	80078ce <display_edit_settings+0xb9a>
				__select_digits(1,1);
 80072e2:	2101      	movs	r1, #1
 80072e4:	2001      	movs	r0, #1
 80072e6:	f7fe fabd 	bl	8005864 <__select_digits>
			break;
 80072ea:	e2f0      	b.n	80078ce <display_edit_settings+0xb9a>
 80072ec:	2000020c 	.word	0x2000020c
 80072f0:	20000210 	.word	0x20000210
 80072f4:	2000000c 	.word	0x2000000c
 80072f8:	0800cd28 	.word	0x0800cd28
 80072fc:	20000764 	.word	0x20000764
 8007300:	20000214 	.word	0x20000214
 8007304:	0800cd48 	.word	0x0800cd48
 8007308:	0800cd68 	.word	0x0800cd68
 800730c:	0800cda4 	.word	0x0800cda4
		case SET_INLET_WATER_TDS_MIN:
			if(key_pressed == RIGHT_KEY_PRESSED)
 8007310:	4b99      	ldr	r3, [pc, #612]	; (8007578 <display_edit_settings+0x844>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b02      	cmp	r3, #2
 8007316:	d115      	bne.n	8007344 <display_edit_settings+0x610>
			{
				edit_settings_cmd_len = sprintf(edit_settings_cmd,"n2.bco=65535%sn3.bco=33808%s",end_char,end_char);
 8007318:	4b98      	ldr	r3, [pc, #608]	; (800757c <display_edit_settings+0x848>)
 800731a:	4a98      	ldr	r2, [pc, #608]	; (800757c <display_edit_settings+0x848>)
 800731c:	4998      	ldr	r1, [pc, #608]	; (8007580 <display_edit_settings+0x84c>)
 800731e:	4899      	ldr	r0, [pc, #612]	; (8007584 <display_edit_settings+0x850>)
 8007320:	f002 fc56 	bl	8009bd0 <siprintf>
 8007324:	4602      	mov	r2, r0
 8007326:	4b98      	ldr	r3, [pc, #608]	; (8007588 <display_edit_settings+0x854>)
 8007328:	601a      	str	r2, [r3, #0]
				lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 800732a:	4b97      	ldr	r3, [pc, #604]	; (8007588 <display_edit_settings+0x854>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4619      	mov	r1, r3
 8007330:	4894      	ldr	r0, [pc, #592]	; (8007584 <display_edit_settings+0x850>)
 8007332:	f001 fd7f 	bl	8008e34 <lcd_send_cmd>
				key_pressed = NONE_KEY_PRESSED;
 8007336:	4b90      	ldr	r3, [pc, #576]	; (8007578 <display_edit_settings+0x844>)
 8007338:	2200      	movs	r2, #0
 800733a:	601a      	str	r2, [r3, #0]
				current_edit_settings_state = SET_INLET_WATER_TDS_MAX;
 800733c:	4b93      	ldr	r3, [pc, #588]	; (800758c <display_edit_settings+0x858>)
 800733e:	220f      	movs	r2, #15
 8007340:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_digits(2,0);
			}
			break;
 8007342:	e2c6      	b.n	80078d2 <display_edit_settings+0xb9e>
			else if(key_pressed == LEFT_KEY_PRESSED)
 8007344:	4b8c      	ldr	r3, [pc, #560]	; (8007578 <display_edit_settings+0x844>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d119      	bne.n	8007380 <display_edit_settings+0x64c>
				edit_settings_cmd_len = sprintf(edit_settings_cmd,"t8.pco=65535%sn2.bco=65535%st7.pco=63488%sx1.bco=33808%s",end_char,end_char,end_char,end_char);
 800734c:	4b8b      	ldr	r3, [pc, #556]	; (800757c <display_edit_settings+0x848>)
 800734e:	9301      	str	r3, [sp, #4]
 8007350:	4b8a      	ldr	r3, [pc, #552]	; (800757c <display_edit_settings+0x848>)
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	4b89      	ldr	r3, [pc, #548]	; (800757c <display_edit_settings+0x848>)
 8007356:	4a89      	ldr	r2, [pc, #548]	; (800757c <display_edit_settings+0x848>)
 8007358:	498d      	ldr	r1, [pc, #564]	; (8007590 <display_edit_settings+0x85c>)
 800735a:	488a      	ldr	r0, [pc, #552]	; (8007584 <display_edit_settings+0x850>)
 800735c:	f002 fc38 	bl	8009bd0 <siprintf>
 8007360:	4602      	mov	r2, r0
 8007362:	4b89      	ldr	r3, [pc, #548]	; (8007588 <display_edit_settings+0x854>)
 8007364:	601a      	str	r2, [r3, #0]
				lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8007366:	4b88      	ldr	r3, [pc, #544]	; (8007588 <display_edit_settings+0x854>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4619      	mov	r1, r3
 800736c:	4885      	ldr	r0, [pc, #532]	; (8007584 <display_edit_settings+0x850>)
 800736e:	f001 fd61 	bl	8008e34 <lcd_send_cmd>
				key_pressed = NONE_KEY_PRESSED;
 8007372:	4b81      	ldr	r3, [pc, #516]	; (8007578 <display_edit_settings+0x844>)
 8007374:	2200      	movs	r2, #0
 8007376:	601a      	str	r2, [r3, #0]
				current_edit_settings_state = SET_INLET_WATER_PH_MAX;
 8007378:	4b84      	ldr	r3, [pc, #528]	; (800758c <display_edit_settings+0x858>)
 800737a:	220d      	movs	r2, #13
 800737c:	601a      	str	r2, [r3, #0]
			break;
 800737e:	e2a8      	b.n	80078d2 <display_edit_settings+0xb9e>
			else if(key_pressed == ESC_KEY_PRESSED)
 8007380:	4b7d      	ldr	r3, [pc, #500]	; (8007578 <display_edit_settings+0x844>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2b04      	cmp	r3, #4
 8007386:	d106      	bne.n	8007396 <display_edit_settings+0x662>
				__esc_settings_selection(8,-1,2);
 8007388:	2202      	movs	r2, #2
 800738a:	f04f 31ff 	mov.w	r1, #4294967295
 800738e:	2008      	movs	r0, #8
 8007390:	f7fe f9aa 	bl	80056e8 <__esc_settings_selection>
			break;
 8007394:	e29d      	b.n	80078d2 <display_edit_settings+0xb9e>
			else if(key_pressed == ENTER_KEY_PRESSED)
 8007396:	4b78      	ldr	r3, [pc, #480]	; (8007578 <display_edit_settings+0x844>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2b03      	cmp	r3, #3
 800739c:	f040 8299 	bne.w	80078d2 <display_edit_settings+0xb9e>
				__select_digits(2,0);
 80073a0:	2100      	movs	r1, #0
 80073a2:	2002      	movs	r0, #2
 80073a4:	f7fe fa5e 	bl	8005864 <__select_digits>
			break;
 80073a8:	e293      	b.n	80078d2 <display_edit_settings+0xb9e>
		case SET_INLET_WATER_TDS_MAX:
			if(key_pressed == RIGHT_KEY_PRESSED)
 80073aa:	4b73      	ldr	r3, [pc, #460]	; (8007578 <display_edit_settings+0x844>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d119      	bne.n	80073e6 <display_edit_settings+0x6b2>
			{
				edit_settings_cmd_len = sprintf(edit_settings_cmd,"t8.pco=65535%sn3.bco=65535%st9.pco=63488%sx2.bco=33808%s",end_char,end_char,end_char,end_char);
 80073b2:	4b72      	ldr	r3, [pc, #456]	; (800757c <display_edit_settings+0x848>)
 80073b4:	9301      	str	r3, [sp, #4]
 80073b6:	4b71      	ldr	r3, [pc, #452]	; (800757c <display_edit_settings+0x848>)
 80073b8:	9300      	str	r3, [sp, #0]
 80073ba:	4b70      	ldr	r3, [pc, #448]	; (800757c <display_edit_settings+0x848>)
 80073bc:	4a6f      	ldr	r2, [pc, #444]	; (800757c <display_edit_settings+0x848>)
 80073be:	4975      	ldr	r1, [pc, #468]	; (8007594 <display_edit_settings+0x860>)
 80073c0:	4870      	ldr	r0, [pc, #448]	; (8007584 <display_edit_settings+0x850>)
 80073c2:	f002 fc05 	bl	8009bd0 <siprintf>
 80073c6:	4602      	mov	r2, r0
 80073c8:	4b6f      	ldr	r3, [pc, #444]	; (8007588 <display_edit_settings+0x854>)
 80073ca:	601a      	str	r2, [r3, #0]
				lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 80073cc:	4b6e      	ldr	r3, [pc, #440]	; (8007588 <display_edit_settings+0x854>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4619      	mov	r1, r3
 80073d2:	486c      	ldr	r0, [pc, #432]	; (8007584 <display_edit_settings+0x850>)
 80073d4:	f001 fd2e 	bl	8008e34 <lcd_send_cmd>
				key_pressed = NONE_KEY_PRESSED;
 80073d8:	4b67      	ldr	r3, [pc, #412]	; (8007578 <display_edit_settings+0x844>)
 80073da:	2200      	movs	r2, #0
 80073dc:	601a      	str	r2, [r3, #0]
				current_edit_settings_state = SET_OUTLET_WATER_PH_MIN;
 80073de:	4b6b      	ldr	r3, [pc, #428]	; (800758c <display_edit_settings+0x858>)
 80073e0:	2210      	movs	r2, #16
 80073e2:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_digits(3,0);
			}
			break;
 80073e4:	e277      	b.n	80078d6 <display_edit_settings+0xba2>
			else if(key_pressed == LEFT_KEY_PRESSED)
 80073e6:	4b64      	ldr	r3, [pc, #400]	; (8007578 <display_edit_settings+0x844>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d115      	bne.n	800741a <display_edit_settings+0x6e6>
				edit_settings_cmd_len = sprintf(edit_settings_cmd,"n3.bco=65535%sn2.bco=33808%s",end_char,end_char);
 80073ee:	4b63      	ldr	r3, [pc, #396]	; (800757c <display_edit_settings+0x848>)
 80073f0:	4a62      	ldr	r2, [pc, #392]	; (800757c <display_edit_settings+0x848>)
 80073f2:	4969      	ldr	r1, [pc, #420]	; (8007598 <display_edit_settings+0x864>)
 80073f4:	4863      	ldr	r0, [pc, #396]	; (8007584 <display_edit_settings+0x850>)
 80073f6:	f002 fbeb 	bl	8009bd0 <siprintf>
 80073fa:	4602      	mov	r2, r0
 80073fc:	4b62      	ldr	r3, [pc, #392]	; (8007588 <display_edit_settings+0x854>)
 80073fe:	601a      	str	r2, [r3, #0]
				lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8007400:	4b61      	ldr	r3, [pc, #388]	; (8007588 <display_edit_settings+0x854>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4619      	mov	r1, r3
 8007406:	485f      	ldr	r0, [pc, #380]	; (8007584 <display_edit_settings+0x850>)
 8007408:	f001 fd14 	bl	8008e34 <lcd_send_cmd>
				key_pressed = NONE_KEY_PRESSED;
 800740c:	4b5a      	ldr	r3, [pc, #360]	; (8007578 <display_edit_settings+0x844>)
 800740e:	2200      	movs	r2, #0
 8007410:	601a      	str	r2, [r3, #0]
				current_edit_settings_state = SET_INLET_WATER_TDS_MIN;
 8007412:	4b5e      	ldr	r3, [pc, #376]	; (800758c <display_edit_settings+0x858>)
 8007414:	220e      	movs	r2, #14
 8007416:	601a      	str	r2, [r3, #0]
			break;
 8007418:	e25d      	b.n	80078d6 <display_edit_settings+0xba2>
			else if(key_pressed == ESC_KEY_PRESSED)
 800741a:	4b57      	ldr	r3, [pc, #348]	; (8007578 <display_edit_settings+0x844>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2b04      	cmp	r3, #4
 8007420:	d106      	bne.n	8007430 <display_edit_settings+0x6fc>
				__esc_settings_selection(8,-1,3);
 8007422:	2203      	movs	r2, #3
 8007424:	f04f 31ff 	mov.w	r1, #4294967295
 8007428:	2008      	movs	r0, #8
 800742a:	f7fe f95d 	bl	80056e8 <__esc_settings_selection>
			break;
 800742e:	e252      	b.n	80078d6 <display_edit_settings+0xba2>
			else if(key_pressed == ENTER_KEY_PRESSED)
 8007430:	4b51      	ldr	r3, [pc, #324]	; (8007578 <display_edit_settings+0x844>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2b03      	cmp	r3, #3
 8007436:	f040 824e 	bne.w	80078d6 <display_edit_settings+0xba2>
				__select_digits(3,0);
 800743a:	2100      	movs	r1, #0
 800743c:	2003      	movs	r0, #3
 800743e:	f7fe fa11 	bl	8005864 <__select_digits>
			break;
 8007442:	e248      	b.n	80078d6 <display_edit_settings+0xba2>
		case SET_OUTLET_WATER_PH_MIN:
			if(key_pressed == RIGHT_KEY_PRESSED)
 8007444:	4b4c      	ldr	r3, [pc, #304]	; (8007578 <display_edit_settings+0x844>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2b02      	cmp	r3, #2
 800744a:	d115      	bne.n	8007478 <display_edit_settings+0x744>
			{
				edit_settings_cmd_len = sprintf(edit_settings_cmd,"x2.bco=65535%sx3.bco=33808%s",end_char,end_char);
 800744c:	4b4b      	ldr	r3, [pc, #300]	; (800757c <display_edit_settings+0x848>)
 800744e:	4a4b      	ldr	r2, [pc, #300]	; (800757c <display_edit_settings+0x848>)
 8007450:	4952      	ldr	r1, [pc, #328]	; (800759c <display_edit_settings+0x868>)
 8007452:	484c      	ldr	r0, [pc, #304]	; (8007584 <display_edit_settings+0x850>)
 8007454:	f002 fbbc 	bl	8009bd0 <siprintf>
 8007458:	4602      	mov	r2, r0
 800745a:	4b4b      	ldr	r3, [pc, #300]	; (8007588 <display_edit_settings+0x854>)
 800745c:	601a      	str	r2, [r3, #0]
				lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 800745e:	4b4a      	ldr	r3, [pc, #296]	; (8007588 <display_edit_settings+0x854>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4619      	mov	r1, r3
 8007464:	4847      	ldr	r0, [pc, #284]	; (8007584 <display_edit_settings+0x850>)
 8007466:	f001 fce5 	bl	8008e34 <lcd_send_cmd>
				key_pressed = NONE_KEY_PRESSED;
 800746a:	4b43      	ldr	r3, [pc, #268]	; (8007578 <display_edit_settings+0x844>)
 800746c:	2200      	movs	r2, #0
 800746e:	601a      	str	r2, [r3, #0]
				current_edit_settings_state = SET_OUTLET_WATER_PH_MAX;
 8007470:	4b46      	ldr	r3, [pc, #280]	; (800758c <display_edit_settings+0x858>)
 8007472:	2211      	movs	r2, #17
 8007474:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_digits(2,1);
			}
			break;
 8007476:	e230      	b.n	80078da <display_edit_settings+0xba6>
			else if(key_pressed == LEFT_KEY_PRESSED)
 8007478:	4b3f      	ldr	r3, [pc, #252]	; (8007578 <display_edit_settings+0x844>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d119      	bne.n	80074b4 <display_edit_settings+0x780>
				edit_settings_cmd_len = sprintf(edit_settings_cmd,"t9.pco=65535%sx2.bco=65535%st8.pco=63488%sn3.bco=33808%s",end_char,end_char,end_char,end_char);
 8007480:	4b3e      	ldr	r3, [pc, #248]	; (800757c <display_edit_settings+0x848>)
 8007482:	9301      	str	r3, [sp, #4]
 8007484:	4b3d      	ldr	r3, [pc, #244]	; (800757c <display_edit_settings+0x848>)
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	4b3c      	ldr	r3, [pc, #240]	; (800757c <display_edit_settings+0x848>)
 800748a:	4a3c      	ldr	r2, [pc, #240]	; (800757c <display_edit_settings+0x848>)
 800748c:	4944      	ldr	r1, [pc, #272]	; (80075a0 <display_edit_settings+0x86c>)
 800748e:	483d      	ldr	r0, [pc, #244]	; (8007584 <display_edit_settings+0x850>)
 8007490:	f002 fb9e 	bl	8009bd0 <siprintf>
 8007494:	4602      	mov	r2, r0
 8007496:	4b3c      	ldr	r3, [pc, #240]	; (8007588 <display_edit_settings+0x854>)
 8007498:	601a      	str	r2, [r3, #0]
				lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 800749a:	4b3b      	ldr	r3, [pc, #236]	; (8007588 <display_edit_settings+0x854>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4619      	mov	r1, r3
 80074a0:	4838      	ldr	r0, [pc, #224]	; (8007584 <display_edit_settings+0x850>)
 80074a2:	f001 fcc7 	bl	8008e34 <lcd_send_cmd>
				key_pressed = NONE_KEY_PRESSED;
 80074a6:	4b34      	ldr	r3, [pc, #208]	; (8007578 <display_edit_settings+0x844>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	601a      	str	r2, [r3, #0]
				current_edit_settings_state = SET_INLET_WATER_TDS_MAX;
 80074ac:	4b37      	ldr	r3, [pc, #220]	; (800758c <display_edit_settings+0x858>)
 80074ae:	220f      	movs	r2, #15
 80074b0:	601a      	str	r2, [r3, #0]
			break;
 80074b2:	e212      	b.n	80078da <display_edit_settings+0xba6>
			else if(key_pressed == ESC_KEY_PRESSED)
 80074b4:	4b30      	ldr	r3, [pc, #192]	; (8007578 <display_edit_settings+0x844>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2b04      	cmp	r3, #4
 80074ba:	d106      	bne.n	80074ca <display_edit_settings+0x796>
				__esc_settings_selection(9,2,-1);
 80074bc:	f04f 32ff 	mov.w	r2, #4294967295
 80074c0:	2102      	movs	r1, #2
 80074c2:	2009      	movs	r0, #9
 80074c4:	f7fe f910 	bl	80056e8 <__esc_settings_selection>
			break;
 80074c8:	e207      	b.n	80078da <display_edit_settings+0xba6>
			else if(key_pressed == ENTER_KEY_PRESSED)
 80074ca:	4b2b      	ldr	r3, [pc, #172]	; (8007578 <display_edit_settings+0x844>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b03      	cmp	r3, #3
 80074d0:	f040 8203 	bne.w	80078da <display_edit_settings+0xba6>
				__select_digits(2,1);
 80074d4:	2101      	movs	r1, #1
 80074d6:	2002      	movs	r0, #2
 80074d8:	f7fe f9c4 	bl	8005864 <__select_digits>
			break;
 80074dc:	e1fd      	b.n	80078da <display_edit_settings+0xba6>
		case SET_OUTLET_WATER_PH_MAX:
			if(key_pressed == RIGHT_KEY_PRESSED)
 80074de:	4b26      	ldr	r3, [pc, #152]	; (8007578 <display_edit_settings+0x844>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d119      	bne.n	800751a <display_edit_settings+0x7e6>
			{
				edit_settings_cmd_len = sprintf(edit_settings_cmd,"t9.pco=65535%sx3.bco=65535%st10.pco=63488%sn7.bco=33808%s",end_char,end_char,end_char,end_char);
 80074e6:	4b25      	ldr	r3, [pc, #148]	; (800757c <display_edit_settings+0x848>)
 80074e8:	9301      	str	r3, [sp, #4]
 80074ea:	4b24      	ldr	r3, [pc, #144]	; (800757c <display_edit_settings+0x848>)
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	4b23      	ldr	r3, [pc, #140]	; (800757c <display_edit_settings+0x848>)
 80074f0:	4a22      	ldr	r2, [pc, #136]	; (800757c <display_edit_settings+0x848>)
 80074f2:	492c      	ldr	r1, [pc, #176]	; (80075a4 <display_edit_settings+0x870>)
 80074f4:	4823      	ldr	r0, [pc, #140]	; (8007584 <display_edit_settings+0x850>)
 80074f6:	f002 fb6b 	bl	8009bd0 <siprintf>
 80074fa:	4602      	mov	r2, r0
 80074fc:	4b22      	ldr	r3, [pc, #136]	; (8007588 <display_edit_settings+0x854>)
 80074fe:	601a      	str	r2, [r3, #0]
				lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8007500:	4b21      	ldr	r3, [pc, #132]	; (8007588 <display_edit_settings+0x854>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4619      	mov	r1, r3
 8007506:	481f      	ldr	r0, [pc, #124]	; (8007584 <display_edit_settings+0x850>)
 8007508:	f001 fc94 	bl	8008e34 <lcd_send_cmd>
				key_pressed = NONE_KEY_PRESSED;
 800750c:	4b1a      	ldr	r3, [pc, #104]	; (8007578 <display_edit_settings+0x844>)
 800750e:	2200      	movs	r2, #0
 8007510:	601a      	str	r2, [r3, #0]
				current_edit_settings_state = SET_OUTLET_WATER_TDS_MIN;
 8007512:	4b1e      	ldr	r3, [pc, #120]	; (800758c <display_edit_settings+0x858>)
 8007514:	2212      	movs	r2, #18
 8007516:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_digits(3,1);
			}
			break;
 8007518:	e1e1      	b.n	80078de <display_edit_settings+0xbaa>
			else if(key_pressed == LEFT_KEY_PRESSED)
 800751a:	4b17      	ldr	r3, [pc, #92]	; (8007578 <display_edit_settings+0x844>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2b01      	cmp	r3, #1
 8007520:	d115      	bne.n	800754e <display_edit_settings+0x81a>
				edit_settings_cmd_len = sprintf(edit_settings_cmd,"x3.bco=65535%sx2.bco=33808%s",end_char,end_char);
 8007522:	4b16      	ldr	r3, [pc, #88]	; (800757c <display_edit_settings+0x848>)
 8007524:	4a15      	ldr	r2, [pc, #84]	; (800757c <display_edit_settings+0x848>)
 8007526:	4920      	ldr	r1, [pc, #128]	; (80075a8 <display_edit_settings+0x874>)
 8007528:	4816      	ldr	r0, [pc, #88]	; (8007584 <display_edit_settings+0x850>)
 800752a:	f002 fb51 	bl	8009bd0 <siprintf>
 800752e:	4602      	mov	r2, r0
 8007530:	4b15      	ldr	r3, [pc, #84]	; (8007588 <display_edit_settings+0x854>)
 8007532:	601a      	str	r2, [r3, #0]
				lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8007534:	4b14      	ldr	r3, [pc, #80]	; (8007588 <display_edit_settings+0x854>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4619      	mov	r1, r3
 800753a:	4812      	ldr	r0, [pc, #72]	; (8007584 <display_edit_settings+0x850>)
 800753c:	f001 fc7a 	bl	8008e34 <lcd_send_cmd>
				key_pressed = NONE_KEY_PRESSED;
 8007540:	4b0d      	ldr	r3, [pc, #52]	; (8007578 <display_edit_settings+0x844>)
 8007542:	2200      	movs	r2, #0
 8007544:	601a      	str	r2, [r3, #0]
				current_edit_settings_state = SET_OUTLET_WATER_PH_MIN;
 8007546:	4b11      	ldr	r3, [pc, #68]	; (800758c <display_edit_settings+0x858>)
 8007548:	2210      	movs	r2, #16
 800754a:	601a      	str	r2, [r3, #0]
			break;
 800754c:	e1c7      	b.n	80078de <display_edit_settings+0xbaa>
			else if(key_pressed == ESC_KEY_PRESSED)
 800754e:	4b0a      	ldr	r3, [pc, #40]	; (8007578 <display_edit_settings+0x844>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2b04      	cmp	r3, #4
 8007554:	d106      	bne.n	8007564 <display_edit_settings+0x830>
				__esc_settings_selection(9,3,-1);
 8007556:	f04f 32ff 	mov.w	r2, #4294967295
 800755a:	2103      	movs	r1, #3
 800755c:	2009      	movs	r0, #9
 800755e:	f7fe f8c3 	bl	80056e8 <__esc_settings_selection>
			break;
 8007562:	e1bc      	b.n	80078de <display_edit_settings+0xbaa>
			else if(key_pressed == ENTER_KEY_PRESSED)
 8007564:	4b04      	ldr	r3, [pc, #16]	; (8007578 <display_edit_settings+0x844>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2b03      	cmp	r3, #3
 800756a:	f040 81b8 	bne.w	80078de <display_edit_settings+0xbaa>
				__select_digits(3,1);
 800756e:	2101      	movs	r1, #1
 8007570:	2003      	movs	r0, #3
 8007572:	f7fe f977 	bl	8005864 <__select_digits>
			break;
 8007576:	e1b2      	b.n	80078de <display_edit_settings+0xbaa>
 8007578:	2000020c 	.word	0x2000020c
 800757c:	2000000c 	.word	0x2000000c
 8007580:	0800cdc4 	.word	0x0800cdc4
 8007584:	20000764 	.word	0x20000764
 8007588:	20000214 	.word	0x20000214
 800758c:	20000210 	.word	0x20000210
 8007590:	0800cde4 	.word	0x0800cde4
 8007594:	0800ce20 	.word	0x0800ce20
 8007598:	0800ce5c 	.word	0x0800ce5c
 800759c:	0800ce7c 	.word	0x0800ce7c
 80075a0:	0800ce9c 	.word	0x0800ce9c
 80075a4:	0800ced8 	.word	0x0800ced8
 80075a8:	0800cf14 	.word	0x0800cf14
		case SET_OUTLET_WATER_TDS_MIN:
			if(key_pressed == RIGHT_KEY_PRESSED)
 80075ac:	4b96      	ldr	r3, [pc, #600]	; (8007808 <display_edit_settings+0xad4>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d115      	bne.n	80075e0 <display_edit_settings+0x8ac>
			{
				edit_settings_cmd_len = sprintf(edit_settings_cmd,"n7.bco=65535%sn6.bco=33808%s",end_char,end_char);
 80075b4:	4b95      	ldr	r3, [pc, #596]	; (800780c <display_edit_settings+0xad8>)
 80075b6:	4a95      	ldr	r2, [pc, #596]	; (800780c <display_edit_settings+0xad8>)
 80075b8:	4995      	ldr	r1, [pc, #596]	; (8007810 <display_edit_settings+0xadc>)
 80075ba:	4896      	ldr	r0, [pc, #600]	; (8007814 <display_edit_settings+0xae0>)
 80075bc:	f002 fb08 	bl	8009bd0 <siprintf>
 80075c0:	4602      	mov	r2, r0
 80075c2:	4b95      	ldr	r3, [pc, #596]	; (8007818 <display_edit_settings+0xae4>)
 80075c4:	601a      	str	r2, [r3, #0]
				lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 80075c6:	4b94      	ldr	r3, [pc, #592]	; (8007818 <display_edit_settings+0xae4>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4619      	mov	r1, r3
 80075cc:	4891      	ldr	r0, [pc, #580]	; (8007814 <display_edit_settings+0xae0>)
 80075ce:	f001 fc31 	bl	8008e34 <lcd_send_cmd>
				key_pressed = NONE_KEY_PRESSED;
 80075d2:	4b8d      	ldr	r3, [pc, #564]	; (8007808 <display_edit_settings+0xad4>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	601a      	str	r2, [r3, #0]
				current_edit_settings_state = SET_OUTLET_WATER_TDS_MAX;
 80075d8:	4b90      	ldr	r3, [pc, #576]	; (800781c <display_edit_settings+0xae8>)
 80075da:	2213      	movs	r2, #19
 80075dc:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_digits(7,0);
			}
			break;
 80075de:	e180      	b.n	80078e2 <display_edit_settings+0xbae>
			else if(key_pressed == LEFT_KEY_PRESSED)
 80075e0:	4b89      	ldr	r3, [pc, #548]	; (8007808 <display_edit_settings+0xad4>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d119      	bne.n	800761c <display_edit_settings+0x8e8>
				edit_settings_cmd_len = sprintf(edit_settings_cmd,"t10.pco=65535%sn7.bco=65535%st9.pco=63488%sx3.bco=33808%s",end_char,end_char,end_char,end_char);
 80075e8:	4b88      	ldr	r3, [pc, #544]	; (800780c <display_edit_settings+0xad8>)
 80075ea:	9301      	str	r3, [sp, #4]
 80075ec:	4b87      	ldr	r3, [pc, #540]	; (800780c <display_edit_settings+0xad8>)
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	4b86      	ldr	r3, [pc, #536]	; (800780c <display_edit_settings+0xad8>)
 80075f2:	4a86      	ldr	r2, [pc, #536]	; (800780c <display_edit_settings+0xad8>)
 80075f4:	498a      	ldr	r1, [pc, #552]	; (8007820 <display_edit_settings+0xaec>)
 80075f6:	4887      	ldr	r0, [pc, #540]	; (8007814 <display_edit_settings+0xae0>)
 80075f8:	f002 faea 	bl	8009bd0 <siprintf>
 80075fc:	4602      	mov	r2, r0
 80075fe:	4b86      	ldr	r3, [pc, #536]	; (8007818 <display_edit_settings+0xae4>)
 8007600:	601a      	str	r2, [r3, #0]
				lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8007602:	4b85      	ldr	r3, [pc, #532]	; (8007818 <display_edit_settings+0xae4>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4619      	mov	r1, r3
 8007608:	4882      	ldr	r0, [pc, #520]	; (8007814 <display_edit_settings+0xae0>)
 800760a:	f001 fc13 	bl	8008e34 <lcd_send_cmd>
				key_pressed = NONE_KEY_PRESSED;
 800760e:	4b7e      	ldr	r3, [pc, #504]	; (8007808 <display_edit_settings+0xad4>)
 8007610:	2200      	movs	r2, #0
 8007612:	601a      	str	r2, [r3, #0]
				current_edit_settings_state = SET_OUTLET_WATER_PH_MAX;
 8007614:	4b81      	ldr	r3, [pc, #516]	; (800781c <display_edit_settings+0xae8>)
 8007616:	2211      	movs	r2, #17
 8007618:	601a      	str	r2, [r3, #0]
			break;
 800761a:	e162      	b.n	80078e2 <display_edit_settings+0xbae>
			else if(key_pressed == ESC_KEY_PRESSED)
 800761c:	4b7a      	ldr	r3, [pc, #488]	; (8007808 <display_edit_settings+0xad4>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b04      	cmp	r3, #4
 8007622:	d106      	bne.n	8007632 <display_edit_settings+0x8fe>
				__esc_settings_selection(10,-1,7);
 8007624:	2207      	movs	r2, #7
 8007626:	f04f 31ff 	mov.w	r1, #4294967295
 800762a:	200a      	movs	r0, #10
 800762c:	f7fe f85c 	bl	80056e8 <__esc_settings_selection>
			break;
 8007630:	e157      	b.n	80078e2 <display_edit_settings+0xbae>
			else if(key_pressed == ENTER_KEY_PRESSED)
 8007632:	4b75      	ldr	r3, [pc, #468]	; (8007808 <display_edit_settings+0xad4>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b03      	cmp	r3, #3
 8007638:	f040 8153 	bne.w	80078e2 <display_edit_settings+0xbae>
				__select_digits(7,0);
 800763c:	2100      	movs	r1, #0
 800763e:	2007      	movs	r0, #7
 8007640:	f7fe f910 	bl	8005864 <__select_digits>
			break;
 8007644:	e14d      	b.n	80078e2 <display_edit_settings+0xbae>
		case SET_OUTLET_WATER_TDS_MAX:
			if(key_pressed == RIGHT_KEY_PRESSED)
 8007646:	4b70      	ldr	r3, [pc, #448]	; (8007808 <display_edit_settings+0xad4>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2b02      	cmp	r3, #2
 800764c:	d117      	bne.n	800767e <display_edit_settings+0x94a>
			{
				edit_settings_cmd_len = sprintf(edit_settings_cmd,"t10.pco=65535%sn6.bco=65535%st13.pco=63488%s",end_char,end_char,end_char);
 800764e:	4b6f      	ldr	r3, [pc, #444]	; (800780c <display_edit_settings+0xad8>)
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	4b6e      	ldr	r3, [pc, #440]	; (800780c <display_edit_settings+0xad8>)
 8007654:	4a6d      	ldr	r2, [pc, #436]	; (800780c <display_edit_settings+0xad8>)
 8007656:	4973      	ldr	r1, [pc, #460]	; (8007824 <display_edit_settings+0xaf0>)
 8007658:	486e      	ldr	r0, [pc, #440]	; (8007814 <display_edit_settings+0xae0>)
 800765a:	f002 fab9 	bl	8009bd0 <siprintf>
 800765e:	4602      	mov	r2, r0
 8007660:	4b6d      	ldr	r3, [pc, #436]	; (8007818 <display_edit_settings+0xae4>)
 8007662:	601a      	str	r2, [r3, #0]
				lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8007664:	4b6c      	ldr	r3, [pc, #432]	; (8007818 <display_edit_settings+0xae4>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4619      	mov	r1, r3
 800766a:	486a      	ldr	r0, [pc, #424]	; (8007814 <display_edit_settings+0xae0>)
 800766c:	f001 fbe2 	bl	8008e34 <lcd_send_cmd>
				key_pressed = NONE_KEY_PRESSED;
 8007670:	4b65      	ldr	r3, [pc, #404]	; (8007808 <display_edit_settings+0xad4>)
 8007672:	2200      	movs	r2, #0
 8007674:	601a      	str	r2, [r3, #0]
				current_edit_settings_state = PUMP1_CAPACITY;
 8007676:	4b69      	ldr	r3, [pc, #420]	; (800781c <display_edit_settings+0xae8>)
 8007678:	2214      	movs	r2, #20
 800767a:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_digits(6,0);
			}
			break;
 800767c:	e133      	b.n	80078e6 <display_edit_settings+0xbb2>
			else if(key_pressed == LEFT_KEY_PRESSED)
 800767e:	4b62      	ldr	r3, [pc, #392]	; (8007808 <display_edit_settings+0xad4>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d115      	bne.n	80076b2 <display_edit_settings+0x97e>
				edit_settings_cmd_len = sprintf(edit_settings_cmd,"n6.bco=65535%sn7.bco=33808%s",end_char,end_char);
 8007686:	4b61      	ldr	r3, [pc, #388]	; (800780c <display_edit_settings+0xad8>)
 8007688:	4a60      	ldr	r2, [pc, #384]	; (800780c <display_edit_settings+0xad8>)
 800768a:	4967      	ldr	r1, [pc, #412]	; (8007828 <display_edit_settings+0xaf4>)
 800768c:	4861      	ldr	r0, [pc, #388]	; (8007814 <display_edit_settings+0xae0>)
 800768e:	f002 fa9f 	bl	8009bd0 <siprintf>
 8007692:	4602      	mov	r2, r0
 8007694:	4b60      	ldr	r3, [pc, #384]	; (8007818 <display_edit_settings+0xae4>)
 8007696:	601a      	str	r2, [r3, #0]
				lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8007698:	4b5f      	ldr	r3, [pc, #380]	; (8007818 <display_edit_settings+0xae4>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4619      	mov	r1, r3
 800769e:	485d      	ldr	r0, [pc, #372]	; (8007814 <display_edit_settings+0xae0>)
 80076a0:	f001 fbc8 	bl	8008e34 <lcd_send_cmd>
				key_pressed = NONE_KEY_PRESSED;
 80076a4:	4b58      	ldr	r3, [pc, #352]	; (8007808 <display_edit_settings+0xad4>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	601a      	str	r2, [r3, #0]
				current_edit_settings_state = SET_OUTLET_WATER_TDS_MIN;
 80076aa:	4b5c      	ldr	r3, [pc, #368]	; (800781c <display_edit_settings+0xae8>)
 80076ac:	2212      	movs	r2, #18
 80076ae:	601a      	str	r2, [r3, #0]
			break;
 80076b0:	e119      	b.n	80078e6 <display_edit_settings+0xbb2>
			else if(key_pressed == ESC_KEY_PRESSED)
 80076b2:	4b55      	ldr	r3, [pc, #340]	; (8007808 <display_edit_settings+0xad4>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2b04      	cmp	r3, #4
 80076b8:	d106      	bne.n	80076c8 <display_edit_settings+0x994>
				__esc_settings_selection(10,-1,6);
 80076ba:	2206      	movs	r2, #6
 80076bc:	f04f 31ff 	mov.w	r1, #4294967295
 80076c0:	200a      	movs	r0, #10
 80076c2:	f7fe f811 	bl	80056e8 <__esc_settings_selection>
			break;
 80076c6:	e10e      	b.n	80078e6 <display_edit_settings+0xbb2>
			else if(key_pressed == ENTER_KEY_PRESSED)
 80076c8:	4b4f      	ldr	r3, [pc, #316]	; (8007808 <display_edit_settings+0xad4>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b03      	cmp	r3, #3
 80076ce:	f040 810a 	bne.w	80078e6 <display_edit_settings+0xbb2>
				__select_digits(6,0);
 80076d2:	2100      	movs	r1, #0
 80076d4:	2006      	movs	r0, #6
 80076d6:	f7fe f8c5 	bl	8005864 <__select_digits>
			break;
 80076da:	e104      	b.n	80078e6 <display_edit_settings+0xbb2>
		case PUMP1_CAPACITY:
			if(key_pressed == RIGHT_KEY_PRESSED)
 80076dc:	4b4a      	ldr	r3, [pc, #296]	; (8007808 <display_edit_settings+0xad4>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d115      	bne.n	8007710 <display_edit_settings+0x9dc>
			{
				edit_settings_cmd_len = sprintf(edit_settings_cmd,"t13.pco=65535%st14.pco=63488%s",end_char,end_char);
 80076e4:	4b49      	ldr	r3, [pc, #292]	; (800780c <display_edit_settings+0xad8>)
 80076e6:	4a49      	ldr	r2, [pc, #292]	; (800780c <display_edit_settings+0xad8>)
 80076e8:	4950      	ldr	r1, [pc, #320]	; (800782c <display_edit_settings+0xaf8>)
 80076ea:	484a      	ldr	r0, [pc, #296]	; (8007814 <display_edit_settings+0xae0>)
 80076ec:	f002 fa70 	bl	8009bd0 <siprintf>
 80076f0:	4602      	mov	r2, r0
 80076f2:	4b49      	ldr	r3, [pc, #292]	; (8007818 <display_edit_settings+0xae4>)
 80076f4:	601a      	str	r2, [r3, #0]
				lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 80076f6:	4b48      	ldr	r3, [pc, #288]	; (8007818 <display_edit_settings+0xae4>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4619      	mov	r1, r3
 80076fc:	4845      	ldr	r0, [pc, #276]	; (8007814 <display_edit_settings+0xae0>)
 80076fe:	f001 fb99 	bl	8008e34 <lcd_send_cmd>
				key_pressed = NONE_KEY_PRESSED;
 8007702:	4b41      	ldr	r3, [pc, #260]	; (8007808 <display_edit_settings+0xad4>)
 8007704:	2200      	movs	r2, #0
 8007706:	601a      	str	r2, [r3, #0]
				current_edit_settings_state = PUMP2_CAPACITY;
 8007708:	4b44      	ldr	r3, [pc, #272]	; (800781c <display_edit_settings+0xae8>)
 800770a:	2215      	movs	r2, #21
 800770c:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_digits(8,0);
			}
			break;
 800770e:	e0ec      	b.n	80078ea <display_edit_settings+0xbb6>
			else if(key_pressed == LEFT_KEY_PRESSED)
 8007710:	4b3d      	ldr	r3, [pc, #244]	; (8007808 <display_edit_settings+0xad4>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2b01      	cmp	r3, #1
 8007716:	d117      	bne.n	8007748 <display_edit_settings+0xa14>
				edit_settings_cmd_len = sprintf(edit_settings_cmd,"t13.pco=65535%st10.pco=63488%sn6.bco=33808%s",end_char,end_char,end_char);
 8007718:	4b3c      	ldr	r3, [pc, #240]	; (800780c <display_edit_settings+0xad8>)
 800771a:	9300      	str	r3, [sp, #0]
 800771c:	4b3b      	ldr	r3, [pc, #236]	; (800780c <display_edit_settings+0xad8>)
 800771e:	4a3b      	ldr	r2, [pc, #236]	; (800780c <display_edit_settings+0xad8>)
 8007720:	4943      	ldr	r1, [pc, #268]	; (8007830 <display_edit_settings+0xafc>)
 8007722:	483c      	ldr	r0, [pc, #240]	; (8007814 <display_edit_settings+0xae0>)
 8007724:	f002 fa54 	bl	8009bd0 <siprintf>
 8007728:	4602      	mov	r2, r0
 800772a:	4b3b      	ldr	r3, [pc, #236]	; (8007818 <display_edit_settings+0xae4>)
 800772c:	601a      	str	r2, [r3, #0]
				lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 800772e:	4b3a      	ldr	r3, [pc, #232]	; (8007818 <display_edit_settings+0xae4>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4619      	mov	r1, r3
 8007734:	4837      	ldr	r0, [pc, #220]	; (8007814 <display_edit_settings+0xae0>)
 8007736:	f001 fb7d 	bl	8008e34 <lcd_send_cmd>
				key_pressed = NONE_KEY_PRESSED;
 800773a:	4b33      	ldr	r3, [pc, #204]	; (8007808 <display_edit_settings+0xad4>)
 800773c:	2200      	movs	r2, #0
 800773e:	601a      	str	r2, [r3, #0]
				current_edit_settings_state = SET_OUTLET_WATER_TDS_MAX;
 8007740:	4b36      	ldr	r3, [pc, #216]	; (800781c <display_edit_settings+0xae8>)
 8007742:	2213      	movs	r2, #19
 8007744:	601a      	str	r2, [r3, #0]
			break;
 8007746:	e0d0      	b.n	80078ea <display_edit_settings+0xbb6>
			else if(key_pressed == ESC_KEY_PRESSED)
 8007748:	4b2f      	ldr	r3, [pc, #188]	; (8007808 <display_edit_settings+0xad4>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b04      	cmp	r3, #4
 800774e:	d107      	bne.n	8007760 <display_edit_settings+0xa2c>
				__esc_settings_selection(13,-1,-1);
 8007750:	f04f 32ff 	mov.w	r2, #4294967295
 8007754:	f04f 31ff 	mov.w	r1, #4294967295
 8007758:	200d      	movs	r0, #13
 800775a:	f7fd ffc5 	bl	80056e8 <__esc_settings_selection>
			break;
 800775e:	e0c4      	b.n	80078ea <display_edit_settings+0xbb6>
			else if(key_pressed == ENTER_KEY_PRESSED)
 8007760:	4b29      	ldr	r3, [pc, #164]	; (8007808 <display_edit_settings+0xad4>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2b03      	cmp	r3, #3
 8007766:	f040 80c0 	bne.w	80078ea <display_edit_settings+0xbb6>
				__select_digits(8,0);
 800776a:	2100      	movs	r1, #0
 800776c:	2008      	movs	r0, #8
 800776e:	f7fe f879 	bl	8005864 <__select_digits>
			break;
 8007772:	e0ba      	b.n	80078ea <display_edit_settings+0xbb6>
		case PUMP2_CAPACITY:
			if(key_pressed == RIGHT_KEY_PRESSED)
 8007774:	4b24      	ldr	r3, [pc, #144]	; (8007808 <display_edit_settings+0xad4>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b02      	cmp	r3, #2
 800777a:	d115      	bne.n	80077a8 <display_edit_settings+0xa74>
			{
				edit_settings_cmd_len = sprintf(edit_settings_cmd,"t14.pco=65535%st15.pco=63488%s",end_char,end_char);
 800777c:	4b23      	ldr	r3, [pc, #140]	; (800780c <display_edit_settings+0xad8>)
 800777e:	4a23      	ldr	r2, [pc, #140]	; (800780c <display_edit_settings+0xad8>)
 8007780:	492c      	ldr	r1, [pc, #176]	; (8007834 <display_edit_settings+0xb00>)
 8007782:	4824      	ldr	r0, [pc, #144]	; (8007814 <display_edit_settings+0xae0>)
 8007784:	f002 fa24 	bl	8009bd0 <siprintf>
 8007788:	4602      	mov	r2, r0
 800778a:	4b23      	ldr	r3, [pc, #140]	; (8007818 <display_edit_settings+0xae4>)
 800778c:	601a      	str	r2, [r3, #0]
				lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 800778e:	4b22      	ldr	r3, [pc, #136]	; (8007818 <display_edit_settings+0xae4>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4619      	mov	r1, r3
 8007794:	481f      	ldr	r0, [pc, #124]	; (8007814 <display_edit_settings+0xae0>)
 8007796:	f001 fb4d 	bl	8008e34 <lcd_send_cmd>
				key_pressed = NONE_KEY_PRESSED;
 800779a:	4b1b      	ldr	r3, [pc, #108]	; (8007808 <display_edit_settings+0xad4>)
 800779c:	2200      	movs	r2, #0
 800779e:	601a      	str	r2, [r3, #0]
				current_edit_settings_state = PROCESSING_RATE;
 80077a0:	4b1e      	ldr	r3, [pc, #120]	; (800781c <display_edit_settings+0xae8>)
 80077a2:	2216      	movs	r2, #22
 80077a4:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_digits(9,0);
			}
			break;
 80077a6:	e0a2      	b.n	80078ee <display_edit_settings+0xbba>
			else if(key_pressed == LEFT_KEY_PRESSED)
 80077a8:	4b17      	ldr	r3, [pc, #92]	; (8007808 <display_edit_settings+0xad4>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d115      	bne.n	80077dc <display_edit_settings+0xaa8>
				edit_settings_cmd_len = sprintf(edit_settings_cmd,"t14.pco=65535%st13.pco=63488%s",end_char,end_char);
 80077b0:	4b16      	ldr	r3, [pc, #88]	; (800780c <display_edit_settings+0xad8>)
 80077b2:	4a16      	ldr	r2, [pc, #88]	; (800780c <display_edit_settings+0xad8>)
 80077b4:	4920      	ldr	r1, [pc, #128]	; (8007838 <display_edit_settings+0xb04>)
 80077b6:	4817      	ldr	r0, [pc, #92]	; (8007814 <display_edit_settings+0xae0>)
 80077b8:	f002 fa0a 	bl	8009bd0 <siprintf>
 80077bc:	4602      	mov	r2, r0
 80077be:	4b16      	ldr	r3, [pc, #88]	; (8007818 <display_edit_settings+0xae4>)
 80077c0:	601a      	str	r2, [r3, #0]
				lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 80077c2:	4b15      	ldr	r3, [pc, #84]	; (8007818 <display_edit_settings+0xae4>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4619      	mov	r1, r3
 80077c8:	4812      	ldr	r0, [pc, #72]	; (8007814 <display_edit_settings+0xae0>)
 80077ca:	f001 fb33 	bl	8008e34 <lcd_send_cmd>
				key_pressed = NONE_KEY_PRESSED;
 80077ce:	4b0e      	ldr	r3, [pc, #56]	; (8007808 <display_edit_settings+0xad4>)
 80077d0:	2200      	movs	r2, #0
 80077d2:	601a      	str	r2, [r3, #0]
				current_edit_settings_state = PUMP1_CAPACITY;
 80077d4:	4b11      	ldr	r3, [pc, #68]	; (800781c <display_edit_settings+0xae8>)
 80077d6:	2214      	movs	r2, #20
 80077d8:	601a      	str	r2, [r3, #0]
			break;
 80077da:	e088      	b.n	80078ee <display_edit_settings+0xbba>
			else if(key_pressed == ESC_KEY_PRESSED)
 80077dc:	4b0a      	ldr	r3, [pc, #40]	; (8007808 <display_edit_settings+0xad4>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2b04      	cmp	r3, #4
 80077e2:	d107      	bne.n	80077f4 <display_edit_settings+0xac0>
				__esc_settings_selection(14,-1,-1);
 80077e4:	f04f 32ff 	mov.w	r2, #4294967295
 80077e8:	f04f 31ff 	mov.w	r1, #4294967295
 80077ec:	200e      	movs	r0, #14
 80077ee:	f7fd ff7b 	bl	80056e8 <__esc_settings_selection>
			break;
 80077f2:	e07c      	b.n	80078ee <display_edit_settings+0xbba>
			else if(key_pressed == ENTER_KEY_PRESSED)
 80077f4:	4b04      	ldr	r3, [pc, #16]	; (8007808 <display_edit_settings+0xad4>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b03      	cmp	r3, #3
 80077fa:	d178      	bne.n	80078ee <display_edit_settings+0xbba>
				__select_digits(9,0);
 80077fc:	2100      	movs	r1, #0
 80077fe:	2009      	movs	r0, #9
 8007800:	f7fe f830 	bl	8005864 <__select_digits>
			break;
 8007804:	e073      	b.n	80078ee <display_edit_settings+0xbba>
 8007806:	bf00      	nop
 8007808:	2000020c 	.word	0x2000020c
 800780c:	2000000c 	.word	0x2000000c
 8007810:	0800cf34 	.word	0x0800cf34
 8007814:	20000764 	.word	0x20000764
 8007818:	20000214 	.word	0x20000214
 800781c:	20000210 	.word	0x20000210
 8007820:	0800cf54 	.word	0x0800cf54
 8007824:	0800cf90 	.word	0x0800cf90
 8007828:	0800cfc0 	.word	0x0800cfc0
 800782c:	0800cfe0 	.word	0x0800cfe0
 8007830:	0800d000 	.word	0x0800d000
 8007834:	0800d030 	.word	0x0800d030
 8007838:	0800d050 	.word	0x0800d050
		case PROCESSING_RATE:
			if(key_pressed == RIGHT_KEY_PRESSED)
 800783c:	4b2f      	ldr	r3, [pc, #188]	; (80078fc <display_edit_settings+0xbc8>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2b02      	cmp	r3, #2
 8007842:	d056      	beq.n	80078f2 <display_edit_settings+0xbbe>
//				edit_settings_cmd_len = sprintf(edit_settings_cmd,"n6.bco=65535%st13.pco=63488%s",end_char,end_char);
//				lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
//				key_pressed = NONE_KEY_PRESSED;
//				current_edit_settings_state = PUMP1_CAPACITY;
			}
			else if(key_pressed == LEFT_KEY_PRESSED)
 8007844:	4b2d      	ldr	r3, [pc, #180]	; (80078fc <display_edit_settings+0xbc8>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d115      	bne.n	8007878 <display_edit_settings+0xb44>
			{
				edit_settings_cmd_len = sprintf(edit_settings_cmd,"t15.pco=65535%st14.pco=63488%s",end_char,end_char);
 800784c:	4b2c      	ldr	r3, [pc, #176]	; (8007900 <display_edit_settings+0xbcc>)
 800784e:	4a2c      	ldr	r2, [pc, #176]	; (8007900 <display_edit_settings+0xbcc>)
 8007850:	492c      	ldr	r1, [pc, #176]	; (8007904 <display_edit_settings+0xbd0>)
 8007852:	482d      	ldr	r0, [pc, #180]	; (8007908 <display_edit_settings+0xbd4>)
 8007854:	f002 f9bc 	bl	8009bd0 <siprintf>
 8007858:	4602      	mov	r2, r0
 800785a:	4b2c      	ldr	r3, [pc, #176]	; (800790c <display_edit_settings+0xbd8>)
 800785c:	601a      	str	r2, [r3, #0]
				lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 800785e:	4b2b      	ldr	r3, [pc, #172]	; (800790c <display_edit_settings+0xbd8>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4619      	mov	r1, r3
 8007864:	4828      	ldr	r0, [pc, #160]	; (8007908 <display_edit_settings+0xbd4>)
 8007866:	f001 fae5 	bl	8008e34 <lcd_send_cmd>
				key_pressed = NONE_KEY_PRESSED;
 800786a:	4b24      	ldr	r3, [pc, #144]	; (80078fc <display_edit_settings+0xbc8>)
 800786c:	2200      	movs	r2, #0
 800786e:	601a      	str	r2, [r3, #0]
				current_edit_settings_state = PUMP2_CAPACITY;
 8007870:	4b27      	ldr	r3, [pc, #156]	; (8007910 <display_edit_settings+0xbdc>)
 8007872:	2215      	movs	r2, #21
 8007874:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_digits(10,0);
			}
			break;
 8007876:	e03c      	b.n	80078f2 <display_edit_settings+0xbbe>
			else if(key_pressed == ESC_KEY_PRESSED)
 8007878:	4b20      	ldr	r3, [pc, #128]	; (80078fc <display_edit_settings+0xbc8>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2b04      	cmp	r3, #4
 800787e:	d107      	bne.n	8007890 <display_edit_settings+0xb5c>
				__esc_settings_selection(15,-1,-1);
 8007880:	f04f 32ff 	mov.w	r2, #4294967295
 8007884:	f04f 31ff 	mov.w	r1, #4294967295
 8007888:	200f      	movs	r0, #15
 800788a:	f7fd ff2d 	bl	80056e8 <__esc_settings_selection>
			break;
 800788e:	e030      	b.n	80078f2 <display_edit_settings+0xbbe>
			else if(key_pressed == ENTER_KEY_PRESSED)
 8007890:	4b1a      	ldr	r3, [pc, #104]	; (80078fc <display_edit_settings+0xbc8>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b03      	cmp	r3, #3
 8007896:	d12c      	bne.n	80078f2 <display_edit_settings+0xbbe>
				__select_digits(10,0);
 8007898:	2100      	movs	r1, #0
 800789a:	200a      	movs	r0, #10
 800789c:	f7fd ffe2 	bl	8005864 <__select_digits>
			break;
 80078a0:	e027      	b.n	80078f2 <display_edit_settings+0xbbe>
			break;
 80078a2:	bf00      	nop
 80078a4:	e026      	b.n	80078f4 <display_edit_settings+0xbc0>
			break;
 80078a6:	bf00      	nop
 80078a8:	e024      	b.n	80078f4 <display_edit_settings+0xbc0>
			break;
 80078aa:	bf00      	nop
 80078ac:	e022      	b.n	80078f4 <display_edit_settings+0xbc0>
			break;
 80078ae:	bf00      	nop
 80078b0:	e020      	b.n	80078f4 <display_edit_settings+0xbc0>
			break;
 80078b2:	bf00      	nop
 80078b4:	e01e      	b.n	80078f4 <display_edit_settings+0xbc0>
			break;
 80078b6:	bf00      	nop
 80078b8:	e01c      	b.n	80078f4 <display_edit_settings+0xbc0>
			break;
 80078ba:	bf00      	nop
 80078bc:	e01a      	b.n	80078f4 <display_edit_settings+0xbc0>
			break;
 80078be:	bf00      	nop
 80078c0:	e018      	b.n	80078f4 <display_edit_settings+0xbc0>
			break;
 80078c2:	bf00      	nop
 80078c4:	e016      	b.n	80078f4 <display_edit_settings+0xbc0>
			break;
 80078c6:	bf00      	nop
 80078c8:	e014      	b.n	80078f4 <display_edit_settings+0xbc0>
			break;
 80078ca:	bf00      	nop
 80078cc:	e012      	b.n	80078f4 <display_edit_settings+0xbc0>
			break;
 80078ce:	bf00      	nop
 80078d0:	e010      	b.n	80078f4 <display_edit_settings+0xbc0>
			break;
 80078d2:	bf00      	nop
 80078d4:	e00e      	b.n	80078f4 <display_edit_settings+0xbc0>
			break;
 80078d6:	bf00      	nop
 80078d8:	e00c      	b.n	80078f4 <display_edit_settings+0xbc0>
			break;
 80078da:	bf00      	nop
 80078dc:	e00a      	b.n	80078f4 <display_edit_settings+0xbc0>
			break;
 80078de:	bf00      	nop
 80078e0:	e008      	b.n	80078f4 <display_edit_settings+0xbc0>
			break;
 80078e2:	bf00      	nop
 80078e4:	e006      	b.n	80078f4 <display_edit_settings+0xbc0>
			break;
 80078e6:	bf00      	nop
 80078e8:	e004      	b.n	80078f4 <display_edit_settings+0xbc0>
			break;
 80078ea:	bf00      	nop
 80078ec:	e002      	b.n	80078f4 <display_edit_settings+0xbc0>
			break;
 80078ee:	bf00      	nop
 80078f0:	e000      	b.n	80078f4 <display_edit_settings+0xbc0>
			break;
 80078f2:	bf00      	nop
	}
}
 80078f4:	bf00      	nop
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	2000020c 	.word	0x2000020c
 8007900:	2000000c 	.word	0x2000000c
 8007904:	0800d070 	.word	0x0800d070
 8007908:	20000764 	.word	0x20000764
 800790c:	20000214 	.word	0x20000214
 8007910:	20000210 	.word	0x20000210

08007914 <display_edit_digits>:

void display_edit_digits()
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af02      	add	r7, sp, #8
	switch(current_edit_settings_state)
 800791a:	4b6c      	ldr	r3, [pc, #432]	; (8007acc <display_edit_digits+0x1b8>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	3b01      	subs	r3, #1
 8007920:	2b15      	cmp	r3, #21
 8007922:	f200 80cf 	bhi.w	8007ac4 <display_edit_digits+0x1b0>
 8007926:	a201      	add	r2, pc, #4	; (adr r2, 800792c <display_edit_digits+0x18>)
 8007928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792c:	08007985 	.word	0x08007985
 8007930:	0800798f 	.word	0x0800798f
 8007934:	08007999 	.word	0x08007999
 8007938:	080079a3 	.word	0x080079a3
 800793c:	080079ad 	.word	0x080079ad
 8007940:	080079bf 	.word	0x080079bf
 8007944:	080079d1 	.word	0x080079d1
 8007948:	080079d9 	.word	0x080079d9
 800794c:	080079eb 	.word	0x080079eb
 8007950:	080079f5 	.word	0x080079f5
 8007954:	08007ac5 	.word	0x08007ac5
 8007958:	080079ff 	.word	0x080079ff
 800795c:	08007a11 	.word	0x08007a11
 8007960:	08007a23 	.word	0x08007a23
 8007964:	08007a35 	.word	0x08007a35
 8007968:	08007a47 	.word	0x08007a47
 800796c:	08007a59 	.word	0x08007a59
 8007970:	08007a6b 	.word	0x08007a6b
 8007974:	08007a7d 	.word	0x08007a7d
 8007978:	08007a8f 	.word	0x08007a8f
 800797c:	08007aa1 	.word	0x08007aa1
 8007980:	08007ab3 	.word	0x08007ab3
	{
		case OFFSET_MAKE_UP_WATER:
			__edit_six_digits(&yorker_settings.offset_mkupwater,0);
 8007984:	2100      	movs	r1, #0
 8007986:	4852      	ldr	r0, [pc, #328]	; (8007ad0 <display_edit_digits+0x1bc>)
 8007988:	f7fe fa28 	bl	8005ddc <__edit_six_digits>
			break;
 800798c:	e09a      	b.n	8007ac4 <display_edit_digits+0x1b0>
		case OFFSET_BLOWDOWN:
			__edit_six_digits(&yorker_settings.offset_blowdown,6);
 800798e:	2106      	movs	r1, #6
 8007990:	4850      	ldr	r0, [pc, #320]	; (8007ad4 <display_edit_digits+0x1c0>)
 8007992:	f7fe fa23 	bl	8005ddc <__edit_six_digits>
			break;
 8007996:	e095      	b.n	8007ac4 <display_edit_digits+0x1b0>
		case PUMP1_LTS_PER_PULSE:
			__edit_six_digits(&yorker_settings.pump1_lts_per_pulse,12);
 8007998:	210c      	movs	r1, #12
 800799a:	484f      	ldr	r0, [pc, #316]	; (8007ad8 <display_edit_digits+0x1c4>)
 800799c:	f7fe fa1e 	bl	8005ddc <__edit_six_digits>
			break;
 80079a0:	e090      	b.n	8007ac4 <display_edit_digits+0x1b0>
		case PUMP2_LTS_PER_PULSE:
			__edit_six_digits(&yorker_settings.pump2_lts_per_pulse,18);
 80079a2:	2112      	movs	r1, #18
 80079a4:	484d      	ldr	r0, [pc, #308]	; (8007adc <display_edit_digits+0x1c8>)
 80079a6:	f7fe fa19 	bl	8005ddc <__edit_six_digits>
			break;
 80079aa:	e08b      	b.n	8007ac4 <display_edit_digits+0x1b0>
		case RATIO_1:
			__edit_digits(&yorker_settings.ratio_1,24,4,0,0);
 80079ac:	2300      	movs	r3, #0
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	2300      	movs	r3, #0
 80079b2:	2204      	movs	r2, #4
 80079b4:	2118      	movs	r1, #24
 80079b6:	484a      	ldr	r0, [pc, #296]	; (8007ae0 <display_edit_digits+0x1cc>)
 80079b8:	f7fe fac0 	bl	8005f3c <__edit_digits>
			break;
 80079bc:	e082      	b.n	8007ac4 <display_edit_digits+0x1b0>
		case RATIO_2:
			__edit_digits(&yorker_settings.ratio_2,25,4,0,0);
 80079be:	2300      	movs	r3, #0
 80079c0:	9300      	str	r3, [sp, #0]
 80079c2:	2300      	movs	r3, #0
 80079c4:	2204      	movs	r2, #4
 80079c6:	2119      	movs	r1, #25
 80079c8:	4846      	ldr	r0, [pc, #280]	; (8007ae4 <display_edit_digits+0x1d0>)
 80079ca:	f7fe fab7 	bl	8005f3c <__edit_digits>
			break;
 80079ce:	e079      	b.n	8007ac4 <display_edit_digits+0x1b0>
		case AUTO_BLOWDOWN:
			__edit_button_selection(&yorker_settings.auto_blowdown);
 80079d0:	4845      	ldr	r0, [pc, #276]	; (8007ae8 <display_edit_digits+0x1d4>)
 80079d2:	f7fe fc69 	bl	80062a8 <__edit_button_selection>
			break;
 80079d6:	e075      	b.n	8007ac4 <display_edit_digits+0x1b0>
		case SET_BLOWDOWN_TDS:
			__edit_digits(&yorker_settings.set_blowdown_tds,26,4,0,0);
 80079d8:	2300      	movs	r3, #0
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	2300      	movs	r3, #0
 80079de:	2204      	movs	r2, #4
 80079e0:	211a      	movs	r1, #26
 80079e2:	4842      	ldr	r0, [pc, #264]	; (8007aec <display_edit_digits+0x1d8>)
 80079e4:	f7fe faaa 	bl	8005f3c <__edit_digits>
			break;
 80079e8:	e06c      	b.n	8007ac4 <display_edit_digits+0x1b0>
		case SET_COOL_OFF_TIME:
			__edit_cool_down_time(&yorker_settings.set_cool_off_time,0);
 80079ea:	2100      	movs	r1, #0
 80079ec:	4840      	ldr	r0, [pc, #256]	; (8007af0 <display_edit_digits+0x1dc>)
 80079ee:	f7fe fd19 	bl	8006424 <__edit_cool_down_time>
			break;
 80079f2:	e067      	b.n	8007ac4 <display_edit_digits+0x1b0>
		case SET_BLOWDOWN_IN_M3:
			__edit_six_digits(&yorker_settings.set_blowdown_in_m3,27);
 80079f4:	211b      	movs	r1, #27
 80079f6:	483f      	ldr	r0, [pc, #252]	; (8007af4 <display_edit_digits+0x1e0>)
 80079f8:	f7fe f9f0 	bl	8005ddc <__edit_six_digits>
			break;
 80079fc:	e062      	b.n	8007ac4 <display_edit_digits+0x1b0>
		case SET_INLET_WATER_PH_MIN:
			__edit_digits(&yorker_settings.set_inlet_water_ph_min,0,2,1,1);
 80079fe:	2301      	movs	r3, #1
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	2301      	movs	r3, #1
 8007a04:	2202      	movs	r2, #2
 8007a06:	2100      	movs	r1, #0
 8007a08:	483b      	ldr	r0, [pc, #236]	; (8007af8 <display_edit_digits+0x1e4>)
 8007a0a:	f7fe fa97 	bl	8005f3c <__edit_digits>
			break;
 8007a0e:	e059      	b.n	8007ac4 <display_edit_digits+0x1b0>
		case SET_INLET_WATER_PH_MAX:
			__edit_digits(&yorker_settings.set_inlet_water_ph_max,1,2,1,1);
 8007a10:	2301      	movs	r3, #1
 8007a12:	9300      	str	r3, [sp, #0]
 8007a14:	2301      	movs	r3, #1
 8007a16:	2202      	movs	r2, #2
 8007a18:	2101      	movs	r1, #1
 8007a1a:	4838      	ldr	r0, [pc, #224]	; (8007afc <display_edit_digits+0x1e8>)
 8007a1c:	f7fe fa8e 	bl	8005f3c <__edit_digits>
			break;
 8007a20:	e050      	b.n	8007ac4 <display_edit_digits+0x1b0>
		case SET_INLET_WATER_TDS_MIN:
			__edit_digits(&yorker_settings.set_inlet_water_tds_min,2,4,0,0);
 8007a22:	2300      	movs	r3, #0
 8007a24:	9300      	str	r3, [sp, #0]
 8007a26:	2300      	movs	r3, #0
 8007a28:	2204      	movs	r2, #4
 8007a2a:	2102      	movs	r1, #2
 8007a2c:	4834      	ldr	r0, [pc, #208]	; (8007b00 <display_edit_digits+0x1ec>)
 8007a2e:	f7fe fa85 	bl	8005f3c <__edit_digits>
			break;
 8007a32:	e047      	b.n	8007ac4 <display_edit_digits+0x1b0>
		case SET_INLET_WATER_TDS_MAX:
			__edit_digits(&yorker_settings.set_inlet_water_tds_max,3,4,0,0);
 8007a34:	2300      	movs	r3, #0
 8007a36:	9300      	str	r3, [sp, #0]
 8007a38:	2300      	movs	r3, #0
 8007a3a:	2204      	movs	r2, #4
 8007a3c:	2103      	movs	r1, #3
 8007a3e:	4831      	ldr	r0, [pc, #196]	; (8007b04 <display_edit_digits+0x1f0>)
 8007a40:	f7fe fa7c 	bl	8005f3c <__edit_digits>
			break;
 8007a44:	e03e      	b.n	8007ac4 <display_edit_digits+0x1b0>
		case SET_OUTLET_WATER_PH_MIN:
			__edit_digits(&yorker_settings.set_outlet_water_ph_min,2,2,1,1);
 8007a46:	2301      	movs	r3, #1
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	2202      	movs	r2, #2
 8007a4e:	2102      	movs	r1, #2
 8007a50:	482d      	ldr	r0, [pc, #180]	; (8007b08 <display_edit_digits+0x1f4>)
 8007a52:	f7fe fa73 	bl	8005f3c <__edit_digits>
			break;
 8007a56:	e035      	b.n	8007ac4 <display_edit_digits+0x1b0>
		case SET_OUTLET_WATER_PH_MAX:
			__edit_digits(&yorker_settings.set_outlet_water_ph_max,3,2,1,1);
 8007a58:	2301      	movs	r3, #1
 8007a5a:	9300      	str	r3, [sp, #0]
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	2202      	movs	r2, #2
 8007a60:	2103      	movs	r1, #3
 8007a62:	482a      	ldr	r0, [pc, #168]	; (8007b0c <display_edit_digits+0x1f8>)
 8007a64:	f7fe fa6a 	bl	8005f3c <__edit_digits>
			break;
 8007a68:	e02c      	b.n	8007ac4 <display_edit_digits+0x1b0>
		case SET_OUTLET_WATER_TDS_MIN:
			__edit_digits(&yorker_settings.set_outlet_water_tds_min,7,4,0,0);
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	2300      	movs	r3, #0
 8007a70:	2204      	movs	r2, #4
 8007a72:	2107      	movs	r1, #7
 8007a74:	4826      	ldr	r0, [pc, #152]	; (8007b10 <display_edit_digits+0x1fc>)
 8007a76:	f7fe fa61 	bl	8005f3c <__edit_digits>
			break;
 8007a7a:	e023      	b.n	8007ac4 <display_edit_digits+0x1b0>
		case SET_OUTLET_WATER_TDS_MAX:
			__edit_digits(&yorker_settings.set_outlet_water_tds_max,6,4,0,0);
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	2300      	movs	r3, #0
 8007a82:	2204      	movs	r2, #4
 8007a84:	2106      	movs	r1, #6
 8007a86:	4823      	ldr	r0, [pc, #140]	; (8007b14 <display_edit_digits+0x200>)
 8007a88:	f7fe fa58 	bl	8005f3c <__edit_digits>
			break;
 8007a8c:	e01a      	b.n	8007ac4 <display_edit_digits+0x1b0>
		case PUMP1_CAPACITY:
			__edit_digits(&yorker_settings.pump1_capacity,8,2,0,0);
 8007a8e:	2300      	movs	r3, #0
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	2300      	movs	r3, #0
 8007a94:	2202      	movs	r2, #2
 8007a96:	2108      	movs	r1, #8
 8007a98:	481f      	ldr	r0, [pc, #124]	; (8007b18 <display_edit_digits+0x204>)
 8007a9a:	f7fe fa4f 	bl	8005f3c <__edit_digits>
			break;
 8007a9e:	e011      	b.n	8007ac4 <display_edit_digits+0x1b0>
		case PUMP2_CAPACITY:
			__edit_digits(&yorker_settings.pump2_capacity,9,2,0,0);
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	2109      	movs	r1, #9
 8007aaa:	481c      	ldr	r0, [pc, #112]	; (8007b1c <display_edit_digits+0x208>)
 8007aac:	f7fe fa46 	bl	8005f3c <__edit_digits>
			break;
 8007ab0:	e008      	b.n	8007ac4 <display_edit_digits+0x1b0>
		case PROCESSING_RATE:
			__edit_digits(&yorker_settings.processing_rate,10,4,0,0);
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	2204      	movs	r2, #4
 8007aba:	210a      	movs	r1, #10
 8007abc:	4818      	ldr	r0, [pc, #96]	; (8007b20 <display_edit_digits+0x20c>)
 8007abe:	f7fe fa3d 	bl	8005f3c <__edit_digits>
			break;
 8007ac2:	bf00      	nop
	}
}
 8007ac4:	bf00      	nop
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	20000210 	.word	0x20000210
 8007ad0:	2000024c 	.word	0x2000024c
 8007ad4:	20000250 	.word	0x20000250
 8007ad8:	20000254 	.word	0x20000254
 8007adc:	20000258 	.word	0x20000258
 8007ae0:	2000025c 	.word	0x2000025c
 8007ae4:	20000260 	.word	0x20000260
 8007ae8:	20000264 	.word	0x20000264
 8007aec:	20000268 	.word	0x20000268
 8007af0:	2000026c 	.word	0x2000026c
 8007af4:	20000270 	.word	0x20000270
 8007af8:	20000274 	.word	0x20000274
 8007afc:	20000278 	.word	0x20000278
 8007b00:	2000027c 	.word	0x2000027c
 8007b04:	20000280 	.word	0x20000280
 8007b08:	20000284 	.word	0x20000284
 8007b0c:	20000288 	.word	0x20000288
 8007b10:	2000028c 	.word	0x2000028c
 8007b14:	20000290 	.word	0x20000290
 8007b18:	20000294 	.word	0x20000294
 8007b1c:	20000298 	.word	0x20000298
 8007b20:	2000029c 	.word	0x2000029c

08007b24 <settings_update>:

void settings_update()
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8007b2a:	af00      	add	r7, sp, #0
	char settings_cmd[1024] = {0};
 8007b2c:	f107 0308 	add.w	r3, r7, #8
 8007b30:	4618      	mov	r0, r3
 8007b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b36:	461a      	mov	r2, r3
 8007b38:	2100      	movs	r1, #0
 8007b3a:	f001 f9c9 	bl	8008ed0 <memset>
	int settings_cmd_len = 0;
 8007b3e:	1d3b      	adds	r3, r7, #4
 8007b40:	2200      	movs	r2, #0
 8007b42:	601a      	str	r2, [r3, #0]

	settings_cmd_len = sprintf(settings_cmd,"page 2%s",end_char);
 8007b44:	f107 0308 	add.w	r3, r7, #8
 8007b48:	4a2d      	ldr	r2, [pc, #180]	; (8007c00 <settings_update+0xdc>)
 8007b4a:	492e      	ldr	r1, [pc, #184]	; (8007c04 <settings_update+0xe0>)
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f002 f83f 	bl	8009bd0 <siprintf>
 8007b52:	4602      	mov	r2, r0
 8007b54:	1d3b      	adds	r3, r7, #4
 8007b56:	601a      	str	r2, [r3, #0]
	__update_offset_makeup_water_added(settings_cmd,&settings_cmd_len);
 8007b58:	1d3a      	adds	r2, r7, #4
 8007b5a:	f107 0308 	add.w	r3, r7, #8
 8007b5e:	4611      	mov	r1, r2
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7fe fd1d 	bl	80065a0 <__update_offset_makeup_water_added>
	__update_offset_blowdown_water(settings_cmd,&settings_cmd_len);
 8007b66:	1d3a      	adds	r2, r7, #4
 8007b68:	f107 0308 	add.w	r3, r7, #8
 8007b6c:	4611      	mov	r1, r2
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7fe fd6c 	bl	800664c <__update_offset_blowdown_water>
	__update_pump1_lts_per_pulse(settings_cmd,&settings_cmd_len);
 8007b74:	1d3a      	adds	r2, r7, #4
 8007b76:	f107 0308 	add.w	r3, r7, #8
 8007b7a:	4611      	mov	r1, r2
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7fe fdbd 	bl	80066fc <__update_pump1_lts_per_pulse>
	__update_pump2_lts_per_pulse(settings_cmd,&settings_cmd_len);
 8007b82:	1d3a      	adds	r2, r7, #4
 8007b84:	f107 0308 	add.w	r3, r7, #8
 8007b88:	4611      	mov	r1, r2
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7fe fe10 	bl	80067b0 <__update_pump2_lts_per_pulse>
	__update_ratio_1(settings_cmd,&settings_cmd_len);
 8007b90:	1d3a      	adds	r2, r7, #4
 8007b92:	f107 0308 	add.w	r3, r7, #8
 8007b96:	4611      	mov	r1, r2
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7fe fe63 	bl	8006864 <__update_ratio_1>
	__update_ratio_2(settings_cmd,&settings_cmd_len);
 8007b9e:	1d3a      	adds	r2, r7, #4
 8007ba0:	f107 0308 	add.w	r3, r7, #8
 8007ba4:	4611      	mov	r1, r2
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fe fe84 	bl	80068b4 <__update_ratio_2>
	__update_auto_blowdown(settings_cmd,&settings_cmd_len);
 8007bac:	1d3a      	adds	r2, r7, #4
 8007bae:	f107 0308 	add.w	r3, r7, #8
 8007bb2:	4611      	mov	r1, r2
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7fe fea5 	bl	8006904 <__update_auto_blowdown>
	__update_set_blowdown_tds(settings_cmd,&settings_cmd_len);
 8007bba:	1d3a      	adds	r2, r7, #4
 8007bbc:	f107 0308 	add.w	r3, r7, #8
 8007bc0:	4611      	mov	r1, r2
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7fe fef4 	bl	80069b0 <__update_set_blowdown_tds>
	__update_set_cool_off_time(settings_cmd,&settings_cmd_len);
 8007bc8:	1d3a      	adds	r2, r7, #4
 8007bca:	f107 0308 	add.w	r3, r7, #8
 8007bce:	4611      	mov	r1, r2
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7fe ff15 	bl	8006a00 <__update_set_cool_off_time>
	__update_set_blowdown_in_m3(settings_cmd,&settings_cmd_len);
 8007bd6:	1d3a      	adds	r2, r7, #4
 8007bd8:	f107 0308 	add.w	r3, r7, #8
 8007bdc:	4611      	mov	r1, r2
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7fe ff36 	bl	8006a50 <__update_set_blowdown_in_m3>

	lcd_send_cmd(settings_cmd,settings_cmd_len);
 8007be4:	1d3b      	adds	r3, r7, #4
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	f107 0308 	add.w	r3, r7, #8
 8007bec:	4611      	mov	r1, r2
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f001 f920 	bl	8008e34 <lcd_send_cmd>
}
 8007bf4:	bf00      	nop
 8007bf6:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	2000000c 	.word	0x2000000c
 8007c04:	0800d090 	.word	0x0800d090

08007c08 <settings2_update>:

void settings2_update()
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8007c0e:	af00      	add	r7, sp, #0
	char settings_cmd[1024] = {0};
 8007c10:	f107 0308 	add.w	r3, r7, #8
 8007c14:	4618      	mov	r0, r3
 8007c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	f001 f957 	bl	8008ed0 <memset>
	int settings_cmd_len = 0;
 8007c22:	1d3b      	adds	r3, r7, #4
 8007c24:	2200      	movs	r2, #0
 8007c26:	601a      	str	r2, [r3, #0]

	settings_cmd_len = sprintf(settings_cmd,"page 3%s",end_char);
 8007c28:	f107 0308 	add.w	r3, r7, #8
 8007c2c:	4a1f      	ldr	r2, [pc, #124]	; (8007cac <settings2_update+0xa4>)
 8007c2e:	4920      	ldr	r1, [pc, #128]	; (8007cb0 <settings2_update+0xa8>)
 8007c30:	4618      	mov	r0, r3
 8007c32:	f001 ffcd 	bl	8009bd0 <siprintf>
 8007c36:	4602      	mov	r2, r0
 8007c38:	1d3b      	adds	r3, r7, #4
 8007c3a:	601a      	str	r2, [r3, #0]
	__update_inlet_water_ph(settings_cmd,&settings_cmd_len);
 8007c3c:	1d3a      	adds	r2, r7, #4
 8007c3e:	f107 0308 	add.w	r3, r7, #8
 8007c42:	4611      	mov	r1, r2
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7fe ff5d 	bl	8006b04 <__update_inlet_water_ph>
	__update_inlet_water_tds(settings_cmd,&settings_cmd_len);
 8007c4a:	1d3a      	adds	r2, r7, #4
 8007c4c:	f107 0308 	add.w	r3, r7, #8
 8007c50:	4611      	mov	r1, r2
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7fe ff86 	bl	8006b64 <__update_inlet_water_tds>
	__update_outlet_water_ph(settings_cmd,&settings_cmd_len);
 8007c58:	1d3a      	adds	r2, r7, #4
 8007c5a:	f107 0308 	add.w	r3, r7, #8
 8007c5e:	4611      	mov	r1, r2
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7fe ffaf 	bl	8006bc4 <__update_outlet_water_ph>
	__update_outlet_water_tds(settings_cmd,&settings_cmd_len);
 8007c66:	1d3a      	adds	r2, r7, #4
 8007c68:	f107 0308 	add.w	r3, r7, #8
 8007c6c:	4611      	mov	r1, r2
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fe ffd8 	bl	8006c24 <__update_outlet_water_tds>
	__update_pump_capacity(settings_cmd,&settings_cmd_len);
 8007c74:	1d3a      	adds	r2, r7, #4
 8007c76:	f107 0308 	add.w	r3, r7, #8
 8007c7a:	4611      	mov	r1, r2
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7ff f801 	bl	8006c84 <__update_pump_capacity>
	__update_processing_rate(settings_cmd,&settings_cmd_len);
 8007c82:	1d3a      	adds	r2, r7, #4
 8007c84:	f107 0308 	add.w	r3, r7, #8
 8007c88:	4611      	mov	r1, r2
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7ff f82a 	bl	8006ce4 <__update_processing_rate>

	lcd_send_cmd(settings_cmd,settings_cmd_len);
 8007c90:	1d3b      	adds	r3, r7, #4
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	f107 0308 	add.w	r3, r7, #8
 8007c98:	4611      	mov	r1, r2
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f001 f8ca 	bl	8008e34 <lcd_send_cmd>
}
 8007ca0:	bf00      	nop
 8007ca2:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	2000000c 	.word	0x2000000c
 8007cb0:	0800d09c 	.word	0x0800d09c

08007cb4 <platform_start_yorker>:

char wifi_cmd[1024] = {0};
int wifi_cmd_len = 0;

void platform_start_yorker()
{
 8007cb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007cb8:	b093      	sub	sp, #76	; 0x4c
 8007cba:	af0c      	add	r7, sp, #48	; 0x30
	 HAL_Init();
 8007cbc:	f7f9 fccc 	bl	8001658 <HAL_Init>
	 platform_sysclk_cfg();
 8007cc0:	f000 fe28 	bl	8008914 <platform_sysclk_cfg>
	 platform_gpio_init();
 8007cc4:	f000 fda8 	bl	8008818 <platform_gpio_init>
	 platform_adc_init();
 8007cc8:	f000 fa8a 	bl	80081e0 <platform_adc_init>
	 platform_uart_init();
 8007ccc:	f001 f8a8 	bl	8008e20 <platform_uart_init>
	 platform_display_init();
 8007cd0:	f000 fa90 	bl	80081f4 <platform_display_init>
	 platform_rtc_init();
 8007cd4:	f000 fe68 	bl	80089a8 <platform_rtc_init>
	 platform_timer_init();
 8007cd8:	f000 ffc8 	bl	8008c6c <platform_timer_init>

	 MX_I2C1_Init(); //
 8007cdc:	f000 f942 	bl	8007f64 <MX_I2C1_Init>

	 //MX_IWDG_Init(); //

	 platform_flashcfg_init(&yorker_homescreen_settings, &yorker_settings);
 8007ce0:	498b      	ldr	r1, [pc, #556]	; (8007f10 <platform_start_yorker+0x25c>)
 8007ce2:	488c      	ldr	r0, [pc, #560]	; (8007f14 <platform_start_yorker+0x260>)
 8007ce4:	f000 fab4 	bl	8008250 <platform_flashcfg_init>

	 platform_timer_start();
 8007ce8:	f000 ffca 	bl	8008c80 <platform_timer_start>

	 HAL_Delay(1000);
 8007cec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007cf0:	f7f9 fd24 	bl	800173c <HAL_Delay>
	 HAL_GPIO_WritePin(GPIOA, WIFI_RST_Pin, GPIO_PIN_SET);
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	2110      	movs	r1, #16
 8007cf8:	4887      	ldr	r0, [pc, #540]	; (8007f18 <platform_start_yorker+0x264>)
 8007cfa:	f7fa fcbb 	bl	8002674 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA, HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d04:	4884      	ldr	r0, [pc, #528]	; (8007f18 <platform_start_yorker+0x264>)
 8007d06:	f7fa fcb5 	bl	8002674 <HAL_GPIO_WritePin>

	 HAL_Delay(1000);
 8007d0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007d0e:	f7f9 fd15 	bl	800173c <HAL_Delay>
	 HAL_GPIO_WritePin(GPIOA, WIFI_RST_Pin, GPIO_PIN_RESET);
 8007d12:	2200      	movs	r2, #0
 8007d14:	2110      	movs	r1, #16
 8007d16:	4880      	ldr	r0, [pc, #512]	; (8007f18 <platform_start_yorker+0x264>)
 8007d18:	f7fa fcac 	bl	8002674 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA, HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d22:	487d      	ldr	r0, [pc, #500]	; (8007f18 <platform_start_yorker+0x264>)
 8007d24:	f7fa fca6 	bl	8002674 <HAL_GPIO_WritePin>

	 HAL_Delay(1000);
 8007d28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007d2c:	f7f9 fd06 	bl	800173c <HAL_Delay>
	 HAL_GPIO_WritePin(GPIOA, WIFI_RST_Pin, GPIO_PIN_SET);
 8007d30:	2201      	movs	r2, #1
 8007d32:	2110      	movs	r1, #16
 8007d34:	4878      	ldr	r0, [pc, #480]	; (8007f18 <platform_start_yorker+0x264>)
 8007d36:	f7fa fc9d 	bl	8002674 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA, HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d40:	4875      	ldr	r0, [pc, #468]	; (8007f18 <platform_start_yorker+0x264>)
 8007d42:	f7fa fc97 	bl	8002674 <HAL_GPIO_WritePin>
	 while (1)
	   {
	     /* USER CODE END WHILE */
		 HAL_Delay(1000);
 8007d46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007d4a:	f7f9 fcf7 	bl	800173c <HAL_Delay>


		 chemical1 = yorker_homescreen_settings.chemical_1;
 8007d4e:	4b71      	ldr	r3, [pc, #452]	; (8007f14 <platform_start_yorker+0x260>)
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	4a72      	ldr	r2, [pc, #456]	; (8007f1c <platform_start_yorker+0x268>)
 8007d54:	6013      	str	r3, [r2, #0]
		 chemical2 = yorker_homescreen_settings.chemical_2;
 8007d56:	4b6f      	ldr	r3, [pc, #444]	; (8007f14 <platform_start_yorker+0x260>)
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	4a71      	ldr	r2, [pc, #452]	; (8007f20 <platform_start_yorker+0x26c>)
 8007d5c:	6013      	str	r3, [r2, #0]

		 yorker_homescreen_settings.chemical_1++;
 8007d5e:	4b6d      	ldr	r3, [pc, #436]	; (8007f14 <platform_start_yorker+0x260>)
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	3301      	adds	r3, #1
 8007d64:	4a6b      	ldr	r2, [pc, #428]	; (8007f14 <platform_start_yorker+0x260>)
 8007d66:	6093      	str	r3, [r2, #8]
		 yorker_homescreen_settings.chemical_2++;
 8007d68:	4b6a      	ldr	r3, [pc, #424]	; (8007f14 <platform_start_yorker+0x260>)
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	4a69      	ldr	r2, [pc, #420]	; (8007f14 <platform_start_yorker+0x260>)
 8007d70:	60d3      	str	r3, [r2, #12]

		 ph_inlet_water++;
 8007d72:	4b6c      	ldr	r3, [pc, #432]	; (8007f24 <platform_start_yorker+0x270>)
 8007d74:	881b      	ldrh	r3, [r3, #0]
 8007d76:	3301      	adds	r3, #1
 8007d78:	b29a      	uxth	r2, r3
 8007d7a:	4b6a      	ldr	r3, [pc, #424]	; (8007f24 <platform_start_yorker+0x270>)
 8007d7c:	801a      	strh	r2, [r3, #0]
		 ph_plant_water++;
 8007d7e:	4b6a      	ldr	r3, [pc, #424]	; (8007f28 <platform_start_yorker+0x274>)
 8007d80:	881b      	ldrh	r3, [r3, #0]
 8007d82:	3301      	adds	r3, #1
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	4b68      	ldr	r3, [pc, #416]	; (8007f28 <platform_start_yorker+0x274>)
 8007d88:	801a      	strh	r2, [r3, #0]
		 tds_inlet_water++;
 8007d8a:	4b68      	ldr	r3, [pc, #416]	; (8007f2c <platform_start_yorker+0x278>)
 8007d8c:	881b      	ldrh	r3, [r3, #0]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	4b66      	ldr	r3, [pc, #408]	; (8007f2c <platform_start_yorker+0x278>)
 8007d94:	801a      	strh	r2, [r3, #0]
		 tds_plant_water++;
 8007d96:	4b66      	ldr	r3, [pc, #408]	; (8007f30 <platform_start_yorker+0x27c>)
 8007d98:	881b      	ldrh	r3, [r3, #0]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	4b64      	ldr	r3, [pc, #400]	; (8007f30 <platform_start_yorker+0x27c>)
 8007da0:	801a      	strh	r2, [r3, #0]

		 pump1_state = !pump1_state;
 8007da2:	4b64      	ldr	r3, [pc, #400]	; (8007f34 <platform_start_yorker+0x280>)
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	bf14      	ite	ne
 8007daa:	2301      	movne	r3, #1
 8007dac:	2300      	moveq	r3, #0
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	f083 0301 	eor.w	r3, r3, #1
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	f003 0301 	and.w	r3, r3, #1
 8007dba:	b2da      	uxtb	r2, r3
 8007dbc:	4b5d      	ldr	r3, [pc, #372]	; (8007f34 <platform_start_yorker+0x280>)
 8007dbe:	701a      	strb	r2, [r3, #0]
		 pump2_state = !pump2_state;
 8007dc0:	4b5d      	ldr	r3, [pc, #372]	; (8007f38 <platform_start_yorker+0x284>)
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	bf14      	ite	ne
 8007dc8:	2301      	movne	r3, #1
 8007dca:	2300      	moveq	r3, #0
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	f083 0301 	eor.w	r3, r3, #1
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	f003 0301 	and.w	r3, r3, #1
 8007dd8:	b2da      	uxtb	r2, r3
 8007dda:	4b57      	ldr	r3, [pc, #348]	; (8007f38 <platform_start_yorker+0x284>)
 8007ddc:	701a      	strb	r2, [r3, #0]

		makeup_water_added = yorker_homescreen_settings.mkup_water_added_pulse_cnt;
 8007dde:	4b4d      	ldr	r3, [pc, #308]	; (8007f14 <platform_start_yorker+0x260>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a56      	ldr	r2, [pc, #344]	; (8007f3c <platform_start_yorker+0x288>)
 8007de4:	6013      	str	r3, [r2, #0]
		blowdown_water = yorker_homescreen_settings.blowdown_water_pulse_cnt;
 8007de6:	4b4b      	ldr	r3, [pc, #300]	; (8007f14 <platform_start_yorker+0x260>)
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	4a55      	ldr	r2, [pc, #340]	; (8007f40 <platform_start_yorker+0x28c>)
 8007dec:	6013      	str	r3, [r2, #0]

		 if(yorker_homescreen_settings.blowdown_water_pulse_cnt != makeup_water_added)
 8007dee:	4b49      	ldr	r3, [pc, #292]	; (8007f14 <platform_start_yorker+0x260>)
 8007df0:	685a      	ldr	r2, [r3, #4]
 8007df2:	4b52      	ldr	r3, [pc, #328]	; (8007f3c <platform_start_yorker+0x288>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d003      	beq.n	8007e02 <platform_start_yorker+0x14e>
		 {
			platform_timer_stop();
 8007dfa:	f000 ff4f 	bl	8008c9c <platform_timer_stop>
			//platform_flashcfg_set_homescreen_settings(&yorker_homescreen_settings);
			platform_timer_start();
 8007dfe:	f000 ff3f 	bl	8008c80 <platform_timer_start>
		 }

		 if(save_settings == 2)// don't remove this
 8007e02:	4b50      	ldr	r3, [pc, #320]	; (8007f44 <platform_start_yorker+0x290>)
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d109      	bne.n	8007e1e <platform_start_yorker+0x16a>
		 {
			platform_timer_stop();
 8007e0a:	f000 ff47 	bl	8008c9c <platform_timer_stop>
			platform_flashcfg_set_yorker_settings(&yorker_settings);
 8007e0e:	4840      	ldr	r0, [pc, #256]	; (8007f10 <platform_start_yorker+0x25c>)
 8007e10:	f000 fa62 	bl	80082d8 <platform_flashcfg_set_yorker_settings>
			platform_timer_start();
 8007e14:	f000 ff34 	bl	8008c80 <platform_timer_start>
			save_settings = 0;
 8007e18:	4b4a      	ldr	r3, [pc, #296]	; (8007f44 <platform_start_yorker+0x290>)
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	701a      	strb	r2, [r3, #0]
		 }
	     /* USER CODE BEGIN 3 */

		 platform_get_date_and_time(&cDate, &cTime);
 8007e1e:	494a      	ldr	r1, [pc, #296]	; (8007f48 <platform_start_yorker+0x294>)
 8007e20:	484a      	ldr	r0, [pc, #296]	; (8007f4c <platform_start_yorker+0x298>)
 8007e22:	f000 fdc7 	bl	80089b4 <platform_get_date_and_time>

		 if(ph_inlet_water > 140 || ph_plant_water > 140)
 8007e26:	4b3f      	ldr	r3, [pc, #252]	; (8007f24 <platform_start_yorker+0x270>)
 8007e28:	881b      	ldrh	r3, [r3, #0]
 8007e2a:	2b8c      	cmp	r3, #140	; 0x8c
 8007e2c:	d803      	bhi.n	8007e36 <platform_start_yorker+0x182>
 8007e2e:	4b3e      	ldr	r3, [pc, #248]	; (8007f28 <platform_start_yorker+0x274>)
 8007e30:	881b      	ldrh	r3, [r3, #0]
 8007e32:	2b8c      	cmp	r3, #140	; 0x8c
 8007e34:	d905      	bls.n	8007e42 <platform_start_yorker+0x18e>
		 {
			 ph_inlet_water = 0;
 8007e36:	4b3b      	ldr	r3, [pc, #236]	; (8007f24 <platform_start_yorker+0x270>)
 8007e38:	2200      	movs	r2, #0
 8007e3a:	801a      	strh	r2, [r3, #0]
			 ph_plant_water = 0;
 8007e3c:	4b3a      	ldr	r3, [pc, #232]	; (8007f28 <platform_start_yorker+0x274>)
 8007e3e:	2200      	movs	r2, #0
 8007e40:	801a      	strh	r2, [r3, #0]
		 }

		 if(cTime.Minutes != mins)
 8007e42:	4b41      	ldr	r3, [pc, #260]	; (8007f48 <platform_start_yorker+0x294>)
 8007e44:	785a      	ldrb	r2, [r3, #1]
 8007e46:	4b42      	ldr	r3, [pc, #264]	; (8007f50 <platform_start_yorker+0x29c>)
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	f43f af7b 	beq.w	8007d46 <platform_start_yorker+0x92>
		 {
			 mins = cTime.Minutes;
 8007e50:	4b3d      	ldr	r3, [pc, #244]	; (8007f48 <platform_start_yorker+0x294>)
 8007e52:	785a      	ldrb	r2, [r3, #1]
 8007e54:	4b3e      	ldr	r3, [pc, #248]	; (8007f50 <platform_start_yorker+0x29c>)
 8007e56:	701a      	strb	r2, [r3, #0]
			 wifi_cmd_len = sprintf(wifi_cmd, "waterQuality={\"WaterQualityDateTime\":\"20%02x-%02x-%02xT%02x:%02x:%02x\",\"MakeUpWater\":%d,\"BlowdownWater\":%d,\"pHInletWater\":%0.1f,\"pHPlantWater\":%0.1f,\"TDSInletWater\":%d,\"TDSPlantWater\":%d,\"DosingSystemID\":1003,\"WaterQualityChemicals\":[{\"ChemicalID\":3,\"Chemicalkgs\":1.1,\"PumpStatus\":true,\"TankStatus\":1},{\"ChemicalID\":4,\"Chemicalkgs\":0.6,\"PumpStatus\":true,\"TankStatus\":1}]}",cDate.Year,cDate.Month,cDate.Date,cTime.Hours,cTime.Minutes,cTime.Seconds,makeup_water_added,blowdown_water,(ph_inlet_water/10.0),(ph_plant_water/10.0),tds_inlet_water,tds_plant_water);
 8007e58:	4b3c      	ldr	r3, [pc, #240]	; (8007f4c <platform_start_yorker+0x298>)
 8007e5a:	78db      	ldrb	r3, [r3, #3]
 8007e5c:	4698      	mov	r8, r3
 8007e5e:	4b3b      	ldr	r3, [pc, #236]	; (8007f4c <platform_start_yorker+0x298>)
 8007e60:	785b      	ldrb	r3, [r3, #1]
 8007e62:	4699      	mov	r9, r3
 8007e64:	4b39      	ldr	r3, [pc, #228]	; (8007f4c <platform_start_yorker+0x298>)
 8007e66:	789b      	ldrb	r3, [r3, #2]
 8007e68:	617b      	str	r3, [r7, #20]
 8007e6a:	4b37      	ldr	r3, [pc, #220]	; (8007f48 <platform_start_yorker+0x294>)
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	613b      	str	r3, [r7, #16]
 8007e70:	4b35      	ldr	r3, [pc, #212]	; (8007f48 <platform_start_yorker+0x294>)
 8007e72:	785b      	ldrb	r3, [r3, #1]
 8007e74:	60fb      	str	r3, [r7, #12]
 8007e76:	4b34      	ldr	r3, [pc, #208]	; (8007f48 <platform_start_yorker+0x294>)
 8007e78:	789b      	ldrb	r3, [r3, #2]
 8007e7a:	60bb      	str	r3, [r7, #8]
 8007e7c:	4b2f      	ldr	r3, [pc, #188]	; (8007f3c <platform_start_yorker+0x288>)
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	607a      	str	r2, [r7, #4]
 8007e82:	4b2f      	ldr	r3, [pc, #188]	; (8007f40 <platform_start_yorker+0x28c>)
 8007e84:	6819      	ldr	r1, [r3, #0]
 8007e86:	6039      	str	r1, [r7, #0]
 8007e88:	4b26      	ldr	r3, [pc, #152]	; (8007f24 <platform_start_yorker+0x270>)
 8007e8a:	881b      	ldrh	r3, [r3, #0]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7f8 fb59 	bl	8000544 <__aeabi_i2d>
 8007e92:	f04f 0200 	mov.w	r2, #0
 8007e96:	4b2f      	ldr	r3, [pc, #188]	; (8007f54 <platform_start_yorker+0x2a0>)
 8007e98:	f7f8 fce8 	bl	800086c <__aeabi_ddiv>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	460c      	mov	r4, r1
 8007ea0:	461d      	mov	r5, r3
 8007ea2:	4626      	mov	r6, r4
 8007ea4:	4b20      	ldr	r3, [pc, #128]	; (8007f28 <platform_start_yorker+0x274>)
 8007ea6:	881b      	ldrh	r3, [r3, #0]
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7f8 fb4b 	bl	8000544 <__aeabi_i2d>
 8007eae:	f04f 0200 	mov.w	r2, #0
 8007eb2:	4b28      	ldr	r3, [pc, #160]	; (8007f54 <platform_start_yorker+0x2a0>)
 8007eb4:	f7f8 fcda 	bl	800086c <__aeabi_ddiv>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	460c      	mov	r4, r1
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	4622      	mov	r2, r4
 8007ec0:	4b1a      	ldr	r3, [pc, #104]	; (8007f2c <platform_start_yorker+0x278>)
 8007ec2:	881b      	ldrh	r3, [r3, #0]
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	4b1a      	ldr	r3, [pc, #104]	; (8007f30 <platform_start_yorker+0x27c>)
 8007ec8:	881b      	ldrh	r3, [r3, #0]
 8007eca:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ecc:	900a      	str	r0, [sp, #40]	; 0x28
 8007ece:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8007ed2:	e9cd 5606 	strd	r5, r6, [sp, #24]
 8007ed6:	6839      	ldr	r1, [r7, #0]
 8007ed8:	9105      	str	r1, [sp, #20]
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	9204      	str	r2, [sp, #16]
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	9203      	str	r2, [sp, #12]
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	9202      	str	r2, [sp, #8]
 8007ee6:	693a      	ldr	r2, [r7, #16]
 8007ee8:	9201      	str	r2, [sp, #4]
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	9300      	str	r3, [sp, #0]
 8007eee:	464b      	mov	r3, r9
 8007ef0:	4642      	mov	r2, r8
 8007ef2:	4919      	ldr	r1, [pc, #100]	; (8007f58 <platform_start_yorker+0x2a4>)
 8007ef4:	4819      	ldr	r0, [pc, #100]	; (8007f5c <platform_start_yorker+0x2a8>)
 8007ef6:	f001 fe6b 	bl	8009bd0 <siprintf>
 8007efa:	4602      	mov	r2, r0
 8007efc:	4b18      	ldr	r3, [pc, #96]	; (8007f60 <platform_start_yorker+0x2ac>)
 8007efe:	601a      	str	r2, [r3, #0]
			 wifi_send_cmd(wifi_cmd,wifi_cmd_len);
 8007f00:	4b17      	ldr	r3, [pc, #92]	; (8007f60 <platform_start_yorker+0x2ac>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4619      	mov	r1, r3
 8007f06:	4815      	ldr	r0, [pc, #84]	; (8007f5c <platform_start_yorker+0x2a8>)
 8007f08:	f000 ffa6 	bl	8008e58 <wifi_send_cmd>
		 HAL_Delay(1000);
 8007f0c:	e71b      	b.n	8007d46 <platform_start_yorker+0x92>
 8007f0e:	bf00      	nop
 8007f10:	2000024c 	.word	0x2000024c
 8007f14:	200008f0 	.word	0x200008f0
 8007f18:	40020000 	.word	0x40020000
 8007f1c:	20000238 	.word	0x20000238
 8007f20:	2000023c 	.word	0x2000023c
 8007f24:	20000240 	.word	0x20000240
 8007f28:	20000242 	.word	0x20000242
 8007f2c:	20000244 	.word	0x20000244
 8007f30:	20000246 	.word	0x20000246
 8007f34:	20000248 	.word	0x20000248
 8007f38:	20000010 	.word	0x20000010
 8007f3c:	20000230 	.word	0x20000230
 8007f40:	20000234 	.word	0x20000234
 8007f44:	200002a0 	.word	0x200002a0
 8007f48:	200002a4 	.word	0x200002a4
 8007f4c:	200002b8 	.word	0x200002b8
 8007f50:	200002bc 	.word	0x200002bc
 8007f54:	40240000 	.word	0x40240000
 8007f58:	0800d0a8 	.word	0x0800d0a8
 8007f5c:	200002c0 	.word	0x200002c0
 8007f60:	200006c0 	.word	0x200006c0

08007f64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007f68:	4b1b      	ldr	r3, [pc, #108]	; (8007fd8 <MX_I2C1_Init+0x74>)
 8007f6a:	4a1c      	ldr	r2, [pc, #112]	; (8007fdc <MX_I2C1_Init+0x78>)
 8007f6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8007f6e:	4b1a      	ldr	r3, [pc, #104]	; (8007fd8 <MX_I2C1_Init+0x74>)
 8007f70:	4a1b      	ldr	r2, [pc, #108]	; (8007fe0 <MX_I2C1_Init+0x7c>)
 8007f72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007f74:	4b18      	ldr	r3, [pc, #96]	; (8007fd8 <MX_I2C1_Init+0x74>)
 8007f76:	2200      	movs	r2, #0
 8007f78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007f7a:	4b17      	ldr	r3, [pc, #92]	; (8007fd8 <MX_I2C1_Init+0x74>)
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007f80:	4b15      	ldr	r3, [pc, #84]	; (8007fd8 <MX_I2C1_Init+0x74>)
 8007f82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007f86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007f88:	4b13      	ldr	r3, [pc, #76]	; (8007fd8 <MX_I2C1_Init+0x74>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007f8e:	4b12      	ldr	r3, [pc, #72]	; (8007fd8 <MX_I2C1_Init+0x74>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007f94:	4b10      	ldr	r3, [pc, #64]	; (8007fd8 <MX_I2C1_Init+0x74>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007f9a:	4b0f      	ldr	r3, [pc, #60]	; (8007fd8 <MX_I2C1_Init+0x74>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007fa0:	480d      	ldr	r0, [pc, #52]	; (8007fd8 <MX_I2C1_Init+0x74>)
 8007fa2:	f7fa fb81 	bl	80026a8 <HAL_I2C_Init>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d001      	beq.n	8007fb0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007fac:	f000 f81a 	bl	8007fe4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	4809      	ldr	r0, [pc, #36]	; (8007fd8 <MX_I2C1_Init+0x74>)
 8007fb4:	f7fa fcb0 	bl	8002918 <HAL_I2CEx_ConfigAnalogFilter>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d001      	beq.n	8007fc2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8007fbe:	f000 f811 	bl	8007fe4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	4804      	ldr	r0, [pc, #16]	; (8007fd8 <MX_I2C1_Init+0x74>)
 8007fc6:	f7fa fce3 	bl	8002990 <HAL_I2CEx_ConfigDigitalFilter>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d001      	beq.n	8007fd4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8007fd0:	f000 f808 	bl	8007fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007fd4:	bf00      	nop
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	20000890 	.word	0x20000890
 8007fdc:	40005400 	.word	0x40005400
 8007fe0:	000186a0 	.word	0x000186a0

08007fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007fe8:	bf00      	nop
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
	...

08007ff4 <__MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void __MX_ADC1_Init(void)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007ffa:	463b      	mov	r3, r7
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	601a      	str	r2, [r3, #0]
 8008000:	605a      	str	r2, [r3, #4]
 8008002:	609a      	str	r2, [r3, #8]
 8008004:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8008006:	4b21      	ldr	r3, [pc, #132]	; (800808c <__MX_ADC1_Init+0x98>)
 8008008:	4a21      	ldr	r2, [pc, #132]	; (8008090 <__MX_ADC1_Init+0x9c>)
 800800a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800800c:	4b1f      	ldr	r3, [pc, #124]	; (800808c <__MX_ADC1_Init+0x98>)
 800800e:	2200      	movs	r2, #0
 8008010:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008012:	4b1e      	ldr	r3, [pc, #120]	; (800808c <__MX_ADC1_Init+0x98>)
 8008014:	2200      	movs	r2, #0
 8008016:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8008018:	4b1c      	ldr	r3, [pc, #112]	; (800808c <__MX_ADC1_Init+0x98>)
 800801a:	2200      	movs	r2, #0
 800801c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800801e:	4b1b      	ldr	r3, [pc, #108]	; (800808c <__MX_ADC1_Init+0x98>)
 8008020:	2200      	movs	r2, #0
 8008022:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008024:	4b19      	ldr	r3, [pc, #100]	; (800808c <__MX_ADC1_Init+0x98>)
 8008026:	2200      	movs	r2, #0
 8008028:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800802c:	4b17      	ldr	r3, [pc, #92]	; (800808c <__MX_ADC1_Init+0x98>)
 800802e:	2200      	movs	r2, #0
 8008030:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008032:	4b16      	ldr	r3, [pc, #88]	; (800808c <__MX_ADC1_Init+0x98>)
 8008034:	4a17      	ldr	r2, [pc, #92]	; (8008094 <__MX_ADC1_Init+0xa0>)
 8008036:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008038:	4b14      	ldr	r3, [pc, #80]	; (800808c <__MX_ADC1_Init+0x98>)
 800803a:	2200      	movs	r2, #0
 800803c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800803e:	4b13      	ldr	r3, [pc, #76]	; (800808c <__MX_ADC1_Init+0x98>)
 8008040:	2201      	movs	r2, #1
 8008042:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8008044:	4b11      	ldr	r3, [pc, #68]	; (800808c <__MX_ADC1_Init+0x98>)
 8008046:	2200      	movs	r2, #0
 8008048:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800804c:	4b0f      	ldr	r3, [pc, #60]	; (800808c <__MX_ADC1_Init+0x98>)
 800804e:	2201      	movs	r2, #1
 8008050:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008052:	480e      	ldr	r0, [pc, #56]	; (800808c <__MX_ADC1_Init+0x98>)
 8008054:	f7f9 fb94 	bl	8001780 <HAL_ADC_Init>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d001      	beq.n	8008062 <__MX_ADC1_Init+0x6e>
  {
	  Error_Handler();
 800805e:	f7ff ffc1 	bl	8007fe4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8008062:	230a      	movs	r3, #10
 8008064:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8008066:	2301      	movs	r3, #1
 8008068:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800806a:	2300      	movs	r3, #0
 800806c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800806e:	463b      	mov	r3, r7
 8008070:	4619      	mov	r1, r3
 8008072:	4806      	ldr	r0, [pc, #24]	; (800808c <__MX_ADC1_Init+0x98>)
 8008074:	f7f9 fbc8 	bl	8001808 <HAL_ADC_ConfigChannel>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d001      	beq.n	8008082 <__MX_ADC1_Init+0x8e>
  {
	  Error_Handler();
 800807e:	f7ff ffb1 	bl	8007fe4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008082:	bf00      	nop
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	20000948 	.word	0x20000948
 8008090:	40012000 	.word	0x40012000
 8008094:	0f000001 	.word	0x0f000001

08008098 <__MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
void __MX_ADC2_Init(void)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800809e:	463b      	mov	r3, r7
 80080a0:	2200      	movs	r2, #0
 80080a2:	601a      	str	r2, [r3, #0]
 80080a4:	605a      	str	r2, [r3, #4]
 80080a6:	609a      	str	r2, [r3, #8]
 80080a8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80080aa:	4b21      	ldr	r3, [pc, #132]	; (8008130 <__MX_ADC2_Init+0x98>)
 80080ac:	4a21      	ldr	r2, [pc, #132]	; (8008134 <__MX_ADC2_Init+0x9c>)
 80080ae:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80080b0:	4b1f      	ldr	r3, [pc, #124]	; (8008130 <__MX_ADC2_Init+0x98>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80080b6:	4b1e      	ldr	r3, [pc, #120]	; (8008130 <__MX_ADC2_Init+0x98>)
 80080b8:	2200      	movs	r2, #0
 80080ba:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80080bc:	4b1c      	ldr	r3, [pc, #112]	; (8008130 <__MX_ADC2_Init+0x98>)
 80080be:	2200      	movs	r2, #0
 80080c0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80080c2:	4b1b      	ldr	r3, [pc, #108]	; (8008130 <__MX_ADC2_Init+0x98>)
 80080c4:	2200      	movs	r2, #0
 80080c6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80080c8:	4b19      	ldr	r3, [pc, #100]	; (8008130 <__MX_ADC2_Init+0x98>)
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80080d0:	4b17      	ldr	r3, [pc, #92]	; (8008130 <__MX_ADC2_Init+0x98>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80080d6:	4b16      	ldr	r3, [pc, #88]	; (8008130 <__MX_ADC2_Init+0x98>)
 80080d8:	4a17      	ldr	r2, [pc, #92]	; (8008138 <__MX_ADC2_Init+0xa0>)
 80080da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80080dc:	4b14      	ldr	r3, [pc, #80]	; (8008130 <__MX_ADC2_Init+0x98>)
 80080de:	2200      	movs	r2, #0
 80080e0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80080e2:	4b13      	ldr	r3, [pc, #76]	; (8008130 <__MX_ADC2_Init+0x98>)
 80080e4:	2201      	movs	r2, #1
 80080e6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80080e8:	4b11      	ldr	r3, [pc, #68]	; (8008130 <__MX_ADC2_Init+0x98>)
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80080f0:	4b0f      	ldr	r3, [pc, #60]	; (8008130 <__MX_ADC2_Init+0x98>)
 80080f2:	2201      	movs	r2, #1
 80080f4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80080f6:	480e      	ldr	r0, [pc, #56]	; (8008130 <__MX_ADC2_Init+0x98>)
 80080f8:	f7f9 fb42 	bl	8001780 <HAL_ADC_Init>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d001      	beq.n	8008106 <__MX_ADC2_Init+0x6e>
  {
	  Error_Handler();
 8008102:	f7ff ff6f 	bl	8007fe4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8008106:	230b      	movs	r3, #11
 8008108:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800810a:	2301      	movs	r3, #1
 800810c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800810e:	2300      	movs	r3, #0
 8008110:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008112:	463b      	mov	r3, r7
 8008114:	4619      	mov	r1, r3
 8008116:	4806      	ldr	r0, [pc, #24]	; (8008130 <__MX_ADC2_Init+0x98>)
 8008118:	f7f9 fb76 	bl	8001808 <HAL_ADC_ConfigChannel>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d001      	beq.n	8008126 <__MX_ADC2_Init+0x8e>
  {
	  Error_Handler();
 8008122:	f7ff ff5f 	bl	8007fe4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8008126:	bf00      	nop
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	20000900 	.word	0x20000900
 8008134:	40012100 	.word	0x40012100
 8008138:	0f000001 	.word	0x0f000001

0800813c <__MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
void __MX_ADC3_Init(void)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008142:	463b      	mov	r3, r7
 8008144:	2200      	movs	r2, #0
 8008146:	601a      	str	r2, [r3, #0]
 8008148:	605a      	str	r2, [r3, #4]
 800814a:	609a      	str	r2, [r3, #8]
 800814c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800814e:	4b21      	ldr	r3, [pc, #132]	; (80081d4 <__MX_ADC3_Init+0x98>)
 8008150:	4a21      	ldr	r2, [pc, #132]	; (80081d8 <__MX_ADC3_Init+0x9c>)
 8008152:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8008154:	4b1f      	ldr	r3, [pc, #124]	; (80081d4 <__MX_ADC3_Init+0x98>)
 8008156:	2200      	movs	r2, #0
 8008158:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800815a:	4b1e      	ldr	r3, [pc, #120]	; (80081d4 <__MX_ADC3_Init+0x98>)
 800815c:	2200      	movs	r2, #0
 800815e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8008160:	4b1c      	ldr	r3, [pc, #112]	; (80081d4 <__MX_ADC3_Init+0x98>)
 8008162:	2200      	movs	r2, #0
 8008164:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8008166:	4b1b      	ldr	r3, [pc, #108]	; (80081d4 <__MX_ADC3_Init+0x98>)
 8008168:	2200      	movs	r2, #0
 800816a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800816c:	4b19      	ldr	r3, [pc, #100]	; (80081d4 <__MX_ADC3_Init+0x98>)
 800816e:	2200      	movs	r2, #0
 8008170:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008174:	4b17      	ldr	r3, [pc, #92]	; (80081d4 <__MX_ADC3_Init+0x98>)
 8008176:	2200      	movs	r2, #0
 8008178:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800817a:	4b16      	ldr	r3, [pc, #88]	; (80081d4 <__MX_ADC3_Init+0x98>)
 800817c:	4a17      	ldr	r2, [pc, #92]	; (80081dc <__MX_ADC3_Init+0xa0>)
 800817e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008180:	4b14      	ldr	r3, [pc, #80]	; (80081d4 <__MX_ADC3_Init+0x98>)
 8008182:	2200      	movs	r2, #0
 8008184:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8008186:	4b13      	ldr	r3, [pc, #76]	; (80081d4 <__MX_ADC3_Init+0x98>)
 8008188:	2201      	movs	r2, #1
 800818a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800818c:	4b11      	ldr	r3, [pc, #68]	; (80081d4 <__MX_ADC3_Init+0x98>)
 800818e:	2200      	movs	r2, #0
 8008190:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008194:	4b0f      	ldr	r3, [pc, #60]	; (80081d4 <__MX_ADC3_Init+0x98>)
 8008196:	2201      	movs	r2, #1
 8008198:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800819a:	480e      	ldr	r0, [pc, #56]	; (80081d4 <__MX_ADC3_Init+0x98>)
 800819c:	f7f9 faf0 	bl	8001780 <HAL_ADC_Init>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d001      	beq.n	80081aa <__MX_ADC3_Init+0x6e>
  {
	  Error_Handler();
 80081a6:	f7ff ff1d 	bl	8007fe4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80081aa:	230c      	movs	r3, #12
 80081ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80081ae:	2301      	movs	r3, #1
 80081b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80081b2:	2300      	movs	r3, #0
 80081b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80081b6:	463b      	mov	r3, r7
 80081b8:	4619      	mov	r1, r3
 80081ba:	4806      	ldr	r0, [pc, #24]	; (80081d4 <__MX_ADC3_Init+0x98>)
 80081bc:	f7f9 fb24 	bl	8001808 <HAL_ADC_ConfigChannel>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d001      	beq.n	80081ca <__MX_ADC3_Init+0x8e>
  {
	  Error_Handler();
 80081c6:	f7ff ff0d 	bl	8007fe4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80081ca:	bf00      	nop
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	20000990 	.word	0x20000990
 80081d8:	40012200 	.word	0x40012200
 80081dc:	0f000001 	.word	0x0f000001

080081e0 <platform_adc_init>:
/*******************************************************************************
 *  PUBLIC
 ******************************************************************************/

void platform_adc_init()
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	af00      	add	r7, sp, #0
	__MX_ADC1_Init();
 80081e4:	f7ff ff06 	bl	8007ff4 <__MX_ADC1_Init>
	__MX_ADC2_Init();
 80081e8:	f7ff ff56 	bl	8008098 <__MX_ADC2_Init>
	__MX_ADC3_Init();
 80081ec:	f7ff ffa6 	bl	800813c <__MX_ADC3_Init>
}
 80081f0:	bf00      	nop
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <platform_display_init>:
/*******************************************************************************
 *  PUBLIC
 ******************************************************************************/

void platform_display_init()
{
 80081f4:	b480      	push	{r7}
 80081f6:	af00      	add	r7, sp, #0
	DisplayActions = display_screens;
 80081f8:	4b03      	ldr	r3, [pc, #12]	; (8008208 <platform_display_init+0x14>)
 80081fa:	4a04      	ldr	r2, [pc, #16]	; (800820c <platform_display_init+0x18>)
 80081fc:	601a      	str	r2, [r3, #0]
}
 80081fe:	bf00      	nop
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr
 8008208:	200006d4 	.word	0x200006d4
 800820c:	08004e59 	.word	0x08004e59

08008210 <__FLASH_Program_Word>:

/*******************************************************************************
 *  PRIVATE
 ******************************************************************************/

void __FLASH_Program_Word(uint32_t Address, uint32_t Data){
 8008210:	b590      	push	{r4, r7, lr}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, Data);
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	f04f 0400 	mov.w	r4, #0
 8008220:	461a      	mov	r2, r3
 8008222:	4623      	mov	r3, r4
 8008224:	6879      	ldr	r1, [r7, #4]
 8008226:	2002      	movs	r0, #2
 8008228:	f7f9 fe50 	bl	8001ecc <HAL_FLASH_Program>
}
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	bd90      	pop	{r4, r7, pc}

08008234 <__FLASH_READ>:

uint32_t __FLASH_READ(uint32_t Flash_address){
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
	uint32_t Flash_data;

	Flash_data = *(uint32_t*) Flash_address;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	60fb      	str	r3, [r7, #12]

	return Flash_data;
 8008242:	68fb      	ldr	r3, [r7, #12]

}
 8008244:	4618      	mov	r0, r3
 8008246:	3714      	adds	r7, #20
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <platform_flashcfg_init>:

/*******************************************************************************
 *  PRIVATE
 ******************************************************************************/
void platform_flashcfg_init(homescreen_settings *flashcfg_yorker_homescreen_settings, settings *flashcfg_yorker_settings)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
//	uint32_t *check_flash_init;
//	*check_flash_init = __FLASH_READ(FLASHCFG_INIT_ADDRESS);
//
//	if(check_flash_init != 2873)
//	{
		flashcfg_yorker_homescreen_settings->mkup_water_added_pulse_cnt = 0;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	601a      	str	r2, [r3, #0]
		flashcfg_yorker_homescreen_settings->blowdown_water_pulse_cnt = 0;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	605a      	str	r2, [r3, #4]
		flashcfg_yorker_homescreen_settings->chemical_1 = 0;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	609a      	str	r2, [r3, #8]
		flashcfg_yorker_homescreen_settings->chemical_2 = 0;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	60da      	str	r2, [r3, #12]
//		check_flash_init = 2873;
//		__flashcfg_init(check_flash_init);
//	}
//	else
//	{
		platform_flashcfg_get_homescreen_settings(flashcfg_yorker_homescreen_settings);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f808 	bl	8008288 <platform_flashcfg_get_homescreen_settings>
		platform_flashcfg_get_yorker_settings(flashcfg_yorker_settings);
 8008278:	6838      	ldr	r0, [r7, #0]
 800827a:	f000 f8e9 	bl	8008450 <platform_flashcfg_get_yorker_settings>
//	}
}
 800827e:	bf00      	nop
 8008280:	3708      	adds	r7, #8
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
	...

08008288 <platform_flashcfg_get_homescreen_settings>:

	HAL_FLASH_Lock();
}

void platform_flashcfg_get_homescreen_settings(homescreen_settings *flash_yorker_homescreen_settings)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
	flash_yorker_homescreen_settings->mkup_water_added_pulse_cnt = __FLASH_READ(MKUP_WATER_ADDED_PULSE_CNT_ADDRESS);
 8008290:	480d      	ldr	r0, [pc, #52]	; (80082c8 <platform_flashcfg_get_homescreen_settings+0x40>)
 8008292:	f7ff ffcf 	bl	8008234 <__FLASH_READ>
 8008296:	4602      	mov	r2, r0
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	601a      	str	r2, [r3, #0]
	flash_yorker_homescreen_settings->blowdown_water_pulse_cnt = __FLASH_READ(BLOWDOWN_WATER_PULSE_CNT_ADDRESS);
 800829c:	480b      	ldr	r0, [pc, #44]	; (80082cc <platform_flashcfg_get_homescreen_settings+0x44>)
 800829e:	f7ff ffc9 	bl	8008234 <__FLASH_READ>
 80082a2:	4602      	mov	r2, r0
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	605a      	str	r2, [r3, #4]
	flash_yorker_homescreen_settings->chemical_1 = __FLASH_READ(CHEMICAL_1_ADDRESS);
 80082a8:	4809      	ldr	r0, [pc, #36]	; (80082d0 <platform_flashcfg_get_homescreen_settings+0x48>)
 80082aa:	f7ff ffc3 	bl	8008234 <__FLASH_READ>
 80082ae:	4602      	mov	r2, r0
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	609a      	str	r2, [r3, #8]
	flash_yorker_homescreen_settings->chemical_2 = __FLASH_READ(CHEMICAL_2_ADDRESS);
 80082b4:	4807      	ldr	r0, [pc, #28]	; (80082d4 <platform_flashcfg_get_homescreen_settings+0x4c>)
 80082b6:	f7ff ffbd 	bl	8008234 <__FLASH_READ>
 80082ba:	4602      	mov	r2, r0
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	60da      	str	r2, [r3, #12]
}
 80082c0:	bf00      	nop
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	081b0000 	.word	0x081b0000
 80082cc:	081b0020 	.word	0x081b0020
 80082d0:	081b0040 	.word	0x081b0040
 80082d4:	081b0060 	.word	0x081b0060

080082d8 <platform_flashcfg_set_yorker_settings>:

void platform_flashcfg_set_yorker_settings(settings *flash_yorker_settings)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 80082e0:	f7f9 fe48 	bl	8001f74 <HAL_FLASH_Unlock>

	FLASH_Erase_Sector(FLASH_SECTOR_23,FLASH_VOLTAGE_RANGE_3);
 80082e4:	2102      	movs	r1, #2
 80082e6:	2017      	movs	r0, #23
 80082e8:	f7f9 ffb4 	bl	8002254 <FLASH_Erase_Sector>

	__FLASH_Program_Word(OFFSET_MKUP_WATER_ADDRESS, flash_yorker_settings->offset_mkupwater);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4619      	mov	r1, r3
 80082f2:	4842      	ldr	r0, [pc, #264]	; (80083fc <platform_flashcfg_set_yorker_settings+0x124>)
 80082f4:	f7ff ff8c 	bl	8008210 <__FLASH_Program_Word>
	__FLASH_Program_Word(OFFSET_BLOWDOWN_ADDRESS, flash_yorker_settings->offset_blowdown);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	4619      	mov	r1, r3
 80082fe:	4840      	ldr	r0, [pc, #256]	; (8008400 <platform_flashcfg_set_yorker_settings+0x128>)
 8008300:	f7ff ff86 	bl	8008210 <__FLASH_Program_Word>
	__FLASH_Program_Word(PUMP1_LTS_PER_PULSE_ADDRESS, flash_yorker_settings->pump1_lts_per_pulse);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	4619      	mov	r1, r3
 800830a:	483e      	ldr	r0, [pc, #248]	; (8008404 <platform_flashcfg_set_yorker_settings+0x12c>)
 800830c:	f7ff ff80 	bl	8008210 <__FLASH_Program_Word>
	__FLASH_Program_Word(PUMP2_LTS_PER_PULSE_ADDRESS, flash_yorker_settings->pump2_lts_per_pulse);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	4619      	mov	r1, r3
 8008316:	483c      	ldr	r0, [pc, #240]	; (8008408 <platform_flashcfg_set_yorker_settings+0x130>)
 8008318:	f7ff ff7a 	bl	8008210 <__FLASH_Program_Word>
	__FLASH_Program_Word(RATIO_1_ADDRESS, flash_yorker_settings->ratio_1);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	4619      	mov	r1, r3
 8008322:	483a      	ldr	r0, [pc, #232]	; (800840c <platform_flashcfg_set_yorker_settings+0x134>)
 8008324:	f7ff ff74 	bl	8008210 <__FLASH_Program_Word>
	__FLASH_Program_Word(RATIO_2_ADDRESS, flash_yorker_settings->ratio_2);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	695b      	ldr	r3, [r3, #20]
 800832c:	4619      	mov	r1, r3
 800832e:	4838      	ldr	r0, [pc, #224]	; (8008410 <platform_flashcfg_set_yorker_settings+0x138>)
 8008330:	f7ff ff6e 	bl	8008210 <__FLASH_Program_Word>
	__FLASH_Program_Word(AUTO_BLOWDOWN_ADDRESS, flash_yorker_settings->auto_blowdown);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	7e1b      	ldrb	r3, [r3, #24]
 8008338:	4619      	mov	r1, r3
 800833a:	4836      	ldr	r0, [pc, #216]	; (8008414 <platform_flashcfg_set_yorker_settings+0x13c>)
 800833c:	f7ff ff68 	bl	8008210 <__FLASH_Program_Word>
	__FLASH_Program_Word(SET_BLOWDOWN_TDS_ADDRESS, flash_yorker_settings->set_blowdown_tds);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	69db      	ldr	r3, [r3, #28]
 8008344:	4619      	mov	r1, r3
 8008346:	4834      	ldr	r0, [pc, #208]	; (8008418 <platform_flashcfg_set_yorker_settings+0x140>)
 8008348:	f7ff ff62 	bl	8008210 <__FLASH_Program_Word>
	__FLASH_Program_Word(SET_COOL_OFF_TIME_ADDRESS, flash_yorker_settings->set_cool_off_time);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a1b      	ldr	r3, [r3, #32]
 8008350:	4619      	mov	r1, r3
 8008352:	4832      	ldr	r0, [pc, #200]	; (800841c <platform_flashcfg_set_yorker_settings+0x144>)
 8008354:	f7ff ff5c 	bl	8008210 <__FLASH_Program_Word>
	__FLASH_Program_Word(SET_BLOWDOWN_IN_M3_ADDRESS, flash_yorker_settings->set_blowdown_in_m3);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835c:	4619      	mov	r1, r3
 800835e:	4830      	ldr	r0, [pc, #192]	; (8008420 <platform_flashcfg_set_yorker_settings+0x148>)
 8008360:	f7ff ff56 	bl	8008210 <__FLASH_Program_Word>
	__FLASH_Program_Word(SET_INLET_WATER_PH_MIN_ADDRESS, flash_yorker_settings->set_inlet_water_ph_min);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008368:	4619      	mov	r1, r3
 800836a:	482e      	ldr	r0, [pc, #184]	; (8008424 <platform_flashcfg_set_yorker_settings+0x14c>)
 800836c:	f7ff ff50 	bl	8008210 <__FLASH_Program_Word>
	__FLASH_Program_Word(SET_INLET_WATER_PH_MAX_ADDRESS, flash_yorker_settings->set_inlet_water_ph_max);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008374:	4619      	mov	r1, r3
 8008376:	482c      	ldr	r0, [pc, #176]	; (8008428 <platform_flashcfg_set_yorker_settings+0x150>)
 8008378:	f7ff ff4a 	bl	8008210 <__FLASH_Program_Word>
	__FLASH_Program_Word(SET_INLET_WATER_TDS_MIN_ADDRESS, flash_yorker_settings->set_inlet_water_tds_min);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008380:	4619      	mov	r1, r3
 8008382:	482a      	ldr	r0, [pc, #168]	; (800842c <platform_flashcfg_set_yorker_settings+0x154>)
 8008384:	f7ff ff44 	bl	8008210 <__FLASH_Program_Word>
	__FLASH_Program_Word(SET_INLET_WATER_TDS_MAX_ADDRESS, flash_yorker_settings->set_inlet_water_tds_max);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800838c:	4619      	mov	r1, r3
 800838e:	4828      	ldr	r0, [pc, #160]	; (8008430 <platform_flashcfg_set_yorker_settings+0x158>)
 8008390:	f7ff ff3e 	bl	8008210 <__FLASH_Program_Word>
	__FLASH_Program_Word(SET_OUTLET_WATER_PH_MIN_ADDRESS, flash_yorker_settings->set_outlet_water_ph_min);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008398:	4619      	mov	r1, r3
 800839a:	4826      	ldr	r0, [pc, #152]	; (8008434 <platform_flashcfg_set_yorker_settings+0x15c>)
 800839c:	f7ff ff38 	bl	8008210 <__FLASH_Program_Word>
	__FLASH_Program_Word(SET_OUTLET_WATER_PH_MAX_ADDRESS, flash_yorker_settings->set_outlet_water_ph_max);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a4:	4619      	mov	r1, r3
 80083a6:	4824      	ldr	r0, [pc, #144]	; (8008438 <platform_flashcfg_set_yorker_settings+0x160>)
 80083a8:	f7ff ff32 	bl	8008210 <__FLASH_Program_Word>
	__FLASH_Program_Word(SET_OUTLET_WATER_TDS_MIN_ADDRESS, flash_yorker_settings->set_outlet_water_tds_min);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b0:	4619      	mov	r1, r3
 80083b2:	4822      	ldr	r0, [pc, #136]	; (800843c <platform_flashcfg_set_yorker_settings+0x164>)
 80083b4:	f7ff ff2c 	bl	8008210 <__FLASH_Program_Word>
	__FLASH_Program_Word(SET_OUTLET_WATER_TDS_MAX_ADDRESS, flash_yorker_settings->set_outlet_water_tds_max);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083bc:	4619      	mov	r1, r3
 80083be:	4820      	ldr	r0, [pc, #128]	; (8008440 <platform_flashcfg_set_yorker_settings+0x168>)
 80083c0:	f7ff ff26 	bl	8008210 <__FLASH_Program_Word>
	__FLASH_Program_Word(PUMP1_CAPACITY_ADDRESS, flash_yorker_settings->pump1_capacity);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083c8:	4619      	mov	r1, r3
 80083ca:	481e      	ldr	r0, [pc, #120]	; (8008444 <platform_flashcfg_set_yorker_settings+0x16c>)
 80083cc:	f7ff ff20 	bl	8008210 <__FLASH_Program_Word>
	__FLASH_Program_Word(PUMP2_CAPACITY_ADDRESS, flash_yorker_settings->pump2_capacity);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083d4:	4619      	mov	r1, r3
 80083d6:	481c      	ldr	r0, [pc, #112]	; (8008448 <platform_flashcfg_set_yorker_settings+0x170>)
 80083d8:	f7ff ff1a 	bl	8008210 <__FLASH_Program_Word>
	__FLASH_Program_Word(PROCESSING_RATE_ADDRESS, flash_yorker_settings->processing_rate);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083e0:	4619      	mov	r1, r3
 80083e2:	481a      	ldr	r0, [pc, #104]	; (800844c <platform_flashcfg_set_yorker_settings+0x174>)
 80083e4:	f7ff ff14 	bl	8008210 <__FLASH_Program_Word>

	HAL_Delay(2);
 80083e8:	2002      	movs	r0, #2
 80083ea:	f7f9 f9a7 	bl	800173c <HAL_Delay>

	HAL_FLASH_Lock();
 80083ee:	f7f9 fde3 	bl	8001fb8 <HAL_FLASH_Lock>
}
 80083f2:	bf00      	nop
 80083f4:	3708      	adds	r7, #8
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	081e0000 	.word	0x081e0000
 8008400:	081e0008 	.word	0x081e0008
 8008404:	081e0024 	.word	0x081e0024
 8008408:	081e0040 	.word	0x081e0040
 800840c:	081e0048 	.word	0x081e0048
 8008410:	081e0064 	.word	0x081e0064
 8008414:	081e0080 	.word	0x081e0080
 8008418:	081e0088 	.word	0x081e0088
 800841c:	081e0104 	.word	0x081e0104
 8008420:	081e0120 	.word	0x081e0120
 8008424:	081e0128 	.word	0x081e0128
 8008428:	081e0144 	.word	0x081e0144
 800842c:	081e0160 	.word	0x081e0160
 8008430:	081e0168 	.word	0x081e0168
 8008434:	081e0184 	.word	0x081e0184
 8008438:	081e0200 	.word	0x081e0200
 800843c:	081e0208 	.word	0x081e0208
 8008440:	081e0224 	.word	0x081e0224
 8008444:	081e0240 	.word	0x081e0240
 8008448:	081e0248 	.word	0x081e0248
 800844c:	081e0264 	.word	0x081e0264

08008450 <platform_flashcfg_get_yorker_settings>:

void platform_flashcfg_get_yorker_settings(settings *flash_yorker_settings)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
	flash_yorker_settings->offset_mkupwater = __FLASH_READ(OFFSET_MKUP_WATER_ADDRESS);
 8008458:	484b      	ldr	r0, [pc, #300]	; (8008588 <platform_flashcfg_get_yorker_settings+0x138>)
 800845a:	f7ff feeb 	bl	8008234 <__FLASH_READ>
 800845e:	4603      	mov	r3, r0
 8008460:	461a      	mov	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	601a      	str	r2, [r3, #0]
	flash_yorker_settings->offset_blowdown = __FLASH_READ(OFFSET_BLOWDOWN_ADDRESS);
 8008466:	4849      	ldr	r0, [pc, #292]	; (800858c <platform_flashcfg_get_yorker_settings+0x13c>)
 8008468:	f7ff fee4 	bl	8008234 <__FLASH_READ>
 800846c:	4603      	mov	r3, r0
 800846e:	461a      	mov	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	605a      	str	r2, [r3, #4]
	flash_yorker_settings->pump1_lts_per_pulse = __FLASH_READ(PUMP1_LTS_PER_PULSE_ADDRESS);
 8008474:	4846      	ldr	r0, [pc, #280]	; (8008590 <platform_flashcfg_get_yorker_settings+0x140>)
 8008476:	f7ff fedd 	bl	8008234 <__FLASH_READ>
 800847a:	4603      	mov	r3, r0
 800847c:	461a      	mov	r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	609a      	str	r2, [r3, #8]
	flash_yorker_settings->pump2_lts_per_pulse = __FLASH_READ(PUMP2_LTS_PER_PULSE_ADDRESS);
 8008482:	4844      	ldr	r0, [pc, #272]	; (8008594 <platform_flashcfg_get_yorker_settings+0x144>)
 8008484:	f7ff fed6 	bl	8008234 <__FLASH_READ>
 8008488:	4603      	mov	r3, r0
 800848a:	461a      	mov	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	60da      	str	r2, [r3, #12]
	flash_yorker_settings->ratio_1 = __FLASH_READ(RATIO_1_ADDRESS);
 8008490:	4841      	ldr	r0, [pc, #260]	; (8008598 <platform_flashcfg_get_yorker_settings+0x148>)
 8008492:	f7ff fecf 	bl	8008234 <__FLASH_READ>
 8008496:	4603      	mov	r3, r0
 8008498:	461a      	mov	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	611a      	str	r2, [r3, #16]
	flash_yorker_settings->ratio_2 = __FLASH_READ(RATIO_2_ADDRESS);
 800849e:	483f      	ldr	r0, [pc, #252]	; (800859c <platform_flashcfg_get_yorker_settings+0x14c>)
 80084a0:	f7ff fec8 	bl	8008234 <__FLASH_READ>
 80084a4:	4603      	mov	r3, r0
 80084a6:	461a      	mov	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	615a      	str	r2, [r3, #20]
	flash_yorker_settings->auto_blowdown = __FLASH_READ(AUTO_BLOWDOWN_ADDRESS);
 80084ac:	483c      	ldr	r0, [pc, #240]	; (80085a0 <platform_flashcfg_get_yorker_settings+0x150>)
 80084ae:	f7ff fec1 	bl	8008234 <__FLASH_READ>
 80084b2:	4603      	mov	r3, r0
 80084b4:	b2da      	uxtb	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	761a      	strb	r2, [r3, #24]
	flash_yorker_settings->set_blowdown_tds = __FLASH_READ(SET_BLOWDOWN_TDS_ADDRESS);
 80084ba:	483a      	ldr	r0, [pc, #232]	; (80085a4 <platform_flashcfg_get_yorker_settings+0x154>)
 80084bc:	f7ff feba 	bl	8008234 <__FLASH_READ>
 80084c0:	4603      	mov	r3, r0
 80084c2:	461a      	mov	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	61da      	str	r2, [r3, #28]
	flash_yorker_settings->set_cool_off_time = __FLASH_READ(SET_COOL_OFF_TIME_ADDRESS);
 80084c8:	4837      	ldr	r0, [pc, #220]	; (80085a8 <platform_flashcfg_get_yorker_settings+0x158>)
 80084ca:	f7ff feb3 	bl	8008234 <__FLASH_READ>
 80084ce:	4603      	mov	r3, r0
 80084d0:	461a      	mov	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	621a      	str	r2, [r3, #32]
	flash_yorker_settings->set_blowdown_in_m3 = __FLASH_READ(SET_BLOWDOWN_IN_M3_ADDRESS);
 80084d6:	4835      	ldr	r0, [pc, #212]	; (80085ac <platform_flashcfg_get_yorker_settings+0x15c>)
 80084d8:	f7ff feac 	bl	8008234 <__FLASH_READ>
 80084dc:	4603      	mov	r3, r0
 80084de:	461a      	mov	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	625a      	str	r2, [r3, #36]	; 0x24
	flash_yorker_settings->set_inlet_water_ph_min = __FLASH_READ(SET_INLET_WATER_PH_MIN_ADDRESS);
 80084e4:	4832      	ldr	r0, [pc, #200]	; (80085b0 <platform_flashcfg_get_yorker_settings+0x160>)
 80084e6:	f7ff fea5 	bl	8008234 <__FLASH_READ>
 80084ea:	4603      	mov	r3, r0
 80084ec:	461a      	mov	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	629a      	str	r2, [r3, #40]	; 0x28
	flash_yorker_settings->set_inlet_water_ph_max = __FLASH_READ(SET_INLET_WATER_PH_MAX_ADDRESS);
 80084f2:	4830      	ldr	r0, [pc, #192]	; (80085b4 <platform_flashcfg_get_yorker_settings+0x164>)
 80084f4:	f7ff fe9e 	bl	8008234 <__FLASH_READ>
 80084f8:	4603      	mov	r3, r0
 80084fa:	461a      	mov	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	62da      	str	r2, [r3, #44]	; 0x2c
	flash_yorker_settings->set_inlet_water_tds_min = __FLASH_READ(SET_INLET_WATER_TDS_MIN_ADDRESS);
 8008500:	482d      	ldr	r0, [pc, #180]	; (80085b8 <platform_flashcfg_get_yorker_settings+0x168>)
 8008502:	f7ff fe97 	bl	8008234 <__FLASH_READ>
 8008506:	4603      	mov	r3, r0
 8008508:	461a      	mov	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	631a      	str	r2, [r3, #48]	; 0x30
	flash_yorker_settings->set_inlet_water_tds_max = __FLASH_READ(SET_INLET_WATER_TDS_MAX_ADDRESS);
 800850e:	482b      	ldr	r0, [pc, #172]	; (80085bc <platform_flashcfg_get_yorker_settings+0x16c>)
 8008510:	f7ff fe90 	bl	8008234 <__FLASH_READ>
 8008514:	4603      	mov	r3, r0
 8008516:	461a      	mov	r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	635a      	str	r2, [r3, #52]	; 0x34
	flash_yorker_settings->set_outlet_water_ph_min = __FLASH_READ(SET_OUTLET_WATER_PH_MIN_ADDRESS);
 800851c:	4828      	ldr	r0, [pc, #160]	; (80085c0 <platform_flashcfg_get_yorker_settings+0x170>)
 800851e:	f7ff fe89 	bl	8008234 <__FLASH_READ>
 8008522:	4603      	mov	r3, r0
 8008524:	461a      	mov	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	639a      	str	r2, [r3, #56]	; 0x38
	flash_yorker_settings->set_outlet_water_ph_max = __FLASH_READ(SET_OUTLET_WATER_PH_MAX_ADDRESS);
 800852a:	4826      	ldr	r0, [pc, #152]	; (80085c4 <platform_flashcfg_get_yorker_settings+0x174>)
 800852c:	f7ff fe82 	bl	8008234 <__FLASH_READ>
 8008530:	4603      	mov	r3, r0
 8008532:	461a      	mov	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	63da      	str	r2, [r3, #60]	; 0x3c
	flash_yorker_settings->set_outlet_water_tds_min = __FLASH_READ(SET_OUTLET_WATER_TDS_MIN_ADDRESS);
 8008538:	4823      	ldr	r0, [pc, #140]	; (80085c8 <platform_flashcfg_get_yorker_settings+0x178>)
 800853a:	f7ff fe7b 	bl	8008234 <__FLASH_READ>
 800853e:	4603      	mov	r3, r0
 8008540:	461a      	mov	r2, r3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	641a      	str	r2, [r3, #64]	; 0x40
	flash_yorker_settings->set_outlet_water_tds_max = __FLASH_READ(SET_OUTLET_WATER_TDS_MAX_ADDRESS);
 8008546:	4821      	ldr	r0, [pc, #132]	; (80085cc <platform_flashcfg_get_yorker_settings+0x17c>)
 8008548:	f7ff fe74 	bl	8008234 <__FLASH_READ>
 800854c:	4603      	mov	r3, r0
 800854e:	461a      	mov	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	645a      	str	r2, [r3, #68]	; 0x44
	flash_yorker_settings->pump1_capacity = __FLASH_READ(PUMP1_CAPACITY_ADDRESS);
 8008554:	481e      	ldr	r0, [pc, #120]	; (80085d0 <platform_flashcfg_get_yorker_settings+0x180>)
 8008556:	f7ff fe6d 	bl	8008234 <__FLASH_READ>
 800855a:	4603      	mov	r3, r0
 800855c:	461a      	mov	r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	649a      	str	r2, [r3, #72]	; 0x48
	flash_yorker_settings->pump2_capacity = __FLASH_READ(PUMP2_CAPACITY_ADDRESS);
 8008562:	481c      	ldr	r0, [pc, #112]	; (80085d4 <platform_flashcfg_get_yorker_settings+0x184>)
 8008564:	f7ff fe66 	bl	8008234 <__FLASH_READ>
 8008568:	4603      	mov	r3, r0
 800856a:	461a      	mov	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	64da      	str	r2, [r3, #76]	; 0x4c
	flash_yorker_settings->processing_rate = __FLASH_READ(PROCESSING_RATE_ADDRESS);
 8008570:	4819      	ldr	r0, [pc, #100]	; (80085d8 <platform_flashcfg_get_yorker_settings+0x188>)
 8008572:	f7ff fe5f 	bl	8008234 <__FLASH_READ>
 8008576:	4603      	mov	r3, r0
 8008578:	461a      	mov	r2, r3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800857e:	bf00      	nop
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	081e0000 	.word	0x081e0000
 800858c:	081e0008 	.word	0x081e0008
 8008590:	081e0024 	.word	0x081e0024
 8008594:	081e0040 	.word	0x081e0040
 8008598:	081e0048 	.word	0x081e0048
 800859c:	081e0064 	.word	0x081e0064
 80085a0:	081e0080 	.word	0x081e0080
 80085a4:	081e0088 	.word	0x081e0088
 80085a8:	081e0104 	.word	0x081e0104
 80085ac:	081e0120 	.word	0x081e0120
 80085b0:	081e0128 	.word	0x081e0128
 80085b4:	081e0144 	.word	0x081e0144
 80085b8:	081e0160 	.word	0x081e0160
 80085bc:	081e0168 	.word	0x081e0168
 80085c0:	081e0184 	.word	0x081e0184
 80085c4:	081e0200 	.word	0x081e0200
 80085c8:	081e0208 	.word	0x081e0208
 80085cc:	081e0224 	.word	0x081e0224
 80085d0:	081e0240 	.word	0x081e0240
 80085d4:	081e0248 	.word	0x081e0248
 80085d8:	081e0264 	.word	0x081e0264

080085dc <__MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void __MX_GPIO_Init(void)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b08c      	sub	sp, #48	; 0x30
 80085e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085e2:	f107 031c 	add.w	r3, r7, #28
 80085e6:	2200      	movs	r2, #0
 80085e8:	601a      	str	r2, [r3, #0]
 80085ea:	605a      	str	r2, [r3, #4]
 80085ec:	609a      	str	r2, [r3, #8]
 80085ee:	60da      	str	r2, [r3, #12]
 80085f0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80085f2:	2300      	movs	r3, #0
 80085f4:	61bb      	str	r3, [r7, #24]
 80085f6:	4b82      	ldr	r3, [pc, #520]	; (8008800 <__MX_GPIO_Init+0x224>)
 80085f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085fa:	4a81      	ldr	r2, [pc, #516]	; (8008800 <__MX_GPIO_Init+0x224>)
 80085fc:	f043 0310 	orr.w	r3, r3, #16
 8008600:	6313      	str	r3, [r2, #48]	; 0x30
 8008602:	4b7f      	ldr	r3, [pc, #508]	; (8008800 <__MX_GPIO_Init+0x224>)
 8008604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008606:	f003 0310 	and.w	r3, r3, #16
 800860a:	61bb      	str	r3, [r7, #24]
 800860c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800860e:	2300      	movs	r3, #0
 8008610:	617b      	str	r3, [r7, #20]
 8008612:	4b7b      	ldr	r3, [pc, #492]	; (8008800 <__MX_GPIO_Init+0x224>)
 8008614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008616:	4a7a      	ldr	r2, [pc, #488]	; (8008800 <__MX_GPIO_Init+0x224>)
 8008618:	f043 0304 	orr.w	r3, r3, #4
 800861c:	6313      	str	r3, [r2, #48]	; 0x30
 800861e:	4b78      	ldr	r3, [pc, #480]	; (8008800 <__MX_GPIO_Init+0x224>)
 8008620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008622:	f003 0304 	and.w	r3, r3, #4
 8008626:	617b      	str	r3, [r7, #20]
 8008628:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800862a:	2300      	movs	r3, #0
 800862c:	613b      	str	r3, [r7, #16]
 800862e:	4b74      	ldr	r3, [pc, #464]	; (8008800 <__MX_GPIO_Init+0x224>)
 8008630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008632:	4a73      	ldr	r2, [pc, #460]	; (8008800 <__MX_GPIO_Init+0x224>)
 8008634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008638:	6313      	str	r3, [r2, #48]	; 0x30
 800863a:	4b71      	ldr	r3, [pc, #452]	; (8008800 <__MX_GPIO_Init+0x224>)
 800863c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008642:	613b      	str	r3, [r7, #16]
 8008644:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8008646:	2300      	movs	r3, #0
 8008648:	60fb      	str	r3, [r7, #12]
 800864a:	4b6d      	ldr	r3, [pc, #436]	; (8008800 <__MX_GPIO_Init+0x224>)
 800864c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864e:	4a6c      	ldr	r2, [pc, #432]	; (8008800 <__MX_GPIO_Init+0x224>)
 8008650:	f043 0301 	orr.w	r3, r3, #1
 8008654:	6313      	str	r3, [r2, #48]	; 0x30
 8008656:	4b6a      	ldr	r3, [pc, #424]	; (8008800 <__MX_GPIO_Init+0x224>)
 8008658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865a:	f003 0301 	and.w	r3, r3, #1
 800865e:	60fb      	str	r3, [r7, #12]
 8008660:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8008662:	2300      	movs	r3, #0
 8008664:	60bb      	str	r3, [r7, #8]
 8008666:	4b66      	ldr	r3, [pc, #408]	; (8008800 <__MX_GPIO_Init+0x224>)
 8008668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800866a:	4a65      	ldr	r2, [pc, #404]	; (8008800 <__MX_GPIO_Init+0x224>)
 800866c:	f043 0302 	orr.w	r3, r3, #2
 8008670:	6313      	str	r3, [r2, #48]	; 0x30
 8008672:	4b63      	ldr	r3, [pc, #396]	; (8008800 <__MX_GPIO_Init+0x224>)
 8008674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008676:	f003 0302 	and.w	r3, r3, #2
 800867a:	60bb      	str	r3, [r7, #8]
 800867c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800867e:	2300      	movs	r3, #0
 8008680:	607b      	str	r3, [r7, #4]
 8008682:	4b5f      	ldr	r3, [pc, #380]	; (8008800 <__MX_GPIO_Init+0x224>)
 8008684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008686:	4a5e      	ldr	r2, [pc, #376]	; (8008800 <__MX_GPIO_Init+0x224>)
 8008688:	f043 0308 	orr.w	r3, r3, #8
 800868c:	6313      	str	r3, [r2, #48]	; 0x30
 800868e:	4b5c      	ldr	r3, [pc, #368]	; (8008800 <__MX_GPIO_Init+0x224>)
 8008690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008692:	f003 0308 	and.w	r3, r3, #8
 8008696:	607b      	str	r3, [r7, #4]
 8008698:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, BUZZER_PIN_Pin|RELAY_1_Pin|RELAY_2_Pin|RELAY_3_Pin, GPIO_PIN_RESET);
 800869a:	2200      	movs	r2, #0
 800869c:	f24e 0140 	movw	r1, #57408	; 0xe040
 80086a0:	4858      	ldr	r0, [pc, #352]	; (8008804 <__MX_GPIO_Init+0x228>)
 80086a2:	f7f9 ffe7 	bl	8002674 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_SET);
 80086a6:	2201      	movs	r2, #1
 80086a8:	2110      	movs	r1, #16
 80086aa:	4857      	ldr	r0, [pc, #348]	; (8008808 <__MX_GPIO_Init+0x22c>)
 80086ac:	f7f9 ffe2 	bl	8002674 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, RELAY_4_Pin|RELAY_5_Pin|EEPROM_WP_Pin, GPIO_PIN_RESET);
 80086b0:	2200      	movs	r2, #0
 80086b2:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 80086b6:	4855      	ldr	r0, [pc, #340]	; (800880c <__MX_GPIO_Init+0x230>)
 80086b8:	f7f9 ffdc 	bl	8002674 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(HEARTBEAT_LED_GPIO_Port, HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 80086bc:	2200      	movs	r2, #0
 80086be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80086c2:	4851      	ldr	r0, [pc, #324]	; (8008808 <__MX_GPIO_Init+0x22c>)
 80086c4:	f7f9 ffd6 	bl	8002674 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RS485_ENABLE_GPIO_Port, RS485_ENABLE_Pin, GPIO_PIN_RESET);
 80086c8:	2200      	movs	r2, #0
 80086ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80086ce:	4850      	ldr	r0, [pc, #320]	; (8008810 <__MX_GPIO_Init+0x234>)
 80086d0:	f7f9 ffd0 	bl	8002674 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, RELAY_6_Pin|RELAY_7_Pin|RELAY_8_Pin, GPIO_PIN_RESET);
 80086d4:	2200      	movs	r2, #0
 80086d6:	2138      	movs	r1, #56	; 0x38
 80086d8:	484e      	ldr	r0, [pc, #312]	; (8008814 <__MX_GPIO_Init+0x238>)
 80086da:	f7f9 ffcb 	bl	8002674 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : BUZZER_PIN_Pin RELAY_1_Pin RELAY_2_Pin RELAY_3_Pin */
	GPIO_InitStruct.Pin = BUZZER_PIN_Pin|RELAY_1_Pin|RELAY_2_Pin|RELAY_3_Pin;
 80086de:	f24e 0340 	movw	r3, #57408	; 0xe040
 80086e2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80086e4:	2301      	movs	r3, #1
 80086e6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80086e8:	2302      	movs	r3, #2
 80086ea:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086ec:	2300      	movs	r3, #0
 80086ee:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80086f0:	f107 031c 	add.w	r3, r7, #28
 80086f4:	4619      	mov	r1, r3
 80086f6:	4843      	ldr	r0, [pc, #268]	; (8008804 <__MX_GPIO_Init+0x228>)
 80086f8:	f7f9 fdfa 	bl	80022f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : POWER_MAINS_Pin LEVEL_SENS_5_Pin LEVEL_SENS_6_Pin */
	GPIO_InitStruct.Pin = POWER_MAINS_Pin|LEVEL_SENS_5_Pin|LEVEL_SENS_6_Pin;
 80086fc:	f44f 5303 	mov.w	r3, #8384	; 0x20c0
 8008700:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008702:	2300      	movs	r3, #0
 8008704:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008706:	2300      	movs	r3, #0
 8008708:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800870a:	f107 031c 	add.w	r3, r7, #28
 800870e:	4619      	mov	r1, r3
 8008710:	483f      	ldr	r0, [pc, #252]	; (8008810 <__MX_GPIO_Init+0x234>)
 8008712:	f7f9 fded 	bl	80022f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : WIFI_RST_Pin */
	GPIO_InitStruct.Pin = WIFI_RST_Pin;
 8008716:	2310      	movs	r3, #16
 8008718:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800871a:	2301      	movs	r3, #1
 800871c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800871e:	2301      	movs	r3, #1
 8008720:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008722:	2300      	movs	r3, #0
 8008724:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 8008726:	f107 031c 	add.w	r3, r7, #28
 800872a:	4619      	mov	r1, r3
 800872c:	4836      	ldr	r0, [pc, #216]	; (8008808 <__MX_GPIO_Init+0x22c>)
 800872e:	f7f9 fddf 	bl	80022f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : RELAY_4_Pin RELAY_5_Pin */
	GPIO_InitStruct.Pin = RELAY_4_Pin|RELAY_5_Pin;
 8008732:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008736:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008738:	2301      	movs	r3, #1
 800873a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800873c:	2302      	movs	r3, #2
 800873e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008740:	2300      	movs	r3, #0
 8008742:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008744:	f107 031c 	add.w	r3, r7, #28
 8008748:	4619      	mov	r1, r3
 800874a:	4830      	ldr	r0, [pc, #192]	; (800880c <__MX_GPIO_Init+0x230>)
 800874c:	f7f9 fdd0 	bl	80022f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : KEY_5_Pin LEVEL_SENS_4_Pin ESC_KEY_Pin LEVEL_SENS_3_Pin */
	GPIO_InitStruct.Pin = KEY_5_Pin|LEVEL_SENS_4_Pin|ESC_KEY_Pin|LEVEL_SENS_3_Pin;
 8008750:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008754:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008756:	2300      	movs	r3, #0
 8008758:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800875a:	2300      	movs	r3, #0
 800875c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800875e:	f107 031c 	add.w	r3, r7, #28
 8008762:	4619      	mov	r1, r3
 8008764:	4829      	ldr	r0, [pc, #164]	; (800880c <__MX_GPIO_Init+0x230>)
 8008766:	f7f9 fdc3 	bl	80022f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : ENTER_KEY_Pin LEVEL_SENS_2_Pin RIGHT_KEY_Pin LEVEL_SENS_1_Pin
						   LEFT_KEY_Pin PULSE_SENS_2_Pin PULSE_SENS_1_Pin */
	GPIO_InitStruct.Pin = ENTER_KEY_Pin|LEVEL_SENS_2_Pin|RIGHT_KEY_Pin|LEVEL_SENS_1_Pin
 800876a:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 800876e:	61fb      	str	r3, [r7, #28]
						  |LEFT_KEY_Pin|PULSE_SENS_2_Pin|PULSE_SENS_1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008770:	2300      	movs	r3, #0
 8008772:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008774:	2300      	movs	r3, #0
 8008776:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008778:	f107 031c 	add.w	r3, r7, #28
 800877c:	4619      	mov	r1, r3
 800877e:	4825      	ldr	r0, [pc, #148]	; (8008814 <__MX_GPIO_Init+0x238>)
 8008780:	f7f9 fdb6 	bl	80022f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : HEARTBEAT_LED_Pin */
	GPIO_InitStruct.Pin = HEARTBEAT_LED_Pin;
 8008784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008788:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800878a:	2301      	movs	r3, #1
 800878c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800878e:	2302      	movs	r3, #2
 8008790:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008792:	2300      	movs	r3, #0
 8008794:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 8008796:	f107 031c 	add.w	r3, r7, #28
 800879a:	4619      	mov	r1, r3
 800879c:	481a      	ldr	r0, [pc, #104]	; (8008808 <__MX_GPIO_Init+0x22c>)
 800879e:	f7f9 fda7 	bl	80022f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : RS485_ENABLE_Pin */
	GPIO_InitStruct.Pin = RS485_ENABLE_Pin;
 80087a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087a6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80087a8:	2301      	movs	r3, #1
 80087aa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087ac:	2300      	movs	r3, #0
 80087ae:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087b0:	2300      	movs	r3, #0
 80087b2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(RS485_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80087b4:	f107 031c 	add.w	r3, r7, #28
 80087b8:	4619      	mov	r1, r3
 80087ba:	4815      	ldr	r0, [pc, #84]	; (8008810 <__MX_GPIO_Init+0x234>)
 80087bc:	f7f9 fd98 	bl	80022f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : RELAY_6_Pin RELAY_7_Pin RELAY_8_Pin */
	GPIO_InitStruct.Pin = RELAY_6_Pin|RELAY_7_Pin|RELAY_8_Pin;
 80087c0:	2338      	movs	r3, #56	; 0x38
 80087c2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80087c4:	2301      	movs	r3, #1
 80087c6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80087c8:	2302      	movs	r3, #2
 80087ca:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087cc:	2300      	movs	r3, #0
 80087ce:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80087d0:	f107 031c 	add.w	r3, r7, #28
 80087d4:	4619      	mov	r1, r3
 80087d6:	480f      	ldr	r0, [pc, #60]	; (8008814 <__MX_GPIO_Init+0x238>)
 80087d8:	f7f9 fd8a 	bl	80022f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : EEPROM_WP_Pin */
	GPIO_InitStruct.Pin = EEPROM_WP_Pin;
 80087dc:	2320      	movs	r3, #32
 80087de:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80087e0:	2301      	movs	r3, #1
 80087e2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087e4:	2300      	movs	r3, #0
 80087e6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087e8:	2300      	movs	r3, #0
 80087ea:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(EEPROM_WP_GPIO_Port, &GPIO_InitStruct);
 80087ec:	f107 031c 	add.w	r3, r7, #28
 80087f0:	4619      	mov	r1, r3
 80087f2:	4806      	ldr	r0, [pc, #24]	; (800880c <__MX_GPIO_Init+0x230>)
 80087f4:	f7f9 fd7c 	bl	80022f0 <HAL_GPIO_Init>

}
 80087f8:	bf00      	nop
 80087fa:	3730      	adds	r7, #48	; 0x30
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	40023800 	.word	0x40023800
 8008804:	40021000 	.word	0x40021000
 8008808:	40020000 	.word	0x40020000
 800880c:	40020400 	.word	0x40020400
 8008810:	40020800 	.word	0x40020800
 8008814:	40020c00 	.word	0x40020c00

08008818 <platform_gpio_init>:
  * @brief Platform GPIO Initialization Function
  * @param None
  * @retval None
  */
void platform_gpio_init()
{
 8008818:	b580      	push	{r7, lr}
 800881a:	af00      	add	r7, sp, #0
	__MX_GPIO_Init();
 800881c:	f7ff fede 	bl	80085dc <__MX_GPIO_Init>
}
 8008820:	bf00      	nop
 8008822:	bd80      	pop	{r7, pc}

08008824 <__SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void __SystemClock_Config(void)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b0a0      	sub	sp, #128	; 0x80
 8008828:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800882a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800882e:	2230      	movs	r2, #48	; 0x30
 8008830:	2100      	movs	r1, #0
 8008832:	4618      	mov	r0, r3
 8008834:	f000 fb4c 	bl	8008ed0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008838:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800883c:	2200      	movs	r2, #0
 800883e:	601a      	str	r2, [r3, #0]
 8008840:	605a      	str	r2, [r3, #4]
 8008842:	609a      	str	r2, [r3, #8]
 8008844:	60da      	str	r2, [r3, #12]
 8008846:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008848:	f107 030c 	add.w	r3, r7, #12
 800884c:	2230      	movs	r2, #48	; 0x30
 800884e:	2100      	movs	r1, #0
 8008850:	4618      	mov	r0, r3
 8008852:	f000 fb3d 	bl	8008ed0 <memset>

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8008856:	2300      	movs	r3, #0
 8008858:	60bb      	str	r3, [r7, #8]
 800885a:	4b2c      	ldr	r3, [pc, #176]	; (800890c <__SystemClock_Config+0xe8>)
 800885c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885e:	4a2b      	ldr	r2, [pc, #172]	; (800890c <__SystemClock_Config+0xe8>)
 8008860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008864:	6413      	str	r3, [r2, #64]	; 0x40
 8008866:	4b29      	ldr	r3, [pc, #164]	; (800890c <__SystemClock_Config+0xe8>)
 8008868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800886e:	60bb      	str	r3, [r7, #8]
 8008870:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8008872:	2300      	movs	r3, #0
 8008874:	607b      	str	r3, [r7, #4]
 8008876:	4b26      	ldr	r3, [pc, #152]	; (8008910 <__SystemClock_Config+0xec>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800887e:	4a24      	ldr	r2, [pc, #144]	; (8008910 <__SystemClock_Config+0xec>)
 8008880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008884:	6013      	str	r3, [r2, #0]
 8008886:	4b22      	ldr	r3, [pc, #136]	; (8008910 <__SystemClock_Config+0xec>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800888e:	607b      	str	r3, [r7, #4]
 8008890:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8008892:	230a      	movs	r3, #10
 8008894:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008896:	2301      	movs	r3, #1
 8008898:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800889a:	2310      	movs	r3, #16
 800889c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800889e:	2301      	movs	r3, #1
 80088a0:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80088a2:	2300      	movs	r3, #0
 80088a4:	66bb      	str	r3, [r7, #104]	; 0x68
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80088a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7fa f8b0 	bl	8002a10 <HAL_RCC_OscConfig>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d001      	beq.n	80088ba <__SystemClock_Config+0x96>
	{
		Error_Handler();
 80088b6:	f7ff fb95 	bl	8007fe4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80088ba:	230f      	movs	r3, #15
 80088bc:	63fb      	str	r3, [r7, #60]	; 0x3c
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80088be:	2300      	movs	r3, #0
 80088c0:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80088c2:	2300      	movs	r3, #0
 80088c4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80088c6:	2300      	movs	r3, #0
 80088c8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80088ca:	2300      	movs	r3, #0
 80088cc:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80088ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80088d2:	2100      	movs	r1, #0
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7fa fb0b 	bl	8002ef0 <HAL_RCC_ClockConfig>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d001      	beq.n	80088e4 <__SystemClock_Config+0xc0>
	{
		Error_Handler();
 80088e0:	f7ff fb80 	bl	8007fe4 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80088e4:	2320      	movs	r3, #32
 80088e6:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80088e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088ec:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80088ee:	f107 030c 	add.w	r3, r7, #12
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7fa fcc8 	bl	8003288 <HAL_RCCEx_PeriphCLKConfig>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d001      	beq.n	8008902 <__SystemClock_Config+0xde>
	{
		Error_Handler();
 80088fe:	f7ff fb71 	bl	8007fe4 <Error_Handler>
	}
}
 8008902:	bf00      	nop
 8008904:	3780      	adds	r7, #128	; 0x80
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	40023800 	.word	0x40023800
 8008910:	40007000 	.word	0x40007000

08008914 <platform_sysclk_cfg>:
/*******************************************************************************
 *  PUBLIC
 ******************************************************************************/

void platform_sysclk_cfg()
{
 8008914:	b580      	push	{r7, lr}
 8008916:	af00      	add	r7, sp, #0
	__SystemClock_Config();
 8008918:	f7ff ff84 	bl	8008824 <__SystemClock_Config>
}
 800891c:	bf00      	nop
 800891e:	bd80      	pop	{r7, pc}

08008920 <__MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void __MX_RTC_Init(void)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b086      	sub	sp, #24
 8008924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8008926:	1d3b      	adds	r3, r7, #4
 8008928:	2200      	movs	r2, #0
 800892a:	601a      	str	r2, [r3, #0]
 800892c:	605a      	str	r2, [r3, #4]
 800892e:	609a      	str	r2, [r3, #8]
 8008930:	60da      	str	r2, [r3, #12]
 8008932:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8008934:	2300      	movs	r3, #0
 8008936:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008938:	4b19      	ldr	r3, [pc, #100]	; (80089a0 <__MX_RTC_Init+0x80>)
 800893a:	4a1a      	ldr	r2, [pc, #104]	; (80089a4 <__MX_RTC_Init+0x84>)
 800893c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800893e:	4b18      	ldr	r3, [pc, #96]	; (80089a0 <__MX_RTC_Init+0x80>)
 8008940:	2200      	movs	r2, #0
 8008942:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8008944:	4b16      	ldr	r3, [pc, #88]	; (80089a0 <__MX_RTC_Init+0x80>)
 8008946:	227f      	movs	r2, #127	; 0x7f
 8008948:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800894a:	4b15      	ldr	r3, [pc, #84]	; (80089a0 <__MX_RTC_Init+0x80>)
 800894c:	22ff      	movs	r2, #255	; 0xff
 800894e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008950:	4b13      	ldr	r3, [pc, #76]	; (80089a0 <__MX_RTC_Init+0x80>)
 8008952:	2200      	movs	r2, #0
 8008954:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008956:	4b12      	ldr	r3, [pc, #72]	; (80089a0 <__MX_RTC_Init+0x80>)
 8008958:	2200      	movs	r2, #0
 800895a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800895c:	4b10      	ldr	r3, [pc, #64]	; (80089a0 <__MX_RTC_Init+0x80>)
 800895e:	2200      	movs	r2, #0
 8008960:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008962:	480f      	ldr	r0, [pc, #60]	; (80089a0 <__MX_RTC_Init+0x80>)
 8008964:	f7fa fe4e 	bl	8003604 <HAL_RTC_Init>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d001      	beq.n	8008972 <__MX_RTC_Init+0x52>
  {
    Error_Handler();
 800896e:	f7ff fb39 	bl	8007fe4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x22;
 8008972:	2322      	movs	r3, #34	; 0x22
 8008974:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x38;
 8008976:	2338      	movs	r3, #56	; 0x38
 8008978:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x00;
 800897a:	2300      	movs	r3, #0
 800897c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800897e:	2300      	movs	r3, #0
 8008980:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008982:	2300      	movs	r3, #0
 8008984:	617b      	str	r3, [r7, #20]
//  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
//  {
//    Error_Handler();
//  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8008986:	2305      	movs	r3, #5
 8008988:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 800898a:	2302      	movs	r3, #2
 800898c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x26;
 800898e:	2326      	movs	r3, #38	; 0x26
 8008990:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 8008992:	2321      	movs	r3, #33	; 0x21
 8008994:	70fb      	strb	r3, [r7, #3]
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008996:	bf00      	nop
 8008998:	3718      	adds	r7, #24
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	200009d8 	.word	0x200009d8
 80089a4:	40002800 	.word	0x40002800

080089a8 <platform_rtc_init>:

/*******************************************************************************
 *  PUBLIC
 ******************************************************************************/
void platform_rtc_init()
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	af00      	add	r7, sp, #0
	__MX_RTC_Init();
 80089ac:	f7ff ffb8 	bl	8008920 <__MX_RTC_Init>
}
 80089b0:	bf00      	nop
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <platform_get_date_and_time>:

void platform_get_date_and_time(RTC_DateTypeDef *cDate, RTC_TimeTypeDef *cTime)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetTime(&hrtc, cTime, RTC_FORMAT_BCD);
 80089be:	2201      	movs	r2, #1
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	4806      	ldr	r0, [pc, #24]	; (80089dc <platform_get_date_and_time+0x28>)
 80089c4:	f7fa feaf 	bl	8003726 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, cDate, RTC_FORMAT_BCD);
 80089c8:	2201      	movs	r2, #1
 80089ca:	6879      	ldr	r1, [r7, #4]
 80089cc:	4803      	ldr	r0, [pc, #12]	; (80089dc <platform_get_date_and_time+0x28>)
 80089ce:	f7fa ff08 	bl	80037e2 <HAL_RTC_GetDate>
}
 80089d2:	bf00      	nop
 80089d4:	3708      	adds	r7, #8
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	200009d8 	.word	0x200009d8

080089e0 <__MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void __MX_TIM2_Init(void)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80089e6:	f107 0308 	add.w	r3, r7, #8
 80089ea:	2200      	movs	r2, #0
 80089ec:	601a      	str	r2, [r3, #0]
 80089ee:	605a      	str	r2, [r3, #4]
 80089f0:	609a      	str	r2, [r3, #8]
 80089f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80089f4:	463b      	mov	r3, r7
 80089f6:	2200      	movs	r2, #0
 80089f8:	601a      	str	r2, [r3, #0]
 80089fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80089fc:	4b1e      	ldr	r3, [pc, #120]	; (8008a78 <__MX_TIM2_Init+0x98>)
 80089fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008a02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1600-1;
 8008a04:	4b1c      	ldr	r3, [pc, #112]	; (8008a78 <__MX_TIM2_Init+0x98>)
 8008a06:	f240 623f 	movw	r2, #1599	; 0x63f
 8008a0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008a0c:	4b1a      	ldr	r3, [pc, #104]	; (8008a78 <__MX_TIM2_Init+0x98>)
 8008a0e:	2200      	movs	r2, #0
 8008a10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8008a12:	4b19      	ldr	r3, [pc, #100]	; (8008a78 <__MX_TIM2_Init+0x98>)
 8008a14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008a18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008a1a:	4b17      	ldr	r3, [pc, #92]	; (8008a78 <__MX_TIM2_Init+0x98>)
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008a20:	4b15      	ldr	r3, [pc, #84]	; (8008a78 <__MX_TIM2_Init+0x98>)
 8008a22:	2200      	movs	r2, #0
 8008a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008a26:	4814      	ldr	r0, [pc, #80]	; (8008a78 <__MX_TIM2_Init+0x98>)
 8008a28:	f7fa ff9c 	bl	8003964 <HAL_TIM_Base_Init>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d001      	beq.n	8008a36 <__MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8008a32:	f7ff fad7 	bl	8007fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008a3c:	f107 0308 	add.w	r3, r7, #8
 8008a40:	4619      	mov	r1, r3
 8008a42:	480d      	ldr	r0, [pc, #52]	; (8008a78 <__MX_TIM2_Init+0x98>)
 8008a44:	f7fb f910 	bl	8003c68 <HAL_TIM_ConfigClockSource>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d001      	beq.n	8008a52 <__MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8008a4e:	f7ff fac9 	bl	8007fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008a52:	2300      	movs	r3, #0
 8008a54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008a56:	2300      	movs	r3, #0
 8008a58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008a5a:	463b      	mov	r3, r7
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	4806      	ldr	r0, [pc, #24]	; (8008a78 <__MX_TIM2_Init+0x98>)
 8008a60:	f7fb fb1c 	bl	800409c <HAL_TIMEx_MasterConfigSynchronization>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d001      	beq.n	8008a6e <__MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8008a6a:	f7ff fabb 	bl	8007fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008a6e:	bf00      	nop
 8008a70:	3718      	adds	r7, #24
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	20000a78 	.word	0x20000a78

08008a7c <__MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void __MX_TIM4_Init(void)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b086      	sub	sp, #24
 8008a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008a82:	f107 0308 	add.w	r3, r7, #8
 8008a86:	2200      	movs	r2, #0
 8008a88:	601a      	str	r2, [r3, #0]
 8008a8a:	605a      	str	r2, [r3, #4]
 8008a8c:	609a      	str	r2, [r3, #8]
 8008a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008a90:	463b      	mov	r3, r7
 8008a92:	2200      	movs	r2, #0
 8008a94:	601a      	str	r2, [r3, #0]
 8008a96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8008a98:	4b1d      	ldr	r3, [pc, #116]	; (8008b10 <__MX_TIM4_Init+0x94>)
 8008a9a:	4a1e      	ldr	r2, [pc, #120]	; (8008b14 <__MX_TIM4_Init+0x98>)
 8008a9c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1600-1;
 8008a9e:	4b1c      	ldr	r3, [pc, #112]	; (8008b10 <__MX_TIM4_Init+0x94>)
 8008aa0:	f240 623f 	movw	r2, #1599	; 0x63f
 8008aa4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008aa6:	4b1a      	ldr	r3, [pc, #104]	; (8008b10 <__MX_TIM4_Init+0x94>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3000-1;
 8008aac:	4b18      	ldr	r3, [pc, #96]	; (8008b10 <__MX_TIM4_Init+0x94>)
 8008aae:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8008ab2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008ab4:	4b16      	ldr	r3, [pc, #88]	; (8008b10 <__MX_TIM4_Init+0x94>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008aba:	4b15      	ldr	r3, [pc, #84]	; (8008b10 <__MX_TIM4_Init+0x94>)
 8008abc:	2200      	movs	r2, #0
 8008abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8008ac0:	4813      	ldr	r0, [pc, #76]	; (8008b10 <__MX_TIM4_Init+0x94>)
 8008ac2:	f7fa ff4f 	bl	8003964 <HAL_TIM_Base_Init>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d001      	beq.n	8008ad0 <__MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8008acc:	f7ff fa8a 	bl	8007fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008ad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ad4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8008ad6:	f107 0308 	add.w	r3, r7, #8
 8008ada:	4619      	mov	r1, r3
 8008adc:	480c      	ldr	r0, [pc, #48]	; (8008b10 <__MX_TIM4_Init+0x94>)
 8008ade:	f7fb f8c3 	bl	8003c68 <HAL_TIM_ConfigClockSource>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d001      	beq.n	8008aec <__MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8008ae8:	f7ff fa7c 	bl	8007fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008aec:	2300      	movs	r3, #0
 8008aee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008af0:	2300      	movs	r3, #0
 8008af2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8008af4:	463b      	mov	r3, r7
 8008af6:	4619      	mov	r1, r3
 8008af8:	4805      	ldr	r0, [pc, #20]	; (8008b10 <__MX_TIM4_Init+0x94>)
 8008afa:	f7fb facf 	bl	800409c <HAL_TIMEx_MasterConfigSynchronization>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d001      	beq.n	8008b08 <__MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8008b04:	f7ff fa6e 	bl	8007fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8008b08:	bf00      	nop
 8008b0a:	3718      	adds	r7, #24
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	200009f8 	.word	0x200009f8
 8008b14:	40000800 	.word	0x40000800

08008b18 <__MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
void __MX_TIM5_Init(void)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b086      	sub	sp, #24
 8008b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008b1e:	f107 0308 	add.w	r3, r7, #8
 8008b22:	2200      	movs	r2, #0
 8008b24:	601a      	str	r2, [r3, #0]
 8008b26:	605a      	str	r2, [r3, #4]
 8008b28:	609a      	str	r2, [r3, #8]
 8008b2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008b2c:	463b      	mov	r3, r7
 8008b2e:	2200      	movs	r2, #0
 8008b30:	601a      	str	r2, [r3, #0]
 8008b32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8008b34:	4b1d      	ldr	r3, [pc, #116]	; (8008bac <__MX_TIM5_Init+0x94>)
 8008b36:	4a1e      	ldr	r2, [pc, #120]	; (8008bb0 <__MX_TIM5_Init+0x98>)
 8008b38:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1600-1;
 8008b3a:	4b1c      	ldr	r3, [pc, #112]	; (8008bac <__MX_TIM5_Init+0x94>)
 8008b3c:	f240 623f 	movw	r2, #1599	; 0x63f
 8008b40:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b42:	4b1a      	ldr	r3, [pc, #104]	; (8008bac <__MX_TIM5_Init+0x94>)
 8008b44:	2200      	movs	r2, #0
 8008b46:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 5000-1;
 8008b48:	4b18      	ldr	r3, [pc, #96]	; (8008bac <__MX_TIM5_Init+0x94>)
 8008b4a:	f241 3287 	movw	r2, #4999	; 0x1387
 8008b4e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008b50:	4b16      	ldr	r3, [pc, #88]	; (8008bac <__MX_TIM5_Init+0x94>)
 8008b52:	2200      	movs	r2, #0
 8008b54:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008b56:	4b15      	ldr	r3, [pc, #84]	; (8008bac <__MX_TIM5_Init+0x94>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8008b5c:	4813      	ldr	r0, [pc, #76]	; (8008bac <__MX_TIM5_Init+0x94>)
 8008b5e:	f7fa ff01 	bl	8003964 <HAL_TIM_Base_Init>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d001      	beq.n	8008b6c <__MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8008b68:	f7ff fa3c 	bl	8007fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8008b72:	f107 0308 	add.w	r3, r7, #8
 8008b76:	4619      	mov	r1, r3
 8008b78:	480c      	ldr	r0, [pc, #48]	; (8008bac <__MX_TIM5_Init+0x94>)
 8008b7a:	f7fb f875 	bl	8003c68 <HAL_TIM_ConfigClockSource>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d001      	beq.n	8008b88 <__MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8008b84:	f7ff fa2e 	bl	8007fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8008b90:	463b      	mov	r3, r7
 8008b92:	4619      	mov	r1, r3
 8008b94:	4805      	ldr	r0, [pc, #20]	; (8008bac <__MX_TIM5_Init+0x94>)
 8008b96:	f7fb fa81 	bl	800409c <HAL_TIMEx_MasterConfigSynchronization>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d001      	beq.n	8008ba4 <__MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8008ba0:	f7ff fa20 	bl	8007fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8008ba4:	bf00      	nop
 8008ba6:	3718      	adds	r7, #24
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	20000a38 	.word	0x20000a38
 8008bb0:	40000c00 	.word	0x40000c00

08008bb4 <__pulse_counter_mkup_water>:

void __pulse_counter_mkup_water(void)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(PULSE_SENS_1_GPIO_Port,PULSE_SENS_1_Pin) == 1 && pulse1_cnt_flag == 0)
 8008bb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008bbc:	4811      	ldr	r0, [pc, #68]	; (8008c04 <__pulse_counter_mkup_water+0x50>)
 8008bbe:	f7f9 fd41 	bl	8002644 <HAL_GPIO_ReadPin>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d107      	bne.n	8008bd8 <__pulse_counter_mkup_water+0x24>
 8008bc8:	4b0f      	ldr	r3, [pc, #60]	; (8008c08 <__pulse_counter_mkup_water+0x54>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d103      	bne.n	8008bd8 <__pulse_counter_mkup_water+0x24>
	{
		pulse1_cnt_flag = 1;
 8008bd0:	4b0d      	ldr	r3, [pc, #52]	; (8008c08 <__pulse_counter_mkup_water+0x54>)
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	601a      	str	r2, [r3, #0]
	{
		yorker_homescreen_settings.mkup_water_added_pulse_cnt++;
		pulse1_cnt_flag = 0;
	}

}
 8008bd6:	e013      	b.n	8008c00 <__pulse_counter_mkup_water+0x4c>
	else if(HAL_GPIO_ReadPin(PULSE_SENS_1_GPIO_Port,PULSE_SENS_1_Pin) == 0 && pulse1_cnt_flag == 1)
 8008bd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008bdc:	4809      	ldr	r0, [pc, #36]	; (8008c04 <__pulse_counter_mkup_water+0x50>)
 8008bde:	f7f9 fd31 	bl	8002644 <HAL_GPIO_ReadPin>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d10b      	bne.n	8008c00 <__pulse_counter_mkup_water+0x4c>
 8008be8:	4b07      	ldr	r3, [pc, #28]	; (8008c08 <__pulse_counter_mkup_water+0x54>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d107      	bne.n	8008c00 <__pulse_counter_mkup_water+0x4c>
		yorker_homescreen_settings.mkup_water_added_pulse_cnt++;
 8008bf0:	4b06      	ldr	r3, [pc, #24]	; (8008c0c <__pulse_counter_mkup_water+0x58>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	4a05      	ldr	r2, [pc, #20]	; (8008c0c <__pulse_counter_mkup_water+0x58>)
 8008bf8:	6013      	str	r3, [r2, #0]
		pulse1_cnt_flag = 0;
 8008bfa:	4b03      	ldr	r3, [pc, #12]	; (8008c08 <__pulse_counter_mkup_water+0x54>)
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	601a      	str	r2, [r3, #0]
}
 8008c00:	bf00      	nop
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	40020c00 	.word	0x40020c00
 8008c08:	200006c4 	.word	0x200006c4
 8008c0c:	200008f0 	.word	0x200008f0

08008c10 <__pulse_counter_blowdown_water>:

void __pulse_counter_blowdown_water(void)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(PULSE_SENS_2_GPIO_Port,PULSE_SENS_2_Pin) == 1 && pulse2_cnt_flag == 0)
 8008c14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008c18:	4811      	ldr	r0, [pc, #68]	; (8008c60 <__pulse_counter_blowdown_water+0x50>)
 8008c1a:	f7f9 fd13 	bl	8002644 <HAL_GPIO_ReadPin>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d107      	bne.n	8008c34 <__pulse_counter_blowdown_water+0x24>
 8008c24:	4b0f      	ldr	r3, [pc, #60]	; (8008c64 <__pulse_counter_blowdown_water+0x54>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d103      	bne.n	8008c34 <__pulse_counter_blowdown_water+0x24>
	{
		pulse2_cnt_flag = 1;
 8008c2c:	4b0d      	ldr	r3, [pc, #52]	; (8008c64 <__pulse_counter_blowdown_water+0x54>)
 8008c2e:	2201      	movs	r2, #1
 8008c30:	601a      	str	r2, [r3, #0]
	{
		yorker_homescreen_settings.blowdown_water_pulse_cnt++;
		pulse2_cnt_flag = 0;
	}

}
 8008c32:	e013      	b.n	8008c5c <__pulse_counter_blowdown_water+0x4c>
	else if(HAL_GPIO_ReadPin(PULSE_SENS_2_GPIO_Port,PULSE_SENS_2_Pin) == 0 && pulse2_cnt_flag == 1)
 8008c34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008c38:	4809      	ldr	r0, [pc, #36]	; (8008c60 <__pulse_counter_blowdown_water+0x50>)
 8008c3a:	f7f9 fd03 	bl	8002644 <HAL_GPIO_ReadPin>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d10b      	bne.n	8008c5c <__pulse_counter_blowdown_water+0x4c>
 8008c44:	4b07      	ldr	r3, [pc, #28]	; (8008c64 <__pulse_counter_blowdown_water+0x54>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d107      	bne.n	8008c5c <__pulse_counter_blowdown_water+0x4c>
		yorker_homescreen_settings.blowdown_water_pulse_cnt++;
 8008c4c:	4b06      	ldr	r3, [pc, #24]	; (8008c68 <__pulse_counter_blowdown_water+0x58>)
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	3301      	adds	r3, #1
 8008c52:	4a05      	ldr	r2, [pc, #20]	; (8008c68 <__pulse_counter_blowdown_water+0x58>)
 8008c54:	6053      	str	r3, [r2, #4]
		pulse2_cnt_flag = 0;
 8008c56:	4b03      	ldr	r3, [pc, #12]	; (8008c64 <__pulse_counter_blowdown_water+0x54>)
 8008c58:	2200      	movs	r2, #0
 8008c5a:	601a      	str	r2, [r3, #0]
}
 8008c5c:	bf00      	nop
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	40020c00 	.word	0x40020c00
 8008c64:	200006c8 	.word	0x200006c8
 8008c68:	200008f0 	.word	0x200008f0

08008c6c <platform_timer_init>:
/*******************************************************************************
 *  PUBLIC
 ******************************************************************************/

void platform_timer_init()
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	af00      	add	r7, sp, #0
	__MX_TIM2_Init();
 8008c70:	f7ff feb6 	bl	80089e0 <__MX_TIM2_Init>
	__MX_TIM4_Init();
 8008c74:	f7ff ff02 	bl	8008a7c <__MX_TIM4_Init>
	__MX_TIM5_Init();
 8008c78:	f7ff ff4e 	bl	8008b18 <__MX_TIM5_Init>
}
 8008c7c:	bf00      	nop
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <platform_timer_start>:

void platform_timer_start()
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8008c84:	4803      	ldr	r0, [pc, #12]	; (8008c94 <platform_timer_start+0x14>)
 8008c86:	f7fa fe98 	bl	80039ba <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8008c8a:	4803      	ldr	r0, [pc, #12]	; (8008c98 <platform_timer_start+0x18>)
 8008c8c:	f7fa fe95 	bl	80039ba <HAL_TIM_Base_Start_IT>
}
 8008c90:	bf00      	nop
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	20000a78 	.word	0x20000a78
 8008c98:	200009f8 	.word	0x200009f8

08008c9c <platform_timer_stop>:

void platform_timer_stop()
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim2);
 8008ca0:	4803      	ldr	r0, [pc, #12]	; (8008cb0 <platform_timer_stop+0x14>)
 8008ca2:	f7fa feae 	bl	8003a02 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim4);
 8008ca6:	4803      	ldr	r0, [pc, #12]	; (8008cb4 <platform_timer_stop+0x18>)
 8008ca8:	f7fa feab 	bl	8003a02 <HAL_TIM_Base_Stop_IT>
}
 8008cac:	bf00      	nop
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	20000a78 	.word	0x20000a78
 8008cb4:	200009f8 	.word	0x200009f8

08008cb8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
    if (htim->Instance == htim2.Instance)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	4b0b      	ldr	r3, [pc, #44]	; (8008cf4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d105      	bne.n	8008cd8 <HAL_TIM_PeriodElapsedCallback+0x20>
    {
    	keys_action();
 8008ccc:	f7fc fc46 	bl	800555c <keys_action>
    	__pulse_counter_mkup_water();
 8008cd0:	f7ff ff70 	bl	8008bb4 <__pulse_counter_mkup_water>
    	__pulse_counter_blowdown_water();
 8008cd4:	f7ff ff9c 	bl	8008c10 <__pulse_counter_blowdown_water>
    }
    if (htim->Instance == htim4.Instance)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	4b06      	ldr	r3, [pc, #24]	; (8008cf8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d102      	bne.n	8008cea <HAL_TIM_PeriodElapsedCallback+0x32>
	{
    	//keypad_status = 0;
    	DisplayActions();
 8008ce4:	4b05      	ldr	r3, [pc, #20]	; (8008cfc <HAL_TIM_PeriodElapsedCallback+0x44>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4798      	blx	r3
    else if (htim->Instance == htim5.Instance)
	{
    	//keypad_action();
    	//keypad_status = 1;
	}
}
 8008cea:	bf00      	nop
 8008cec:	3708      	adds	r7, #8
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	20000a78 	.word	0x20000a78
 8008cf8:	200009f8 	.word	0x200009f8
 8008cfc:	200006d4 	.word	0x200006d4

08008d00 <__MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
void __MX_UART5_Init(void)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8008d04:	4b11      	ldr	r3, [pc, #68]	; (8008d4c <__MX_UART5_Init+0x4c>)
 8008d06:	4a12      	ldr	r2, [pc, #72]	; (8008d50 <__MX_UART5_Init+0x50>)
 8008d08:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8008d0a:	4b10      	ldr	r3, [pc, #64]	; (8008d4c <__MX_UART5_Init+0x4c>)
 8008d0c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8008d10:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8008d12:	4b0e      	ldr	r3, [pc, #56]	; (8008d4c <__MX_UART5_Init+0x4c>)
 8008d14:	2200      	movs	r2, #0
 8008d16:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8008d18:	4b0c      	ldr	r3, [pc, #48]	; (8008d4c <__MX_UART5_Init+0x4c>)
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8008d1e:	4b0b      	ldr	r3, [pc, #44]	; (8008d4c <__MX_UART5_Init+0x4c>)
 8008d20:	2200      	movs	r2, #0
 8008d22:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8008d24:	4b09      	ldr	r3, [pc, #36]	; (8008d4c <__MX_UART5_Init+0x4c>)
 8008d26:	220c      	movs	r2, #12
 8008d28:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008d2a:	4b08      	ldr	r3, [pc, #32]	; (8008d4c <__MX_UART5_Init+0x4c>)
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8008d30:	4b06      	ldr	r3, [pc, #24]	; (8008d4c <__MX_UART5_Init+0x4c>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8008d36:	4805      	ldr	r0, [pc, #20]	; (8008d4c <__MX_UART5_Init+0x4c>)
 8008d38:	f7fb fa40 	bl	80041bc <HAL_UART_Init>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d001      	beq.n	8008d46 <__MX_UART5_Init+0x46>
  {
    Error_Handler();
 8008d42:	f7ff f94f 	bl	8007fe4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8008d46:	bf00      	nop
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	20000af8 	.word	0x20000af8
 8008d50:	40005000 	.word	0x40005000

08008d54 <__MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
void __MX_UART7_Init(void)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8008d58:	4b11      	ldr	r3, [pc, #68]	; (8008da0 <__MX_UART7_Init+0x4c>)
 8008d5a:	4a12      	ldr	r2, [pc, #72]	; (8008da4 <__MX_UART7_Init+0x50>)
 8008d5c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 8008d5e:	4b10      	ldr	r3, [pc, #64]	; (8008da0 <__MX_UART7_Init+0x4c>)
 8008d60:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8008d64:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8008d66:	4b0e      	ldr	r3, [pc, #56]	; (8008da0 <__MX_UART7_Init+0x4c>)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8008d6c:	4b0c      	ldr	r3, [pc, #48]	; (8008da0 <__MX_UART7_Init+0x4c>)
 8008d6e:	2200      	movs	r2, #0
 8008d70:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8008d72:	4b0b      	ldr	r3, [pc, #44]	; (8008da0 <__MX_UART7_Init+0x4c>)
 8008d74:	2200      	movs	r2, #0
 8008d76:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8008d78:	4b09      	ldr	r3, [pc, #36]	; (8008da0 <__MX_UART7_Init+0x4c>)
 8008d7a:	220c      	movs	r2, #12
 8008d7c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008d7e:	4b08      	ldr	r3, [pc, #32]	; (8008da0 <__MX_UART7_Init+0x4c>)
 8008d80:	2200      	movs	r2, #0
 8008d82:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8008d84:	4b06      	ldr	r3, [pc, #24]	; (8008da0 <__MX_UART7_Init+0x4c>)
 8008d86:	2200      	movs	r2, #0
 8008d88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8008d8a:	4805      	ldr	r0, [pc, #20]	; (8008da0 <__MX_UART7_Init+0x4c>)
 8008d8c:	f7fb fa16 	bl	80041bc <HAL_UART_Init>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d001      	beq.n	8008d9a <__MX_UART7_Init+0x46>
  {
    Error_Handler();
 8008d96:	f7ff f925 	bl	8007fe4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8008d9a:	bf00      	nop
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	20000ab8 	.word	0x20000ab8
 8008da4:	40007800 	.word	0x40007800

08008da8 <__MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void __MX_USART2_UART_Init(void)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008dac:	4b11      	ldr	r3, [pc, #68]	; (8008df4 <__MX_USART2_UART_Init+0x4c>)
 8008dae:	4a12      	ldr	r2, [pc, #72]	; (8008df8 <__MX_USART2_UART_Init+0x50>)
 8008db0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008db2:	4b10      	ldr	r3, [pc, #64]	; (8008df4 <__MX_USART2_UART_Init+0x4c>)
 8008db4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008db8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008dba:	4b0e      	ldr	r3, [pc, #56]	; (8008df4 <__MX_USART2_UART_Init+0x4c>)
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008dc0:	4b0c      	ldr	r3, [pc, #48]	; (8008df4 <__MX_USART2_UART_Init+0x4c>)
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008dc6:	4b0b      	ldr	r3, [pc, #44]	; (8008df4 <__MX_USART2_UART_Init+0x4c>)
 8008dc8:	2200      	movs	r2, #0
 8008dca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008dcc:	4b09      	ldr	r3, [pc, #36]	; (8008df4 <__MX_USART2_UART_Init+0x4c>)
 8008dce:	220c      	movs	r2, #12
 8008dd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008dd2:	4b08      	ldr	r3, [pc, #32]	; (8008df4 <__MX_USART2_UART_Init+0x4c>)
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008dd8:	4b06      	ldr	r3, [pc, #24]	; (8008df4 <__MX_USART2_UART_Init+0x4c>)
 8008dda:	2200      	movs	r2, #0
 8008ddc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008dde:	4805      	ldr	r0, [pc, #20]	; (8008df4 <__MX_USART2_UART_Init+0x4c>)
 8008de0:	f7fb f9ec 	bl	80041bc <HAL_UART_Init>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d001      	beq.n	8008dee <__MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8008dea:	f7ff f8fb 	bl	8007fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008dee:	bf00      	nop
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	20000b38 	.word	0x20000b38
 8008df8:	40004400 	.word	0x40004400

08008dfc <__wifi_uart_init>:

void __wifi_uart_init()
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	af00      	add	r7, sp, #0
	__MX_USART2_UART_Init();
 8008e00:	f7ff ffd2 	bl	8008da8 <__MX_USART2_UART_Init>
}
 8008e04:	bf00      	nop
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <__lcd_uart_init>:

void __lcd_uart_init()
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	af00      	add	r7, sp, #0
	__MX_UART7_Init();
 8008e0c:	f7ff ffa2 	bl	8008d54 <__MX_UART7_Init>
}
 8008e10:	bf00      	nop
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <__rs485_uart_init>:

void __rs485_uart_init()
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	af00      	add	r7, sp, #0
	__MX_UART5_Init();
 8008e18:	f7ff ff72 	bl	8008d00 <__MX_UART5_Init>
}
 8008e1c:	bf00      	nop
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <platform_uart_init>:
/*******************************************************************************
 *  PUBLIC
 ******************************************************************************/

void platform_uart_init()
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	af00      	add	r7, sp, #0
	__wifi_uart_init();
 8008e24:	f7ff ffea 	bl	8008dfc <__wifi_uart_init>
	__lcd_uart_init();
 8008e28:	f7ff ffee 	bl	8008e08 <__lcd_uart_init>
	__rs485_uart_init();
 8008e2c:	f7ff fff2 	bl	8008e14 <__rs485_uart_init>
}
 8008e30:	bf00      	nop
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <lcd_send_cmd>:

void lcd_send_cmd(char *pData, int Size)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_IT(&huart7,pData,Size);
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	461a      	mov	r2, r3
 8008e44:	6879      	ldr	r1, [r7, #4]
 8008e46:	4803      	ldr	r0, [pc, #12]	; (8008e54 <lcd_send_cmd+0x20>)
 8008e48:	f7fb fa05 	bl	8004256 <HAL_UART_Transmit_IT>
}
 8008e4c:	bf00      	nop
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	20000ab8 	.word	0x20000ab8

08008e58 <wifi_send_cmd>:

void wifi_send_cmd(char *pData, int Size)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_IT(&huart2,pData,Size);
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	461a      	mov	r2, r3
 8008e68:	6879      	ldr	r1, [r7, #4]
 8008e6a:	4803      	ldr	r0, [pc, #12]	; (8008e78 <wifi_send_cmd+0x20>)
 8008e6c:	f7fb f9f3 	bl	8004256 <HAL_UART_Transmit_IT>
}
 8008e70:	bf00      	nop
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	20000b38 	.word	0x20000b38

08008e7c <__errno>:
 8008e7c:	4b01      	ldr	r3, [pc, #4]	; (8008e84 <__errno+0x8>)
 8008e7e:	6818      	ldr	r0, [r3, #0]
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	20000014 	.word	0x20000014

08008e88 <__libc_init_array>:
 8008e88:	b570      	push	{r4, r5, r6, lr}
 8008e8a:	4e0d      	ldr	r6, [pc, #52]	; (8008ec0 <__libc_init_array+0x38>)
 8008e8c:	4c0d      	ldr	r4, [pc, #52]	; (8008ec4 <__libc_init_array+0x3c>)
 8008e8e:	1ba4      	subs	r4, r4, r6
 8008e90:	10a4      	asrs	r4, r4, #2
 8008e92:	2500      	movs	r5, #0
 8008e94:	42a5      	cmp	r5, r4
 8008e96:	d109      	bne.n	8008eac <__libc_init_array+0x24>
 8008e98:	4e0b      	ldr	r6, [pc, #44]	; (8008ec8 <__libc_init_array+0x40>)
 8008e9a:	4c0c      	ldr	r4, [pc, #48]	; (8008ecc <__libc_init_array+0x44>)
 8008e9c:	f003 fd8a 	bl	800c9b4 <_init>
 8008ea0:	1ba4      	subs	r4, r4, r6
 8008ea2:	10a4      	asrs	r4, r4, #2
 8008ea4:	2500      	movs	r5, #0
 8008ea6:	42a5      	cmp	r5, r4
 8008ea8:	d105      	bne.n	8008eb6 <__libc_init_array+0x2e>
 8008eaa:	bd70      	pop	{r4, r5, r6, pc}
 8008eac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008eb0:	4798      	blx	r3
 8008eb2:	3501      	adds	r5, #1
 8008eb4:	e7ee      	b.n	8008e94 <__libc_init_array+0xc>
 8008eb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008eba:	4798      	blx	r3
 8008ebc:	3501      	adds	r5, #1
 8008ebe:	e7f2      	b.n	8008ea6 <__libc_init_array+0x1e>
 8008ec0:	0800d4f0 	.word	0x0800d4f0
 8008ec4:	0800d4f0 	.word	0x0800d4f0
 8008ec8:	0800d4f0 	.word	0x0800d4f0
 8008ecc:	0800d4f4 	.word	0x0800d4f4

08008ed0 <memset>:
 8008ed0:	4402      	add	r2, r0
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d100      	bne.n	8008eda <memset+0xa>
 8008ed8:	4770      	bx	lr
 8008eda:	f803 1b01 	strb.w	r1, [r3], #1
 8008ede:	e7f9      	b.n	8008ed4 <memset+0x4>

08008ee0 <__cvt>:
 8008ee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ee4:	ec55 4b10 	vmov	r4, r5, d0
 8008ee8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008eea:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008eee:	2d00      	cmp	r5, #0
 8008ef0:	460e      	mov	r6, r1
 8008ef2:	4691      	mov	r9, r2
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	bfb8      	it	lt
 8008ef8:	4622      	movlt	r2, r4
 8008efa:	462b      	mov	r3, r5
 8008efc:	f027 0720 	bic.w	r7, r7, #32
 8008f00:	bfbb      	ittet	lt
 8008f02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008f06:	461d      	movlt	r5, r3
 8008f08:	2300      	movge	r3, #0
 8008f0a:	232d      	movlt	r3, #45	; 0x2d
 8008f0c:	bfb8      	it	lt
 8008f0e:	4614      	movlt	r4, r2
 8008f10:	2f46      	cmp	r7, #70	; 0x46
 8008f12:	700b      	strb	r3, [r1, #0]
 8008f14:	d004      	beq.n	8008f20 <__cvt+0x40>
 8008f16:	2f45      	cmp	r7, #69	; 0x45
 8008f18:	d100      	bne.n	8008f1c <__cvt+0x3c>
 8008f1a:	3601      	adds	r6, #1
 8008f1c:	2102      	movs	r1, #2
 8008f1e:	e000      	b.n	8008f22 <__cvt+0x42>
 8008f20:	2103      	movs	r1, #3
 8008f22:	ab03      	add	r3, sp, #12
 8008f24:	9301      	str	r3, [sp, #4]
 8008f26:	ab02      	add	r3, sp, #8
 8008f28:	9300      	str	r3, [sp, #0]
 8008f2a:	4632      	mov	r2, r6
 8008f2c:	4653      	mov	r3, sl
 8008f2e:	ec45 4b10 	vmov	d0, r4, r5
 8008f32:	f001 fda9 	bl	800aa88 <_dtoa_r>
 8008f36:	2f47      	cmp	r7, #71	; 0x47
 8008f38:	4680      	mov	r8, r0
 8008f3a:	d102      	bne.n	8008f42 <__cvt+0x62>
 8008f3c:	f019 0f01 	tst.w	r9, #1
 8008f40:	d026      	beq.n	8008f90 <__cvt+0xb0>
 8008f42:	2f46      	cmp	r7, #70	; 0x46
 8008f44:	eb08 0906 	add.w	r9, r8, r6
 8008f48:	d111      	bne.n	8008f6e <__cvt+0x8e>
 8008f4a:	f898 3000 	ldrb.w	r3, [r8]
 8008f4e:	2b30      	cmp	r3, #48	; 0x30
 8008f50:	d10a      	bne.n	8008f68 <__cvt+0x88>
 8008f52:	2200      	movs	r2, #0
 8008f54:	2300      	movs	r3, #0
 8008f56:	4620      	mov	r0, r4
 8008f58:	4629      	mov	r1, r5
 8008f5a:	f7f7 fdc5 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f5e:	b918      	cbnz	r0, 8008f68 <__cvt+0x88>
 8008f60:	f1c6 0601 	rsb	r6, r6, #1
 8008f64:	f8ca 6000 	str.w	r6, [sl]
 8008f68:	f8da 3000 	ldr.w	r3, [sl]
 8008f6c:	4499      	add	r9, r3
 8008f6e:	2200      	movs	r2, #0
 8008f70:	2300      	movs	r3, #0
 8008f72:	4620      	mov	r0, r4
 8008f74:	4629      	mov	r1, r5
 8008f76:	f7f7 fdb7 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f7a:	b938      	cbnz	r0, 8008f8c <__cvt+0xac>
 8008f7c:	2230      	movs	r2, #48	; 0x30
 8008f7e:	9b03      	ldr	r3, [sp, #12]
 8008f80:	454b      	cmp	r3, r9
 8008f82:	d205      	bcs.n	8008f90 <__cvt+0xb0>
 8008f84:	1c59      	adds	r1, r3, #1
 8008f86:	9103      	str	r1, [sp, #12]
 8008f88:	701a      	strb	r2, [r3, #0]
 8008f8a:	e7f8      	b.n	8008f7e <__cvt+0x9e>
 8008f8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008f90:	9b03      	ldr	r3, [sp, #12]
 8008f92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f94:	eba3 0308 	sub.w	r3, r3, r8
 8008f98:	4640      	mov	r0, r8
 8008f9a:	6013      	str	r3, [r2, #0]
 8008f9c:	b004      	add	sp, #16
 8008f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008fa2 <__exponent>:
 8008fa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fa4:	2900      	cmp	r1, #0
 8008fa6:	4604      	mov	r4, r0
 8008fa8:	bfba      	itte	lt
 8008faa:	4249      	neglt	r1, r1
 8008fac:	232d      	movlt	r3, #45	; 0x2d
 8008fae:	232b      	movge	r3, #43	; 0x2b
 8008fb0:	2909      	cmp	r1, #9
 8008fb2:	f804 2b02 	strb.w	r2, [r4], #2
 8008fb6:	7043      	strb	r3, [r0, #1]
 8008fb8:	dd20      	ble.n	8008ffc <__exponent+0x5a>
 8008fba:	f10d 0307 	add.w	r3, sp, #7
 8008fbe:	461f      	mov	r7, r3
 8008fc0:	260a      	movs	r6, #10
 8008fc2:	fb91 f5f6 	sdiv	r5, r1, r6
 8008fc6:	fb06 1115 	mls	r1, r6, r5, r1
 8008fca:	3130      	adds	r1, #48	; 0x30
 8008fcc:	2d09      	cmp	r5, #9
 8008fce:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008fd2:	f103 32ff 	add.w	r2, r3, #4294967295
 8008fd6:	4629      	mov	r1, r5
 8008fd8:	dc09      	bgt.n	8008fee <__exponent+0x4c>
 8008fda:	3130      	adds	r1, #48	; 0x30
 8008fdc:	3b02      	subs	r3, #2
 8008fde:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008fe2:	42bb      	cmp	r3, r7
 8008fe4:	4622      	mov	r2, r4
 8008fe6:	d304      	bcc.n	8008ff2 <__exponent+0x50>
 8008fe8:	1a10      	subs	r0, r2, r0
 8008fea:	b003      	add	sp, #12
 8008fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fee:	4613      	mov	r3, r2
 8008ff0:	e7e7      	b.n	8008fc2 <__exponent+0x20>
 8008ff2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ff6:	f804 2b01 	strb.w	r2, [r4], #1
 8008ffa:	e7f2      	b.n	8008fe2 <__exponent+0x40>
 8008ffc:	2330      	movs	r3, #48	; 0x30
 8008ffe:	4419      	add	r1, r3
 8009000:	7083      	strb	r3, [r0, #2]
 8009002:	1d02      	adds	r2, r0, #4
 8009004:	70c1      	strb	r1, [r0, #3]
 8009006:	e7ef      	b.n	8008fe8 <__exponent+0x46>

08009008 <_printf_float>:
 8009008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800900c:	b08d      	sub	sp, #52	; 0x34
 800900e:	460c      	mov	r4, r1
 8009010:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009014:	4616      	mov	r6, r2
 8009016:	461f      	mov	r7, r3
 8009018:	4605      	mov	r5, r0
 800901a:	f002 fe19 	bl	800bc50 <_localeconv_r>
 800901e:	6803      	ldr	r3, [r0, #0]
 8009020:	9304      	str	r3, [sp, #16]
 8009022:	4618      	mov	r0, r3
 8009024:	f7f7 f8e4 	bl	80001f0 <strlen>
 8009028:	2300      	movs	r3, #0
 800902a:	930a      	str	r3, [sp, #40]	; 0x28
 800902c:	f8d8 3000 	ldr.w	r3, [r8]
 8009030:	9005      	str	r0, [sp, #20]
 8009032:	3307      	adds	r3, #7
 8009034:	f023 0307 	bic.w	r3, r3, #7
 8009038:	f103 0208 	add.w	r2, r3, #8
 800903c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009040:	f8d4 b000 	ldr.w	fp, [r4]
 8009044:	f8c8 2000 	str.w	r2, [r8]
 8009048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009050:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009054:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009058:	9307      	str	r3, [sp, #28]
 800905a:	f8cd 8018 	str.w	r8, [sp, #24]
 800905e:	f04f 32ff 	mov.w	r2, #4294967295
 8009062:	4ba7      	ldr	r3, [pc, #668]	; (8009300 <_printf_float+0x2f8>)
 8009064:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009068:	f7f7 fd70 	bl	8000b4c <__aeabi_dcmpun>
 800906c:	bb70      	cbnz	r0, 80090cc <_printf_float+0xc4>
 800906e:	f04f 32ff 	mov.w	r2, #4294967295
 8009072:	4ba3      	ldr	r3, [pc, #652]	; (8009300 <_printf_float+0x2f8>)
 8009074:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009078:	f7f7 fd4a 	bl	8000b10 <__aeabi_dcmple>
 800907c:	bb30      	cbnz	r0, 80090cc <_printf_float+0xc4>
 800907e:	2200      	movs	r2, #0
 8009080:	2300      	movs	r3, #0
 8009082:	4640      	mov	r0, r8
 8009084:	4649      	mov	r1, r9
 8009086:	f7f7 fd39 	bl	8000afc <__aeabi_dcmplt>
 800908a:	b110      	cbz	r0, 8009092 <_printf_float+0x8a>
 800908c:	232d      	movs	r3, #45	; 0x2d
 800908e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009092:	4a9c      	ldr	r2, [pc, #624]	; (8009304 <_printf_float+0x2fc>)
 8009094:	4b9c      	ldr	r3, [pc, #624]	; (8009308 <_printf_float+0x300>)
 8009096:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800909a:	bf8c      	ite	hi
 800909c:	4690      	movhi	r8, r2
 800909e:	4698      	movls	r8, r3
 80090a0:	2303      	movs	r3, #3
 80090a2:	f02b 0204 	bic.w	r2, fp, #4
 80090a6:	6123      	str	r3, [r4, #16]
 80090a8:	6022      	str	r2, [r4, #0]
 80090aa:	f04f 0900 	mov.w	r9, #0
 80090ae:	9700      	str	r7, [sp, #0]
 80090b0:	4633      	mov	r3, r6
 80090b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80090b4:	4621      	mov	r1, r4
 80090b6:	4628      	mov	r0, r5
 80090b8:	f000 f9e6 	bl	8009488 <_printf_common>
 80090bc:	3001      	adds	r0, #1
 80090be:	f040 808d 	bne.w	80091dc <_printf_float+0x1d4>
 80090c2:	f04f 30ff 	mov.w	r0, #4294967295
 80090c6:	b00d      	add	sp, #52	; 0x34
 80090c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090cc:	4642      	mov	r2, r8
 80090ce:	464b      	mov	r3, r9
 80090d0:	4640      	mov	r0, r8
 80090d2:	4649      	mov	r1, r9
 80090d4:	f7f7 fd3a 	bl	8000b4c <__aeabi_dcmpun>
 80090d8:	b110      	cbz	r0, 80090e0 <_printf_float+0xd8>
 80090da:	4a8c      	ldr	r2, [pc, #560]	; (800930c <_printf_float+0x304>)
 80090dc:	4b8c      	ldr	r3, [pc, #560]	; (8009310 <_printf_float+0x308>)
 80090de:	e7da      	b.n	8009096 <_printf_float+0x8e>
 80090e0:	6861      	ldr	r1, [r4, #4]
 80090e2:	1c4b      	adds	r3, r1, #1
 80090e4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80090e8:	a80a      	add	r0, sp, #40	; 0x28
 80090ea:	d13e      	bne.n	800916a <_printf_float+0x162>
 80090ec:	2306      	movs	r3, #6
 80090ee:	6063      	str	r3, [r4, #4]
 80090f0:	2300      	movs	r3, #0
 80090f2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80090f6:	ab09      	add	r3, sp, #36	; 0x24
 80090f8:	9300      	str	r3, [sp, #0]
 80090fa:	ec49 8b10 	vmov	d0, r8, r9
 80090fe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009102:	6022      	str	r2, [r4, #0]
 8009104:	f8cd a004 	str.w	sl, [sp, #4]
 8009108:	6861      	ldr	r1, [r4, #4]
 800910a:	4628      	mov	r0, r5
 800910c:	f7ff fee8 	bl	8008ee0 <__cvt>
 8009110:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009114:	2b47      	cmp	r3, #71	; 0x47
 8009116:	4680      	mov	r8, r0
 8009118:	d109      	bne.n	800912e <_printf_float+0x126>
 800911a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800911c:	1cd8      	adds	r0, r3, #3
 800911e:	db02      	blt.n	8009126 <_printf_float+0x11e>
 8009120:	6862      	ldr	r2, [r4, #4]
 8009122:	4293      	cmp	r3, r2
 8009124:	dd47      	ble.n	80091b6 <_printf_float+0x1ae>
 8009126:	f1aa 0a02 	sub.w	sl, sl, #2
 800912a:	fa5f fa8a 	uxtb.w	sl, sl
 800912e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009132:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009134:	d824      	bhi.n	8009180 <_printf_float+0x178>
 8009136:	3901      	subs	r1, #1
 8009138:	4652      	mov	r2, sl
 800913a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800913e:	9109      	str	r1, [sp, #36]	; 0x24
 8009140:	f7ff ff2f 	bl	8008fa2 <__exponent>
 8009144:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009146:	1813      	adds	r3, r2, r0
 8009148:	2a01      	cmp	r2, #1
 800914a:	4681      	mov	r9, r0
 800914c:	6123      	str	r3, [r4, #16]
 800914e:	dc02      	bgt.n	8009156 <_printf_float+0x14e>
 8009150:	6822      	ldr	r2, [r4, #0]
 8009152:	07d1      	lsls	r1, r2, #31
 8009154:	d501      	bpl.n	800915a <_printf_float+0x152>
 8009156:	3301      	adds	r3, #1
 8009158:	6123      	str	r3, [r4, #16]
 800915a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800915e:	2b00      	cmp	r3, #0
 8009160:	d0a5      	beq.n	80090ae <_printf_float+0xa6>
 8009162:	232d      	movs	r3, #45	; 0x2d
 8009164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009168:	e7a1      	b.n	80090ae <_printf_float+0xa6>
 800916a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800916e:	f000 8177 	beq.w	8009460 <_printf_float+0x458>
 8009172:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009176:	d1bb      	bne.n	80090f0 <_printf_float+0xe8>
 8009178:	2900      	cmp	r1, #0
 800917a:	d1b9      	bne.n	80090f0 <_printf_float+0xe8>
 800917c:	2301      	movs	r3, #1
 800917e:	e7b6      	b.n	80090ee <_printf_float+0xe6>
 8009180:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009184:	d119      	bne.n	80091ba <_printf_float+0x1b2>
 8009186:	2900      	cmp	r1, #0
 8009188:	6863      	ldr	r3, [r4, #4]
 800918a:	dd0c      	ble.n	80091a6 <_printf_float+0x19e>
 800918c:	6121      	str	r1, [r4, #16]
 800918e:	b913      	cbnz	r3, 8009196 <_printf_float+0x18e>
 8009190:	6822      	ldr	r2, [r4, #0]
 8009192:	07d2      	lsls	r2, r2, #31
 8009194:	d502      	bpl.n	800919c <_printf_float+0x194>
 8009196:	3301      	adds	r3, #1
 8009198:	440b      	add	r3, r1
 800919a:	6123      	str	r3, [r4, #16]
 800919c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800919e:	65a3      	str	r3, [r4, #88]	; 0x58
 80091a0:	f04f 0900 	mov.w	r9, #0
 80091a4:	e7d9      	b.n	800915a <_printf_float+0x152>
 80091a6:	b913      	cbnz	r3, 80091ae <_printf_float+0x1a6>
 80091a8:	6822      	ldr	r2, [r4, #0]
 80091aa:	07d0      	lsls	r0, r2, #31
 80091ac:	d501      	bpl.n	80091b2 <_printf_float+0x1aa>
 80091ae:	3302      	adds	r3, #2
 80091b0:	e7f3      	b.n	800919a <_printf_float+0x192>
 80091b2:	2301      	movs	r3, #1
 80091b4:	e7f1      	b.n	800919a <_printf_float+0x192>
 80091b6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80091ba:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80091be:	4293      	cmp	r3, r2
 80091c0:	db05      	blt.n	80091ce <_printf_float+0x1c6>
 80091c2:	6822      	ldr	r2, [r4, #0]
 80091c4:	6123      	str	r3, [r4, #16]
 80091c6:	07d1      	lsls	r1, r2, #31
 80091c8:	d5e8      	bpl.n	800919c <_printf_float+0x194>
 80091ca:	3301      	adds	r3, #1
 80091cc:	e7e5      	b.n	800919a <_printf_float+0x192>
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	bfd4      	ite	le
 80091d2:	f1c3 0302 	rsble	r3, r3, #2
 80091d6:	2301      	movgt	r3, #1
 80091d8:	4413      	add	r3, r2
 80091da:	e7de      	b.n	800919a <_printf_float+0x192>
 80091dc:	6823      	ldr	r3, [r4, #0]
 80091de:	055a      	lsls	r2, r3, #21
 80091e0:	d407      	bmi.n	80091f2 <_printf_float+0x1ea>
 80091e2:	6923      	ldr	r3, [r4, #16]
 80091e4:	4642      	mov	r2, r8
 80091e6:	4631      	mov	r1, r6
 80091e8:	4628      	mov	r0, r5
 80091ea:	47b8      	blx	r7
 80091ec:	3001      	adds	r0, #1
 80091ee:	d12b      	bne.n	8009248 <_printf_float+0x240>
 80091f0:	e767      	b.n	80090c2 <_printf_float+0xba>
 80091f2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80091f6:	f240 80dc 	bls.w	80093b2 <_printf_float+0x3aa>
 80091fa:	2200      	movs	r2, #0
 80091fc:	2300      	movs	r3, #0
 80091fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009202:	f7f7 fc71 	bl	8000ae8 <__aeabi_dcmpeq>
 8009206:	2800      	cmp	r0, #0
 8009208:	d033      	beq.n	8009272 <_printf_float+0x26a>
 800920a:	2301      	movs	r3, #1
 800920c:	4a41      	ldr	r2, [pc, #260]	; (8009314 <_printf_float+0x30c>)
 800920e:	4631      	mov	r1, r6
 8009210:	4628      	mov	r0, r5
 8009212:	47b8      	blx	r7
 8009214:	3001      	adds	r0, #1
 8009216:	f43f af54 	beq.w	80090c2 <_printf_float+0xba>
 800921a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800921e:	429a      	cmp	r2, r3
 8009220:	db02      	blt.n	8009228 <_printf_float+0x220>
 8009222:	6823      	ldr	r3, [r4, #0]
 8009224:	07d8      	lsls	r0, r3, #31
 8009226:	d50f      	bpl.n	8009248 <_printf_float+0x240>
 8009228:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800922c:	4631      	mov	r1, r6
 800922e:	4628      	mov	r0, r5
 8009230:	47b8      	blx	r7
 8009232:	3001      	adds	r0, #1
 8009234:	f43f af45 	beq.w	80090c2 <_printf_float+0xba>
 8009238:	f04f 0800 	mov.w	r8, #0
 800923c:	f104 091a 	add.w	r9, r4, #26
 8009240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009242:	3b01      	subs	r3, #1
 8009244:	4543      	cmp	r3, r8
 8009246:	dc09      	bgt.n	800925c <_printf_float+0x254>
 8009248:	6823      	ldr	r3, [r4, #0]
 800924a:	079b      	lsls	r3, r3, #30
 800924c:	f100 8103 	bmi.w	8009456 <_printf_float+0x44e>
 8009250:	68e0      	ldr	r0, [r4, #12]
 8009252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009254:	4298      	cmp	r0, r3
 8009256:	bfb8      	it	lt
 8009258:	4618      	movlt	r0, r3
 800925a:	e734      	b.n	80090c6 <_printf_float+0xbe>
 800925c:	2301      	movs	r3, #1
 800925e:	464a      	mov	r2, r9
 8009260:	4631      	mov	r1, r6
 8009262:	4628      	mov	r0, r5
 8009264:	47b8      	blx	r7
 8009266:	3001      	adds	r0, #1
 8009268:	f43f af2b 	beq.w	80090c2 <_printf_float+0xba>
 800926c:	f108 0801 	add.w	r8, r8, #1
 8009270:	e7e6      	b.n	8009240 <_printf_float+0x238>
 8009272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009274:	2b00      	cmp	r3, #0
 8009276:	dc2b      	bgt.n	80092d0 <_printf_float+0x2c8>
 8009278:	2301      	movs	r3, #1
 800927a:	4a26      	ldr	r2, [pc, #152]	; (8009314 <_printf_float+0x30c>)
 800927c:	4631      	mov	r1, r6
 800927e:	4628      	mov	r0, r5
 8009280:	47b8      	blx	r7
 8009282:	3001      	adds	r0, #1
 8009284:	f43f af1d 	beq.w	80090c2 <_printf_float+0xba>
 8009288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800928a:	b923      	cbnz	r3, 8009296 <_printf_float+0x28e>
 800928c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800928e:	b913      	cbnz	r3, 8009296 <_printf_float+0x28e>
 8009290:	6823      	ldr	r3, [r4, #0]
 8009292:	07d9      	lsls	r1, r3, #31
 8009294:	d5d8      	bpl.n	8009248 <_printf_float+0x240>
 8009296:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800929a:	4631      	mov	r1, r6
 800929c:	4628      	mov	r0, r5
 800929e:	47b8      	blx	r7
 80092a0:	3001      	adds	r0, #1
 80092a2:	f43f af0e 	beq.w	80090c2 <_printf_float+0xba>
 80092a6:	f04f 0900 	mov.w	r9, #0
 80092aa:	f104 0a1a 	add.w	sl, r4, #26
 80092ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092b0:	425b      	negs	r3, r3
 80092b2:	454b      	cmp	r3, r9
 80092b4:	dc01      	bgt.n	80092ba <_printf_float+0x2b2>
 80092b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092b8:	e794      	b.n	80091e4 <_printf_float+0x1dc>
 80092ba:	2301      	movs	r3, #1
 80092bc:	4652      	mov	r2, sl
 80092be:	4631      	mov	r1, r6
 80092c0:	4628      	mov	r0, r5
 80092c2:	47b8      	blx	r7
 80092c4:	3001      	adds	r0, #1
 80092c6:	f43f aefc 	beq.w	80090c2 <_printf_float+0xba>
 80092ca:	f109 0901 	add.w	r9, r9, #1
 80092ce:	e7ee      	b.n	80092ae <_printf_float+0x2a6>
 80092d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80092d4:	429a      	cmp	r2, r3
 80092d6:	bfa8      	it	ge
 80092d8:	461a      	movge	r2, r3
 80092da:	2a00      	cmp	r2, #0
 80092dc:	4691      	mov	r9, r2
 80092de:	dd07      	ble.n	80092f0 <_printf_float+0x2e8>
 80092e0:	4613      	mov	r3, r2
 80092e2:	4631      	mov	r1, r6
 80092e4:	4642      	mov	r2, r8
 80092e6:	4628      	mov	r0, r5
 80092e8:	47b8      	blx	r7
 80092ea:	3001      	adds	r0, #1
 80092ec:	f43f aee9 	beq.w	80090c2 <_printf_float+0xba>
 80092f0:	f104 031a 	add.w	r3, r4, #26
 80092f4:	f04f 0b00 	mov.w	fp, #0
 80092f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092fc:	9306      	str	r3, [sp, #24]
 80092fe:	e015      	b.n	800932c <_printf_float+0x324>
 8009300:	7fefffff 	.word	0x7fefffff
 8009304:	0800d238 	.word	0x0800d238
 8009308:	0800d234 	.word	0x0800d234
 800930c:	0800d240 	.word	0x0800d240
 8009310:	0800d23c 	.word	0x0800d23c
 8009314:	0800d244 	.word	0x0800d244
 8009318:	2301      	movs	r3, #1
 800931a:	9a06      	ldr	r2, [sp, #24]
 800931c:	4631      	mov	r1, r6
 800931e:	4628      	mov	r0, r5
 8009320:	47b8      	blx	r7
 8009322:	3001      	adds	r0, #1
 8009324:	f43f aecd 	beq.w	80090c2 <_printf_float+0xba>
 8009328:	f10b 0b01 	add.w	fp, fp, #1
 800932c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009330:	ebaa 0309 	sub.w	r3, sl, r9
 8009334:	455b      	cmp	r3, fp
 8009336:	dcef      	bgt.n	8009318 <_printf_float+0x310>
 8009338:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800933c:	429a      	cmp	r2, r3
 800933e:	44d0      	add	r8, sl
 8009340:	db15      	blt.n	800936e <_printf_float+0x366>
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	07da      	lsls	r2, r3, #31
 8009346:	d412      	bmi.n	800936e <_printf_float+0x366>
 8009348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800934a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800934c:	eba3 020a 	sub.w	r2, r3, sl
 8009350:	eba3 0a01 	sub.w	sl, r3, r1
 8009354:	4592      	cmp	sl, r2
 8009356:	bfa8      	it	ge
 8009358:	4692      	movge	sl, r2
 800935a:	f1ba 0f00 	cmp.w	sl, #0
 800935e:	dc0e      	bgt.n	800937e <_printf_float+0x376>
 8009360:	f04f 0800 	mov.w	r8, #0
 8009364:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009368:	f104 091a 	add.w	r9, r4, #26
 800936c:	e019      	b.n	80093a2 <_printf_float+0x39a>
 800936e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009372:	4631      	mov	r1, r6
 8009374:	4628      	mov	r0, r5
 8009376:	47b8      	blx	r7
 8009378:	3001      	adds	r0, #1
 800937a:	d1e5      	bne.n	8009348 <_printf_float+0x340>
 800937c:	e6a1      	b.n	80090c2 <_printf_float+0xba>
 800937e:	4653      	mov	r3, sl
 8009380:	4642      	mov	r2, r8
 8009382:	4631      	mov	r1, r6
 8009384:	4628      	mov	r0, r5
 8009386:	47b8      	blx	r7
 8009388:	3001      	adds	r0, #1
 800938a:	d1e9      	bne.n	8009360 <_printf_float+0x358>
 800938c:	e699      	b.n	80090c2 <_printf_float+0xba>
 800938e:	2301      	movs	r3, #1
 8009390:	464a      	mov	r2, r9
 8009392:	4631      	mov	r1, r6
 8009394:	4628      	mov	r0, r5
 8009396:	47b8      	blx	r7
 8009398:	3001      	adds	r0, #1
 800939a:	f43f ae92 	beq.w	80090c2 <_printf_float+0xba>
 800939e:	f108 0801 	add.w	r8, r8, #1
 80093a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093a6:	1a9b      	subs	r3, r3, r2
 80093a8:	eba3 030a 	sub.w	r3, r3, sl
 80093ac:	4543      	cmp	r3, r8
 80093ae:	dcee      	bgt.n	800938e <_printf_float+0x386>
 80093b0:	e74a      	b.n	8009248 <_printf_float+0x240>
 80093b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093b4:	2a01      	cmp	r2, #1
 80093b6:	dc01      	bgt.n	80093bc <_printf_float+0x3b4>
 80093b8:	07db      	lsls	r3, r3, #31
 80093ba:	d53a      	bpl.n	8009432 <_printf_float+0x42a>
 80093bc:	2301      	movs	r3, #1
 80093be:	4642      	mov	r2, r8
 80093c0:	4631      	mov	r1, r6
 80093c2:	4628      	mov	r0, r5
 80093c4:	47b8      	blx	r7
 80093c6:	3001      	adds	r0, #1
 80093c8:	f43f ae7b 	beq.w	80090c2 <_printf_float+0xba>
 80093cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093d0:	4631      	mov	r1, r6
 80093d2:	4628      	mov	r0, r5
 80093d4:	47b8      	blx	r7
 80093d6:	3001      	adds	r0, #1
 80093d8:	f108 0801 	add.w	r8, r8, #1
 80093dc:	f43f ae71 	beq.w	80090c2 <_printf_float+0xba>
 80093e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093e2:	2200      	movs	r2, #0
 80093e4:	f103 3aff 	add.w	sl, r3, #4294967295
 80093e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80093ec:	2300      	movs	r3, #0
 80093ee:	f7f7 fb7b 	bl	8000ae8 <__aeabi_dcmpeq>
 80093f2:	b9c8      	cbnz	r0, 8009428 <_printf_float+0x420>
 80093f4:	4653      	mov	r3, sl
 80093f6:	4642      	mov	r2, r8
 80093f8:	4631      	mov	r1, r6
 80093fa:	4628      	mov	r0, r5
 80093fc:	47b8      	blx	r7
 80093fe:	3001      	adds	r0, #1
 8009400:	d10e      	bne.n	8009420 <_printf_float+0x418>
 8009402:	e65e      	b.n	80090c2 <_printf_float+0xba>
 8009404:	2301      	movs	r3, #1
 8009406:	4652      	mov	r2, sl
 8009408:	4631      	mov	r1, r6
 800940a:	4628      	mov	r0, r5
 800940c:	47b8      	blx	r7
 800940e:	3001      	adds	r0, #1
 8009410:	f43f ae57 	beq.w	80090c2 <_printf_float+0xba>
 8009414:	f108 0801 	add.w	r8, r8, #1
 8009418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800941a:	3b01      	subs	r3, #1
 800941c:	4543      	cmp	r3, r8
 800941e:	dcf1      	bgt.n	8009404 <_printf_float+0x3fc>
 8009420:	464b      	mov	r3, r9
 8009422:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009426:	e6de      	b.n	80091e6 <_printf_float+0x1de>
 8009428:	f04f 0800 	mov.w	r8, #0
 800942c:	f104 0a1a 	add.w	sl, r4, #26
 8009430:	e7f2      	b.n	8009418 <_printf_float+0x410>
 8009432:	2301      	movs	r3, #1
 8009434:	e7df      	b.n	80093f6 <_printf_float+0x3ee>
 8009436:	2301      	movs	r3, #1
 8009438:	464a      	mov	r2, r9
 800943a:	4631      	mov	r1, r6
 800943c:	4628      	mov	r0, r5
 800943e:	47b8      	blx	r7
 8009440:	3001      	adds	r0, #1
 8009442:	f43f ae3e 	beq.w	80090c2 <_printf_float+0xba>
 8009446:	f108 0801 	add.w	r8, r8, #1
 800944a:	68e3      	ldr	r3, [r4, #12]
 800944c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800944e:	1a9b      	subs	r3, r3, r2
 8009450:	4543      	cmp	r3, r8
 8009452:	dcf0      	bgt.n	8009436 <_printf_float+0x42e>
 8009454:	e6fc      	b.n	8009250 <_printf_float+0x248>
 8009456:	f04f 0800 	mov.w	r8, #0
 800945a:	f104 0919 	add.w	r9, r4, #25
 800945e:	e7f4      	b.n	800944a <_printf_float+0x442>
 8009460:	2900      	cmp	r1, #0
 8009462:	f43f ae8b 	beq.w	800917c <_printf_float+0x174>
 8009466:	2300      	movs	r3, #0
 8009468:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800946c:	ab09      	add	r3, sp, #36	; 0x24
 800946e:	9300      	str	r3, [sp, #0]
 8009470:	ec49 8b10 	vmov	d0, r8, r9
 8009474:	6022      	str	r2, [r4, #0]
 8009476:	f8cd a004 	str.w	sl, [sp, #4]
 800947a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800947e:	4628      	mov	r0, r5
 8009480:	f7ff fd2e 	bl	8008ee0 <__cvt>
 8009484:	4680      	mov	r8, r0
 8009486:	e648      	b.n	800911a <_printf_float+0x112>

08009488 <_printf_common>:
 8009488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800948c:	4691      	mov	r9, r2
 800948e:	461f      	mov	r7, r3
 8009490:	688a      	ldr	r2, [r1, #8]
 8009492:	690b      	ldr	r3, [r1, #16]
 8009494:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009498:	4293      	cmp	r3, r2
 800949a:	bfb8      	it	lt
 800949c:	4613      	movlt	r3, r2
 800949e:	f8c9 3000 	str.w	r3, [r9]
 80094a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094a6:	4606      	mov	r6, r0
 80094a8:	460c      	mov	r4, r1
 80094aa:	b112      	cbz	r2, 80094b2 <_printf_common+0x2a>
 80094ac:	3301      	adds	r3, #1
 80094ae:	f8c9 3000 	str.w	r3, [r9]
 80094b2:	6823      	ldr	r3, [r4, #0]
 80094b4:	0699      	lsls	r1, r3, #26
 80094b6:	bf42      	ittt	mi
 80094b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80094bc:	3302      	addmi	r3, #2
 80094be:	f8c9 3000 	strmi.w	r3, [r9]
 80094c2:	6825      	ldr	r5, [r4, #0]
 80094c4:	f015 0506 	ands.w	r5, r5, #6
 80094c8:	d107      	bne.n	80094da <_printf_common+0x52>
 80094ca:	f104 0a19 	add.w	sl, r4, #25
 80094ce:	68e3      	ldr	r3, [r4, #12]
 80094d0:	f8d9 2000 	ldr.w	r2, [r9]
 80094d4:	1a9b      	subs	r3, r3, r2
 80094d6:	42ab      	cmp	r3, r5
 80094d8:	dc28      	bgt.n	800952c <_printf_common+0xa4>
 80094da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80094de:	6822      	ldr	r2, [r4, #0]
 80094e0:	3300      	adds	r3, #0
 80094e2:	bf18      	it	ne
 80094e4:	2301      	movne	r3, #1
 80094e6:	0692      	lsls	r2, r2, #26
 80094e8:	d42d      	bmi.n	8009546 <_printf_common+0xbe>
 80094ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094ee:	4639      	mov	r1, r7
 80094f0:	4630      	mov	r0, r6
 80094f2:	47c0      	blx	r8
 80094f4:	3001      	adds	r0, #1
 80094f6:	d020      	beq.n	800953a <_printf_common+0xb2>
 80094f8:	6823      	ldr	r3, [r4, #0]
 80094fa:	68e5      	ldr	r5, [r4, #12]
 80094fc:	f8d9 2000 	ldr.w	r2, [r9]
 8009500:	f003 0306 	and.w	r3, r3, #6
 8009504:	2b04      	cmp	r3, #4
 8009506:	bf08      	it	eq
 8009508:	1aad      	subeq	r5, r5, r2
 800950a:	68a3      	ldr	r3, [r4, #8]
 800950c:	6922      	ldr	r2, [r4, #16]
 800950e:	bf0c      	ite	eq
 8009510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009514:	2500      	movne	r5, #0
 8009516:	4293      	cmp	r3, r2
 8009518:	bfc4      	itt	gt
 800951a:	1a9b      	subgt	r3, r3, r2
 800951c:	18ed      	addgt	r5, r5, r3
 800951e:	f04f 0900 	mov.w	r9, #0
 8009522:	341a      	adds	r4, #26
 8009524:	454d      	cmp	r5, r9
 8009526:	d11a      	bne.n	800955e <_printf_common+0xd6>
 8009528:	2000      	movs	r0, #0
 800952a:	e008      	b.n	800953e <_printf_common+0xb6>
 800952c:	2301      	movs	r3, #1
 800952e:	4652      	mov	r2, sl
 8009530:	4639      	mov	r1, r7
 8009532:	4630      	mov	r0, r6
 8009534:	47c0      	blx	r8
 8009536:	3001      	adds	r0, #1
 8009538:	d103      	bne.n	8009542 <_printf_common+0xba>
 800953a:	f04f 30ff 	mov.w	r0, #4294967295
 800953e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009542:	3501      	adds	r5, #1
 8009544:	e7c3      	b.n	80094ce <_printf_common+0x46>
 8009546:	18e1      	adds	r1, r4, r3
 8009548:	1c5a      	adds	r2, r3, #1
 800954a:	2030      	movs	r0, #48	; 0x30
 800954c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009550:	4422      	add	r2, r4
 8009552:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009556:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800955a:	3302      	adds	r3, #2
 800955c:	e7c5      	b.n	80094ea <_printf_common+0x62>
 800955e:	2301      	movs	r3, #1
 8009560:	4622      	mov	r2, r4
 8009562:	4639      	mov	r1, r7
 8009564:	4630      	mov	r0, r6
 8009566:	47c0      	blx	r8
 8009568:	3001      	adds	r0, #1
 800956a:	d0e6      	beq.n	800953a <_printf_common+0xb2>
 800956c:	f109 0901 	add.w	r9, r9, #1
 8009570:	e7d8      	b.n	8009524 <_printf_common+0x9c>
	...

08009574 <_printf_i>:
 8009574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009578:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800957c:	460c      	mov	r4, r1
 800957e:	7e09      	ldrb	r1, [r1, #24]
 8009580:	b085      	sub	sp, #20
 8009582:	296e      	cmp	r1, #110	; 0x6e
 8009584:	4617      	mov	r7, r2
 8009586:	4606      	mov	r6, r0
 8009588:	4698      	mov	r8, r3
 800958a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800958c:	f000 80b3 	beq.w	80096f6 <_printf_i+0x182>
 8009590:	d822      	bhi.n	80095d8 <_printf_i+0x64>
 8009592:	2963      	cmp	r1, #99	; 0x63
 8009594:	d036      	beq.n	8009604 <_printf_i+0x90>
 8009596:	d80a      	bhi.n	80095ae <_printf_i+0x3a>
 8009598:	2900      	cmp	r1, #0
 800959a:	f000 80b9 	beq.w	8009710 <_printf_i+0x19c>
 800959e:	2958      	cmp	r1, #88	; 0x58
 80095a0:	f000 8083 	beq.w	80096aa <_printf_i+0x136>
 80095a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80095ac:	e032      	b.n	8009614 <_printf_i+0xa0>
 80095ae:	2964      	cmp	r1, #100	; 0x64
 80095b0:	d001      	beq.n	80095b6 <_printf_i+0x42>
 80095b2:	2969      	cmp	r1, #105	; 0x69
 80095b4:	d1f6      	bne.n	80095a4 <_printf_i+0x30>
 80095b6:	6820      	ldr	r0, [r4, #0]
 80095b8:	6813      	ldr	r3, [r2, #0]
 80095ba:	0605      	lsls	r5, r0, #24
 80095bc:	f103 0104 	add.w	r1, r3, #4
 80095c0:	d52a      	bpl.n	8009618 <_printf_i+0xa4>
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	6011      	str	r1, [r2, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	da03      	bge.n	80095d2 <_printf_i+0x5e>
 80095ca:	222d      	movs	r2, #45	; 0x2d
 80095cc:	425b      	negs	r3, r3
 80095ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80095d2:	486f      	ldr	r0, [pc, #444]	; (8009790 <_printf_i+0x21c>)
 80095d4:	220a      	movs	r2, #10
 80095d6:	e039      	b.n	800964c <_printf_i+0xd8>
 80095d8:	2973      	cmp	r1, #115	; 0x73
 80095da:	f000 809d 	beq.w	8009718 <_printf_i+0x1a4>
 80095de:	d808      	bhi.n	80095f2 <_printf_i+0x7e>
 80095e0:	296f      	cmp	r1, #111	; 0x6f
 80095e2:	d020      	beq.n	8009626 <_printf_i+0xb2>
 80095e4:	2970      	cmp	r1, #112	; 0x70
 80095e6:	d1dd      	bne.n	80095a4 <_printf_i+0x30>
 80095e8:	6823      	ldr	r3, [r4, #0]
 80095ea:	f043 0320 	orr.w	r3, r3, #32
 80095ee:	6023      	str	r3, [r4, #0]
 80095f0:	e003      	b.n	80095fa <_printf_i+0x86>
 80095f2:	2975      	cmp	r1, #117	; 0x75
 80095f4:	d017      	beq.n	8009626 <_printf_i+0xb2>
 80095f6:	2978      	cmp	r1, #120	; 0x78
 80095f8:	d1d4      	bne.n	80095a4 <_printf_i+0x30>
 80095fa:	2378      	movs	r3, #120	; 0x78
 80095fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009600:	4864      	ldr	r0, [pc, #400]	; (8009794 <_printf_i+0x220>)
 8009602:	e055      	b.n	80096b0 <_printf_i+0x13c>
 8009604:	6813      	ldr	r3, [r2, #0]
 8009606:	1d19      	adds	r1, r3, #4
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	6011      	str	r1, [r2, #0]
 800960c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009610:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009614:	2301      	movs	r3, #1
 8009616:	e08c      	b.n	8009732 <_printf_i+0x1be>
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	6011      	str	r1, [r2, #0]
 800961c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009620:	bf18      	it	ne
 8009622:	b21b      	sxthne	r3, r3
 8009624:	e7cf      	b.n	80095c6 <_printf_i+0x52>
 8009626:	6813      	ldr	r3, [r2, #0]
 8009628:	6825      	ldr	r5, [r4, #0]
 800962a:	1d18      	adds	r0, r3, #4
 800962c:	6010      	str	r0, [r2, #0]
 800962e:	0628      	lsls	r0, r5, #24
 8009630:	d501      	bpl.n	8009636 <_printf_i+0xc2>
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	e002      	b.n	800963c <_printf_i+0xc8>
 8009636:	0668      	lsls	r0, r5, #25
 8009638:	d5fb      	bpl.n	8009632 <_printf_i+0xbe>
 800963a:	881b      	ldrh	r3, [r3, #0]
 800963c:	4854      	ldr	r0, [pc, #336]	; (8009790 <_printf_i+0x21c>)
 800963e:	296f      	cmp	r1, #111	; 0x6f
 8009640:	bf14      	ite	ne
 8009642:	220a      	movne	r2, #10
 8009644:	2208      	moveq	r2, #8
 8009646:	2100      	movs	r1, #0
 8009648:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800964c:	6865      	ldr	r5, [r4, #4]
 800964e:	60a5      	str	r5, [r4, #8]
 8009650:	2d00      	cmp	r5, #0
 8009652:	f2c0 8095 	blt.w	8009780 <_printf_i+0x20c>
 8009656:	6821      	ldr	r1, [r4, #0]
 8009658:	f021 0104 	bic.w	r1, r1, #4
 800965c:	6021      	str	r1, [r4, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d13d      	bne.n	80096de <_printf_i+0x16a>
 8009662:	2d00      	cmp	r5, #0
 8009664:	f040 808e 	bne.w	8009784 <_printf_i+0x210>
 8009668:	4665      	mov	r5, ip
 800966a:	2a08      	cmp	r2, #8
 800966c:	d10b      	bne.n	8009686 <_printf_i+0x112>
 800966e:	6823      	ldr	r3, [r4, #0]
 8009670:	07db      	lsls	r3, r3, #31
 8009672:	d508      	bpl.n	8009686 <_printf_i+0x112>
 8009674:	6923      	ldr	r3, [r4, #16]
 8009676:	6862      	ldr	r2, [r4, #4]
 8009678:	429a      	cmp	r2, r3
 800967a:	bfde      	ittt	le
 800967c:	2330      	movle	r3, #48	; 0x30
 800967e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009682:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009686:	ebac 0305 	sub.w	r3, ip, r5
 800968a:	6123      	str	r3, [r4, #16]
 800968c:	f8cd 8000 	str.w	r8, [sp]
 8009690:	463b      	mov	r3, r7
 8009692:	aa03      	add	r2, sp, #12
 8009694:	4621      	mov	r1, r4
 8009696:	4630      	mov	r0, r6
 8009698:	f7ff fef6 	bl	8009488 <_printf_common>
 800969c:	3001      	adds	r0, #1
 800969e:	d14d      	bne.n	800973c <_printf_i+0x1c8>
 80096a0:	f04f 30ff 	mov.w	r0, #4294967295
 80096a4:	b005      	add	sp, #20
 80096a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096aa:	4839      	ldr	r0, [pc, #228]	; (8009790 <_printf_i+0x21c>)
 80096ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80096b0:	6813      	ldr	r3, [r2, #0]
 80096b2:	6821      	ldr	r1, [r4, #0]
 80096b4:	1d1d      	adds	r5, r3, #4
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	6015      	str	r5, [r2, #0]
 80096ba:	060a      	lsls	r2, r1, #24
 80096bc:	d50b      	bpl.n	80096d6 <_printf_i+0x162>
 80096be:	07ca      	lsls	r2, r1, #31
 80096c0:	bf44      	itt	mi
 80096c2:	f041 0120 	orrmi.w	r1, r1, #32
 80096c6:	6021      	strmi	r1, [r4, #0]
 80096c8:	b91b      	cbnz	r3, 80096d2 <_printf_i+0x15e>
 80096ca:	6822      	ldr	r2, [r4, #0]
 80096cc:	f022 0220 	bic.w	r2, r2, #32
 80096d0:	6022      	str	r2, [r4, #0]
 80096d2:	2210      	movs	r2, #16
 80096d4:	e7b7      	b.n	8009646 <_printf_i+0xd2>
 80096d6:	064d      	lsls	r5, r1, #25
 80096d8:	bf48      	it	mi
 80096da:	b29b      	uxthmi	r3, r3
 80096dc:	e7ef      	b.n	80096be <_printf_i+0x14a>
 80096de:	4665      	mov	r5, ip
 80096e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80096e4:	fb02 3311 	mls	r3, r2, r1, r3
 80096e8:	5cc3      	ldrb	r3, [r0, r3]
 80096ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80096ee:	460b      	mov	r3, r1
 80096f0:	2900      	cmp	r1, #0
 80096f2:	d1f5      	bne.n	80096e0 <_printf_i+0x16c>
 80096f4:	e7b9      	b.n	800966a <_printf_i+0xf6>
 80096f6:	6813      	ldr	r3, [r2, #0]
 80096f8:	6825      	ldr	r5, [r4, #0]
 80096fa:	6961      	ldr	r1, [r4, #20]
 80096fc:	1d18      	adds	r0, r3, #4
 80096fe:	6010      	str	r0, [r2, #0]
 8009700:	0628      	lsls	r0, r5, #24
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	d501      	bpl.n	800970a <_printf_i+0x196>
 8009706:	6019      	str	r1, [r3, #0]
 8009708:	e002      	b.n	8009710 <_printf_i+0x19c>
 800970a:	066a      	lsls	r2, r5, #25
 800970c:	d5fb      	bpl.n	8009706 <_printf_i+0x192>
 800970e:	8019      	strh	r1, [r3, #0]
 8009710:	2300      	movs	r3, #0
 8009712:	6123      	str	r3, [r4, #16]
 8009714:	4665      	mov	r5, ip
 8009716:	e7b9      	b.n	800968c <_printf_i+0x118>
 8009718:	6813      	ldr	r3, [r2, #0]
 800971a:	1d19      	adds	r1, r3, #4
 800971c:	6011      	str	r1, [r2, #0]
 800971e:	681d      	ldr	r5, [r3, #0]
 8009720:	6862      	ldr	r2, [r4, #4]
 8009722:	2100      	movs	r1, #0
 8009724:	4628      	mov	r0, r5
 8009726:	f7f6 fd6b 	bl	8000200 <memchr>
 800972a:	b108      	cbz	r0, 8009730 <_printf_i+0x1bc>
 800972c:	1b40      	subs	r0, r0, r5
 800972e:	6060      	str	r0, [r4, #4]
 8009730:	6863      	ldr	r3, [r4, #4]
 8009732:	6123      	str	r3, [r4, #16]
 8009734:	2300      	movs	r3, #0
 8009736:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800973a:	e7a7      	b.n	800968c <_printf_i+0x118>
 800973c:	6923      	ldr	r3, [r4, #16]
 800973e:	462a      	mov	r2, r5
 8009740:	4639      	mov	r1, r7
 8009742:	4630      	mov	r0, r6
 8009744:	47c0      	blx	r8
 8009746:	3001      	adds	r0, #1
 8009748:	d0aa      	beq.n	80096a0 <_printf_i+0x12c>
 800974a:	6823      	ldr	r3, [r4, #0]
 800974c:	079b      	lsls	r3, r3, #30
 800974e:	d413      	bmi.n	8009778 <_printf_i+0x204>
 8009750:	68e0      	ldr	r0, [r4, #12]
 8009752:	9b03      	ldr	r3, [sp, #12]
 8009754:	4298      	cmp	r0, r3
 8009756:	bfb8      	it	lt
 8009758:	4618      	movlt	r0, r3
 800975a:	e7a3      	b.n	80096a4 <_printf_i+0x130>
 800975c:	2301      	movs	r3, #1
 800975e:	464a      	mov	r2, r9
 8009760:	4639      	mov	r1, r7
 8009762:	4630      	mov	r0, r6
 8009764:	47c0      	blx	r8
 8009766:	3001      	adds	r0, #1
 8009768:	d09a      	beq.n	80096a0 <_printf_i+0x12c>
 800976a:	3501      	adds	r5, #1
 800976c:	68e3      	ldr	r3, [r4, #12]
 800976e:	9a03      	ldr	r2, [sp, #12]
 8009770:	1a9b      	subs	r3, r3, r2
 8009772:	42ab      	cmp	r3, r5
 8009774:	dcf2      	bgt.n	800975c <_printf_i+0x1e8>
 8009776:	e7eb      	b.n	8009750 <_printf_i+0x1dc>
 8009778:	2500      	movs	r5, #0
 800977a:	f104 0919 	add.w	r9, r4, #25
 800977e:	e7f5      	b.n	800976c <_printf_i+0x1f8>
 8009780:	2b00      	cmp	r3, #0
 8009782:	d1ac      	bne.n	80096de <_printf_i+0x16a>
 8009784:	7803      	ldrb	r3, [r0, #0]
 8009786:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800978a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800978e:	e76c      	b.n	800966a <_printf_i+0xf6>
 8009790:	0800d246 	.word	0x0800d246
 8009794:	0800d257 	.word	0x0800d257

08009798 <_scanf_float>:
 8009798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800979c:	469a      	mov	sl, r3
 800979e:	688b      	ldr	r3, [r1, #8]
 80097a0:	4616      	mov	r6, r2
 80097a2:	1e5a      	subs	r2, r3, #1
 80097a4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80097a8:	b087      	sub	sp, #28
 80097aa:	bf83      	ittte	hi
 80097ac:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80097b0:	189b      	addhi	r3, r3, r2
 80097b2:	9301      	strhi	r3, [sp, #4]
 80097b4:	2300      	movls	r3, #0
 80097b6:	bf86      	itte	hi
 80097b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80097bc:	608b      	strhi	r3, [r1, #8]
 80097be:	9301      	strls	r3, [sp, #4]
 80097c0:	680b      	ldr	r3, [r1, #0]
 80097c2:	4688      	mov	r8, r1
 80097c4:	f04f 0b00 	mov.w	fp, #0
 80097c8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80097cc:	f848 3b1c 	str.w	r3, [r8], #28
 80097d0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80097d4:	4607      	mov	r7, r0
 80097d6:	460c      	mov	r4, r1
 80097d8:	4645      	mov	r5, r8
 80097da:	465a      	mov	r2, fp
 80097dc:	46d9      	mov	r9, fp
 80097de:	f8cd b008 	str.w	fp, [sp, #8]
 80097e2:	68a1      	ldr	r1, [r4, #8]
 80097e4:	b181      	cbz	r1, 8009808 <_scanf_float+0x70>
 80097e6:	6833      	ldr	r3, [r6, #0]
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	2b49      	cmp	r3, #73	; 0x49
 80097ec:	d071      	beq.n	80098d2 <_scanf_float+0x13a>
 80097ee:	d84d      	bhi.n	800988c <_scanf_float+0xf4>
 80097f0:	2b39      	cmp	r3, #57	; 0x39
 80097f2:	d840      	bhi.n	8009876 <_scanf_float+0xde>
 80097f4:	2b31      	cmp	r3, #49	; 0x31
 80097f6:	f080 8088 	bcs.w	800990a <_scanf_float+0x172>
 80097fa:	2b2d      	cmp	r3, #45	; 0x2d
 80097fc:	f000 8090 	beq.w	8009920 <_scanf_float+0x188>
 8009800:	d815      	bhi.n	800982e <_scanf_float+0x96>
 8009802:	2b2b      	cmp	r3, #43	; 0x2b
 8009804:	f000 808c 	beq.w	8009920 <_scanf_float+0x188>
 8009808:	f1b9 0f00 	cmp.w	r9, #0
 800980c:	d003      	beq.n	8009816 <_scanf_float+0x7e>
 800980e:	6823      	ldr	r3, [r4, #0]
 8009810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009814:	6023      	str	r3, [r4, #0]
 8009816:	3a01      	subs	r2, #1
 8009818:	2a01      	cmp	r2, #1
 800981a:	f200 80ea 	bhi.w	80099f2 <_scanf_float+0x25a>
 800981e:	4545      	cmp	r5, r8
 8009820:	f200 80dc 	bhi.w	80099dc <_scanf_float+0x244>
 8009824:	2601      	movs	r6, #1
 8009826:	4630      	mov	r0, r6
 8009828:	b007      	add	sp, #28
 800982a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800982e:	2b2e      	cmp	r3, #46	; 0x2e
 8009830:	f000 809f 	beq.w	8009972 <_scanf_float+0x1da>
 8009834:	2b30      	cmp	r3, #48	; 0x30
 8009836:	d1e7      	bne.n	8009808 <_scanf_float+0x70>
 8009838:	6820      	ldr	r0, [r4, #0]
 800983a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800983e:	d064      	beq.n	800990a <_scanf_float+0x172>
 8009840:	9b01      	ldr	r3, [sp, #4]
 8009842:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8009846:	6020      	str	r0, [r4, #0]
 8009848:	f109 0901 	add.w	r9, r9, #1
 800984c:	b11b      	cbz	r3, 8009856 <_scanf_float+0xbe>
 800984e:	3b01      	subs	r3, #1
 8009850:	3101      	adds	r1, #1
 8009852:	9301      	str	r3, [sp, #4]
 8009854:	60a1      	str	r1, [r4, #8]
 8009856:	68a3      	ldr	r3, [r4, #8]
 8009858:	3b01      	subs	r3, #1
 800985a:	60a3      	str	r3, [r4, #8]
 800985c:	6923      	ldr	r3, [r4, #16]
 800985e:	3301      	adds	r3, #1
 8009860:	6123      	str	r3, [r4, #16]
 8009862:	6873      	ldr	r3, [r6, #4]
 8009864:	3b01      	subs	r3, #1
 8009866:	2b00      	cmp	r3, #0
 8009868:	6073      	str	r3, [r6, #4]
 800986a:	f340 80ac 	ble.w	80099c6 <_scanf_float+0x22e>
 800986e:	6833      	ldr	r3, [r6, #0]
 8009870:	3301      	adds	r3, #1
 8009872:	6033      	str	r3, [r6, #0]
 8009874:	e7b5      	b.n	80097e2 <_scanf_float+0x4a>
 8009876:	2b45      	cmp	r3, #69	; 0x45
 8009878:	f000 8085 	beq.w	8009986 <_scanf_float+0x1ee>
 800987c:	2b46      	cmp	r3, #70	; 0x46
 800987e:	d06a      	beq.n	8009956 <_scanf_float+0x1be>
 8009880:	2b41      	cmp	r3, #65	; 0x41
 8009882:	d1c1      	bne.n	8009808 <_scanf_float+0x70>
 8009884:	2a01      	cmp	r2, #1
 8009886:	d1bf      	bne.n	8009808 <_scanf_float+0x70>
 8009888:	2202      	movs	r2, #2
 800988a:	e046      	b.n	800991a <_scanf_float+0x182>
 800988c:	2b65      	cmp	r3, #101	; 0x65
 800988e:	d07a      	beq.n	8009986 <_scanf_float+0x1ee>
 8009890:	d818      	bhi.n	80098c4 <_scanf_float+0x12c>
 8009892:	2b54      	cmp	r3, #84	; 0x54
 8009894:	d066      	beq.n	8009964 <_scanf_float+0x1cc>
 8009896:	d811      	bhi.n	80098bc <_scanf_float+0x124>
 8009898:	2b4e      	cmp	r3, #78	; 0x4e
 800989a:	d1b5      	bne.n	8009808 <_scanf_float+0x70>
 800989c:	2a00      	cmp	r2, #0
 800989e:	d146      	bne.n	800992e <_scanf_float+0x196>
 80098a0:	f1b9 0f00 	cmp.w	r9, #0
 80098a4:	d145      	bne.n	8009932 <_scanf_float+0x19a>
 80098a6:	6821      	ldr	r1, [r4, #0]
 80098a8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80098ac:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80098b0:	d13f      	bne.n	8009932 <_scanf_float+0x19a>
 80098b2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80098b6:	6021      	str	r1, [r4, #0]
 80098b8:	2201      	movs	r2, #1
 80098ba:	e02e      	b.n	800991a <_scanf_float+0x182>
 80098bc:	2b59      	cmp	r3, #89	; 0x59
 80098be:	d01e      	beq.n	80098fe <_scanf_float+0x166>
 80098c0:	2b61      	cmp	r3, #97	; 0x61
 80098c2:	e7de      	b.n	8009882 <_scanf_float+0xea>
 80098c4:	2b6e      	cmp	r3, #110	; 0x6e
 80098c6:	d0e9      	beq.n	800989c <_scanf_float+0x104>
 80098c8:	d815      	bhi.n	80098f6 <_scanf_float+0x15e>
 80098ca:	2b66      	cmp	r3, #102	; 0x66
 80098cc:	d043      	beq.n	8009956 <_scanf_float+0x1be>
 80098ce:	2b69      	cmp	r3, #105	; 0x69
 80098d0:	d19a      	bne.n	8009808 <_scanf_float+0x70>
 80098d2:	f1bb 0f00 	cmp.w	fp, #0
 80098d6:	d138      	bne.n	800994a <_scanf_float+0x1b2>
 80098d8:	f1b9 0f00 	cmp.w	r9, #0
 80098dc:	d197      	bne.n	800980e <_scanf_float+0x76>
 80098de:	6821      	ldr	r1, [r4, #0]
 80098e0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80098e4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80098e8:	d195      	bne.n	8009816 <_scanf_float+0x7e>
 80098ea:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80098ee:	6021      	str	r1, [r4, #0]
 80098f0:	f04f 0b01 	mov.w	fp, #1
 80098f4:	e011      	b.n	800991a <_scanf_float+0x182>
 80098f6:	2b74      	cmp	r3, #116	; 0x74
 80098f8:	d034      	beq.n	8009964 <_scanf_float+0x1cc>
 80098fa:	2b79      	cmp	r3, #121	; 0x79
 80098fc:	d184      	bne.n	8009808 <_scanf_float+0x70>
 80098fe:	f1bb 0f07 	cmp.w	fp, #7
 8009902:	d181      	bne.n	8009808 <_scanf_float+0x70>
 8009904:	f04f 0b08 	mov.w	fp, #8
 8009908:	e007      	b.n	800991a <_scanf_float+0x182>
 800990a:	eb12 0f0b 	cmn.w	r2, fp
 800990e:	f47f af7b 	bne.w	8009808 <_scanf_float+0x70>
 8009912:	6821      	ldr	r1, [r4, #0]
 8009914:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8009918:	6021      	str	r1, [r4, #0]
 800991a:	702b      	strb	r3, [r5, #0]
 800991c:	3501      	adds	r5, #1
 800991e:	e79a      	b.n	8009856 <_scanf_float+0xbe>
 8009920:	6821      	ldr	r1, [r4, #0]
 8009922:	0608      	lsls	r0, r1, #24
 8009924:	f57f af70 	bpl.w	8009808 <_scanf_float+0x70>
 8009928:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800992c:	e7f4      	b.n	8009918 <_scanf_float+0x180>
 800992e:	2a02      	cmp	r2, #2
 8009930:	d047      	beq.n	80099c2 <_scanf_float+0x22a>
 8009932:	f1bb 0f01 	cmp.w	fp, #1
 8009936:	d003      	beq.n	8009940 <_scanf_float+0x1a8>
 8009938:	f1bb 0f04 	cmp.w	fp, #4
 800993c:	f47f af64 	bne.w	8009808 <_scanf_float+0x70>
 8009940:	f10b 0b01 	add.w	fp, fp, #1
 8009944:	fa5f fb8b 	uxtb.w	fp, fp
 8009948:	e7e7      	b.n	800991a <_scanf_float+0x182>
 800994a:	f1bb 0f03 	cmp.w	fp, #3
 800994e:	d0f7      	beq.n	8009940 <_scanf_float+0x1a8>
 8009950:	f1bb 0f05 	cmp.w	fp, #5
 8009954:	e7f2      	b.n	800993c <_scanf_float+0x1a4>
 8009956:	f1bb 0f02 	cmp.w	fp, #2
 800995a:	f47f af55 	bne.w	8009808 <_scanf_float+0x70>
 800995e:	f04f 0b03 	mov.w	fp, #3
 8009962:	e7da      	b.n	800991a <_scanf_float+0x182>
 8009964:	f1bb 0f06 	cmp.w	fp, #6
 8009968:	f47f af4e 	bne.w	8009808 <_scanf_float+0x70>
 800996c:	f04f 0b07 	mov.w	fp, #7
 8009970:	e7d3      	b.n	800991a <_scanf_float+0x182>
 8009972:	6821      	ldr	r1, [r4, #0]
 8009974:	0588      	lsls	r0, r1, #22
 8009976:	f57f af47 	bpl.w	8009808 <_scanf_float+0x70>
 800997a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800997e:	6021      	str	r1, [r4, #0]
 8009980:	f8cd 9008 	str.w	r9, [sp, #8]
 8009984:	e7c9      	b.n	800991a <_scanf_float+0x182>
 8009986:	6821      	ldr	r1, [r4, #0]
 8009988:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800998c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009990:	d006      	beq.n	80099a0 <_scanf_float+0x208>
 8009992:	0548      	lsls	r0, r1, #21
 8009994:	f57f af38 	bpl.w	8009808 <_scanf_float+0x70>
 8009998:	f1b9 0f00 	cmp.w	r9, #0
 800999c:	f43f af3b 	beq.w	8009816 <_scanf_float+0x7e>
 80099a0:	0588      	lsls	r0, r1, #22
 80099a2:	bf58      	it	pl
 80099a4:	9802      	ldrpl	r0, [sp, #8]
 80099a6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80099aa:	bf58      	it	pl
 80099ac:	eba9 0000 	subpl.w	r0, r9, r0
 80099b0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80099b4:	bf58      	it	pl
 80099b6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80099ba:	6021      	str	r1, [r4, #0]
 80099bc:	f04f 0900 	mov.w	r9, #0
 80099c0:	e7ab      	b.n	800991a <_scanf_float+0x182>
 80099c2:	2203      	movs	r2, #3
 80099c4:	e7a9      	b.n	800991a <_scanf_float+0x182>
 80099c6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80099ca:	9205      	str	r2, [sp, #20]
 80099cc:	4631      	mov	r1, r6
 80099ce:	4638      	mov	r0, r7
 80099d0:	4798      	blx	r3
 80099d2:	9a05      	ldr	r2, [sp, #20]
 80099d4:	2800      	cmp	r0, #0
 80099d6:	f43f af04 	beq.w	80097e2 <_scanf_float+0x4a>
 80099da:	e715      	b.n	8009808 <_scanf_float+0x70>
 80099dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80099e0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80099e4:	4632      	mov	r2, r6
 80099e6:	4638      	mov	r0, r7
 80099e8:	4798      	blx	r3
 80099ea:	6923      	ldr	r3, [r4, #16]
 80099ec:	3b01      	subs	r3, #1
 80099ee:	6123      	str	r3, [r4, #16]
 80099f0:	e715      	b.n	800981e <_scanf_float+0x86>
 80099f2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80099f6:	2b06      	cmp	r3, #6
 80099f8:	d80a      	bhi.n	8009a10 <_scanf_float+0x278>
 80099fa:	f1bb 0f02 	cmp.w	fp, #2
 80099fe:	d968      	bls.n	8009ad2 <_scanf_float+0x33a>
 8009a00:	f1ab 0b03 	sub.w	fp, fp, #3
 8009a04:	fa5f fb8b 	uxtb.w	fp, fp
 8009a08:	eba5 0b0b 	sub.w	fp, r5, fp
 8009a0c:	455d      	cmp	r5, fp
 8009a0e:	d14b      	bne.n	8009aa8 <_scanf_float+0x310>
 8009a10:	6823      	ldr	r3, [r4, #0]
 8009a12:	05da      	lsls	r2, r3, #23
 8009a14:	d51f      	bpl.n	8009a56 <_scanf_float+0x2be>
 8009a16:	055b      	lsls	r3, r3, #21
 8009a18:	d468      	bmi.n	8009aec <_scanf_float+0x354>
 8009a1a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009a1e:	6923      	ldr	r3, [r4, #16]
 8009a20:	2965      	cmp	r1, #101	; 0x65
 8009a22:	f103 33ff 	add.w	r3, r3, #4294967295
 8009a26:	f105 3bff 	add.w	fp, r5, #4294967295
 8009a2a:	6123      	str	r3, [r4, #16]
 8009a2c:	d00d      	beq.n	8009a4a <_scanf_float+0x2b2>
 8009a2e:	2945      	cmp	r1, #69	; 0x45
 8009a30:	d00b      	beq.n	8009a4a <_scanf_float+0x2b2>
 8009a32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a36:	4632      	mov	r2, r6
 8009a38:	4638      	mov	r0, r7
 8009a3a:	4798      	blx	r3
 8009a3c:	6923      	ldr	r3, [r4, #16]
 8009a3e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8009a42:	3b01      	subs	r3, #1
 8009a44:	f1a5 0b02 	sub.w	fp, r5, #2
 8009a48:	6123      	str	r3, [r4, #16]
 8009a4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a4e:	4632      	mov	r2, r6
 8009a50:	4638      	mov	r0, r7
 8009a52:	4798      	blx	r3
 8009a54:	465d      	mov	r5, fp
 8009a56:	6826      	ldr	r6, [r4, #0]
 8009a58:	f016 0610 	ands.w	r6, r6, #16
 8009a5c:	d17a      	bne.n	8009b54 <_scanf_float+0x3bc>
 8009a5e:	702e      	strb	r6, [r5, #0]
 8009a60:	6823      	ldr	r3, [r4, #0]
 8009a62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a6a:	d142      	bne.n	8009af2 <_scanf_float+0x35a>
 8009a6c:	9b02      	ldr	r3, [sp, #8]
 8009a6e:	eba9 0303 	sub.w	r3, r9, r3
 8009a72:	425a      	negs	r2, r3
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d149      	bne.n	8009b0c <_scanf_float+0x374>
 8009a78:	2200      	movs	r2, #0
 8009a7a:	4641      	mov	r1, r8
 8009a7c:	4638      	mov	r0, r7
 8009a7e:	f000 fed7 	bl	800a830 <_strtod_r>
 8009a82:	6825      	ldr	r5, [r4, #0]
 8009a84:	f8da 3000 	ldr.w	r3, [sl]
 8009a88:	f015 0f02 	tst.w	r5, #2
 8009a8c:	f103 0204 	add.w	r2, r3, #4
 8009a90:	ec59 8b10 	vmov	r8, r9, d0
 8009a94:	f8ca 2000 	str.w	r2, [sl]
 8009a98:	d043      	beq.n	8009b22 <_scanf_float+0x38a>
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	e9c3 8900 	strd	r8, r9, [r3]
 8009aa0:	68e3      	ldr	r3, [r4, #12]
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	60e3      	str	r3, [r4, #12]
 8009aa6:	e6be      	b.n	8009826 <_scanf_float+0x8e>
 8009aa8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009aac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009ab0:	4632      	mov	r2, r6
 8009ab2:	4638      	mov	r0, r7
 8009ab4:	4798      	blx	r3
 8009ab6:	6923      	ldr	r3, [r4, #16]
 8009ab8:	3b01      	subs	r3, #1
 8009aba:	6123      	str	r3, [r4, #16]
 8009abc:	e7a6      	b.n	8009a0c <_scanf_float+0x274>
 8009abe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ac2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009ac6:	4632      	mov	r2, r6
 8009ac8:	4638      	mov	r0, r7
 8009aca:	4798      	blx	r3
 8009acc:	6923      	ldr	r3, [r4, #16]
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	6123      	str	r3, [r4, #16]
 8009ad2:	4545      	cmp	r5, r8
 8009ad4:	d8f3      	bhi.n	8009abe <_scanf_float+0x326>
 8009ad6:	e6a5      	b.n	8009824 <_scanf_float+0x8c>
 8009ad8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009adc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009ae0:	4632      	mov	r2, r6
 8009ae2:	4638      	mov	r0, r7
 8009ae4:	4798      	blx	r3
 8009ae6:	6923      	ldr	r3, [r4, #16]
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	6123      	str	r3, [r4, #16]
 8009aec:	4545      	cmp	r5, r8
 8009aee:	d8f3      	bhi.n	8009ad8 <_scanf_float+0x340>
 8009af0:	e698      	b.n	8009824 <_scanf_float+0x8c>
 8009af2:	9b03      	ldr	r3, [sp, #12]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d0bf      	beq.n	8009a78 <_scanf_float+0x2e0>
 8009af8:	9904      	ldr	r1, [sp, #16]
 8009afa:	230a      	movs	r3, #10
 8009afc:	4632      	mov	r2, r6
 8009afe:	3101      	adds	r1, #1
 8009b00:	4638      	mov	r0, r7
 8009b02:	f000 ff21 	bl	800a948 <_strtol_r>
 8009b06:	9b03      	ldr	r3, [sp, #12]
 8009b08:	9d04      	ldr	r5, [sp, #16]
 8009b0a:	1ac2      	subs	r2, r0, r3
 8009b0c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009b10:	429d      	cmp	r5, r3
 8009b12:	bf28      	it	cs
 8009b14:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8009b18:	490f      	ldr	r1, [pc, #60]	; (8009b58 <_scanf_float+0x3c0>)
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	f000 f858 	bl	8009bd0 <siprintf>
 8009b20:	e7aa      	b.n	8009a78 <_scanf_float+0x2e0>
 8009b22:	f015 0504 	ands.w	r5, r5, #4
 8009b26:	d1b8      	bne.n	8009a9a <_scanf_float+0x302>
 8009b28:	681f      	ldr	r7, [r3, #0]
 8009b2a:	ee10 2a10 	vmov	r2, s0
 8009b2e:	464b      	mov	r3, r9
 8009b30:	ee10 0a10 	vmov	r0, s0
 8009b34:	4649      	mov	r1, r9
 8009b36:	f7f7 f809 	bl	8000b4c <__aeabi_dcmpun>
 8009b3a:	b128      	cbz	r0, 8009b48 <_scanf_float+0x3b0>
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	f000 f80d 	bl	8009b5c <nanf>
 8009b42:	ed87 0a00 	vstr	s0, [r7]
 8009b46:	e7ab      	b.n	8009aa0 <_scanf_float+0x308>
 8009b48:	4640      	mov	r0, r8
 8009b4a:	4649      	mov	r1, r9
 8009b4c:	f7f7 f85c 	bl	8000c08 <__aeabi_d2f>
 8009b50:	6038      	str	r0, [r7, #0]
 8009b52:	e7a5      	b.n	8009aa0 <_scanf_float+0x308>
 8009b54:	2600      	movs	r6, #0
 8009b56:	e666      	b.n	8009826 <_scanf_float+0x8e>
 8009b58:	0800d268 	.word	0x0800d268

08009b5c <nanf>:
 8009b5c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009b64 <nanf+0x8>
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop
 8009b64:	7fc00000 	.word	0x7fc00000

08009b68 <sniprintf>:
 8009b68:	b40c      	push	{r2, r3}
 8009b6a:	b530      	push	{r4, r5, lr}
 8009b6c:	4b17      	ldr	r3, [pc, #92]	; (8009bcc <sniprintf+0x64>)
 8009b6e:	1e0c      	subs	r4, r1, #0
 8009b70:	b09d      	sub	sp, #116	; 0x74
 8009b72:	681d      	ldr	r5, [r3, #0]
 8009b74:	da08      	bge.n	8009b88 <sniprintf+0x20>
 8009b76:	238b      	movs	r3, #139	; 0x8b
 8009b78:	602b      	str	r3, [r5, #0]
 8009b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b7e:	b01d      	add	sp, #116	; 0x74
 8009b80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b84:	b002      	add	sp, #8
 8009b86:	4770      	bx	lr
 8009b88:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009b8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009b90:	bf14      	ite	ne
 8009b92:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009b96:	4623      	moveq	r3, r4
 8009b98:	9304      	str	r3, [sp, #16]
 8009b9a:	9307      	str	r3, [sp, #28]
 8009b9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ba0:	9002      	str	r0, [sp, #8]
 8009ba2:	9006      	str	r0, [sp, #24]
 8009ba4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009ba8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009baa:	ab21      	add	r3, sp, #132	; 0x84
 8009bac:	a902      	add	r1, sp, #8
 8009bae:	4628      	mov	r0, r5
 8009bb0:	9301      	str	r3, [sp, #4]
 8009bb2:	f002 fd8f 	bl	800c6d4 <_svfiprintf_r>
 8009bb6:	1c43      	adds	r3, r0, #1
 8009bb8:	bfbc      	itt	lt
 8009bba:	238b      	movlt	r3, #139	; 0x8b
 8009bbc:	602b      	strlt	r3, [r5, #0]
 8009bbe:	2c00      	cmp	r4, #0
 8009bc0:	d0dd      	beq.n	8009b7e <sniprintf+0x16>
 8009bc2:	9b02      	ldr	r3, [sp, #8]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	701a      	strb	r2, [r3, #0]
 8009bc8:	e7d9      	b.n	8009b7e <sniprintf+0x16>
 8009bca:	bf00      	nop
 8009bcc:	20000014 	.word	0x20000014

08009bd0 <siprintf>:
 8009bd0:	b40e      	push	{r1, r2, r3}
 8009bd2:	b500      	push	{lr}
 8009bd4:	b09c      	sub	sp, #112	; 0x70
 8009bd6:	ab1d      	add	r3, sp, #116	; 0x74
 8009bd8:	9002      	str	r0, [sp, #8]
 8009bda:	9006      	str	r0, [sp, #24]
 8009bdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009be0:	4809      	ldr	r0, [pc, #36]	; (8009c08 <siprintf+0x38>)
 8009be2:	9107      	str	r1, [sp, #28]
 8009be4:	9104      	str	r1, [sp, #16]
 8009be6:	4909      	ldr	r1, [pc, #36]	; (8009c0c <siprintf+0x3c>)
 8009be8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bec:	9105      	str	r1, [sp, #20]
 8009bee:	6800      	ldr	r0, [r0, #0]
 8009bf0:	9301      	str	r3, [sp, #4]
 8009bf2:	a902      	add	r1, sp, #8
 8009bf4:	f002 fd6e 	bl	800c6d4 <_svfiprintf_r>
 8009bf8:	9b02      	ldr	r3, [sp, #8]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	701a      	strb	r2, [r3, #0]
 8009bfe:	b01c      	add	sp, #112	; 0x70
 8009c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c04:	b003      	add	sp, #12
 8009c06:	4770      	bx	lr
 8009c08:	20000014 	.word	0x20000014
 8009c0c:	ffff0208 	.word	0xffff0208

08009c10 <sulp>:
 8009c10:	b570      	push	{r4, r5, r6, lr}
 8009c12:	4604      	mov	r4, r0
 8009c14:	460d      	mov	r5, r1
 8009c16:	ec45 4b10 	vmov	d0, r4, r5
 8009c1a:	4616      	mov	r6, r2
 8009c1c:	f002 fb16 	bl	800c24c <__ulp>
 8009c20:	ec51 0b10 	vmov	r0, r1, d0
 8009c24:	b17e      	cbz	r6, 8009c46 <sulp+0x36>
 8009c26:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009c2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	dd09      	ble.n	8009c46 <sulp+0x36>
 8009c32:	051b      	lsls	r3, r3, #20
 8009c34:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009c38:	2400      	movs	r4, #0
 8009c3a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009c3e:	4622      	mov	r2, r4
 8009c40:	462b      	mov	r3, r5
 8009c42:	f7f6 fce9 	bl	8000618 <__aeabi_dmul>
 8009c46:	bd70      	pop	{r4, r5, r6, pc}

08009c48 <_strtod_l>:
 8009c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c4c:	461f      	mov	r7, r3
 8009c4e:	b0a1      	sub	sp, #132	; 0x84
 8009c50:	2300      	movs	r3, #0
 8009c52:	4681      	mov	r9, r0
 8009c54:	4638      	mov	r0, r7
 8009c56:	460e      	mov	r6, r1
 8009c58:	9217      	str	r2, [sp, #92]	; 0x5c
 8009c5a:	931c      	str	r3, [sp, #112]	; 0x70
 8009c5c:	f001 fff5 	bl	800bc4a <__localeconv_l>
 8009c60:	4680      	mov	r8, r0
 8009c62:	6800      	ldr	r0, [r0, #0]
 8009c64:	f7f6 fac4 	bl	80001f0 <strlen>
 8009c68:	f04f 0a00 	mov.w	sl, #0
 8009c6c:	4604      	mov	r4, r0
 8009c6e:	f04f 0b00 	mov.w	fp, #0
 8009c72:	961b      	str	r6, [sp, #108]	; 0x6c
 8009c74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c76:	781a      	ldrb	r2, [r3, #0]
 8009c78:	2a0d      	cmp	r2, #13
 8009c7a:	d832      	bhi.n	8009ce2 <_strtod_l+0x9a>
 8009c7c:	2a09      	cmp	r2, #9
 8009c7e:	d236      	bcs.n	8009cee <_strtod_l+0xa6>
 8009c80:	2a00      	cmp	r2, #0
 8009c82:	d03e      	beq.n	8009d02 <_strtod_l+0xba>
 8009c84:	2300      	movs	r3, #0
 8009c86:	930d      	str	r3, [sp, #52]	; 0x34
 8009c88:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009c8a:	782b      	ldrb	r3, [r5, #0]
 8009c8c:	2b30      	cmp	r3, #48	; 0x30
 8009c8e:	f040 80ac 	bne.w	8009dea <_strtod_l+0x1a2>
 8009c92:	786b      	ldrb	r3, [r5, #1]
 8009c94:	2b58      	cmp	r3, #88	; 0x58
 8009c96:	d001      	beq.n	8009c9c <_strtod_l+0x54>
 8009c98:	2b78      	cmp	r3, #120	; 0x78
 8009c9a:	d167      	bne.n	8009d6c <_strtod_l+0x124>
 8009c9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c9e:	9301      	str	r3, [sp, #4]
 8009ca0:	ab1c      	add	r3, sp, #112	; 0x70
 8009ca2:	9300      	str	r3, [sp, #0]
 8009ca4:	9702      	str	r7, [sp, #8]
 8009ca6:	ab1d      	add	r3, sp, #116	; 0x74
 8009ca8:	4a88      	ldr	r2, [pc, #544]	; (8009ecc <_strtod_l+0x284>)
 8009caa:	a91b      	add	r1, sp, #108	; 0x6c
 8009cac:	4648      	mov	r0, r9
 8009cae:	f001 fcf2 	bl	800b696 <__gethex>
 8009cb2:	f010 0407 	ands.w	r4, r0, #7
 8009cb6:	4606      	mov	r6, r0
 8009cb8:	d005      	beq.n	8009cc6 <_strtod_l+0x7e>
 8009cba:	2c06      	cmp	r4, #6
 8009cbc:	d12b      	bne.n	8009d16 <_strtod_l+0xce>
 8009cbe:	3501      	adds	r5, #1
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	951b      	str	r5, [sp, #108]	; 0x6c
 8009cc4:	930d      	str	r3, [sp, #52]	; 0x34
 8009cc6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	f040 859a 	bne.w	800a802 <_strtod_l+0xbba>
 8009cce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cd0:	b1e3      	cbz	r3, 8009d0c <_strtod_l+0xc4>
 8009cd2:	4652      	mov	r2, sl
 8009cd4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009cd8:	ec43 2b10 	vmov	d0, r2, r3
 8009cdc:	b021      	add	sp, #132	; 0x84
 8009cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ce2:	2a2b      	cmp	r2, #43	; 0x2b
 8009ce4:	d015      	beq.n	8009d12 <_strtod_l+0xca>
 8009ce6:	2a2d      	cmp	r2, #45	; 0x2d
 8009ce8:	d004      	beq.n	8009cf4 <_strtod_l+0xac>
 8009cea:	2a20      	cmp	r2, #32
 8009cec:	d1ca      	bne.n	8009c84 <_strtod_l+0x3c>
 8009cee:	3301      	adds	r3, #1
 8009cf0:	931b      	str	r3, [sp, #108]	; 0x6c
 8009cf2:	e7bf      	b.n	8009c74 <_strtod_l+0x2c>
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	920d      	str	r2, [sp, #52]	; 0x34
 8009cf8:	1c5a      	adds	r2, r3, #1
 8009cfa:	921b      	str	r2, [sp, #108]	; 0x6c
 8009cfc:	785b      	ldrb	r3, [r3, #1]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d1c2      	bne.n	8009c88 <_strtod_l+0x40>
 8009d02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d04:	961b      	str	r6, [sp, #108]	; 0x6c
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	f040 8579 	bne.w	800a7fe <_strtod_l+0xbb6>
 8009d0c:	4652      	mov	r2, sl
 8009d0e:	465b      	mov	r3, fp
 8009d10:	e7e2      	b.n	8009cd8 <_strtod_l+0x90>
 8009d12:	2200      	movs	r2, #0
 8009d14:	e7ef      	b.n	8009cf6 <_strtod_l+0xae>
 8009d16:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009d18:	b13a      	cbz	r2, 8009d2a <_strtod_l+0xe2>
 8009d1a:	2135      	movs	r1, #53	; 0x35
 8009d1c:	a81e      	add	r0, sp, #120	; 0x78
 8009d1e:	f002 fb8d 	bl	800c43c <__copybits>
 8009d22:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009d24:	4648      	mov	r0, r9
 8009d26:	f001 fffa 	bl	800bd1e <_Bfree>
 8009d2a:	3c01      	subs	r4, #1
 8009d2c:	2c04      	cmp	r4, #4
 8009d2e:	d806      	bhi.n	8009d3e <_strtod_l+0xf6>
 8009d30:	e8df f004 	tbb	[pc, r4]
 8009d34:	1714030a 	.word	0x1714030a
 8009d38:	0a          	.byte	0x0a
 8009d39:	00          	.byte	0x00
 8009d3a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8009d3e:	0730      	lsls	r0, r6, #28
 8009d40:	d5c1      	bpl.n	8009cc6 <_strtod_l+0x7e>
 8009d42:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009d46:	e7be      	b.n	8009cc6 <_strtod_l+0x7e>
 8009d48:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8009d4c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009d4e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009d52:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009d56:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009d5a:	e7f0      	b.n	8009d3e <_strtod_l+0xf6>
 8009d5c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8009ed0 <_strtod_l+0x288>
 8009d60:	e7ed      	b.n	8009d3e <_strtod_l+0xf6>
 8009d62:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009d66:	f04f 3aff 	mov.w	sl, #4294967295
 8009d6a:	e7e8      	b.n	8009d3e <_strtod_l+0xf6>
 8009d6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d6e:	1c5a      	adds	r2, r3, #1
 8009d70:	921b      	str	r2, [sp, #108]	; 0x6c
 8009d72:	785b      	ldrb	r3, [r3, #1]
 8009d74:	2b30      	cmp	r3, #48	; 0x30
 8009d76:	d0f9      	beq.n	8009d6c <_strtod_l+0x124>
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d0a4      	beq.n	8009cc6 <_strtod_l+0x7e>
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	2500      	movs	r5, #0
 8009d80:	9306      	str	r3, [sp, #24]
 8009d82:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d84:	9308      	str	r3, [sp, #32]
 8009d86:	9507      	str	r5, [sp, #28]
 8009d88:	9505      	str	r5, [sp, #20]
 8009d8a:	220a      	movs	r2, #10
 8009d8c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009d8e:	7807      	ldrb	r7, [r0, #0]
 8009d90:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8009d94:	b2d9      	uxtb	r1, r3
 8009d96:	2909      	cmp	r1, #9
 8009d98:	d929      	bls.n	8009dee <_strtod_l+0x1a6>
 8009d9a:	4622      	mov	r2, r4
 8009d9c:	f8d8 1000 	ldr.w	r1, [r8]
 8009da0:	f002 fda0 	bl	800c8e4 <strncmp>
 8009da4:	2800      	cmp	r0, #0
 8009da6:	d031      	beq.n	8009e0c <_strtod_l+0x1c4>
 8009da8:	2000      	movs	r0, #0
 8009daa:	9c05      	ldr	r4, [sp, #20]
 8009dac:	9004      	str	r0, [sp, #16]
 8009dae:	463b      	mov	r3, r7
 8009db0:	4602      	mov	r2, r0
 8009db2:	2b65      	cmp	r3, #101	; 0x65
 8009db4:	d001      	beq.n	8009dba <_strtod_l+0x172>
 8009db6:	2b45      	cmp	r3, #69	; 0x45
 8009db8:	d114      	bne.n	8009de4 <_strtod_l+0x19c>
 8009dba:	b924      	cbnz	r4, 8009dc6 <_strtod_l+0x17e>
 8009dbc:	b910      	cbnz	r0, 8009dc4 <_strtod_l+0x17c>
 8009dbe:	9b06      	ldr	r3, [sp, #24]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d09e      	beq.n	8009d02 <_strtod_l+0xba>
 8009dc4:	2400      	movs	r4, #0
 8009dc6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009dc8:	1c73      	adds	r3, r6, #1
 8009dca:	931b      	str	r3, [sp, #108]	; 0x6c
 8009dcc:	7873      	ldrb	r3, [r6, #1]
 8009dce:	2b2b      	cmp	r3, #43	; 0x2b
 8009dd0:	d078      	beq.n	8009ec4 <_strtod_l+0x27c>
 8009dd2:	2b2d      	cmp	r3, #45	; 0x2d
 8009dd4:	d070      	beq.n	8009eb8 <_strtod_l+0x270>
 8009dd6:	f04f 0c00 	mov.w	ip, #0
 8009dda:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8009dde:	2f09      	cmp	r7, #9
 8009de0:	d97c      	bls.n	8009edc <_strtod_l+0x294>
 8009de2:	961b      	str	r6, [sp, #108]	; 0x6c
 8009de4:	f04f 0e00 	mov.w	lr, #0
 8009de8:	e09a      	b.n	8009f20 <_strtod_l+0x2d8>
 8009dea:	2300      	movs	r3, #0
 8009dec:	e7c7      	b.n	8009d7e <_strtod_l+0x136>
 8009dee:	9905      	ldr	r1, [sp, #20]
 8009df0:	2908      	cmp	r1, #8
 8009df2:	bfdd      	ittte	le
 8009df4:	9907      	ldrle	r1, [sp, #28]
 8009df6:	fb02 3301 	mlale	r3, r2, r1, r3
 8009dfa:	9307      	strle	r3, [sp, #28]
 8009dfc:	fb02 3505 	mlagt	r5, r2, r5, r3
 8009e00:	9b05      	ldr	r3, [sp, #20]
 8009e02:	3001      	adds	r0, #1
 8009e04:	3301      	adds	r3, #1
 8009e06:	9305      	str	r3, [sp, #20]
 8009e08:	901b      	str	r0, [sp, #108]	; 0x6c
 8009e0a:	e7bf      	b.n	8009d8c <_strtod_l+0x144>
 8009e0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e0e:	191a      	adds	r2, r3, r4
 8009e10:	921b      	str	r2, [sp, #108]	; 0x6c
 8009e12:	9a05      	ldr	r2, [sp, #20]
 8009e14:	5d1b      	ldrb	r3, [r3, r4]
 8009e16:	2a00      	cmp	r2, #0
 8009e18:	d037      	beq.n	8009e8a <_strtod_l+0x242>
 8009e1a:	9c05      	ldr	r4, [sp, #20]
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009e22:	2909      	cmp	r1, #9
 8009e24:	d913      	bls.n	8009e4e <_strtod_l+0x206>
 8009e26:	2101      	movs	r1, #1
 8009e28:	9104      	str	r1, [sp, #16]
 8009e2a:	e7c2      	b.n	8009db2 <_strtod_l+0x16a>
 8009e2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e2e:	1c5a      	adds	r2, r3, #1
 8009e30:	921b      	str	r2, [sp, #108]	; 0x6c
 8009e32:	785b      	ldrb	r3, [r3, #1]
 8009e34:	3001      	adds	r0, #1
 8009e36:	2b30      	cmp	r3, #48	; 0x30
 8009e38:	d0f8      	beq.n	8009e2c <_strtod_l+0x1e4>
 8009e3a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009e3e:	2a08      	cmp	r2, #8
 8009e40:	f200 84e4 	bhi.w	800a80c <_strtod_l+0xbc4>
 8009e44:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009e46:	9208      	str	r2, [sp, #32]
 8009e48:	4602      	mov	r2, r0
 8009e4a:	2000      	movs	r0, #0
 8009e4c:	4604      	mov	r4, r0
 8009e4e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8009e52:	f100 0101 	add.w	r1, r0, #1
 8009e56:	d012      	beq.n	8009e7e <_strtod_l+0x236>
 8009e58:	440a      	add	r2, r1
 8009e5a:	eb00 0c04 	add.w	ip, r0, r4
 8009e5e:	4621      	mov	r1, r4
 8009e60:	270a      	movs	r7, #10
 8009e62:	458c      	cmp	ip, r1
 8009e64:	d113      	bne.n	8009e8e <_strtod_l+0x246>
 8009e66:	1821      	adds	r1, r4, r0
 8009e68:	2908      	cmp	r1, #8
 8009e6a:	f104 0401 	add.w	r4, r4, #1
 8009e6e:	4404      	add	r4, r0
 8009e70:	dc19      	bgt.n	8009ea6 <_strtod_l+0x25e>
 8009e72:	9b07      	ldr	r3, [sp, #28]
 8009e74:	210a      	movs	r1, #10
 8009e76:	fb01 e303 	mla	r3, r1, r3, lr
 8009e7a:	9307      	str	r3, [sp, #28]
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e80:	1c58      	adds	r0, r3, #1
 8009e82:	901b      	str	r0, [sp, #108]	; 0x6c
 8009e84:	785b      	ldrb	r3, [r3, #1]
 8009e86:	4608      	mov	r0, r1
 8009e88:	e7c9      	b.n	8009e1e <_strtod_l+0x1d6>
 8009e8a:	9805      	ldr	r0, [sp, #20]
 8009e8c:	e7d3      	b.n	8009e36 <_strtod_l+0x1ee>
 8009e8e:	2908      	cmp	r1, #8
 8009e90:	f101 0101 	add.w	r1, r1, #1
 8009e94:	dc03      	bgt.n	8009e9e <_strtod_l+0x256>
 8009e96:	9b07      	ldr	r3, [sp, #28]
 8009e98:	437b      	muls	r3, r7
 8009e9a:	9307      	str	r3, [sp, #28]
 8009e9c:	e7e1      	b.n	8009e62 <_strtod_l+0x21a>
 8009e9e:	2910      	cmp	r1, #16
 8009ea0:	bfd8      	it	le
 8009ea2:	437d      	mulle	r5, r7
 8009ea4:	e7dd      	b.n	8009e62 <_strtod_l+0x21a>
 8009ea6:	2c10      	cmp	r4, #16
 8009ea8:	bfdc      	itt	le
 8009eaa:	210a      	movle	r1, #10
 8009eac:	fb01 e505 	mlale	r5, r1, r5, lr
 8009eb0:	e7e4      	b.n	8009e7c <_strtod_l+0x234>
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	9304      	str	r3, [sp, #16]
 8009eb6:	e781      	b.n	8009dbc <_strtod_l+0x174>
 8009eb8:	f04f 0c01 	mov.w	ip, #1
 8009ebc:	1cb3      	adds	r3, r6, #2
 8009ebe:	931b      	str	r3, [sp, #108]	; 0x6c
 8009ec0:	78b3      	ldrb	r3, [r6, #2]
 8009ec2:	e78a      	b.n	8009dda <_strtod_l+0x192>
 8009ec4:	f04f 0c00 	mov.w	ip, #0
 8009ec8:	e7f8      	b.n	8009ebc <_strtod_l+0x274>
 8009eca:	bf00      	nop
 8009ecc:	0800d270 	.word	0x0800d270
 8009ed0:	7ff00000 	.word	0x7ff00000
 8009ed4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ed6:	1c5f      	adds	r7, r3, #1
 8009ed8:	971b      	str	r7, [sp, #108]	; 0x6c
 8009eda:	785b      	ldrb	r3, [r3, #1]
 8009edc:	2b30      	cmp	r3, #48	; 0x30
 8009ede:	d0f9      	beq.n	8009ed4 <_strtod_l+0x28c>
 8009ee0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8009ee4:	2f08      	cmp	r7, #8
 8009ee6:	f63f af7d 	bhi.w	8009de4 <_strtod_l+0x19c>
 8009eea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009eee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ef0:	930a      	str	r3, [sp, #40]	; 0x28
 8009ef2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ef4:	1c5f      	adds	r7, r3, #1
 8009ef6:	971b      	str	r7, [sp, #108]	; 0x6c
 8009ef8:	785b      	ldrb	r3, [r3, #1]
 8009efa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8009efe:	f1b8 0f09 	cmp.w	r8, #9
 8009f02:	d937      	bls.n	8009f74 <_strtod_l+0x32c>
 8009f04:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009f06:	1a7f      	subs	r7, r7, r1
 8009f08:	2f08      	cmp	r7, #8
 8009f0a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009f0e:	dc37      	bgt.n	8009f80 <_strtod_l+0x338>
 8009f10:	45be      	cmp	lr, r7
 8009f12:	bfa8      	it	ge
 8009f14:	46be      	movge	lr, r7
 8009f16:	f1bc 0f00 	cmp.w	ip, #0
 8009f1a:	d001      	beq.n	8009f20 <_strtod_l+0x2d8>
 8009f1c:	f1ce 0e00 	rsb	lr, lr, #0
 8009f20:	2c00      	cmp	r4, #0
 8009f22:	d151      	bne.n	8009fc8 <_strtod_l+0x380>
 8009f24:	2800      	cmp	r0, #0
 8009f26:	f47f aece 	bne.w	8009cc6 <_strtod_l+0x7e>
 8009f2a:	9a06      	ldr	r2, [sp, #24]
 8009f2c:	2a00      	cmp	r2, #0
 8009f2e:	f47f aeca 	bne.w	8009cc6 <_strtod_l+0x7e>
 8009f32:	9a04      	ldr	r2, [sp, #16]
 8009f34:	2a00      	cmp	r2, #0
 8009f36:	f47f aee4 	bne.w	8009d02 <_strtod_l+0xba>
 8009f3a:	2b4e      	cmp	r3, #78	; 0x4e
 8009f3c:	d027      	beq.n	8009f8e <_strtod_l+0x346>
 8009f3e:	dc21      	bgt.n	8009f84 <_strtod_l+0x33c>
 8009f40:	2b49      	cmp	r3, #73	; 0x49
 8009f42:	f47f aede 	bne.w	8009d02 <_strtod_l+0xba>
 8009f46:	49a0      	ldr	r1, [pc, #640]	; (800a1c8 <_strtod_l+0x580>)
 8009f48:	a81b      	add	r0, sp, #108	; 0x6c
 8009f4a:	f001 fdd7 	bl	800bafc <__match>
 8009f4e:	2800      	cmp	r0, #0
 8009f50:	f43f aed7 	beq.w	8009d02 <_strtod_l+0xba>
 8009f54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009f56:	499d      	ldr	r1, [pc, #628]	; (800a1cc <_strtod_l+0x584>)
 8009f58:	3b01      	subs	r3, #1
 8009f5a:	a81b      	add	r0, sp, #108	; 0x6c
 8009f5c:	931b      	str	r3, [sp, #108]	; 0x6c
 8009f5e:	f001 fdcd 	bl	800bafc <__match>
 8009f62:	b910      	cbnz	r0, 8009f6a <_strtod_l+0x322>
 8009f64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009f66:	3301      	adds	r3, #1
 8009f68:	931b      	str	r3, [sp, #108]	; 0x6c
 8009f6a:	f8df b274 	ldr.w	fp, [pc, #628]	; 800a1e0 <_strtod_l+0x598>
 8009f6e:	f04f 0a00 	mov.w	sl, #0
 8009f72:	e6a8      	b.n	8009cc6 <_strtod_l+0x7e>
 8009f74:	210a      	movs	r1, #10
 8009f76:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009f7a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009f7e:	e7b8      	b.n	8009ef2 <_strtod_l+0x2aa>
 8009f80:	46be      	mov	lr, r7
 8009f82:	e7c8      	b.n	8009f16 <_strtod_l+0x2ce>
 8009f84:	2b69      	cmp	r3, #105	; 0x69
 8009f86:	d0de      	beq.n	8009f46 <_strtod_l+0x2fe>
 8009f88:	2b6e      	cmp	r3, #110	; 0x6e
 8009f8a:	f47f aeba 	bne.w	8009d02 <_strtod_l+0xba>
 8009f8e:	4990      	ldr	r1, [pc, #576]	; (800a1d0 <_strtod_l+0x588>)
 8009f90:	a81b      	add	r0, sp, #108	; 0x6c
 8009f92:	f001 fdb3 	bl	800bafc <__match>
 8009f96:	2800      	cmp	r0, #0
 8009f98:	f43f aeb3 	beq.w	8009d02 <_strtod_l+0xba>
 8009f9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	2b28      	cmp	r3, #40	; 0x28
 8009fa2:	d10e      	bne.n	8009fc2 <_strtod_l+0x37a>
 8009fa4:	aa1e      	add	r2, sp, #120	; 0x78
 8009fa6:	498b      	ldr	r1, [pc, #556]	; (800a1d4 <_strtod_l+0x58c>)
 8009fa8:	a81b      	add	r0, sp, #108	; 0x6c
 8009faa:	f001 fdbb 	bl	800bb24 <__hexnan>
 8009fae:	2805      	cmp	r0, #5
 8009fb0:	d107      	bne.n	8009fc2 <_strtod_l+0x37a>
 8009fb2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009fb4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8009fb8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009fbc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009fc0:	e681      	b.n	8009cc6 <_strtod_l+0x7e>
 8009fc2:	f8df b224 	ldr.w	fp, [pc, #548]	; 800a1e8 <_strtod_l+0x5a0>
 8009fc6:	e7d2      	b.n	8009f6e <_strtod_l+0x326>
 8009fc8:	ebae 0302 	sub.w	r3, lr, r2
 8009fcc:	9306      	str	r3, [sp, #24]
 8009fce:	9b05      	ldr	r3, [sp, #20]
 8009fd0:	9807      	ldr	r0, [sp, #28]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	bf08      	it	eq
 8009fd6:	4623      	moveq	r3, r4
 8009fd8:	2c10      	cmp	r4, #16
 8009fda:	9305      	str	r3, [sp, #20]
 8009fdc:	46a0      	mov	r8, r4
 8009fde:	bfa8      	it	ge
 8009fe0:	f04f 0810 	movge.w	r8, #16
 8009fe4:	f7f6 fa9e 	bl	8000524 <__aeabi_ui2d>
 8009fe8:	2c09      	cmp	r4, #9
 8009fea:	4682      	mov	sl, r0
 8009fec:	468b      	mov	fp, r1
 8009fee:	dc13      	bgt.n	800a018 <_strtod_l+0x3d0>
 8009ff0:	9b06      	ldr	r3, [sp, #24]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	f43f ae67 	beq.w	8009cc6 <_strtod_l+0x7e>
 8009ff8:	9b06      	ldr	r3, [sp, #24]
 8009ffa:	dd7a      	ble.n	800a0f2 <_strtod_l+0x4aa>
 8009ffc:	2b16      	cmp	r3, #22
 8009ffe:	dc61      	bgt.n	800a0c4 <_strtod_l+0x47c>
 800a000:	4a75      	ldr	r2, [pc, #468]	; (800a1d8 <_strtod_l+0x590>)
 800a002:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800a006:	e9de 0100 	ldrd	r0, r1, [lr]
 800a00a:	4652      	mov	r2, sl
 800a00c:	465b      	mov	r3, fp
 800a00e:	f7f6 fb03 	bl	8000618 <__aeabi_dmul>
 800a012:	4682      	mov	sl, r0
 800a014:	468b      	mov	fp, r1
 800a016:	e656      	b.n	8009cc6 <_strtod_l+0x7e>
 800a018:	4b6f      	ldr	r3, [pc, #444]	; (800a1d8 <_strtod_l+0x590>)
 800a01a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a01e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a022:	f7f6 faf9 	bl	8000618 <__aeabi_dmul>
 800a026:	4606      	mov	r6, r0
 800a028:	4628      	mov	r0, r5
 800a02a:	460f      	mov	r7, r1
 800a02c:	f7f6 fa7a 	bl	8000524 <__aeabi_ui2d>
 800a030:	4602      	mov	r2, r0
 800a032:	460b      	mov	r3, r1
 800a034:	4630      	mov	r0, r6
 800a036:	4639      	mov	r1, r7
 800a038:	f7f6 f938 	bl	80002ac <__adddf3>
 800a03c:	2c0f      	cmp	r4, #15
 800a03e:	4682      	mov	sl, r0
 800a040:	468b      	mov	fp, r1
 800a042:	ddd5      	ble.n	8009ff0 <_strtod_l+0x3a8>
 800a044:	9b06      	ldr	r3, [sp, #24]
 800a046:	eba4 0808 	sub.w	r8, r4, r8
 800a04a:	4498      	add	r8, r3
 800a04c:	f1b8 0f00 	cmp.w	r8, #0
 800a050:	f340 8096 	ble.w	800a180 <_strtod_l+0x538>
 800a054:	f018 030f 	ands.w	r3, r8, #15
 800a058:	d00a      	beq.n	800a070 <_strtod_l+0x428>
 800a05a:	495f      	ldr	r1, [pc, #380]	; (800a1d8 <_strtod_l+0x590>)
 800a05c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a060:	4652      	mov	r2, sl
 800a062:	465b      	mov	r3, fp
 800a064:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a068:	f7f6 fad6 	bl	8000618 <__aeabi_dmul>
 800a06c:	4682      	mov	sl, r0
 800a06e:	468b      	mov	fp, r1
 800a070:	f038 080f 	bics.w	r8, r8, #15
 800a074:	d073      	beq.n	800a15e <_strtod_l+0x516>
 800a076:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a07a:	dd47      	ble.n	800a10c <_strtod_l+0x4c4>
 800a07c:	2400      	movs	r4, #0
 800a07e:	46a0      	mov	r8, r4
 800a080:	9407      	str	r4, [sp, #28]
 800a082:	9405      	str	r4, [sp, #20]
 800a084:	2322      	movs	r3, #34	; 0x22
 800a086:	f8df b158 	ldr.w	fp, [pc, #344]	; 800a1e0 <_strtod_l+0x598>
 800a08a:	f8c9 3000 	str.w	r3, [r9]
 800a08e:	f04f 0a00 	mov.w	sl, #0
 800a092:	9b07      	ldr	r3, [sp, #28]
 800a094:	2b00      	cmp	r3, #0
 800a096:	f43f ae16 	beq.w	8009cc6 <_strtod_l+0x7e>
 800a09a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a09c:	4648      	mov	r0, r9
 800a09e:	f001 fe3e 	bl	800bd1e <_Bfree>
 800a0a2:	9905      	ldr	r1, [sp, #20]
 800a0a4:	4648      	mov	r0, r9
 800a0a6:	f001 fe3a 	bl	800bd1e <_Bfree>
 800a0aa:	4641      	mov	r1, r8
 800a0ac:	4648      	mov	r0, r9
 800a0ae:	f001 fe36 	bl	800bd1e <_Bfree>
 800a0b2:	9907      	ldr	r1, [sp, #28]
 800a0b4:	4648      	mov	r0, r9
 800a0b6:	f001 fe32 	bl	800bd1e <_Bfree>
 800a0ba:	4621      	mov	r1, r4
 800a0bc:	4648      	mov	r0, r9
 800a0be:	f001 fe2e 	bl	800bd1e <_Bfree>
 800a0c2:	e600      	b.n	8009cc6 <_strtod_l+0x7e>
 800a0c4:	9a06      	ldr	r2, [sp, #24]
 800a0c6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	dbba      	blt.n	800a044 <_strtod_l+0x3fc>
 800a0ce:	4d42      	ldr	r5, [pc, #264]	; (800a1d8 <_strtod_l+0x590>)
 800a0d0:	f1c4 040f 	rsb	r4, r4, #15
 800a0d4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a0d8:	4652      	mov	r2, sl
 800a0da:	465b      	mov	r3, fp
 800a0dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0e0:	f7f6 fa9a 	bl	8000618 <__aeabi_dmul>
 800a0e4:	9b06      	ldr	r3, [sp, #24]
 800a0e6:	1b1c      	subs	r4, r3, r4
 800a0e8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a0ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a0f0:	e78d      	b.n	800a00e <_strtod_l+0x3c6>
 800a0f2:	f113 0f16 	cmn.w	r3, #22
 800a0f6:	dba5      	blt.n	800a044 <_strtod_l+0x3fc>
 800a0f8:	4a37      	ldr	r2, [pc, #220]	; (800a1d8 <_strtod_l+0x590>)
 800a0fa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800a0fe:	e9d2 2300 	ldrd	r2, r3, [r2]
 800a102:	4650      	mov	r0, sl
 800a104:	4659      	mov	r1, fp
 800a106:	f7f6 fbb1 	bl	800086c <__aeabi_ddiv>
 800a10a:	e782      	b.n	800a012 <_strtod_l+0x3ca>
 800a10c:	2300      	movs	r3, #0
 800a10e:	4e33      	ldr	r6, [pc, #204]	; (800a1dc <_strtod_l+0x594>)
 800a110:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a114:	4650      	mov	r0, sl
 800a116:	4659      	mov	r1, fp
 800a118:	461d      	mov	r5, r3
 800a11a:	f1b8 0f01 	cmp.w	r8, #1
 800a11e:	dc21      	bgt.n	800a164 <_strtod_l+0x51c>
 800a120:	b10b      	cbz	r3, 800a126 <_strtod_l+0x4de>
 800a122:	4682      	mov	sl, r0
 800a124:	468b      	mov	fp, r1
 800a126:	4b2d      	ldr	r3, [pc, #180]	; (800a1dc <_strtod_l+0x594>)
 800a128:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a12c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a130:	4652      	mov	r2, sl
 800a132:	465b      	mov	r3, fp
 800a134:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a138:	f7f6 fa6e 	bl	8000618 <__aeabi_dmul>
 800a13c:	4b28      	ldr	r3, [pc, #160]	; (800a1e0 <_strtod_l+0x598>)
 800a13e:	460a      	mov	r2, r1
 800a140:	400b      	ands	r3, r1
 800a142:	4928      	ldr	r1, [pc, #160]	; (800a1e4 <_strtod_l+0x59c>)
 800a144:	428b      	cmp	r3, r1
 800a146:	4682      	mov	sl, r0
 800a148:	d898      	bhi.n	800a07c <_strtod_l+0x434>
 800a14a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a14e:	428b      	cmp	r3, r1
 800a150:	bf86      	itte	hi
 800a152:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800a1ec <_strtod_l+0x5a4>
 800a156:	f04f 3aff 	movhi.w	sl, #4294967295
 800a15a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a15e:	2300      	movs	r3, #0
 800a160:	9304      	str	r3, [sp, #16]
 800a162:	e077      	b.n	800a254 <_strtod_l+0x60c>
 800a164:	f018 0f01 	tst.w	r8, #1
 800a168:	d006      	beq.n	800a178 <_strtod_l+0x530>
 800a16a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800a16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a172:	f7f6 fa51 	bl	8000618 <__aeabi_dmul>
 800a176:	2301      	movs	r3, #1
 800a178:	3501      	adds	r5, #1
 800a17a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a17e:	e7cc      	b.n	800a11a <_strtod_l+0x4d2>
 800a180:	d0ed      	beq.n	800a15e <_strtod_l+0x516>
 800a182:	f1c8 0800 	rsb	r8, r8, #0
 800a186:	f018 020f 	ands.w	r2, r8, #15
 800a18a:	d00a      	beq.n	800a1a2 <_strtod_l+0x55a>
 800a18c:	4b12      	ldr	r3, [pc, #72]	; (800a1d8 <_strtod_l+0x590>)
 800a18e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a192:	4650      	mov	r0, sl
 800a194:	4659      	mov	r1, fp
 800a196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19a:	f7f6 fb67 	bl	800086c <__aeabi_ddiv>
 800a19e:	4682      	mov	sl, r0
 800a1a0:	468b      	mov	fp, r1
 800a1a2:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a1a6:	d0da      	beq.n	800a15e <_strtod_l+0x516>
 800a1a8:	f1b8 0f1f 	cmp.w	r8, #31
 800a1ac:	dd20      	ble.n	800a1f0 <_strtod_l+0x5a8>
 800a1ae:	2400      	movs	r4, #0
 800a1b0:	46a0      	mov	r8, r4
 800a1b2:	9407      	str	r4, [sp, #28]
 800a1b4:	9405      	str	r4, [sp, #20]
 800a1b6:	2322      	movs	r3, #34	; 0x22
 800a1b8:	f04f 0a00 	mov.w	sl, #0
 800a1bc:	f04f 0b00 	mov.w	fp, #0
 800a1c0:	f8c9 3000 	str.w	r3, [r9]
 800a1c4:	e765      	b.n	800a092 <_strtod_l+0x44a>
 800a1c6:	bf00      	nop
 800a1c8:	0800d239 	.word	0x0800d239
 800a1cc:	0800d2c3 	.word	0x0800d2c3
 800a1d0:	0800d241 	.word	0x0800d241
 800a1d4:	0800d284 	.word	0x0800d284
 800a1d8:	0800d300 	.word	0x0800d300
 800a1dc:	0800d2d8 	.word	0x0800d2d8
 800a1e0:	7ff00000 	.word	0x7ff00000
 800a1e4:	7ca00000 	.word	0x7ca00000
 800a1e8:	fff80000 	.word	0xfff80000
 800a1ec:	7fefffff 	.word	0x7fefffff
 800a1f0:	f018 0310 	ands.w	r3, r8, #16
 800a1f4:	bf18      	it	ne
 800a1f6:	236a      	movne	r3, #106	; 0x6a
 800a1f8:	4da0      	ldr	r5, [pc, #640]	; (800a47c <_strtod_l+0x834>)
 800a1fa:	9304      	str	r3, [sp, #16]
 800a1fc:	4650      	mov	r0, sl
 800a1fe:	4659      	mov	r1, fp
 800a200:	2300      	movs	r3, #0
 800a202:	f1b8 0f00 	cmp.w	r8, #0
 800a206:	f300 810a 	bgt.w	800a41e <_strtod_l+0x7d6>
 800a20a:	b10b      	cbz	r3, 800a210 <_strtod_l+0x5c8>
 800a20c:	4682      	mov	sl, r0
 800a20e:	468b      	mov	fp, r1
 800a210:	9b04      	ldr	r3, [sp, #16]
 800a212:	b1bb      	cbz	r3, 800a244 <_strtod_l+0x5fc>
 800a214:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800a218:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	4659      	mov	r1, fp
 800a220:	dd10      	ble.n	800a244 <_strtod_l+0x5fc>
 800a222:	2b1f      	cmp	r3, #31
 800a224:	f340 8107 	ble.w	800a436 <_strtod_l+0x7ee>
 800a228:	2b34      	cmp	r3, #52	; 0x34
 800a22a:	bfde      	ittt	le
 800a22c:	3b20      	suble	r3, #32
 800a22e:	f04f 32ff 	movle.w	r2, #4294967295
 800a232:	fa02 f303 	lslle.w	r3, r2, r3
 800a236:	f04f 0a00 	mov.w	sl, #0
 800a23a:	bfcc      	ite	gt
 800a23c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a240:	ea03 0b01 	andle.w	fp, r3, r1
 800a244:	2200      	movs	r2, #0
 800a246:	2300      	movs	r3, #0
 800a248:	4650      	mov	r0, sl
 800a24a:	4659      	mov	r1, fp
 800a24c:	f7f6 fc4c 	bl	8000ae8 <__aeabi_dcmpeq>
 800a250:	2800      	cmp	r0, #0
 800a252:	d1ac      	bne.n	800a1ae <_strtod_l+0x566>
 800a254:	9b07      	ldr	r3, [sp, #28]
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	9a05      	ldr	r2, [sp, #20]
 800a25a:	9908      	ldr	r1, [sp, #32]
 800a25c:	4623      	mov	r3, r4
 800a25e:	4648      	mov	r0, r9
 800a260:	f001 fdaf 	bl	800bdc2 <__s2b>
 800a264:	9007      	str	r0, [sp, #28]
 800a266:	2800      	cmp	r0, #0
 800a268:	f43f af08 	beq.w	800a07c <_strtod_l+0x434>
 800a26c:	9a06      	ldr	r2, [sp, #24]
 800a26e:	9b06      	ldr	r3, [sp, #24]
 800a270:	2a00      	cmp	r2, #0
 800a272:	f1c3 0300 	rsb	r3, r3, #0
 800a276:	bfa8      	it	ge
 800a278:	2300      	movge	r3, #0
 800a27a:	930e      	str	r3, [sp, #56]	; 0x38
 800a27c:	2400      	movs	r4, #0
 800a27e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a282:	9316      	str	r3, [sp, #88]	; 0x58
 800a284:	46a0      	mov	r8, r4
 800a286:	9b07      	ldr	r3, [sp, #28]
 800a288:	4648      	mov	r0, r9
 800a28a:	6859      	ldr	r1, [r3, #4]
 800a28c:	f001 fd13 	bl	800bcb6 <_Balloc>
 800a290:	9005      	str	r0, [sp, #20]
 800a292:	2800      	cmp	r0, #0
 800a294:	f43f aef6 	beq.w	800a084 <_strtod_l+0x43c>
 800a298:	9b07      	ldr	r3, [sp, #28]
 800a29a:	691a      	ldr	r2, [r3, #16]
 800a29c:	3202      	adds	r2, #2
 800a29e:	f103 010c 	add.w	r1, r3, #12
 800a2a2:	0092      	lsls	r2, r2, #2
 800a2a4:	300c      	adds	r0, #12
 800a2a6:	f001 fcfb 	bl	800bca0 <memcpy>
 800a2aa:	aa1e      	add	r2, sp, #120	; 0x78
 800a2ac:	a91d      	add	r1, sp, #116	; 0x74
 800a2ae:	ec4b ab10 	vmov	d0, sl, fp
 800a2b2:	4648      	mov	r0, r9
 800a2b4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800a2b8:	f002 f83e 	bl	800c338 <__d2b>
 800a2bc:	901c      	str	r0, [sp, #112]	; 0x70
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	f43f aee0 	beq.w	800a084 <_strtod_l+0x43c>
 800a2c4:	2101      	movs	r1, #1
 800a2c6:	4648      	mov	r0, r9
 800a2c8:	f001 fe07 	bl	800beda <__i2b>
 800a2cc:	4680      	mov	r8, r0
 800a2ce:	2800      	cmp	r0, #0
 800a2d0:	f43f aed8 	beq.w	800a084 <_strtod_l+0x43c>
 800a2d4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a2d6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a2d8:	2e00      	cmp	r6, #0
 800a2da:	bfab      	itete	ge
 800a2dc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a2de:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a2e0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800a2e2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800a2e4:	bfac      	ite	ge
 800a2e6:	18f7      	addge	r7, r6, r3
 800a2e8:	1b9d      	sublt	r5, r3, r6
 800a2ea:	9b04      	ldr	r3, [sp, #16]
 800a2ec:	1af6      	subs	r6, r6, r3
 800a2ee:	4416      	add	r6, r2
 800a2f0:	4b63      	ldr	r3, [pc, #396]	; (800a480 <_strtod_l+0x838>)
 800a2f2:	3e01      	subs	r6, #1
 800a2f4:	429e      	cmp	r6, r3
 800a2f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a2fa:	f280 80af 	bge.w	800a45c <_strtod_l+0x814>
 800a2fe:	1b9b      	subs	r3, r3, r6
 800a300:	2b1f      	cmp	r3, #31
 800a302:	eba2 0203 	sub.w	r2, r2, r3
 800a306:	f04f 0101 	mov.w	r1, #1
 800a30a:	f300 809b 	bgt.w	800a444 <_strtod_l+0x7fc>
 800a30e:	fa01 f303 	lsl.w	r3, r1, r3
 800a312:	930f      	str	r3, [sp, #60]	; 0x3c
 800a314:	2300      	movs	r3, #0
 800a316:	930a      	str	r3, [sp, #40]	; 0x28
 800a318:	18be      	adds	r6, r7, r2
 800a31a:	9b04      	ldr	r3, [sp, #16]
 800a31c:	42b7      	cmp	r7, r6
 800a31e:	4415      	add	r5, r2
 800a320:	441d      	add	r5, r3
 800a322:	463b      	mov	r3, r7
 800a324:	bfa8      	it	ge
 800a326:	4633      	movge	r3, r6
 800a328:	42ab      	cmp	r3, r5
 800a32a:	bfa8      	it	ge
 800a32c:	462b      	movge	r3, r5
 800a32e:	2b00      	cmp	r3, #0
 800a330:	bfc2      	ittt	gt
 800a332:	1af6      	subgt	r6, r6, r3
 800a334:	1aed      	subgt	r5, r5, r3
 800a336:	1aff      	subgt	r7, r7, r3
 800a338:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a33a:	b1bb      	cbz	r3, 800a36c <_strtod_l+0x724>
 800a33c:	4641      	mov	r1, r8
 800a33e:	461a      	mov	r2, r3
 800a340:	4648      	mov	r0, r9
 800a342:	f001 fe69 	bl	800c018 <__pow5mult>
 800a346:	4680      	mov	r8, r0
 800a348:	2800      	cmp	r0, #0
 800a34a:	f43f ae9b 	beq.w	800a084 <_strtod_l+0x43c>
 800a34e:	4601      	mov	r1, r0
 800a350:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a352:	4648      	mov	r0, r9
 800a354:	f001 fdca 	bl	800beec <__multiply>
 800a358:	900c      	str	r0, [sp, #48]	; 0x30
 800a35a:	2800      	cmp	r0, #0
 800a35c:	f43f ae92 	beq.w	800a084 <_strtod_l+0x43c>
 800a360:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a362:	4648      	mov	r0, r9
 800a364:	f001 fcdb 	bl	800bd1e <_Bfree>
 800a368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a36a:	931c      	str	r3, [sp, #112]	; 0x70
 800a36c:	2e00      	cmp	r6, #0
 800a36e:	dc7a      	bgt.n	800a466 <_strtod_l+0x81e>
 800a370:	9b06      	ldr	r3, [sp, #24]
 800a372:	2b00      	cmp	r3, #0
 800a374:	dd08      	ble.n	800a388 <_strtod_l+0x740>
 800a376:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a378:	9905      	ldr	r1, [sp, #20]
 800a37a:	4648      	mov	r0, r9
 800a37c:	f001 fe4c 	bl	800c018 <__pow5mult>
 800a380:	9005      	str	r0, [sp, #20]
 800a382:	2800      	cmp	r0, #0
 800a384:	f43f ae7e 	beq.w	800a084 <_strtod_l+0x43c>
 800a388:	2d00      	cmp	r5, #0
 800a38a:	dd08      	ble.n	800a39e <_strtod_l+0x756>
 800a38c:	462a      	mov	r2, r5
 800a38e:	9905      	ldr	r1, [sp, #20]
 800a390:	4648      	mov	r0, r9
 800a392:	f001 fe8f 	bl	800c0b4 <__lshift>
 800a396:	9005      	str	r0, [sp, #20]
 800a398:	2800      	cmp	r0, #0
 800a39a:	f43f ae73 	beq.w	800a084 <_strtod_l+0x43c>
 800a39e:	2f00      	cmp	r7, #0
 800a3a0:	dd08      	ble.n	800a3b4 <_strtod_l+0x76c>
 800a3a2:	4641      	mov	r1, r8
 800a3a4:	463a      	mov	r2, r7
 800a3a6:	4648      	mov	r0, r9
 800a3a8:	f001 fe84 	bl	800c0b4 <__lshift>
 800a3ac:	4680      	mov	r8, r0
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	f43f ae68 	beq.w	800a084 <_strtod_l+0x43c>
 800a3b4:	9a05      	ldr	r2, [sp, #20]
 800a3b6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a3b8:	4648      	mov	r0, r9
 800a3ba:	f001 fee9 	bl	800c190 <__mdiff>
 800a3be:	4604      	mov	r4, r0
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	f43f ae5f 	beq.w	800a084 <_strtod_l+0x43c>
 800a3c6:	68c3      	ldr	r3, [r0, #12]
 800a3c8:	930c      	str	r3, [sp, #48]	; 0x30
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	60c3      	str	r3, [r0, #12]
 800a3ce:	4641      	mov	r1, r8
 800a3d0:	f001 fec4 	bl	800c15c <__mcmp>
 800a3d4:	2800      	cmp	r0, #0
 800a3d6:	da55      	bge.n	800a484 <_strtod_l+0x83c>
 800a3d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3da:	b9e3      	cbnz	r3, 800a416 <_strtod_l+0x7ce>
 800a3dc:	f1ba 0f00 	cmp.w	sl, #0
 800a3e0:	d119      	bne.n	800a416 <_strtod_l+0x7ce>
 800a3e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a3e6:	b9b3      	cbnz	r3, 800a416 <_strtod_l+0x7ce>
 800a3e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a3ec:	0d1b      	lsrs	r3, r3, #20
 800a3ee:	051b      	lsls	r3, r3, #20
 800a3f0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a3f4:	d90f      	bls.n	800a416 <_strtod_l+0x7ce>
 800a3f6:	6963      	ldr	r3, [r4, #20]
 800a3f8:	b913      	cbnz	r3, 800a400 <_strtod_l+0x7b8>
 800a3fa:	6923      	ldr	r3, [r4, #16]
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	dd0a      	ble.n	800a416 <_strtod_l+0x7ce>
 800a400:	4621      	mov	r1, r4
 800a402:	2201      	movs	r2, #1
 800a404:	4648      	mov	r0, r9
 800a406:	f001 fe55 	bl	800c0b4 <__lshift>
 800a40a:	4641      	mov	r1, r8
 800a40c:	4604      	mov	r4, r0
 800a40e:	f001 fea5 	bl	800c15c <__mcmp>
 800a412:	2800      	cmp	r0, #0
 800a414:	dc67      	bgt.n	800a4e6 <_strtod_l+0x89e>
 800a416:	9b04      	ldr	r3, [sp, #16]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d171      	bne.n	800a500 <_strtod_l+0x8b8>
 800a41c:	e63d      	b.n	800a09a <_strtod_l+0x452>
 800a41e:	f018 0f01 	tst.w	r8, #1
 800a422:	d004      	beq.n	800a42e <_strtod_l+0x7e6>
 800a424:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a428:	f7f6 f8f6 	bl	8000618 <__aeabi_dmul>
 800a42c:	2301      	movs	r3, #1
 800a42e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a432:	3508      	adds	r5, #8
 800a434:	e6e5      	b.n	800a202 <_strtod_l+0x5ba>
 800a436:	f04f 32ff 	mov.w	r2, #4294967295
 800a43a:	fa02 f303 	lsl.w	r3, r2, r3
 800a43e:	ea03 0a0a 	and.w	sl, r3, sl
 800a442:	e6ff      	b.n	800a244 <_strtod_l+0x5fc>
 800a444:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a448:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a44c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a450:	36e2      	adds	r6, #226	; 0xe2
 800a452:	fa01 f306 	lsl.w	r3, r1, r6
 800a456:	930a      	str	r3, [sp, #40]	; 0x28
 800a458:	910f      	str	r1, [sp, #60]	; 0x3c
 800a45a:	e75d      	b.n	800a318 <_strtod_l+0x6d0>
 800a45c:	2300      	movs	r3, #0
 800a45e:	930a      	str	r3, [sp, #40]	; 0x28
 800a460:	2301      	movs	r3, #1
 800a462:	930f      	str	r3, [sp, #60]	; 0x3c
 800a464:	e758      	b.n	800a318 <_strtod_l+0x6d0>
 800a466:	4632      	mov	r2, r6
 800a468:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a46a:	4648      	mov	r0, r9
 800a46c:	f001 fe22 	bl	800c0b4 <__lshift>
 800a470:	901c      	str	r0, [sp, #112]	; 0x70
 800a472:	2800      	cmp	r0, #0
 800a474:	f47f af7c 	bne.w	800a370 <_strtod_l+0x728>
 800a478:	e604      	b.n	800a084 <_strtod_l+0x43c>
 800a47a:	bf00      	nop
 800a47c:	0800d298 	.word	0x0800d298
 800a480:	fffffc02 	.word	0xfffffc02
 800a484:	465d      	mov	r5, fp
 800a486:	f040 8086 	bne.w	800a596 <_strtod_l+0x94e>
 800a48a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a48c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a490:	b32a      	cbz	r2, 800a4de <_strtod_l+0x896>
 800a492:	4aaf      	ldr	r2, [pc, #700]	; (800a750 <_strtod_l+0xb08>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d153      	bne.n	800a540 <_strtod_l+0x8f8>
 800a498:	9b04      	ldr	r3, [sp, #16]
 800a49a:	4650      	mov	r0, sl
 800a49c:	b1d3      	cbz	r3, 800a4d4 <_strtod_l+0x88c>
 800a49e:	4aad      	ldr	r2, [pc, #692]	; (800a754 <_strtod_l+0xb0c>)
 800a4a0:	402a      	ands	r2, r5
 800a4a2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a4a6:	f04f 31ff 	mov.w	r1, #4294967295
 800a4aa:	d816      	bhi.n	800a4da <_strtod_l+0x892>
 800a4ac:	0d12      	lsrs	r2, r2, #20
 800a4ae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a4b2:	fa01 f303 	lsl.w	r3, r1, r3
 800a4b6:	4298      	cmp	r0, r3
 800a4b8:	d142      	bne.n	800a540 <_strtod_l+0x8f8>
 800a4ba:	4ba7      	ldr	r3, [pc, #668]	; (800a758 <_strtod_l+0xb10>)
 800a4bc:	429d      	cmp	r5, r3
 800a4be:	d102      	bne.n	800a4c6 <_strtod_l+0x87e>
 800a4c0:	3001      	adds	r0, #1
 800a4c2:	f43f addf 	beq.w	800a084 <_strtod_l+0x43c>
 800a4c6:	4ba3      	ldr	r3, [pc, #652]	; (800a754 <_strtod_l+0xb0c>)
 800a4c8:	402b      	ands	r3, r5
 800a4ca:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a4ce:	f04f 0a00 	mov.w	sl, #0
 800a4d2:	e7a0      	b.n	800a416 <_strtod_l+0x7ce>
 800a4d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a4d8:	e7ed      	b.n	800a4b6 <_strtod_l+0x86e>
 800a4da:	460b      	mov	r3, r1
 800a4dc:	e7eb      	b.n	800a4b6 <_strtod_l+0x86e>
 800a4de:	bb7b      	cbnz	r3, 800a540 <_strtod_l+0x8f8>
 800a4e0:	f1ba 0f00 	cmp.w	sl, #0
 800a4e4:	d12c      	bne.n	800a540 <_strtod_l+0x8f8>
 800a4e6:	9904      	ldr	r1, [sp, #16]
 800a4e8:	4a9a      	ldr	r2, [pc, #616]	; (800a754 <_strtod_l+0xb0c>)
 800a4ea:	465b      	mov	r3, fp
 800a4ec:	b1f1      	cbz	r1, 800a52c <_strtod_l+0x8e4>
 800a4ee:	ea02 010b 	and.w	r1, r2, fp
 800a4f2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a4f6:	dc19      	bgt.n	800a52c <_strtod_l+0x8e4>
 800a4f8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a4fc:	f77f ae5b 	ble.w	800a1b6 <_strtod_l+0x56e>
 800a500:	4a96      	ldr	r2, [pc, #600]	; (800a75c <_strtod_l+0xb14>)
 800a502:	2300      	movs	r3, #0
 800a504:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800a508:	4650      	mov	r0, sl
 800a50a:	4659      	mov	r1, fp
 800a50c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a510:	f7f6 f882 	bl	8000618 <__aeabi_dmul>
 800a514:	4682      	mov	sl, r0
 800a516:	468b      	mov	fp, r1
 800a518:	2900      	cmp	r1, #0
 800a51a:	f47f adbe 	bne.w	800a09a <_strtod_l+0x452>
 800a51e:	2800      	cmp	r0, #0
 800a520:	f47f adbb 	bne.w	800a09a <_strtod_l+0x452>
 800a524:	2322      	movs	r3, #34	; 0x22
 800a526:	f8c9 3000 	str.w	r3, [r9]
 800a52a:	e5b6      	b.n	800a09a <_strtod_l+0x452>
 800a52c:	4013      	ands	r3, r2
 800a52e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a532:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a536:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a53a:	f04f 3aff 	mov.w	sl, #4294967295
 800a53e:	e76a      	b.n	800a416 <_strtod_l+0x7ce>
 800a540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a542:	b193      	cbz	r3, 800a56a <_strtod_l+0x922>
 800a544:	422b      	tst	r3, r5
 800a546:	f43f af66 	beq.w	800a416 <_strtod_l+0x7ce>
 800a54a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a54c:	9a04      	ldr	r2, [sp, #16]
 800a54e:	4650      	mov	r0, sl
 800a550:	4659      	mov	r1, fp
 800a552:	b173      	cbz	r3, 800a572 <_strtod_l+0x92a>
 800a554:	f7ff fb5c 	bl	8009c10 <sulp>
 800a558:	4602      	mov	r2, r0
 800a55a:	460b      	mov	r3, r1
 800a55c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a560:	f7f5 fea4 	bl	80002ac <__adddf3>
 800a564:	4682      	mov	sl, r0
 800a566:	468b      	mov	fp, r1
 800a568:	e755      	b.n	800a416 <_strtod_l+0x7ce>
 800a56a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a56c:	ea13 0f0a 	tst.w	r3, sl
 800a570:	e7e9      	b.n	800a546 <_strtod_l+0x8fe>
 800a572:	f7ff fb4d 	bl	8009c10 <sulp>
 800a576:	4602      	mov	r2, r0
 800a578:	460b      	mov	r3, r1
 800a57a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a57e:	f7f5 fe93 	bl	80002a8 <__aeabi_dsub>
 800a582:	2200      	movs	r2, #0
 800a584:	2300      	movs	r3, #0
 800a586:	4682      	mov	sl, r0
 800a588:	468b      	mov	fp, r1
 800a58a:	f7f6 faad 	bl	8000ae8 <__aeabi_dcmpeq>
 800a58e:	2800      	cmp	r0, #0
 800a590:	f47f ae11 	bne.w	800a1b6 <_strtod_l+0x56e>
 800a594:	e73f      	b.n	800a416 <_strtod_l+0x7ce>
 800a596:	4641      	mov	r1, r8
 800a598:	4620      	mov	r0, r4
 800a59a:	f001 ff1c 	bl	800c3d6 <__ratio>
 800a59e:	ec57 6b10 	vmov	r6, r7, d0
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a5a8:	ee10 0a10 	vmov	r0, s0
 800a5ac:	4639      	mov	r1, r7
 800a5ae:	f7f6 faaf 	bl	8000b10 <__aeabi_dcmple>
 800a5b2:	2800      	cmp	r0, #0
 800a5b4:	d077      	beq.n	800a6a6 <_strtod_l+0xa5e>
 800a5b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d04a      	beq.n	800a652 <_strtod_l+0xa0a>
 800a5bc:	4b68      	ldr	r3, [pc, #416]	; (800a760 <_strtod_l+0xb18>)
 800a5be:	2200      	movs	r2, #0
 800a5c0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a5c4:	4f66      	ldr	r7, [pc, #408]	; (800a760 <_strtod_l+0xb18>)
 800a5c6:	2600      	movs	r6, #0
 800a5c8:	4b62      	ldr	r3, [pc, #392]	; (800a754 <_strtod_l+0xb0c>)
 800a5ca:	402b      	ands	r3, r5
 800a5cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a5d0:	4b64      	ldr	r3, [pc, #400]	; (800a764 <_strtod_l+0xb1c>)
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	f040 80ce 	bne.w	800a774 <_strtod_l+0xb2c>
 800a5d8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a5dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a5e0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800a5e4:	ec4b ab10 	vmov	d0, sl, fp
 800a5e8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800a5ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a5f0:	f001 fe2c 	bl	800c24c <__ulp>
 800a5f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a5f8:	ec53 2b10 	vmov	r2, r3, d0
 800a5fc:	f7f6 f80c 	bl	8000618 <__aeabi_dmul>
 800a600:	4652      	mov	r2, sl
 800a602:	465b      	mov	r3, fp
 800a604:	f7f5 fe52 	bl	80002ac <__adddf3>
 800a608:	460b      	mov	r3, r1
 800a60a:	4952      	ldr	r1, [pc, #328]	; (800a754 <_strtod_l+0xb0c>)
 800a60c:	4a56      	ldr	r2, [pc, #344]	; (800a768 <_strtod_l+0xb20>)
 800a60e:	4019      	ands	r1, r3
 800a610:	4291      	cmp	r1, r2
 800a612:	4682      	mov	sl, r0
 800a614:	d95b      	bls.n	800a6ce <_strtod_l+0xa86>
 800a616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a618:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d103      	bne.n	800a628 <_strtod_l+0x9e0>
 800a620:	9b08      	ldr	r3, [sp, #32]
 800a622:	3301      	adds	r3, #1
 800a624:	f43f ad2e 	beq.w	800a084 <_strtod_l+0x43c>
 800a628:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800a758 <_strtod_l+0xb10>
 800a62c:	f04f 3aff 	mov.w	sl, #4294967295
 800a630:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a632:	4648      	mov	r0, r9
 800a634:	f001 fb73 	bl	800bd1e <_Bfree>
 800a638:	9905      	ldr	r1, [sp, #20]
 800a63a:	4648      	mov	r0, r9
 800a63c:	f001 fb6f 	bl	800bd1e <_Bfree>
 800a640:	4641      	mov	r1, r8
 800a642:	4648      	mov	r0, r9
 800a644:	f001 fb6b 	bl	800bd1e <_Bfree>
 800a648:	4621      	mov	r1, r4
 800a64a:	4648      	mov	r0, r9
 800a64c:	f001 fb67 	bl	800bd1e <_Bfree>
 800a650:	e619      	b.n	800a286 <_strtod_l+0x63e>
 800a652:	f1ba 0f00 	cmp.w	sl, #0
 800a656:	d11a      	bne.n	800a68e <_strtod_l+0xa46>
 800a658:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a65c:	b9eb      	cbnz	r3, 800a69a <_strtod_l+0xa52>
 800a65e:	2200      	movs	r2, #0
 800a660:	4b3f      	ldr	r3, [pc, #252]	; (800a760 <_strtod_l+0xb18>)
 800a662:	4630      	mov	r0, r6
 800a664:	4639      	mov	r1, r7
 800a666:	f7f6 fa49 	bl	8000afc <__aeabi_dcmplt>
 800a66a:	b9c8      	cbnz	r0, 800a6a0 <_strtod_l+0xa58>
 800a66c:	4630      	mov	r0, r6
 800a66e:	4639      	mov	r1, r7
 800a670:	2200      	movs	r2, #0
 800a672:	4b3e      	ldr	r3, [pc, #248]	; (800a76c <_strtod_l+0xb24>)
 800a674:	f7f5 ffd0 	bl	8000618 <__aeabi_dmul>
 800a678:	4606      	mov	r6, r0
 800a67a:	460f      	mov	r7, r1
 800a67c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a680:	9618      	str	r6, [sp, #96]	; 0x60
 800a682:	9319      	str	r3, [sp, #100]	; 0x64
 800a684:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a688:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a68c:	e79c      	b.n	800a5c8 <_strtod_l+0x980>
 800a68e:	f1ba 0f01 	cmp.w	sl, #1
 800a692:	d102      	bne.n	800a69a <_strtod_l+0xa52>
 800a694:	2d00      	cmp	r5, #0
 800a696:	f43f ad8e 	beq.w	800a1b6 <_strtod_l+0x56e>
 800a69a:	2200      	movs	r2, #0
 800a69c:	4b34      	ldr	r3, [pc, #208]	; (800a770 <_strtod_l+0xb28>)
 800a69e:	e78f      	b.n	800a5c0 <_strtod_l+0x978>
 800a6a0:	2600      	movs	r6, #0
 800a6a2:	4f32      	ldr	r7, [pc, #200]	; (800a76c <_strtod_l+0xb24>)
 800a6a4:	e7ea      	b.n	800a67c <_strtod_l+0xa34>
 800a6a6:	4b31      	ldr	r3, [pc, #196]	; (800a76c <_strtod_l+0xb24>)
 800a6a8:	4630      	mov	r0, r6
 800a6aa:	4639      	mov	r1, r7
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f7f5 ffb3 	bl	8000618 <__aeabi_dmul>
 800a6b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6b4:	4606      	mov	r6, r0
 800a6b6:	460f      	mov	r7, r1
 800a6b8:	b933      	cbnz	r3, 800a6c8 <_strtod_l+0xa80>
 800a6ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a6be:	9010      	str	r0, [sp, #64]	; 0x40
 800a6c0:	9311      	str	r3, [sp, #68]	; 0x44
 800a6c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a6c6:	e7df      	b.n	800a688 <_strtod_l+0xa40>
 800a6c8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a6cc:	e7f9      	b.n	800a6c2 <_strtod_l+0xa7a>
 800a6ce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a6d2:	9b04      	ldr	r3, [sp, #16]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d1ab      	bne.n	800a630 <_strtod_l+0x9e8>
 800a6d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a6dc:	0d1b      	lsrs	r3, r3, #20
 800a6de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a6e0:	051b      	lsls	r3, r3, #20
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	465d      	mov	r5, fp
 800a6e6:	d1a3      	bne.n	800a630 <_strtod_l+0x9e8>
 800a6e8:	4639      	mov	r1, r7
 800a6ea:	4630      	mov	r0, r6
 800a6ec:	f7f6 fa44 	bl	8000b78 <__aeabi_d2iz>
 800a6f0:	f7f5 ff28 	bl	8000544 <__aeabi_i2d>
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	4639      	mov	r1, r7
 800a6fa:	4630      	mov	r0, r6
 800a6fc:	f7f5 fdd4 	bl	80002a8 <__aeabi_dsub>
 800a700:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a702:	4606      	mov	r6, r0
 800a704:	460f      	mov	r7, r1
 800a706:	b933      	cbnz	r3, 800a716 <_strtod_l+0xace>
 800a708:	f1ba 0f00 	cmp.w	sl, #0
 800a70c:	d103      	bne.n	800a716 <_strtod_l+0xace>
 800a70e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800a712:	2d00      	cmp	r5, #0
 800a714:	d06d      	beq.n	800a7f2 <_strtod_l+0xbaa>
 800a716:	a30a      	add	r3, pc, #40	; (adr r3, 800a740 <_strtod_l+0xaf8>)
 800a718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a71c:	4630      	mov	r0, r6
 800a71e:	4639      	mov	r1, r7
 800a720:	f7f6 f9ec 	bl	8000afc <__aeabi_dcmplt>
 800a724:	2800      	cmp	r0, #0
 800a726:	f47f acb8 	bne.w	800a09a <_strtod_l+0x452>
 800a72a:	a307      	add	r3, pc, #28	; (adr r3, 800a748 <_strtod_l+0xb00>)
 800a72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a730:	4630      	mov	r0, r6
 800a732:	4639      	mov	r1, r7
 800a734:	f7f6 fa00 	bl	8000b38 <__aeabi_dcmpgt>
 800a738:	2800      	cmp	r0, #0
 800a73a:	f43f af79 	beq.w	800a630 <_strtod_l+0x9e8>
 800a73e:	e4ac      	b.n	800a09a <_strtod_l+0x452>
 800a740:	94a03595 	.word	0x94a03595
 800a744:	3fdfffff 	.word	0x3fdfffff
 800a748:	35afe535 	.word	0x35afe535
 800a74c:	3fe00000 	.word	0x3fe00000
 800a750:	000fffff 	.word	0x000fffff
 800a754:	7ff00000 	.word	0x7ff00000
 800a758:	7fefffff 	.word	0x7fefffff
 800a75c:	39500000 	.word	0x39500000
 800a760:	3ff00000 	.word	0x3ff00000
 800a764:	7fe00000 	.word	0x7fe00000
 800a768:	7c9fffff 	.word	0x7c9fffff
 800a76c:	3fe00000 	.word	0x3fe00000
 800a770:	bff00000 	.word	0xbff00000
 800a774:	9b04      	ldr	r3, [sp, #16]
 800a776:	b333      	cbz	r3, 800a7c6 <_strtod_l+0xb7e>
 800a778:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a77a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a77e:	d822      	bhi.n	800a7c6 <_strtod_l+0xb7e>
 800a780:	a327      	add	r3, pc, #156	; (adr r3, 800a820 <_strtod_l+0xbd8>)
 800a782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a786:	4630      	mov	r0, r6
 800a788:	4639      	mov	r1, r7
 800a78a:	f7f6 f9c1 	bl	8000b10 <__aeabi_dcmple>
 800a78e:	b1a0      	cbz	r0, 800a7ba <_strtod_l+0xb72>
 800a790:	4639      	mov	r1, r7
 800a792:	4630      	mov	r0, r6
 800a794:	f7f6 fa18 	bl	8000bc8 <__aeabi_d2uiz>
 800a798:	2800      	cmp	r0, #0
 800a79a:	bf08      	it	eq
 800a79c:	2001      	moveq	r0, #1
 800a79e:	f7f5 fec1 	bl	8000524 <__aeabi_ui2d>
 800a7a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7a4:	4606      	mov	r6, r0
 800a7a6:	460f      	mov	r7, r1
 800a7a8:	bb03      	cbnz	r3, 800a7ec <_strtod_l+0xba4>
 800a7aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a7ae:	9012      	str	r0, [sp, #72]	; 0x48
 800a7b0:	9313      	str	r3, [sp, #76]	; 0x4c
 800a7b2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a7b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a7ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a7be:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a7c2:	1a9b      	subs	r3, r3, r2
 800a7c4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7c6:	ed9d 0b08 	vldr	d0, [sp, #32]
 800a7ca:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800a7ce:	f001 fd3d 	bl	800c24c <__ulp>
 800a7d2:	4650      	mov	r0, sl
 800a7d4:	ec53 2b10 	vmov	r2, r3, d0
 800a7d8:	4659      	mov	r1, fp
 800a7da:	f7f5 ff1d 	bl	8000618 <__aeabi_dmul>
 800a7de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a7e2:	f7f5 fd63 	bl	80002ac <__adddf3>
 800a7e6:	4682      	mov	sl, r0
 800a7e8:	468b      	mov	fp, r1
 800a7ea:	e772      	b.n	800a6d2 <_strtod_l+0xa8a>
 800a7ec:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800a7f0:	e7df      	b.n	800a7b2 <_strtod_l+0xb6a>
 800a7f2:	a30d      	add	r3, pc, #52	; (adr r3, 800a828 <_strtod_l+0xbe0>)
 800a7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f8:	f7f6 f980 	bl	8000afc <__aeabi_dcmplt>
 800a7fc:	e79c      	b.n	800a738 <_strtod_l+0xaf0>
 800a7fe:	2300      	movs	r3, #0
 800a800:	930d      	str	r3, [sp, #52]	; 0x34
 800a802:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a804:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a806:	6013      	str	r3, [r2, #0]
 800a808:	f7ff ba61 	b.w	8009cce <_strtod_l+0x86>
 800a80c:	2b65      	cmp	r3, #101	; 0x65
 800a80e:	f04f 0200 	mov.w	r2, #0
 800a812:	f43f ab4e 	beq.w	8009eb2 <_strtod_l+0x26a>
 800a816:	2101      	movs	r1, #1
 800a818:	4614      	mov	r4, r2
 800a81a:	9104      	str	r1, [sp, #16]
 800a81c:	f7ff bacb 	b.w	8009db6 <_strtod_l+0x16e>
 800a820:	ffc00000 	.word	0xffc00000
 800a824:	41dfffff 	.word	0x41dfffff
 800a828:	94a03595 	.word	0x94a03595
 800a82c:	3fcfffff 	.word	0x3fcfffff

0800a830 <_strtod_r>:
 800a830:	4b05      	ldr	r3, [pc, #20]	; (800a848 <_strtod_r+0x18>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	b410      	push	{r4}
 800a836:	6a1b      	ldr	r3, [r3, #32]
 800a838:	4c04      	ldr	r4, [pc, #16]	; (800a84c <_strtod_r+0x1c>)
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	bf08      	it	eq
 800a83e:	4623      	moveq	r3, r4
 800a840:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a844:	f7ff ba00 	b.w	8009c48 <_strtod_l>
 800a848:	20000014 	.word	0x20000014
 800a84c:	20000078 	.word	0x20000078

0800a850 <_strtol_l.isra.0>:
 800a850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a854:	4680      	mov	r8, r0
 800a856:	4689      	mov	r9, r1
 800a858:	4692      	mov	sl, r2
 800a85a:	461e      	mov	r6, r3
 800a85c:	460f      	mov	r7, r1
 800a85e:	463d      	mov	r5, r7
 800a860:	9808      	ldr	r0, [sp, #32]
 800a862:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a866:	f001 f9ed 	bl	800bc44 <__locale_ctype_ptr_l>
 800a86a:	4420      	add	r0, r4
 800a86c:	7843      	ldrb	r3, [r0, #1]
 800a86e:	f013 0308 	ands.w	r3, r3, #8
 800a872:	d132      	bne.n	800a8da <_strtol_l.isra.0+0x8a>
 800a874:	2c2d      	cmp	r4, #45	; 0x2d
 800a876:	d132      	bne.n	800a8de <_strtol_l.isra.0+0x8e>
 800a878:	787c      	ldrb	r4, [r7, #1]
 800a87a:	1cbd      	adds	r5, r7, #2
 800a87c:	2201      	movs	r2, #1
 800a87e:	2e00      	cmp	r6, #0
 800a880:	d05d      	beq.n	800a93e <_strtol_l.isra.0+0xee>
 800a882:	2e10      	cmp	r6, #16
 800a884:	d109      	bne.n	800a89a <_strtol_l.isra.0+0x4a>
 800a886:	2c30      	cmp	r4, #48	; 0x30
 800a888:	d107      	bne.n	800a89a <_strtol_l.isra.0+0x4a>
 800a88a:	782b      	ldrb	r3, [r5, #0]
 800a88c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a890:	2b58      	cmp	r3, #88	; 0x58
 800a892:	d14f      	bne.n	800a934 <_strtol_l.isra.0+0xe4>
 800a894:	786c      	ldrb	r4, [r5, #1]
 800a896:	2610      	movs	r6, #16
 800a898:	3502      	adds	r5, #2
 800a89a:	2a00      	cmp	r2, #0
 800a89c:	bf14      	ite	ne
 800a89e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a8a2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a8a6:	2700      	movs	r7, #0
 800a8a8:	fbb1 fcf6 	udiv	ip, r1, r6
 800a8ac:	4638      	mov	r0, r7
 800a8ae:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a8b2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a8b6:	2b09      	cmp	r3, #9
 800a8b8:	d817      	bhi.n	800a8ea <_strtol_l.isra.0+0x9a>
 800a8ba:	461c      	mov	r4, r3
 800a8bc:	42a6      	cmp	r6, r4
 800a8be:	dd23      	ble.n	800a908 <_strtol_l.isra.0+0xb8>
 800a8c0:	1c7b      	adds	r3, r7, #1
 800a8c2:	d007      	beq.n	800a8d4 <_strtol_l.isra.0+0x84>
 800a8c4:	4584      	cmp	ip, r0
 800a8c6:	d31c      	bcc.n	800a902 <_strtol_l.isra.0+0xb2>
 800a8c8:	d101      	bne.n	800a8ce <_strtol_l.isra.0+0x7e>
 800a8ca:	45a6      	cmp	lr, r4
 800a8cc:	db19      	blt.n	800a902 <_strtol_l.isra.0+0xb2>
 800a8ce:	fb00 4006 	mla	r0, r0, r6, r4
 800a8d2:	2701      	movs	r7, #1
 800a8d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8d8:	e7eb      	b.n	800a8b2 <_strtol_l.isra.0+0x62>
 800a8da:	462f      	mov	r7, r5
 800a8dc:	e7bf      	b.n	800a85e <_strtol_l.isra.0+0xe>
 800a8de:	2c2b      	cmp	r4, #43	; 0x2b
 800a8e0:	bf04      	itt	eq
 800a8e2:	1cbd      	addeq	r5, r7, #2
 800a8e4:	787c      	ldrbeq	r4, [r7, #1]
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	e7c9      	b.n	800a87e <_strtol_l.isra.0+0x2e>
 800a8ea:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a8ee:	2b19      	cmp	r3, #25
 800a8f0:	d801      	bhi.n	800a8f6 <_strtol_l.isra.0+0xa6>
 800a8f2:	3c37      	subs	r4, #55	; 0x37
 800a8f4:	e7e2      	b.n	800a8bc <_strtol_l.isra.0+0x6c>
 800a8f6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a8fa:	2b19      	cmp	r3, #25
 800a8fc:	d804      	bhi.n	800a908 <_strtol_l.isra.0+0xb8>
 800a8fe:	3c57      	subs	r4, #87	; 0x57
 800a900:	e7dc      	b.n	800a8bc <_strtol_l.isra.0+0x6c>
 800a902:	f04f 37ff 	mov.w	r7, #4294967295
 800a906:	e7e5      	b.n	800a8d4 <_strtol_l.isra.0+0x84>
 800a908:	1c7b      	adds	r3, r7, #1
 800a90a:	d108      	bne.n	800a91e <_strtol_l.isra.0+0xce>
 800a90c:	2322      	movs	r3, #34	; 0x22
 800a90e:	f8c8 3000 	str.w	r3, [r8]
 800a912:	4608      	mov	r0, r1
 800a914:	f1ba 0f00 	cmp.w	sl, #0
 800a918:	d107      	bne.n	800a92a <_strtol_l.isra.0+0xda>
 800a91a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a91e:	b102      	cbz	r2, 800a922 <_strtol_l.isra.0+0xd2>
 800a920:	4240      	negs	r0, r0
 800a922:	f1ba 0f00 	cmp.w	sl, #0
 800a926:	d0f8      	beq.n	800a91a <_strtol_l.isra.0+0xca>
 800a928:	b10f      	cbz	r7, 800a92e <_strtol_l.isra.0+0xde>
 800a92a:	f105 39ff 	add.w	r9, r5, #4294967295
 800a92e:	f8ca 9000 	str.w	r9, [sl]
 800a932:	e7f2      	b.n	800a91a <_strtol_l.isra.0+0xca>
 800a934:	2430      	movs	r4, #48	; 0x30
 800a936:	2e00      	cmp	r6, #0
 800a938:	d1af      	bne.n	800a89a <_strtol_l.isra.0+0x4a>
 800a93a:	2608      	movs	r6, #8
 800a93c:	e7ad      	b.n	800a89a <_strtol_l.isra.0+0x4a>
 800a93e:	2c30      	cmp	r4, #48	; 0x30
 800a940:	d0a3      	beq.n	800a88a <_strtol_l.isra.0+0x3a>
 800a942:	260a      	movs	r6, #10
 800a944:	e7a9      	b.n	800a89a <_strtol_l.isra.0+0x4a>
	...

0800a948 <_strtol_r>:
 800a948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a94a:	4c06      	ldr	r4, [pc, #24]	; (800a964 <_strtol_r+0x1c>)
 800a94c:	4d06      	ldr	r5, [pc, #24]	; (800a968 <_strtol_r+0x20>)
 800a94e:	6824      	ldr	r4, [r4, #0]
 800a950:	6a24      	ldr	r4, [r4, #32]
 800a952:	2c00      	cmp	r4, #0
 800a954:	bf08      	it	eq
 800a956:	462c      	moveq	r4, r5
 800a958:	9400      	str	r4, [sp, #0]
 800a95a:	f7ff ff79 	bl	800a850 <_strtol_l.isra.0>
 800a95e:	b003      	add	sp, #12
 800a960:	bd30      	pop	{r4, r5, pc}
 800a962:	bf00      	nop
 800a964:	20000014 	.word	0x20000014
 800a968:	20000078 	.word	0x20000078

0800a96c <quorem>:
 800a96c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a970:	6903      	ldr	r3, [r0, #16]
 800a972:	690c      	ldr	r4, [r1, #16]
 800a974:	42a3      	cmp	r3, r4
 800a976:	4680      	mov	r8, r0
 800a978:	f2c0 8082 	blt.w	800aa80 <quorem+0x114>
 800a97c:	3c01      	subs	r4, #1
 800a97e:	f101 0714 	add.w	r7, r1, #20
 800a982:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a986:	f100 0614 	add.w	r6, r0, #20
 800a98a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a98e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a992:	eb06 030c 	add.w	r3, r6, ip
 800a996:	3501      	adds	r5, #1
 800a998:	eb07 090c 	add.w	r9, r7, ip
 800a99c:	9301      	str	r3, [sp, #4]
 800a99e:	fbb0 f5f5 	udiv	r5, r0, r5
 800a9a2:	b395      	cbz	r5, 800aa0a <quorem+0x9e>
 800a9a4:	f04f 0a00 	mov.w	sl, #0
 800a9a8:	4638      	mov	r0, r7
 800a9aa:	46b6      	mov	lr, r6
 800a9ac:	46d3      	mov	fp, sl
 800a9ae:	f850 2b04 	ldr.w	r2, [r0], #4
 800a9b2:	b293      	uxth	r3, r2
 800a9b4:	fb05 a303 	mla	r3, r5, r3, sl
 800a9b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	ebab 0303 	sub.w	r3, fp, r3
 800a9c2:	0c12      	lsrs	r2, r2, #16
 800a9c4:	f8de b000 	ldr.w	fp, [lr]
 800a9c8:	fb05 a202 	mla	r2, r5, r2, sl
 800a9cc:	fa13 f38b 	uxtah	r3, r3, fp
 800a9d0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a9d4:	fa1f fb82 	uxth.w	fp, r2
 800a9d8:	f8de 2000 	ldr.w	r2, [lr]
 800a9dc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a9e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9ea:	4581      	cmp	r9, r0
 800a9ec:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a9f0:	f84e 3b04 	str.w	r3, [lr], #4
 800a9f4:	d2db      	bcs.n	800a9ae <quorem+0x42>
 800a9f6:	f856 300c 	ldr.w	r3, [r6, ip]
 800a9fa:	b933      	cbnz	r3, 800aa0a <quorem+0x9e>
 800a9fc:	9b01      	ldr	r3, [sp, #4]
 800a9fe:	3b04      	subs	r3, #4
 800aa00:	429e      	cmp	r6, r3
 800aa02:	461a      	mov	r2, r3
 800aa04:	d330      	bcc.n	800aa68 <quorem+0xfc>
 800aa06:	f8c8 4010 	str.w	r4, [r8, #16]
 800aa0a:	4640      	mov	r0, r8
 800aa0c:	f001 fba6 	bl	800c15c <__mcmp>
 800aa10:	2800      	cmp	r0, #0
 800aa12:	db25      	blt.n	800aa60 <quorem+0xf4>
 800aa14:	3501      	adds	r5, #1
 800aa16:	4630      	mov	r0, r6
 800aa18:	f04f 0c00 	mov.w	ip, #0
 800aa1c:	f857 2b04 	ldr.w	r2, [r7], #4
 800aa20:	f8d0 e000 	ldr.w	lr, [r0]
 800aa24:	b293      	uxth	r3, r2
 800aa26:	ebac 0303 	sub.w	r3, ip, r3
 800aa2a:	0c12      	lsrs	r2, r2, #16
 800aa2c:	fa13 f38e 	uxtah	r3, r3, lr
 800aa30:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aa34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa3e:	45b9      	cmp	r9, r7
 800aa40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aa44:	f840 3b04 	str.w	r3, [r0], #4
 800aa48:	d2e8      	bcs.n	800aa1c <quorem+0xb0>
 800aa4a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800aa4e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800aa52:	b92a      	cbnz	r2, 800aa60 <quorem+0xf4>
 800aa54:	3b04      	subs	r3, #4
 800aa56:	429e      	cmp	r6, r3
 800aa58:	461a      	mov	r2, r3
 800aa5a:	d30b      	bcc.n	800aa74 <quorem+0x108>
 800aa5c:	f8c8 4010 	str.w	r4, [r8, #16]
 800aa60:	4628      	mov	r0, r5
 800aa62:	b003      	add	sp, #12
 800aa64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa68:	6812      	ldr	r2, [r2, #0]
 800aa6a:	3b04      	subs	r3, #4
 800aa6c:	2a00      	cmp	r2, #0
 800aa6e:	d1ca      	bne.n	800aa06 <quorem+0x9a>
 800aa70:	3c01      	subs	r4, #1
 800aa72:	e7c5      	b.n	800aa00 <quorem+0x94>
 800aa74:	6812      	ldr	r2, [r2, #0]
 800aa76:	3b04      	subs	r3, #4
 800aa78:	2a00      	cmp	r2, #0
 800aa7a:	d1ef      	bne.n	800aa5c <quorem+0xf0>
 800aa7c:	3c01      	subs	r4, #1
 800aa7e:	e7ea      	b.n	800aa56 <quorem+0xea>
 800aa80:	2000      	movs	r0, #0
 800aa82:	e7ee      	b.n	800aa62 <quorem+0xf6>
 800aa84:	0000      	movs	r0, r0
	...

0800aa88 <_dtoa_r>:
 800aa88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa8c:	ec57 6b10 	vmov	r6, r7, d0
 800aa90:	b097      	sub	sp, #92	; 0x5c
 800aa92:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aa94:	9106      	str	r1, [sp, #24]
 800aa96:	4604      	mov	r4, r0
 800aa98:	920b      	str	r2, [sp, #44]	; 0x2c
 800aa9a:	9312      	str	r3, [sp, #72]	; 0x48
 800aa9c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aaa0:	e9cd 6700 	strd	r6, r7, [sp]
 800aaa4:	b93d      	cbnz	r5, 800aab6 <_dtoa_r+0x2e>
 800aaa6:	2010      	movs	r0, #16
 800aaa8:	f001 f8e0 	bl	800bc6c <malloc>
 800aaac:	6260      	str	r0, [r4, #36]	; 0x24
 800aaae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aab2:	6005      	str	r5, [r0, #0]
 800aab4:	60c5      	str	r5, [r0, #12]
 800aab6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aab8:	6819      	ldr	r1, [r3, #0]
 800aaba:	b151      	cbz	r1, 800aad2 <_dtoa_r+0x4a>
 800aabc:	685a      	ldr	r2, [r3, #4]
 800aabe:	604a      	str	r2, [r1, #4]
 800aac0:	2301      	movs	r3, #1
 800aac2:	4093      	lsls	r3, r2
 800aac4:	608b      	str	r3, [r1, #8]
 800aac6:	4620      	mov	r0, r4
 800aac8:	f001 f929 	bl	800bd1e <_Bfree>
 800aacc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aace:	2200      	movs	r2, #0
 800aad0:	601a      	str	r2, [r3, #0]
 800aad2:	1e3b      	subs	r3, r7, #0
 800aad4:	bfbb      	ittet	lt
 800aad6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aada:	9301      	strlt	r3, [sp, #4]
 800aadc:	2300      	movge	r3, #0
 800aade:	2201      	movlt	r2, #1
 800aae0:	bfac      	ite	ge
 800aae2:	f8c8 3000 	strge.w	r3, [r8]
 800aae6:	f8c8 2000 	strlt.w	r2, [r8]
 800aaea:	4baf      	ldr	r3, [pc, #700]	; (800ada8 <_dtoa_r+0x320>)
 800aaec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800aaf0:	ea33 0308 	bics.w	r3, r3, r8
 800aaf4:	d114      	bne.n	800ab20 <_dtoa_r+0x98>
 800aaf6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aaf8:	f242 730f 	movw	r3, #9999	; 0x270f
 800aafc:	6013      	str	r3, [r2, #0]
 800aafe:	9b00      	ldr	r3, [sp, #0]
 800ab00:	b923      	cbnz	r3, 800ab0c <_dtoa_r+0x84>
 800ab02:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800ab06:	2800      	cmp	r0, #0
 800ab08:	f000 8542 	beq.w	800b590 <_dtoa_r+0xb08>
 800ab0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab0e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800adbc <_dtoa_r+0x334>
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	f000 8544 	beq.w	800b5a0 <_dtoa_r+0xb18>
 800ab18:	f10b 0303 	add.w	r3, fp, #3
 800ab1c:	f000 bd3e 	b.w	800b59c <_dtoa_r+0xb14>
 800ab20:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ab24:	2200      	movs	r2, #0
 800ab26:	2300      	movs	r3, #0
 800ab28:	4630      	mov	r0, r6
 800ab2a:	4639      	mov	r1, r7
 800ab2c:	f7f5 ffdc 	bl	8000ae8 <__aeabi_dcmpeq>
 800ab30:	4681      	mov	r9, r0
 800ab32:	b168      	cbz	r0, 800ab50 <_dtoa_r+0xc8>
 800ab34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ab36:	2301      	movs	r3, #1
 800ab38:	6013      	str	r3, [r2, #0]
 800ab3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f000 8524 	beq.w	800b58a <_dtoa_r+0xb02>
 800ab42:	4b9a      	ldr	r3, [pc, #616]	; (800adac <_dtoa_r+0x324>)
 800ab44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ab46:	f103 3bff 	add.w	fp, r3, #4294967295
 800ab4a:	6013      	str	r3, [r2, #0]
 800ab4c:	f000 bd28 	b.w	800b5a0 <_dtoa_r+0xb18>
 800ab50:	aa14      	add	r2, sp, #80	; 0x50
 800ab52:	a915      	add	r1, sp, #84	; 0x54
 800ab54:	ec47 6b10 	vmov	d0, r6, r7
 800ab58:	4620      	mov	r0, r4
 800ab5a:	f001 fbed 	bl	800c338 <__d2b>
 800ab5e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ab62:	9004      	str	r0, [sp, #16]
 800ab64:	2d00      	cmp	r5, #0
 800ab66:	d07c      	beq.n	800ac62 <_dtoa_r+0x1da>
 800ab68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ab6c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800ab70:	46b2      	mov	sl, r6
 800ab72:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800ab76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ab7a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800ab7e:	2200      	movs	r2, #0
 800ab80:	4b8b      	ldr	r3, [pc, #556]	; (800adb0 <_dtoa_r+0x328>)
 800ab82:	4650      	mov	r0, sl
 800ab84:	4659      	mov	r1, fp
 800ab86:	f7f5 fb8f 	bl	80002a8 <__aeabi_dsub>
 800ab8a:	a381      	add	r3, pc, #516	; (adr r3, 800ad90 <_dtoa_r+0x308>)
 800ab8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab90:	f7f5 fd42 	bl	8000618 <__aeabi_dmul>
 800ab94:	a380      	add	r3, pc, #512	; (adr r3, 800ad98 <_dtoa_r+0x310>)
 800ab96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9a:	f7f5 fb87 	bl	80002ac <__adddf3>
 800ab9e:	4606      	mov	r6, r0
 800aba0:	4628      	mov	r0, r5
 800aba2:	460f      	mov	r7, r1
 800aba4:	f7f5 fcce 	bl	8000544 <__aeabi_i2d>
 800aba8:	a37d      	add	r3, pc, #500	; (adr r3, 800ada0 <_dtoa_r+0x318>)
 800abaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abae:	f7f5 fd33 	bl	8000618 <__aeabi_dmul>
 800abb2:	4602      	mov	r2, r0
 800abb4:	460b      	mov	r3, r1
 800abb6:	4630      	mov	r0, r6
 800abb8:	4639      	mov	r1, r7
 800abba:	f7f5 fb77 	bl	80002ac <__adddf3>
 800abbe:	4606      	mov	r6, r0
 800abc0:	460f      	mov	r7, r1
 800abc2:	f7f5 ffd9 	bl	8000b78 <__aeabi_d2iz>
 800abc6:	2200      	movs	r2, #0
 800abc8:	4682      	mov	sl, r0
 800abca:	2300      	movs	r3, #0
 800abcc:	4630      	mov	r0, r6
 800abce:	4639      	mov	r1, r7
 800abd0:	f7f5 ff94 	bl	8000afc <__aeabi_dcmplt>
 800abd4:	b148      	cbz	r0, 800abea <_dtoa_r+0x162>
 800abd6:	4650      	mov	r0, sl
 800abd8:	f7f5 fcb4 	bl	8000544 <__aeabi_i2d>
 800abdc:	4632      	mov	r2, r6
 800abde:	463b      	mov	r3, r7
 800abe0:	f7f5 ff82 	bl	8000ae8 <__aeabi_dcmpeq>
 800abe4:	b908      	cbnz	r0, 800abea <_dtoa_r+0x162>
 800abe6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800abea:	f1ba 0f16 	cmp.w	sl, #22
 800abee:	d859      	bhi.n	800aca4 <_dtoa_r+0x21c>
 800abf0:	4970      	ldr	r1, [pc, #448]	; (800adb4 <_dtoa_r+0x32c>)
 800abf2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800abf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abfe:	f7f5 ff9b 	bl	8000b38 <__aeabi_dcmpgt>
 800ac02:	2800      	cmp	r0, #0
 800ac04:	d050      	beq.n	800aca8 <_dtoa_r+0x220>
 800ac06:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac10:	1b5d      	subs	r5, r3, r5
 800ac12:	f1b5 0801 	subs.w	r8, r5, #1
 800ac16:	bf49      	itett	mi
 800ac18:	f1c5 0301 	rsbmi	r3, r5, #1
 800ac1c:	2300      	movpl	r3, #0
 800ac1e:	9305      	strmi	r3, [sp, #20]
 800ac20:	f04f 0800 	movmi.w	r8, #0
 800ac24:	bf58      	it	pl
 800ac26:	9305      	strpl	r3, [sp, #20]
 800ac28:	f1ba 0f00 	cmp.w	sl, #0
 800ac2c:	db3e      	blt.n	800acac <_dtoa_r+0x224>
 800ac2e:	2300      	movs	r3, #0
 800ac30:	44d0      	add	r8, sl
 800ac32:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ac36:	9307      	str	r3, [sp, #28]
 800ac38:	9b06      	ldr	r3, [sp, #24]
 800ac3a:	2b09      	cmp	r3, #9
 800ac3c:	f200 8090 	bhi.w	800ad60 <_dtoa_r+0x2d8>
 800ac40:	2b05      	cmp	r3, #5
 800ac42:	bfc4      	itt	gt
 800ac44:	3b04      	subgt	r3, #4
 800ac46:	9306      	strgt	r3, [sp, #24]
 800ac48:	9b06      	ldr	r3, [sp, #24]
 800ac4a:	f1a3 0302 	sub.w	r3, r3, #2
 800ac4e:	bfcc      	ite	gt
 800ac50:	2500      	movgt	r5, #0
 800ac52:	2501      	movle	r5, #1
 800ac54:	2b03      	cmp	r3, #3
 800ac56:	f200 808f 	bhi.w	800ad78 <_dtoa_r+0x2f0>
 800ac5a:	e8df f003 	tbb	[pc, r3]
 800ac5e:	7f7d      	.short	0x7f7d
 800ac60:	7131      	.short	0x7131
 800ac62:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800ac66:	441d      	add	r5, r3
 800ac68:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800ac6c:	2820      	cmp	r0, #32
 800ac6e:	dd13      	ble.n	800ac98 <_dtoa_r+0x210>
 800ac70:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800ac74:	9b00      	ldr	r3, [sp, #0]
 800ac76:	fa08 f800 	lsl.w	r8, r8, r0
 800ac7a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800ac7e:	fa23 f000 	lsr.w	r0, r3, r0
 800ac82:	ea48 0000 	orr.w	r0, r8, r0
 800ac86:	f7f5 fc4d 	bl	8000524 <__aeabi_ui2d>
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	4682      	mov	sl, r0
 800ac8e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800ac92:	3d01      	subs	r5, #1
 800ac94:	9313      	str	r3, [sp, #76]	; 0x4c
 800ac96:	e772      	b.n	800ab7e <_dtoa_r+0xf6>
 800ac98:	9b00      	ldr	r3, [sp, #0]
 800ac9a:	f1c0 0020 	rsb	r0, r0, #32
 800ac9e:	fa03 f000 	lsl.w	r0, r3, r0
 800aca2:	e7f0      	b.n	800ac86 <_dtoa_r+0x1fe>
 800aca4:	2301      	movs	r3, #1
 800aca6:	e7b1      	b.n	800ac0c <_dtoa_r+0x184>
 800aca8:	900f      	str	r0, [sp, #60]	; 0x3c
 800acaa:	e7b0      	b.n	800ac0e <_dtoa_r+0x186>
 800acac:	9b05      	ldr	r3, [sp, #20]
 800acae:	eba3 030a 	sub.w	r3, r3, sl
 800acb2:	9305      	str	r3, [sp, #20]
 800acb4:	f1ca 0300 	rsb	r3, sl, #0
 800acb8:	9307      	str	r3, [sp, #28]
 800acba:	2300      	movs	r3, #0
 800acbc:	930e      	str	r3, [sp, #56]	; 0x38
 800acbe:	e7bb      	b.n	800ac38 <_dtoa_r+0x1b0>
 800acc0:	2301      	movs	r3, #1
 800acc2:	930a      	str	r3, [sp, #40]	; 0x28
 800acc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	dd59      	ble.n	800ad7e <_dtoa_r+0x2f6>
 800acca:	9302      	str	r3, [sp, #8]
 800accc:	4699      	mov	r9, r3
 800acce:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800acd0:	2200      	movs	r2, #0
 800acd2:	6072      	str	r2, [r6, #4]
 800acd4:	2204      	movs	r2, #4
 800acd6:	f102 0014 	add.w	r0, r2, #20
 800acda:	4298      	cmp	r0, r3
 800acdc:	6871      	ldr	r1, [r6, #4]
 800acde:	d953      	bls.n	800ad88 <_dtoa_r+0x300>
 800ace0:	4620      	mov	r0, r4
 800ace2:	f000 ffe8 	bl	800bcb6 <_Balloc>
 800ace6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ace8:	6030      	str	r0, [r6, #0]
 800acea:	f1b9 0f0e 	cmp.w	r9, #14
 800acee:	f8d3 b000 	ldr.w	fp, [r3]
 800acf2:	f200 80e6 	bhi.w	800aec2 <_dtoa_r+0x43a>
 800acf6:	2d00      	cmp	r5, #0
 800acf8:	f000 80e3 	beq.w	800aec2 <_dtoa_r+0x43a>
 800acfc:	ed9d 7b00 	vldr	d7, [sp]
 800ad00:	f1ba 0f00 	cmp.w	sl, #0
 800ad04:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800ad08:	dd74      	ble.n	800adf4 <_dtoa_r+0x36c>
 800ad0a:	4a2a      	ldr	r2, [pc, #168]	; (800adb4 <_dtoa_r+0x32c>)
 800ad0c:	f00a 030f 	and.w	r3, sl, #15
 800ad10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ad14:	ed93 7b00 	vldr	d7, [r3]
 800ad18:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ad1c:	06f0      	lsls	r0, r6, #27
 800ad1e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ad22:	d565      	bpl.n	800adf0 <_dtoa_r+0x368>
 800ad24:	4b24      	ldr	r3, [pc, #144]	; (800adb8 <_dtoa_r+0x330>)
 800ad26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ad2a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad2e:	f7f5 fd9d 	bl	800086c <__aeabi_ddiv>
 800ad32:	e9cd 0100 	strd	r0, r1, [sp]
 800ad36:	f006 060f 	and.w	r6, r6, #15
 800ad3a:	2503      	movs	r5, #3
 800ad3c:	4f1e      	ldr	r7, [pc, #120]	; (800adb8 <_dtoa_r+0x330>)
 800ad3e:	e04c      	b.n	800adda <_dtoa_r+0x352>
 800ad40:	2301      	movs	r3, #1
 800ad42:	930a      	str	r3, [sp, #40]	; 0x28
 800ad44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad46:	4453      	add	r3, sl
 800ad48:	f103 0901 	add.w	r9, r3, #1
 800ad4c:	9302      	str	r3, [sp, #8]
 800ad4e:	464b      	mov	r3, r9
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	bfb8      	it	lt
 800ad54:	2301      	movlt	r3, #1
 800ad56:	e7ba      	b.n	800acce <_dtoa_r+0x246>
 800ad58:	2300      	movs	r3, #0
 800ad5a:	e7b2      	b.n	800acc2 <_dtoa_r+0x23a>
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	e7f0      	b.n	800ad42 <_dtoa_r+0x2ba>
 800ad60:	2501      	movs	r5, #1
 800ad62:	2300      	movs	r3, #0
 800ad64:	9306      	str	r3, [sp, #24]
 800ad66:	950a      	str	r5, [sp, #40]	; 0x28
 800ad68:	f04f 33ff 	mov.w	r3, #4294967295
 800ad6c:	9302      	str	r3, [sp, #8]
 800ad6e:	4699      	mov	r9, r3
 800ad70:	2200      	movs	r2, #0
 800ad72:	2312      	movs	r3, #18
 800ad74:	920b      	str	r2, [sp, #44]	; 0x2c
 800ad76:	e7aa      	b.n	800acce <_dtoa_r+0x246>
 800ad78:	2301      	movs	r3, #1
 800ad7a:	930a      	str	r3, [sp, #40]	; 0x28
 800ad7c:	e7f4      	b.n	800ad68 <_dtoa_r+0x2e0>
 800ad7e:	2301      	movs	r3, #1
 800ad80:	9302      	str	r3, [sp, #8]
 800ad82:	4699      	mov	r9, r3
 800ad84:	461a      	mov	r2, r3
 800ad86:	e7f5      	b.n	800ad74 <_dtoa_r+0x2ec>
 800ad88:	3101      	adds	r1, #1
 800ad8a:	6071      	str	r1, [r6, #4]
 800ad8c:	0052      	lsls	r2, r2, #1
 800ad8e:	e7a2      	b.n	800acd6 <_dtoa_r+0x24e>
 800ad90:	636f4361 	.word	0x636f4361
 800ad94:	3fd287a7 	.word	0x3fd287a7
 800ad98:	8b60c8b3 	.word	0x8b60c8b3
 800ad9c:	3fc68a28 	.word	0x3fc68a28
 800ada0:	509f79fb 	.word	0x509f79fb
 800ada4:	3fd34413 	.word	0x3fd34413
 800ada8:	7ff00000 	.word	0x7ff00000
 800adac:	0800d245 	.word	0x0800d245
 800adb0:	3ff80000 	.word	0x3ff80000
 800adb4:	0800d300 	.word	0x0800d300
 800adb8:	0800d2d8 	.word	0x0800d2d8
 800adbc:	0800d2c9 	.word	0x0800d2c9
 800adc0:	07f1      	lsls	r1, r6, #31
 800adc2:	d508      	bpl.n	800add6 <_dtoa_r+0x34e>
 800adc4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800adc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adcc:	f7f5 fc24 	bl	8000618 <__aeabi_dmul>
 800add0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800add4:	3501      	adds	r5, #1
 800add6:	1076      	asrs	r6, r6, #1
 800add8:	3708      	adds	r7, #8
 800adda:	2e00      	cmp	r6, #0
 800addc:	d1f0      	bne.n	800adc0 <_dtoa_r+0x338>
 800adde:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ade2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ade6:	f7f5 fd41 	bl	800086c <__aeabi_ddiv>
 800adea:	e9cd 0100 	strd	r0, r1, [sp]
 800adee:	e01a      	b.n	800ae26 <_dtoa_r+0x39e>
 800adf0:	2502      	movs	r5, #2
 800adf2:	e7a3      	b.n	800ad3c <_dtoa_r+0x2b4>
 800adf4:	f000 80a0 	beq.w	800af38 <_dtoa_r+0x4b0>
 800adf8:	f1ca 0600 	rsb	r6, sl, #0
 800adfc:	4b9f      	ldr	r3, [pc, #636]	; (800b07c <_dtoa_r+0x5f4>)
 800adfe:	4fa0      	ldr	r7, [pc, #640]	; (800b080 <_dtoa_r+0x5f8>)
 800ae00:	f006 020f 	and.w	r2, r6, #15
 800ae04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ae10:	f7f5 fc02 	bl	8000618 <__aeabi_dmul>
 800ae14:	e9cd 0100 	strd	r0, r1, [sp]
 800ae18:	1136      	asrs	r6, r6, #4
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	2502      	movs	r5, #2
 800ae1e:	2e00      	cmp	r6, #0
 800ae20:	d17f      	bne.n	800af22 <_dtoa_r+0x49a>
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d1e1      	bne.n	800adea <_dtoa_r+0x362>
 800ae26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	f000 8087 	beq.w	800af3c <_dtoa_r+0x4b4>
 800ae2e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ae32:	2200      	movs	r2, #0
 800ae34:	4b93      	ldr	r3, [pc, #588]	; (800b084 <_dtoa_r+0x5fc>)
 800ae36:	4630      	mov	r0, r6
 800ae38:	4639      	mov	r1, r7
 800ae3a:	f7f5 fe5f 	bl	8000afc <__aeabi_dcmplt>
 800ae3e:	2800      	cmp	r0, #0
 800ae40:	d07c      	beq.n	800af3c <_dtoa_r+0x4b4>
 800ae42:	f1b9 0f00 	cmp.w	r9, #0
 800ae46:	d079      	beq.n	800af3c <_dtoa_r+0x4b4>
 800ae48:	9b02      	ldr	r3, [sp, #8]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	dd35      	ble.n	800aeba <_dtoa_r+0x432>
 800ae4e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ae52:	9308      	str	r3, [sp, #32]
 800ae54:	4639      	mov	r1, r7
 800ae56:	2200      	movs	r2, #0
 800ae58:	4b8b      	ldr	r3, [pc, #556]	; (800b088 <_dtoa_r+0x600>)
 800ae5a:	4630      	mov	r0, r6
 800ae5c:	f7f5 fbdc 	bl	8000618 <__aeabi_dmul>
 800ae60:	e9cd 0100 	strd	r0, r1, [sp]
 800ae64:	9f02      	ldr	r7, [sp, #8]
 800ae66:	3501      	adds	r5, #1
 800ae68:	4628      	mov	r0, r5
 800ae6a:	f7f5 fb6b 	bl	8000544 <__aeabi_i2d>
 800ae6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae72:	f7f5 fbd1 	bl	8000618 <__aeabi_dmul>
 800ae76:	2200      	movs	r2, #0
 800ae78:	4b84      	ldr	r3, [pc, #528]	; (800b08c <_dtoa_r+0x604>)
 800ae7a:	f7f5 fa17 	bl	80002ac <__adddf3>
 800ae7e:	4605      	mov	r5, r0
 800ae80:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ae84:	2f00      	cmp	r7, #0
 800ae86:	d15d      	bne.n	800af44 <_dtoa_r+0x4bc>
 800ae88:	2200      	movs	r2, #0
 800ae8a:	4b81      	ldr	r3, [pc, #516]	; (800b090 <_dtoa_r+0x608>)
 800ae8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae90:	f7f5 fa0a 	bl	80002a8 <__aeabi_dsub>
 800ae94:	462a      	mov	r2, r5
 800ae96:	4633      	mov	r3, r6
 800ae98:	e9cd 0100 	strd	r0, r1, [sp]
 800ae9c:	f7f5 fe4c 	bl	8000b38 <__aeabi_dcmpgt>
 800aea0:	2800      	cmp	r0, #0
 800aea2:	f040 8288 	bne.w	800b3b6 <_dtoa_r+0x92e>
 800aea6:	462a      	mov	r2, r5
 800aea8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800aeac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aeb0:	f7f5 fe24 	bl	8000afc <__aeabi_dcmplt>
 800aeb4:	2800      	cmp	r0, #0
 800aeb6:	f040 827c 	bne.w	800b3b2 <_dtoa_r+0x92a>
 800aeba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aebe:	e9cd 2300 	strd	r2, r3, [sp]
 800aec2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	f2c0 8150 	blt.w	800b16a <_dtoa_r+0x6e2>
 800aeca:	f1ba 0f0e 	cmp.w	sl, #14
 800aece:	f300 814c 	bgt.w	800b16a <_dtoa_r+0x6e2>
 800aed2:	4b6a      	ldr	r3, [pc, #424]	; (800b07c <_dtoa_r+0x5f4>)
 800aed4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800aed8:	ed93 7b00 	vldr	d7, [r3]
 800aedc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aede:	2b00      	cmp	r3, #0
 800aee0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aee4:	f280 80d8 	bge.w	800b098 <_dtoa_r+0x610>
 800aee8:	f1b9 0f00 	cmp.w	r9, #0
 800aeec:	f300 80d4 	bgt.w	800b098 <_dtoa_r+0x610>
 800aef0:	f040 825e 	bne.w	800b3b0 <_dtoa_r+0x928>
 800aef4:	2200      	movs	r2, #0
 800aef6:	4b66      	ldr	r3, [pc, #408]	; (800b090 <_dtoa_r+0x608>)
 800aef8:	ec51 0b17 	vmov	r0, r1, d7
 800aefc:	f7f5 fb8c 	bl	8000618 <__aeabi_dmul>
 800af00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af04:	f7f5 fe0e 	bl	8000b24 <__aeabi_dcmpge>
 800af08:	464f      	mov	r7, r9
 800af0a:	464e      	mov	r6, r9
 800af0c:	2800      	cmp	r0, #0
 800af0e:	f040 8234 	bne.w	800b37a <_dtoa_r+0x8f2>
 800af12:	2331      	movs	r3, #49	; 0x31
 800af14:	f10b 0501 	add.w	r5, fp, #1
 800af18:	f88b 3000 	strb.w	r3, [fp]
 800af1c:	f10a 0a01 	add.w	sl, sl, #1
 800af20:	e22f      	b.n	800b382 <_dtoa_r+0x8fa>
 800af22:	07f2      	lsls	r2, r6, #31
 800af24:	d505      	bpl.n	800af32 <_dtoa_r+0x4aa>
 800af26:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af2a:	f7f5 fb75 	bl	8000618 <__aeabi_dmul>
 800af2e:	3501      	adds	r5, #1
 800af30:	2301      	movs	r3, #1
 800af32:	1076      	asrs	r6, r6, #1
 800af34:	3708      	adds	r7, #8
 800af36:	e772      	b.n	800ae1e <_dtoa_r+0x396>
 800af38:	2502      	movs	r5, #2
 800af3a:	e774      	b.n	800ae26 <_dtoa_r+0x39e>
 800af3c:	f8cd a020 	str.w	sl, [sp, #32]
 800af40:	464f      	mov	r7, r9
 800af42:	e791      	b.n	800ae68 <_dtoa_r+0x3e0>
 800af44:	4b4d      	ldr	r3, [pc, #308]	; (800b07c <_dtoa_r+0x5f4>)
 800af46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800af4a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800af4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af50:	2b00      	cmp	r3, #0
 800af52:	d047      	beq.n	800afe4 <_dtoa_r+0x55c>
 800af54:	4602      	mov	r2, r0
 800af56:	460b      	mov	r3, r1
 800af58:	2000      	movs	r0, #0
 800af5a:	494e      	ldr	r1, [pc, #312]	; (800b094 <_dtoa_r+0x60c>)
 800af5c:	f7f5 fc86 	bl	800086c <__aeabi_ddiv>
 800af60:	462a      	mov	r2, r5
 800af62:	4633      	mov	r3, r6
 800af64:	f7f5 f9a0 	bl	80002a8 <__aeabi_dsub>
 800af68:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800af6c:	465d      	mov	r5, fp
 800af6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af72:	f7f5 fe01 	bl	8000b78 <__aeabi_d2iz>
 800af76:	4606      	mov	r6, r0
 800af78:	f7f5 fae4 	bl	8000544 <__aeabi_i2d>
 800af7c:	4602      	mov	r2, r0
 800af7e:	460b      	mov	r3, r1
 800af80:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af84:	f7f5 f990 	bl	80002a8 <__aeabi_dsub>
 800af88:	3630      	adds	r6, #48	; 0x30
 800af8a:	f805 6b01 	strb.w	r6, [r5], #1
 800af8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800af92:	e9cd 0100 	strd	r0, r1, [sp]
 800af96:	f7f5 fdb1 	bl	8000afc <__aeabi_dcmplt>
 800af9a:	2800      	cmp	r0, #0
 800af9c:	d163      	bne.n	800b066 <_dtoa_r+0x5de>
 800af9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800afa2:	2000      	movs	r0, #0
 800afa4:	4937      	ldr	r1, [pc, #220]	; (800b084 <_dtoa_r+0x5fc>)
 800afa6:	f7f5 f97f 	bl	80002a8 <__aeabi_dsub>
 800afaa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800afae:	f7f5 fda5 	bl	8000afc <__aeabi_dcmplt>
 800afb2:	2800      	cmp	r0, #0
 800afb4:	f040 80b7 	bne.w	800b126 <_dtoa_r+0x69e>
 800afb8:	eba5 030b 	sub.w	r3, r5, fp
 800afbc:	429f      	cmp	r7, r3
 800afbe:	f77f af7c 	ble.w	800aeba <_dtoa_r+0x432>
 800afc2:	2200      	movs	r2, #0
 800afc4:	4b30      	ldr	r3, [pc, #192]	; (800b088 <_dtoa_r+0x600>)
 800afc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800afca:	f7f5 fb25 	bl	8000618 <__aeabi_dmul>
 800afce:	2200      	movs	r2, #0
 800afd0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800afd4:	4b2c      	ldr	r3, [pc, #176]	; (800b088 <_dtoa_r+0x600>)
 800afd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afda:	f7f5 fb1d 	bl	8000618 <__aeabi_dmul>
 800afde:	e9cd 0100 	strd	r0, r1, [sp]
 800afe2:	e7c4      	b.n	800af6e <_dtoa_r+0x4e6>
 800afe4:	462a      	mov	r2, r5
 800afe6:	4633      	mov	r3, r6
 800afe8:	f7f5 fb16 	bl	8000618 <__aeabi_dmul>
 800afec:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800aff0:	eb0b 0507 	add.w	r5, fp, r7
 800aff4:	465e      	mov	r6, fp
 800aff6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800affa:	f7f5 fdbd 	bl	8000b78 <__aeabi_d2iz>
 800affe:	4607      	mov	r7, r0
 800b000:	f7f5 faa0 	bl	8000544 <__aeabi_i2d>
 800b004:	3730      	adds	r7, #48	; 0x30
 800b006:	4602      	mov	r2, r0
 800b008:	460b      	mov	r3, r1
 800b00a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b00e:	f7f5 f94b 	bl	80002a8 <__aeabi_dsub>
 800b012:	f806 7b01 	strb.w	r7, [r6], #1
 800b016:	42ae      	cmp	r6, r5
 800b018:	e9cd 0100 	strd	r0, r1, [sp]
 800b01c:	f04f 0200 	mov.w	r2, #0
 800b020:	d126      	bne.n	800b070 <_dtoa_r+0x5e8>
 800b022:	4b1c      	ldr	r3, [pc, #112]	; (800b094 <_dtoa_r+0x60c>)
 800b024:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b028:	f7f5 f940 	bl	80002ac <__adddf3>
 800b02c:	4602      	mov	r2, r0
 800b02e:	460b      	mov	r3, r1
 800b030:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b034:	f7f5 fd80 	bl	8000b38 <__aeabi_dcmpgt>
 800b038:	2800      	cmp	r0, #0
 800b03a:	d174      	bne.n	800b126 <_dtoa_r+0x69e>
 800b03c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b040:	2000      	movs	r0, #0
 800b042:	4914      	ldr	r1, [pc, #80]	; (800b094 <_dtoa_r+0x60c>)
 800b044:	f7f5 f930 	bl	80002a8 <__aeabi_dsub>
 800b048:	4602      	mov	r2, r0
 800b04a:	460b      	mov	r3, r1
 800b04c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b050:	f7f5 fd54 	bl	8000afc <__aeabi_dcmplt>
 800b054:	2800      	cmp	r0, #0
 800b056:	f43f af30 	beq.w	800aeba <_dtoa_r+0x432>
 800b05a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b05e:	2b30      	cmp	r3, #48	; 0x30
 800b060:	f105 32ff 	add.w	r2, r5, #4294967295
 800b064:	d002      	beq.n	800b06c <_dtoa_r+0x5e4>
 800b066:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b06a:	e04a      	b.n	800b102 <_dtoa_r+0x67a>
 800b06c:	4615      	mov	r5, r2
 800b06e:	e7f4      	b.n	800b05a <_dtoa_r+0x5d2>
 800b070:	4b05      	ldr	r3, [pc, #20]	; (800b088 <_dtoa_r+0x600>)
 800b072:	f7f5 fad1 	bl	8000618 <__aeabi_dmul>
 800b076:	e9cd 0100 	strd	r0, r1, [sp]
 800b07a:	e7bc      	b.n	800aff6 <_dtoa_r+0x56e>
 800b07c:	0800d300 	.word	0x0800d300
 800b080:	0800d2d8 	.word	0x0800d2d8
 800b084:	3ff00000 	.word	0x3ff00000
 800b088:	40240000 	.word	0x40240000
 800b08c:	401c0000 	.word	0x401c0000
 800b090:	40140000 	.word	0x40140000
 800b094:	3fe00000 	.word	0x3fe00000
 800b098:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b09c:	465d      	mov	r5, fp
 800b09e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b0a2:	4630      	mov	r0, r6
 800b0a4:	4639      	mov	r1, r7
 800b0a6:	f7f5 fbe1 	bl	800086c <__aeabi_ddiv>
 800b0aa:	f7f5 fd65 	bl	8000b78 <__aeabi_d2iz>
 800b0ae:	4680      	mov	r8, r0
 800b0b0:	f7f5 fa48 	bl	8000544 <__aeabi_i2d>
 800b0b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b0b8:	f7f5 faae 	bl	8000618 <__aeabi_dmul>
 800b0bc:	4602      	mov	r2, r0
 800b0be:	460b      	mov	r3, r1
 800b0c0:	4630      	mov	r0, r6
 800b0c2:	4639      	mov	r1, r7
 800b0c4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800b0c8:	f7f5 f8ee 	bl	80002a8 <__aeabi_dsub>
 800b0cc:	f805 6b01 	strb.w	r6, [r5], #1
 800b0d0:	eba5 060b 	sub.w	r6, r5, fp
 800b0d4:	45b1      	cmp	r9, r6
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	460b      	mov	r3, r1
 800b0da:	d139      	bne.n	800b150 <_dtoa_r+0x6c8>
 800b0dc:	f7f5 f8e6 	bl	80002ac <__adddf3>
 800b0e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b0e4:	4606      	mov	r6, r0
 800b0e6:	460f      	mov	r7, r1
 800b0e8:	f7f5 fd26 	bl	8000b38 <__aeabi_dcmpgt>
 800b0ec:	b9c8      	cbnz	r0, 800b122 <_dtoa_r+0x69a>
 800b0ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b0f2:	4630      	mov	r0, r6
 800b0f4:	4639      	mov	r1, r7
 800b0f6:	f7f5 fcf7 	bl	8000ae8 <__aeabi_dcmpeq>
 800b0fa:	b110      	cbz	r0, 800b102 <_dtoa_r+0x67a>
 800b0fc:	f018 0f01 	tst.w	r8, #1
 800b100:	d10f      	bne.n	800b122 <_dtoa_r+0x69a>
 800b102:	9904      	ldr	r1, [sp, #16]
 800b104:	4620      	mov	r0, r4
 800b106:	f000 fe0a 	bl	800bd1e <_Bfree>
 800b10a:	2300      	movs	r3, #0
 800b10c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b10e:	702b      	strb	r3, [r5, #0]
 800b110:	f10a 0301 	add.w	r3, sl, #1
 800b114:	6013      	str	r3, [r2, #0]
 800b116:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b118:	2b00      	cmp	r3, #0
 800b11a:	f000 8241 	beq.w	800b5a0 <_dtoa_r+0xb18>
 800b11e:	601d      	str	r5, [r3, #0]
 800b120:	e23e      	b.n	800b5a0 <_dtoa_r+0xb18>
 800b122:	f8cd a020 	str.w	sl, [sp, #32]
 800b126:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b12a:	2a39      	cmp	r2, #57	; 0x39
 800b12c:	f105 33ff 	add.w	r3, r5, #4294967295
 800b130:	d108      	bne.n	800b144 <_dtoa_r+0x6bc>
 800b132:	459b      	cmp	fp, r3
 800b134:	d10a      	bne.n	800b14c <_dtoa_r+0x6c4>
 800b136:	9b08      	ldr	r3, [sp, #32]
 800b138:	3301      	adds	r3, #1
 800b13a:	9308      	str	r3, [sp, #32]
 800b13c:	2330      	movs	r3, #48	; 0x30
 800b13e:	f88b 3000 	strb.w	r3, [fp]
 800b142:	465b      	mov	r3, fp
 800b144:	781a      	ldrb	r2, [r3, #0]
 800b146:	3201      	adds	r2, #1
 800b148:	701a      	strb	r2, [r3, #0]
 800b14a:	e78c      	b.n	800b066 <_dtoa_r+0x5de>
 800b14c:	461d      	mov	r5, r3
 800b14e:	e7ea      	b.n	800b126 <_dtoa_r+0x69e>
 800b150:	2200      	movs	r2, #0
 800b152:	4b9b      	ldr	r3, [pc, #620]	; (800b3c0 <_dtoa_r+0x938>)
 800b154:	f7f5 fa60 	bl	8000618 <__aeabi_dmul>
 800b158:	2200      	movs	r2, #0
 800b15a:	2300      	movs	r3, #0
 800b15c:	4606      	mov	r6, r0
 800b15e:	460f      	mov	r7, r1
 800b160:	f7f5 fcc2 	bl	8000ae8 <__aeabi_dcmpeq>
 800b164:	2800      	cmp	r0, #0
 800b166:	d09a      	beq.n	800b09e <_dtoa_r+0x616>
 800b168:	e7cb      	b.n	800b102 <_dtoa_r+0x67a>
 800b16a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b16c:	2a00      	cmp	r2, #0
 800b16e:	f000 808b 	beq.w	800b288 <_dtoa_r+0x800>
 800b172:	9a06      	ldr	r2, [sp, #24]
 800b174:	2a01      	cmp	r2, #1
 800b176:	dc6e      	bgt.n	800b256 <_dtoa_r+0x7ce>
 800b178:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b17a:	2a00      	cmp	r2, #0
 800b17c:	d067      	beq.n	800b24e <_dtoa_r+0x7c6>
 800b17e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b182:	9f07      	ldr	r7, [sp, #28]
 800b184:	9d05      	ldr	r5, [sp, #20]
 800b186:	9a05      	ldr	r2, [sp, #20]
 800b188:	2101      	movs	r1, #1
 800b18a:	441a      	add	r2, r3
 800b18c:	4620      	mov	r0, r4
 800b18e:	9205      	str	r2, [sp, #20]
 800b190:	4498      	add	r8, r3
 800b192:	f000 fea2 	bl	800beda <__i2b>
 800b196:	4606      	mov	r6, r0
 800b198:	2d00      	cmp	r5, #0
 800b19a:	dd0c      	ble.n	800b1b6 <_dtoa_r+0x72e>
 800b19c:	f1b8 0f00 	cmp.w	r8, #0
 800b1a0:	dd09      	ble.n	800b1b6 <_dtoa_r+0x72e>
 800b1a2:	4545      	cmp	r5, r8
 800b1a4:	9a05      	ldr	r2, [sp, #20]
 800b1a6:	462b      	mov	r3, r5
 800b1a8:	bfa8      	it	ge
 800b1aa:	4643      	movge	r3, r8
 800b1ac:	1ad2      	subs	r2, r2, r3
 800b1ae:	9205      	str	r2, [sp, #20]
 800b1b0:	1aed      	subs	r5, r5, r3
 800b1b2:	eba8 0803 	sub.w	r8, r8, r3
 800b1b6:	9b07      	ldr	r3, [sp, #28]
 800b1b8:	b1eb      	cbz	r3, 800b1f6 <_dtoa_r+0x76e>
 800b1ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d067      	beq.n	800b290 <_dtoa_r+0x808>
 800b1c0:	b18f      	cbz	r7, 800b1e6 <_dtoa_r+0x75e>
 800b1c2:	4631      	mov	r1, r6
 800b1c4:	463a      	mov	r2, r7
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	f000 ff26 	bl	800c018 <__pow5mult>
 800b1cc:	9a04      	ldr	r2, [sp, #16]
 800b1ce:	4601      	mov	r1, r0
 800b1d0:	4606      	mov	r6, r0
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	f000 fe8a 	bl	800beec <__multiply>
 800b1d8:	9904      	ldr	r1, [sp, #16]
 800b1da:	9008      	str	r0, [sp, #32]
 800b1dc:	4620      	mov	r0, r4
 800b1de:	f000 fd9e 	bl	800bd1e <_Bfree>
 800b1e2:	9b08      	ldr	r3, [sp, #32]
 800b1e4:	9304      	str	r3, [sp, #16]
 800b1e6:	9b07      	ldr	r3, [sp, #28]
 800b1e8:	1bda      	subs	r2, r3, r7
 800b1ea:	d004      	beq.n	800b1f6 <_dtoa_r+0x76e>
 800b1ec:	9904      	ldr	r1, [sp, #16]
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	f000 ff12 	bl	800c018 <__pow5mult>
 800b1f4:	9004      	str	r0, [sp, #16]
 800b1f6:	2101      	movs	r1, #1
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	f000 fe6e 	bl	800beda <__i2b>
 800b1fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b200:	4607      	mov	r7, r0
 800b202:	2b00      	cmp	r3, #0
 800b204:	f000 81d0 	beq.w	800b5a8 <_dtoa_r+0xb20>
 800b208:	461a      	mov	r2, r3
 800b20a:	4601      	mov	r1, r0
 800b20c:	4620      	mov	r0, r4
 800b20e:	f000 ff03 	bl	800c018 <__pow5mult>
 800b212:	9b06      	ldr	r3, [sp, #24]
 800b214:	2b01      	cmp	r3, #1
 800b216:	4607      	mov	r7, r0
 800b218:	dc40      	bgt.n	800b29c <_dtoa_r+0x814>
 800b21a:	9b00      	ldr	r3, [sp, #0]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d139      	bne.n	800b294 <_dtoa_r+0x80c>
 800b220:	9b01      	ldr	r3, [sp, #4]
 800b222:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b226:	2b00      	cmp	r3, #0
 800b228:	d136      	bne.n	800b298 <_dtoa_r+0x810>
 800b22a:	9b01      	ldr	r3, [sp, #4]
 800b22c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b230:	0d1b      	lsrs	r3, r3, #20
 800b232:	051b      	lsls	r3, r3, #20
 800b234:	b12b      	cbz	r3, 800b242 <_dtoa_r+0x7ba>
 800b236:	9b05      	ldr	r3, [sp, #20]
 800b238:	3301      	adds	r3, #1
 800b23a:	9305      	str	r3, [sp, #20]
 800b23c:	f108 0801 	add.w	r8, r8, #1
 800b240:	2301      	movs	r3, #1
 800b242:	9307      	str	r3, [sp, #28]
 800b244:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b246:	2b00      	cmp	r3, #0
 800b248:	d12a      	bne.n	800b2a0 <_dtoa_r+0x818>
 800b24a:	2001      	movs	r0, #1
 800b24c:	e030      	b.n	800b2b0 <_dtoa_r+0x828>
 800b24e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b250:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b254:	e795      	b.n	800b182 <_dtoa_r+0x6fa>
 800b256:	9b07      	ldr	r3, [sp, #28]
 800b258:	f109 37ff 	add.w	r7, r9, #4294967295
 800b25c:	42bb      	cmp	r3, r7
 800b25e:	bfbf      	itttt	lt
 800b260:	9b07      	ldrlt	r3, [sp, #28]
 800b262:	9707      	strlt	r7, [sp, #28]
 800b264:	1afa      	sublt	r2, r7, r3
 800b266:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b268:	bfbb      	ittet	lt
 800b26a:	189b      	addlt	r3, r3, r2
 800b26c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b26e:	1bdf      	subge	r7, r3, r7
 800b270:	2700      	movlt	r7, #0
 800b272:	f1b9 0f00 	cmp.w	r9, #0
 800b276:	bfb5      	itete	lt
 800b278:	9b05      	ldrlt	r3, [sp, #20]
 800b27a:	9d05      	ldrge	r5, [sp, #20]
 800b27c:	eba3 0509 	sublt.w	r5, r3, r9
 800b280:	464b      	movge	r3, r9
 800b282:	bfb8      	it	lt
 800b284:	2300      	movlt	r3, #0
 800b286:	e77e      	b.n	800b186 <_dtoa_r+0x6fe>
 800b288:	9f07      	ldr	r7, [sp, #28]
 800b28a:	9d05      	ldr	r5, [sp, #20]
 800b28c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b28e:	e783      	b.n	800b198 <_dtoa_r+0x710>
 800b290:	9a07      	ldr	r2, [sp, #28]
 800b292:	e7ab      	b.n	800b1ec <_dtoa_r+0x764>
 800b294:	2300      	movs	r3, #0
 800b296:	e7d4      	b.n	800b242 <_dtoa_r+0x7ba>
 800b298:	9b00      	ldr	r3, [sp, #0]
 800b29a:	e7d2      	b.n	800b242 <_dtoa_r+0x7ba>
 800b29c:	2300      	movs	r3, #0
 800b29e:	9307      	str	r3, [sp, #28]
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800b2a6:	6918      	ldr	r0, [r3, #16]
 800b2a8:	f000 fdc9 	bl	800be3e <__hi0bits>
 800b2ac:	f1c0 0020 	rsb	r0, r0, #32
 800b2b0:	4440      	add	r0, r8
 800b2b2:	f010 001f 	ands.w	r0, r0, #31
 800b2b6:	d047      	beq.n	800b348 <_dtoa_r+0x8c0>
 800b2b8:	f1c0 0320 	rsb	r3, r0, #32
 800b2bc:	2b04      	cmp	r3, #4
 800b2be:	dd3b      	ble.n	800b338 <_dtoa_r+0x8b0>
 800b2c0:	9b05      	ldr	r3, [sp, #20]
 800b2c2:	f1c0 001c 	rsb	r0, r0, #28
 800b2c6:	4403      	add	r3, r0
 800b2c8:	9305      	str	r3, [sp, #20]
 800b2ca:	4405      	add	r5, r0
 800b2cc:	4480      	add	r8, r0
 800b2ce:	9b05      	ldr	r3, [sp, #20]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	dd05      	ble.n	800b2e0 <_dtoa_r+0x858>
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	9904      	ldr	r1, [sp, #16]
 800b2d8:	4620      	mov	r0, r4
 800b2da:	f000 feeb 	bl	800c0b4 <__lshift>
 800b2de:	9004      	str	r0, [sp, #16]
 800b2e0:	f1b8 0f00 	cmp.w	r8, #0
 800b2e4:	dd05      	ble.n	800b2f2 <_dtoa_r+0x86a>
 800b2e6:	4639      	mov	r1, r7
 800b2e8:	4642      	mov	r2, r8
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	f000 fee2 	bl	800c0b4 <__lshift>
 800b2f0:	4607      	mov	r7, r0
 800b2f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2f4:	b353      	cbz	r3, 800b34c <_dtoa_r+0x8c4>
 800b2f6:	4639      	mov	r1, r7
 800b2f8:	9804      	ldr	r0, [sp, #16]
 800b2fa:	f000 ff2f 	bl	800c15c <__mcmp>
 800b2fe:	2800      	cmp	r0, #0
 800b300:	da24      	bge.n	800b34c <_dtoa_r+0x8c4>
 800b302:	2300      	movs	r3, #0
 800b304:	220a      	movs	r2, #10
 800b306:	9904      	ldr	r1, [sp, #16]
 800b308:	4620      	mov	r0, r4
 800b30a:	f000 fd1f 	bl	800bd4c <__multadd>
 800b30e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b310:	9004      	str	r0, [sp, #16]
 800b312:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b316:	2b00      	cmp	r3, #0
 800b318:	f000 814d 	beq.w	800b5b6 <_dtoa_r+0xb2e>
 800b31c:	2300      	movs	r3, #0
 800b31e:	4631      	mov	r1, r6
 800b320:	220a      	movs	r2, #10
 800b322:	4620      	mov	r0, r4
 800b324:	f000 fd12 	bl	800bd4c <__multadd>
 800b328:	9b02      	ldr	r3, [sp, #8]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	4606      	mov	r6, r0
 800b32e:	dc4f      	bgt.n	800b3d0 <_dtoa_r+0x948>
 800b330:	9b06      	ldr	r3, [sp, #24]
 800b332:	2b02      	cmp	r3, #2
 800b334:	dd4c      	ble.n	800b3d0 <_dtoa_r+0x948>
 800b336:	e011      	b.n	800b35c <_dtoa_r+0x8d4>
 800b338:	d0c9      	beq.n	800b2ce <_dtoa_r+0x846>
 800b33a:	9a05      	ldr	r2, [sp, #20]
 800b33c:	331c      	adds	r3, #28
 800b33e:	441a      	add	r2, r3
 800b340:	9205      	str	r2, [sp, #20]
 800b342:	441d      	add	r5, r3
 800b344:	4498      	add	r8, r3
 800b346:	e7c2      	b.n	800b2ce <_dtoa_r+0x846>
 800b348:	4603      	mov	r3, r0
 800b34a:	e7f6      	b.n	800b33a <_dtoa_r+0x8b2>
 800b34c:	f1b9 0f00 	cmp.w	r9, #0
 800b350:	dc38      	bgt.n	800b3c4 <_dtoa_r+0x93c>
 800b352:	9b06      	ldr	r3, [sp, #24]
 800b354:	2b02      	cmp	r3, #2
 800b356:	dd35      	ble.n	800b3c4 <_dtoa_r+0x93c>
 800b358:	f8cd 9008 	str.w	r9, [sp, #8]
 800b35c:	9b02      	ldr	r3, [sp, #8]
 800b35e:	b963      	cbnz	r3, 800b37a <_dtoa_r+0x8f2>
 800b360:	4639      	mov	r1, r7
 800b362:	2205      	movs	r2, #5
 800b364:	4620      	mov	r0, r4
 800b366:	f000 fcf1 	bl	800bd4c <__multadd>
 800b36a:	4601      	mov	r1, r0
 800b36c:	4607      	mov	r7, r0
 800b36e:	9804      	ldr	r0, [sp, #16]
 800b370:	f000 fef4 	bl	800c15c <__mcmp>
 800b374:	2800      	cmp	r0, #0
 800b376:	f73f adcc 	bgt.w	800af12 <_dtoa_r+0x48a>
 800b37a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b37c:	465d      	mov	r5, fp
 800b37e:	ea6f 0a03 	mvn.w	sl, r3
 800b382:	f04f 0900 	mov.w	r9, #0
 800b386:	4639      	mov	r1, r7
 800b388:	4620      	mov	r0, r4
 800b38a:	f000 fcc8 	bl	800bd1e <_Bfree>
 800b38e:	2e00      	cmp	r6, #0
 800b390:	f43f aeb7 	beq.w	800b102 <_dtoa_r+0x67a>
 800b394:	f1b9 0f00 	cmp.w	r9, #0
 800b398:	d005      	beq.n	800b3a6 <_dtoa_r+0x91e>
 800b39a:	45b1      	cmp	r9, r6
 800b39c:	d003      	beq.n	800b3a6 <_dtoa_r+0x91e>
 800b39e:	4649      	mov	r1, r9
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	f000 fcbc 	bl	800bd1e <_Bfree>
 800b3a6:	4631      	mov	r1, r6
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	f000 fcb8 	bl	800bd1e <_Bfree>
 800b3ae:	e6a8      	b.n	800b102 <_dtoa_r+0x67a>
 800b3b0:	2700      	movs	r7, #0
 800b3b2:	463e      	mov	r6, r7
 800b3b4:	e7e1      	b.n	800b37a <_dtoa_r+0x8f2>
 800b3b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b3ba:	463e      	mov	r6, r7
 800b3bc:	e5a9      	b.n	800af12 <_dtoa_r+0x48a>
 800b3be:	bf00      	nop
 800b3c0:	40240000 	.word	0x40240000
 800b3c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3c6:	f8cd 9008 	str.w	r9, [sp, #8]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	f000 80fa 	beq.w	800b5c4 <_dtoa_r+0xb3c>
 800b3d0:	2d00      	cmp	r5, #0
 800b3d2:	dd05      	ble.n	800b3e0 <_dtoa_r+0x958>
 800b3d4:	4631      	mov	r1, r6
 800b3d6:	462a      	mov	r2, r5
 800b3d8:	4620      	mov	r0, r4
 800b3da:	f000 fe6b 	bl	800c0b4 <__lshift>
 800b3de:	4606      	mov	r6, r0
 800b3e0:	9b07      	ldr	r3, [sp, #28]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d04c      	beq.n	800b480 <_dtoa_r+0x9f8>
 800b3e6:	6871      	ldr	r1, [r6, #4]
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	f000 fc64 	bl	800bcb6 <_Balloc>
 800b3ee:	6932      	ldr	r2, [r6, #16]
 800b3f0:	3202      	adds	r2, #2
 800b3f2:	4605      	mov	r5, r0
 800b3f4:	0092      	lsls	r2, r2, #2
 800b3f6:	f106 010c 	add.w	r1, r6, #12
 800b3fa:	300c      	adds	r0, #12
 800b3fc:	f000 fc50 	bl	800bca0 <memcpy>
 800b400:	2201      	movs	r2, #1
 800b402:	4629      	mov	r1, r5
 800b404:	4620      	mov	r0, r4
 800b406:	f000 fe55 	bl	800c0b4 <__lshift>
 800b40a:	9b00      	ldr	r3, [sp, #0]
 800b40c:	f8cd b014 	str.w	fp, [sp, #20]
 800b410:	f003 0301 	and.w	r3, r3, #1
 800b414:	46b1      	mov	r9, r6
 800b416:	9307      	str	r3, [sp, #28]
 800b418:	4606      	mov	r6, r0
 800b41a:	4639      	mov	r1, r7
 800b41c:	9804      	ldr	r0, [sp, #16]
 800b41e:	f7ff faa5 	bl	800a96c <quorem>
 800b422:	4649      	mov	r1, r9
 800b424:	4605      	mov	r5, r0
 800b426:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b42a:	9804      	ldr	r0, [sp, #16]
 800b42c:	f000 fe96 	bl	800c15c <__mcmp>
 800b430:	4632      	mov	r2, r6
 800b432:	9000      	str	r0, [sp, #0]
 800b434:	4639      	mov	r1, r7
 800b436:	4620      	mov	r0, r4
 800b438:	f000 feaa 	bl	800c190 <__mdiff>
 800b43c:	68c3      	ldr	r3, [r0, #12]
 800b43e:	4602      	mov	r2, r0
 800b440:	bb03      	cbnz	r3, 800b484 <_dtoa_r+0x9fc>
 800b442:	4601      	mov	r1, r0
 800b444:	9008      	str	r0, [sp, #32]
 800b446:	9804      	ldr	r0, [sp, #16]
 800b448:	f000 fe88 	bl	800c15c <__mcmp>
 800b44c:	9a08      	ldr	r2, [sp, #32]
 800b44e:	4603      	mov	r3, r0
 800b450:	4611      	mov	r1, r2
 800b452:	4620      	mov	r0, r4
 800b454:	9308      	str	r3, [sp, #32]
 800b456:	f000 fc62 	bl	800bd1e <_Bfree>
 800b45a:	9b08      	ldr	r3, [sp, #32]
 800b45c:	b9a3      	cbnz	r3, 800b488 <_dtoa_r+0xa00>
 800b45e:	9a06      	ldr	r2, [sp, #24]
 800b460:	b992      	cbnz	r2, 800b488 <_dtoa_r+0xa00>
 800b462:	9a07      	ldr	r2, [sp, #28]
 800b464:	b982      	cbnz	r2, 800b488 <_dtoa_r+0xa00>
 800b466:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b46a:	d029      	beq.n	800b4c0 <_dtoa_r+0xa38>
 800b46c:	9b00      	ldr	r3, [sp, #0]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	dd01      	ble.n	800b476 <_dtoa_r+0x9ee>
 800b472:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b476:	9b05      	ldr	r3, [sp, #20]
 800b478:	1c5d      	adds	r5, r3, #1
 800b47a:	f883 8000 	strb.w	r8, [r3]
 800b47e:	e782      	b.n	800b386 <_dtoa_r+0x8fe>
 800b480:	4630      	mov	r0, r6
 800b482:	e7c2      	b.n	800b40a <_dtoa_r+0x982>
 800b484:	2301      	movs	r3, #1
 800b486:	e7e3      	b.n	800b450 <_dtoa_r+0x9c8>
 800b488:	9a00      	ldr	r2, [sp, #0]
 800b48a:	2a00      	cmp	r2, #0
 800b48c:	db04      	blt.n	800b498 <_dtoa_r+0xa10>
 800b48e:	d125      	bne.n	800b4dc <_dtoa_r+0xa54>
 800b490:	9a06      	ldr	r2, [sp, #24]
 800b492:	bb1a      	cbnz	r2, 800b4dc <_dtoa_r+0xa54>
 800b494:	9a07      	ldr	r2, [sp, #28]
 800b496:	bb0a      	cbnz	r2, 800b4dc <_dtoa_r+0xa54>
 800b498:	2b00      	cmp	r3, #0
 800b49a:	ddec      	ble.n	800b476 <_dtoa_r+0x9ee>
 800b49c:	2201      	movs	r2, #1
 800b49e:	9904      	ldr	r1, [sp, #16]
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	f000 fe07 	bl	800c0b4 <__lshift>
 800b4a6:	4639      	mov	r1, r7
 800b4a8:	9004      	str	r0, [sp, #16]
 800b4aa:	f000 fe57 	bl	800c15c <__mcmp>
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	dc03      	bgt.n	800b4ba <_dtoa_r+0xa32>
 800b4b2:	d1e0      	bne.n	800b476 <_dtoa_r+0x9ee>
 800b4b4:	f018 0f01 	tst.w	r8, #1
 800b4b8:	d0dd      	beq.n	800b476 <_dtoa_r+0x9ee>
 800b4ba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b4be:	d1d8      	bne.n	800b472 <_dtoa_r+0x9ea>
 800b4c0:	9b05      	ldr	r3, [sp, #20]
 800b4c2:	9a05      	ldr	r2, [sp, #20]
 800b4c4:	1c5d      	adds	r5, r3, #1
 800b4c6:	2339      	movs	r3, #57	; 0x39
 800b4c8:	7013      	strb	r3, [r2, #0]
 800b4ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b4ce:	2b39      	cmp	r3, #57	; 0x39
 800b4d0:	f105 32ff 	add.w	r2, r5, #4294967295
 800b4d4:	d04f      	beq.n	800b576 <_dtoa_r+0xaee>
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	7013      	strb	r3, [r2, #0]
 800b4da:	e754      	b.n	800b386 <_dtoa_r+0x8fe>
 800b4dc:	9a05      	ldr	r2, [sp, #20]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	f102 0501 	add.w	r5, r2, #1
 800b4e4:	dd06      	ble.n	800b4f4 <_dtoa_r+0xa6c>
 800b4e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b4ea:	d0e9      	beq.n	800b4c0 <_dtoa_r+0xa38>
 800b4ec:	f108 0801 	add.w	r8, r8, #1
 800b4f0:	9b05      	ldr	r3, [sp, #20]
 800b4f2:	e7c2      	b.n	800b47a <_dtoa_r+0x9f2>
 800b4f4:	9a02      	ldr	r2, [sp, #8]
 800b4f6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b4fa:	eba5 030b 	sub.w	r3, r5, fp
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d021      	beq.n	800b546 <_dtoa_r+0xabe>
 800b502:	2300      	movs	r3, #0
 800b504:	220a      	movs	r2, #10
 800b506:	9904      	ldr	r1, [sp, #16]
 800b508:	4620      	mov	r0, r4
 800b50a:	f000 fc1f 	bl	800bd4c <__multadd>
 800b50e:	45b1      	cmp	r9, r6
 800b510:	9004      	str	r0, [sp, #16]
 800b512:	f04f 0300 	mov.w	r3, #0
 800b516:	f04f 020a 	mov.w	r2, #10
 800b51a:	4649      	mov	r1, r9
 800b51c:	4620      	mov	r0, r4
 800b51e:	d105      	bne.n	800b52c <_dtoa_r+0xaa4>
 800b520:	f000 fc14 	bl	800bd4c <__multadd>
 800b524:	4681      	mov	r9, r0
 800b526:	4606      	mov	r6, r0
 800b528:	9505      	str	r5, [sp, #20]
 800b52a:	e776      	b.n	800b41a <_dtoa_r+0x992>
 800b52c:	f000 fc0e 	bl	800bd4c <__multadd>
 800b530:	4631      	mov	r1, r6
 800b532:	4681      	mov	r9, r0
 800b534:	2300      	movs	r3, #0
 800b536:	220a      	movs	r2, #10
 800b538:	4620      	mov	r0, r4
 800b53a:	f000 fc07 	bl	800bd4c <__multadd>
 800b53e:	4606      	mov	r6, r0
 800b540:	e7f2      	b.n	800b528 <_dtoa_r+0xaa0>
 800b542:	f04f 0900 	mov.w	r9, #0
 800b546:	2201      	movs	r2, #1
 800b548:	9904      	ldr	r1, [sp, #16]
 800b54a:	4620      	mov	r0, r4
 800b54c:	f000 fdb2 	bl	800c0b4 <__lshift>
 800b550:	4639      	mov	r1, r7
 800b552:	9004      	str	r0, [sp, #16]
 800b554:	f000 fe02 	bl	800c15c <__mcmp>
 800b558:	2800      	cmp	r0, #0
 800b55a:	dcb6      	bgt.n	800b4ca <_dtoa_r+0xa42>
 800b55c:	d102      	bne.n	800b564 <_dtoa_r+0xadc>
 800b55e:	f018 0f01 	tst.w	r8, #1
 800b562:	d1b2      	bne.n	800b4ca <_dtoa_r+0xa42>
 800b564:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b568:	2b30      	cmp	r3, #48	; 0x30
 800b56a:	f105 32ff 	add.w	r2, r5, #4294967295
 800b56e:	f47f af0a 	bne.w	800b386 <_dtoa_r+0x8fe>
 800b572:	4615      	mov	r5, r2
 800b574:	e7f6      	b.n	800b564 <_dtoa_r+0xadc>
 800b576:	4593      	cmp	fp, r2
 800b578:	d105      	bne.n	800b586 <_dtoa_r+0xafe>
 800b57a:	2331      	movs	r3, #49	; 0x31
 800b57c:	f10a 0a01 	add.w	sl, sl, #1
 800b580:	f88b 3000 	strb.w	r3, [fp]
 800b584:	e6ff      	b.n	800b386 <_dtoa_r+0x8fe>
 800b586:	4615      	mov	r5, r2
 800b588:	e79f      	b.n	800b4ca <_dtoa_r+0xa42>
 800b58a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800b5f0 <_dtoa_r+0xb68>
 800b58e:	e007      	b.n	800b5a0 <_dtoa_r+0xb18>
 800b590:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b592:	f8df b060 	ldr.w	fp, [pc, #96]	; 800b5f4 <_dtoa_r+0xb6c>
 800b596:	b11b      	cbz	r3, 800b5a0 <_dtoa_r+0xb18>
 800b598:	f10b 0308 	add.w	r3, fp, #8
 800b59c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b59e:	6013      	str	r3, [r2, #0]
 800b5a0:	4658      	mov	r0, fp
 800b5a2:	b017      	add	sp, #92	; 0x5c
 800b5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5a8:	9b06      	ldr	r3, [sp, #24]
 800b5aa:	2b01      	cmp	r3, #1
 800b5ac:	f77f ae35 	ble.w	800b21a <_dtoa_r+0x792>
 800b5b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5b2:	9307      	str	r3, [sp, #28]
 800b5b4:	e649      	b.n	800b24a <_dtoa_r+0x7c2>
 800b5b6:	9b02      	ldr	r3, [sp, #8]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	dc03      	bgt.n	800b5c4 <_dtoa_r+0xb3c>
 800b5bc:	9b06      	ldr	r3, [sp, #24]
 800b5be:	2b02      	cmp	r3, #2
 800b5c0:	f73f aecc 	bgt.w	800b35c <_dtoa_r+0x8d4>
 800b5c4:	465d      	mov	r5, fp
 800b5c6:	4639      	mov	r1, r7
 800b5c8:	9804      	ldr	r0, [sp, #16]
 800b5ca:	f7ff f9cf 	bl	800a96c <quorem>
 800b5ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b5d2:	f805 8b01 	strb.w	r8, [r5], #1
 800b5d6:	9a02      	ldr	r2, [sp, #8]
 800b5d8:	eba5 030b 	sub.w	r3, r5, fp
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	ddb0      	ble.n	800b542 <_dtoa_r+0xaba>
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	220a      	movs	r2, #10
 800b5e4:	9904      	ldr	r1, [sp, #16]
 800b5e6:	4620      	mov	r0, r4
 800b5e8:	f000 fbb0 	bl	800bd4c <__multadd>
 800b5ec:	9004      	str	r0, [sp, #16]
 800b5ee:	e7ea      	b.n	800b5c6 <_dtoa_r+0xb3e>
 800b5f0:	0800d244 	.word	0x0800d244
 800b5f4:	0800d2c0 	.word	0x0800d2c0

0800b5f8 <rshift>:
 800b5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5fa:	6906      	ldr	r6, [r0, #16]
 800b5fc:	114b      	asrs	r3, r1, #5
 800b5fe:	429e      	cmp	r6, r3
 800b600:	f100 0414 	add.w	r4, r0, #20
 800b604:	dd30      	ble.n	800b668 <rshift+0x70>
 800b606:	f011 011f 	ands.w	r1, r1, #31
 800b60a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800b60e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800b612:	d108      	bne.n	800b626 <rshift+0x2e>
 800b614:	4621      	mov	r1, r4
 800b616:	42b2      	cmp	r2, r6
 800b618:	460b      	mov	r3, r1
 800b61a:	d211      	bcs.n	800b640 <rshift+0x48>
 800b61c:	f852 3b04 	ldr.w	r3, [r2], #4
 800b620:	f841 3b04 	str.w	r3, [r1], #4
 800b624:	e7f7      	b.n	800b616 <rshift+0x1e>
 800b626:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800b62a:	f1c1 0c20 	rsb	ip, r1, #32
 800b62e:	40cd      	lsrs	r5, r1
 800b630:	3204      	adds	r2, #4
 800b632:	4623      	mov	r3, r4
 800b634:	42b2      	cmp	r2, r6
 800b636:	4617      	mov	r7, r2
 800b638:	d30c      	bcc.n	800b654 <rshift+0x5c>
 800b63a:	601d      	str	r5, [r3, #0]
 800b63c:	b105      	cbz	r5, 800b640 <rshift+0x48>
 800b63e:	3304      	adds	r3, #4
 800b640:	1b1a      	subs	r2, r3, r4
 800b642:	42a3      	cmp	r3, r4
 800b644:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b648:	bf08      	it	eq
 800b64a:	2300      	moveq	r3, #0
 800b64c:	6102      	str	r2, [r0, #16]
 800b64e:	bf08      	it	eq
 800b650:	6143      	streq	r3, [r0, #20]
 800b652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b654:	683f      	ldr	r7, [r7, #0]
 800b656:	fa07 f70c 	lsl.w	r7, r7, ip
 800b65a:	433d      	orrs	r5, r7
 800b65c:	f843 5b04 	str.w	r5, [r3], #4
 800b660:	f852 5b04 	ldr.w	r5, [r2], #4
 800b664:	40cd      	lsrs	r5, r1
 800b666:	e7e5      	b.n	800b634 <rshift+0x3c>
 800b668:	4623      	mov	r3, r4
 800b66a:	e7e9      	b.n	800b640 <rshift+0x48>

0800b66c <__hexdig_fun>:
 800b66c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b670:	2b09      	cmp	r3, #9
 800b672:	d802      	bhi.n	800b67a <__hexdig_fun+0xe>
 800b674:	3820      	subs	r0, #32
 800b676:	b2c0      	uxtb	r0, r0
 800b678:	4770      	bx	lr
 800b67a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b67e:	2b05      	cmp	r3, #5
 800b680:	d801      	bhi.n	800b686 <__hexdig_fun+0x1a>
 800b682:	3847      	subs	r0, #71	; 0x47
 800b684:	e7f7      	b.n	800b676 <__hexdig_fun+0xa>
 800b686:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b68a:	2b05      	cmp	r3, #5
 800b68c:	d801      	bhi.n	800b692 <__hexdig_fun+0x26>
 800b68e:	3827      	subs	r0, #39	; 0x27
 800b690:	e7f1      	b.n	800b676 <__hexdig_fun+0xa>
 800b692:	2000      	movs	r0, #0
 800b694:	4770      	bx	lr

0800b696 <__gethex>:
 800b696:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b69a:	b08b      	sub	sp, #44	; 0x2c
 800b69c:	468a      	mov	sl, r1
 800b69e:	9002      	str	r0, [sp, #8]
 800b6a0:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b6a2:	9306      	str	r3, [sp, #24]
 800b6a4:	4690      	mov	r8, r2
 800b6a6:	f000 fad0 	bl	800bc4a <__localeconv_l>
 800b6aa:	6803      	ldr	r3, [r0, #0]
 800b6ac:	9303      	str	r3, [sp, #12]
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7f4 fd9e 	bl	80001f0 <strlen>
 800b6b4:	9b03      	ldr	r3, [sp, #12]
 800b6b6:	9001      	str	r0, [sp, #4]
 800b6b8:	4403      	add	r3, r0
 800b6ba:	f04f 0b00 	mov.w	fp, #0
 800b6be:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b6c2:	9307      	str	r3, [sp, #28]
 800b6c4:	f8da 3000 	ldr.w	r3, [sl]
 800b6c8:	3302      	adds	r3, #2
 800b6ca:	461f      	mov	r7, r3
 800b6cc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b6d0:	2830      	cmp	r0, #48	; 0x30
 800b6d2:	d06c      	beq.n	800b7ae <__gethex+0x118>
 800b6d4:	f7ff ffca 	bl	800b66c <__hexdig_fun>
 800b6d8:	4604      	mov	r4, r0
 800b6da:	2800      	cmp	r0, #0
 800b6dc:	d16a      	bne.n	800b7b4 <__gethex+0x11e>
 800b6de:	9a01      	ldr	r2, [sp, #4]
 800b6e0:	9903      	ldr	r1, [sp, #12]
 800b6e2:	4638      	mov	r0, r7
 800b6e4:	f001 f8fe 	bl	800c8e4 <strncmp>
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	d166      	bne.n	800b7ba <__gethex+0x124>
 800b6ec:	9b01      	ldr	r3, [sp, #4]
 800b6ee:	5cf8      	ldrb	r0, [r7, r3]
 800b6f0:	18fe      	adds	r6, r7, r3
 800b6f2:	f7ff ffbb 	bl	800b66c <__hexdig_fun>
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	d062      	beq.n	800b7c0 <__gethex+0x12a>
 800b6fa:	4633      	mov	r3, r6
 800b6fc:	7818      	ldrb	r0, [r3, #0]
 800b6fe:	2830      	cmp	r0, #48	; 0x30
 800b700:	461f      	mov	r7, r3
 800b702:	f103 0301 	add.w	r3, r3, #1
 800b706:	d0f9      	beq.n	800b6fc <__gethex+0x66>
 800b708:	f7ff ffb0 	bl	800b66c <__hexdig_fun>
 800b70c:	fab0 f580 	clz	r5, r0
 800b710:	096d      	lsrs	r5, r5, #5
 800b712:	4634      	mov	r4, r6
 800b714:	f04f 0b01 	mov.w	fp, #1
 800b718:	463a      	mov	r2, r7
 800b71a:	4616      	mov	r6, r2
 800b71c:	3201      	adds	r2, #1
 800b71e:	7830      	ldrb	r0, [r6, #0]
 800b720:	f7ff ffa4 	bl	800b66c <__hexdig_fun>
 800b724:	2800      	cmp	r0, #0
 800b726:	d1f8      	bne.n	800b71a <__gethex+0x84>
 800b728:	9a01      	ldr	r2, [sp, #4]
 800b72a:	9903      	ldr	r1, [sp, #12]
 800b72c:	4630      	mov	r0, r6
 800b72e:	f001 f8d9 	bl	800c8e4 <strncmp>
 800b732:	b950      	cbnz	r0, 800b74a <__gethex+0xb4>
 800b734:	b954      	cbnz	r4, 800b74c <__gethex+0xb6>
 800b736:	9b01      	ldr	r3, [sp, #4]
 800b738:	18f4      	adds	r4, r6, r3
 800b73a:	4622      	mov	r2, r4
 800b73c:	4616      	mov	r6, r2
 800b73e:	3201      	adds	r2, #1
 800b740:	7830      	ldrb	r0, [r6, #0]
 800b742:	f7ff ff93 	bl	800b66c <__hexdig_fun>
 800b746:	2800      	cmp	r0, #0
 800b748:	d1f8      	bne.n	800b73c <__gethex+0xa6>
 800b74a:	b10c      	cbz	r4, 800b750 <__gethex+0xba>
 800b74c:	1ba4      	subs	r4, r4, r6
 800b74e:	00a4      	lsls	r4, r4, #2
 800b750:	7833      	ldrb	r3, [r6, #0]
 800b752:	2b50      	cmp	r3, #80	; 0x50
 800b754:	d001      	beq.n	800b75a <__gethex+0xc4>
 800b756:	2b70      	cmp	r3, #112	; 0x70
 800b758:	d140      	bne.n	800b7dc <__gethex+0x146>
 800b75a:	7873      	ldrb	r3, [r6, #1]
 800b75c:	2b2b      	cmp	r3, #43	; 0x2b
 800b75e:	d031      	beq.n	800b7c4 <__gethex+0x12e>
 800b760:	2b2d      	cmp	r3, #45	; 0x2d
 800b762:	d033      	beq.n	800b7cc <__gethex+0x136>
 800b764:	1c71      	adds	r1, r6, #1
 800b766:	f04f 0900 	mov.w	r9, #0
 800b76a:	7808      	ldrb	r0, [r1, #0]
 800b76c:	f7ff ff7e 	bl	800b66c <__hexdig_fun>
 800b770:	1e43      	subs	r3, r0, #1
 800b772:	b2db      	uxtb	r3, r3
 800b774:	2b18      	cmp	r3, #24
 800b776:	d831      	bhi.n	800b7dc <__gethex+0x146>
 800b778:	f1a0 0210 	sub.w	r2, r0, #16
 800b77c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b780:	f7ff ff74 	bl	800b66c <__hexdig_fun>
 800b784:	1e43      	subs	r3, r0, #1
 800b786:	b2db      	uxtb	r3, r3
 800b788:	2b18      	cmp	r3, #24
 800b78a:	d922      	bls.n	800b7d2 <__gethex+0x13c>
 800b78c:	f1b9 0f00 	cmp.w	r9, #0
 800b790:	d000      	beq.n	800b794 <__gethex+0xfe>
 800b792:	4252      	negs	r2, r2
 800b794:	4414      	add	r4, r2
 800b796:	f8ca 1000 	str.w	r1, [sl]
 800b79a:	b30d      	cbz	r5, 800b7e0 <__gethex+0x14a>
 800b79c:	f1bb 0f00 	cmp.w	fp, #0
 800b7a0:	bf0c      	ite	eq
 800b7a2:	2706      	moveq	r7, #6
 800b7a4:	2700      	movne	r7, #0
 800b7a6:	4638      	mov	r0, r7
 800b7a8:	b00b      	add	sp, #44	; 0x2c
 800b7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ae:	f10b 0b01 	add.w	fp, fp, #1
 800b7b2:	e78a      	b.n	800b6ca <__gethex+0x34>
 800b7b4:	2500      	movs	r5, #0
 800b7b6:	462c      	mov	r4, r5
 800b7b8:	e7ae      	b.n	800b718 <__gethex+0x82>
 800b7ba:	463e      	mov	r6, r7
 800b7bc:	2501      	movs	r5, #1
 800b7be:	e7c7      	b.n	800b750 <__gethex+0xba>
 800b7c0:	4604      	mov	r4, r0
 800b7c2:	e7fb      	b.n	800b7bc <__gethex+0x126>
 800b7c4:	f04f 0900 	mov.w	r9, #0
 800b7c8:	1cb1      	adds	r1, r6, #2
 800b7ca:	e7ce      	b.n	800b76a <__gethex+0xd4>
 800b7cc:	f04f 0901 	mov.w	r9, #1
 800b7d0:	e7fa      	b.n	800b7c8 <__gethex+0x132>
 800b7d2:	230a      	movs	r3, #10
 800b7d4:	fb03 0202 	mla	r2, r3, r2, r0
 800b7d8:	3a10      	subs	r2, #16
 800b7da:	e7cf      	b.n	800b77c <__gethex+0xe6>
 800b7dc:	4631      	mov	r1, r6
 800b7de:	e7da      	b.n	800b796 <__gethex+0x100>
 800b7e0:	1bf3      	subs	r3, r6, r7
 800b7e2:	3b01      	subs	r3, #1
 800b7e4:	4629      	mov	r1, r5
 800b7e6:	2b07      	cmp	r3, #7
 800b7e8:	dc49      	bgt.n	800b87e <__gethex+0x1e8>
 800b7ea:	9802      	ldr	r0, [sp, #8]
 800b7ec:	f000 fa63 	bl	800bcb6 <_Balloc>
 800b7f0:	9b01      	ldr	r3, [sp, #4]
 800b7f2:	f100 0914 	add.w	r9, r0, #20
 800b7f6:	f04f 0b00 	mov.w	fp, #0
 800b7fa:	f1c3 0301 	rsb	r3, r3, #1
 800b7fe:	4605      	mov	r5, r0
 800b800:	f8cd 9010 	str.w	r9, [sp, #16]
 800b804:	46da      	mov	sl, fp
 800b806:	9308      	str	r3, [sp, #32]
 800b808:	42b7      	cmp	r7, r6
 800b80a:	d33b      	bcc.n	800b884 <__gethex+0x1ee>
 800b80c:	9804      	ldr	r0, [sp, #16]
 800b80e:	f840 ab04 	str.w	sl, [r0], #4
 800b812:	eba0 0009 	sub.w	r0, r0, r9
 800b816:	1080      	asrs	r0, r0, #2
 800b818:	6128      	str	r0, [r5, #16]
 800b81a:	0147      	lsls	r7, r0, #5
 800b81c:	4650      	mov	r0, sl
 800b81e:	f000 fb0e 	bl	800be3e <__hi0bits>
 800b822:	f8d8 6000 	ldr.w	r6, [r8]
 800b826:	1a3f      	subs	r7, r7, r0
 800b828:	42b7      	cmp	r7, r6
 800b82a:	dd64      	ble.n	800b8f6 <__gethex+0x260>
 800b82c:	1bbf      	subs	r7, r7, r6
 800b82e:	4639      	mov	r1, r7
 800b830:	4628      	mov	r0, r5
 800b832:	f000 fe1d 	bl	800c470 <__any_on>
 800b836:	4682      	mov	sl, r0
 800b838:	b178      	cbz	r0, 800b85a <__gethex+0x1c4>
 800b83a:	1e7b      	subs	r3, r7, #1
 800b83c:	1159      	asrs	r1, r3, #5
 800b83e:	f003 021f 	and.w	r2, r3, #31
 800b842:	f04f 0a01 	mov.w	sl, #1
 800b846:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b84a:	fa0a f202 	lsl.w	r2, sl, r2
 800b84e:	420a      	tst	r2, r1
 800b850:	d003      	beq.n	800b85a <__gethex+0x1c4>
 800b852:	4553      	cmp	r3, sl
 800b854:	dc46      	bgt.n	800b8e4 <__gethex+0x24e>
 800b856:	f04f 0a02 	mov.w	sl, #2
 800b85a:	4639      	mov	r1, r7
 800b85c:	4628      	mov	r0, r5
 800b85e:	f7ff fecb 	bl	800b5f8 <rshift>
 800b862:	443c      	add	r4, r7
 800b864:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b868:	42a3      	cmp	r3, r4
 800b86a:	da52      	bge.n	800b912 <__gethex+0x27c>
 800b86c:	4629      	mov	r1, r5
 800b86e:	9802      	ldr	r0, [sp, #8]
 800b870:	f000 fa55 	bl	800bd1e <_Bfree>
 800b874:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b876:	2300      	movs	r3, #0
 800b878:	6013      	str	r3, [r2, #0]
 800b87a:	27a3      	movs	r7, #163	; 0xa3
 800b87c:	e793      	b.n	800b7a6 <__gethex+0x110>
 800b87e:	3101      	adds	r1, #1
 800b880:	105b      	asrs	r3, r3, #1
 800b882:	e7b0      	b.n	800b7e6 <__gethex+0x150>
 800b884:	1e73      	subs	r3, r6, #1
 800b886:	9305      	str	r3, [sp, #20]
 800b888:	9a07      	ldr	r2, [sp, #28]
 800b88a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b88e:	4293      	cmp	r3, r2
 800b890:	d018      	beq.n	800b8c4 <__gethex+0x22e>
 800b892:	f1bb 0f20 	cmp.w	fp, #32
 800b896:	d107      	bne.n	800b8a8 <__gethex+0x212>
 800b898:	9b04      	ldr	r3, [sp, #16]
 800b89a:	f8c3 a000 	str.w	sl, [r3]
 800b89e:	3304      	adds	r3, #4
 800b8a0:	f04f 0a00 	mov.w	sl, #0
 800b8a4:	9304      	str	r3, [sp, #16]
 800b8a6:	46d3      	mov	fp, sl
 800b8a8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b8ac:	f7ff fede 	bl	800b66c <__hexdig_fun>
 800b8b0:	f000 000f 	and.w	r0, r0, #15
 800b8b4:	fa00 f00b 	lsl.w	r0, r0, fp
 800b8b8:	ea4a 0a00 	orr.w	sl, sl, r0
 800b8bc:	f10b 0b04 	add.w	fp, fp, #4
 800b8c0:	9b05      	ldr	r3, [sp, #20]
 800b8c2:	e00d      	b.n	800b8e0 <__gethex+0x24a>
 800b8c4:	9b05      	ldr	r3, [sp, #20]
 800b8c6:	9a08      	ldr	r2, [sp, #32]
 800b8c8:	4413      	add	r3, r2
 800b8ca:	42bb      	cmp	r3, r7
 800b8cc:	d3e1      	bcc.n	800b892 <__gethex+0x1fc>
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	9a01      	ldr	r2, [sp, #4]
 800b8d2:	9903      	ldr	r1, [sp, #12]
 800b8d4:	9309      	str	r3, [sp, #36]	; 0x24
 800b8d6:	f001 f805 	bl	800c8e4 <strncmp>
 800b8da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8dc:	2800      	cmp	r0, #0
 800b8de:	d1d8      	bne.n	800b892 <__gethex+0x1fc>
 800b8e0:	461e      	mov	r6, r3
 800b8e2:	e791      	b.n	800b808 <__gethex+0x172>
 800b8e4:	1eb9      	subs	r1, r7, #2
 800b8e6:	4628      	mov	r0, r5
 800b8e8:	f000 fdc2 	bl	800c470 <__any_on>
 800b8ec:	2800      	cmp	r0, #0
 800b8ee:	d0b2      	beq.n	800b856 <__gethex+0x1c0>
 800b8f0:	f04f 0a03 	mov.w	sl, #3
 800b8f4:	e7b1      	b.n	800b85a <__gethex+0x1c4>
 800b8f6:	da09      	bge.n	800b90c <__gethex+0x276>
 800b8f8:	1bf7      	subs	r7, r6, r7
 800b8fa:	4629      	mov	r1, r5
 800b8fc:	463a      	mov	r2, r7
 800b8fe:	9802      	ldr	r0, [sp, #8]
 800b900:	f000 fbd8 	bl	800c0b4 <__lshift>
 800b904:	1be4      	subs	r4, r4, r7
 800b906:	4605      	mov	r5, r0
 800b908:	f100 0914 	add.w	r9, r0, #20
 800b90c:	f04f 0a00 	mov.w	sl, #0
 800b910:	e7a8      	b.n	800b864 <__gethex+0x1ce>
 800b912:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b916:	42a0      	cmp	r0, r4
 800b918:	dd6a      	ble.n	800b9f0 <__gethex+0x35a>
 800b91a:	1b04      	subs	r4, r0, r4
 800b91c:	42a6      	cmp	r6, r4
 800b91e:	dc2e      	bgt.n	800b97e <__gethex+0x2e8>
 800b920:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b924:	2b02      	cmp	r3, #2
 800b926:	d022      	beq.n	800b96e <__gethex+0x2d8>
 800b928:	2b03      	cmp	r3, #3
 800b92a:	d024      	beq.n	800b976 <__gethex+0x2e0>
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	d115      	bne.n	800b95c <__gethex+0x2c6>
 800b930:	42a6      	cmp	r6, r4
 800b932:	d113      	bne.n	800b95c <__gethex+0x2c6>
 800b934:	2e01      	cmp	r6, #1
 800b936:	dc0b      	bgt.n	800b950 <__gethex+0x2ba>
 800b938:	9a06      	ldr	r2, [sp, #24]
 800b93a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b93e:	6013      	str	r3, [r2, #0]
 800b940:	2301      	movs	r3, #1
 800b942:	612b      	str	r3, [r5, #16]
 800b944:	f8c9 3000 	str.w	r3, [r9]
 800b948:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b94a:	2762      	movs	r7, #98	; 0x62
 800b94c:	601d      	str	r5, [r3, #0]
 800b94e:	e72a      	b.n	800b7a6 <__gethex+0x110>
 800b950:	1e71      	subs	r1, r6, #1
 800b952:	4628      	mov	r0, r5
 800b954:	f000 fd8c 	bl	800c470 <__any_on>
 800b958:	2800      	cmp	r0, #0
 800b95a:	d1ed      	bne.n	800b938 <__gethex+0x2a2>
 800b95c:	4629      	mov	r1, r5
 800b95e:	9802      	ldr	r0, [sp, #8]
 800b960:	f000 f9dd 	bl	800bd1e <_Bfree>
 800b964:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b966:	2300      	movs	r3, #0
 800b968:	6013      	str	r3, [r2, #0]
 800b96a:	2750      	movs	r7, #80	; 0x50
 800b96c:	e71b      	b.n	800b7a6 <__gethex+0x110>
 800b96e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b970:	2b00      	cmp	r3, #0
 800b972:	d0e1      	beq.n	800b938 <__gethex+0x2a2>
 800b974:	e7f2      	b.n	800b95c <__gethex+0x2c6>
 800b976:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d1dd      	bne.n	800b938 <__gethex+0x2a2>
 800b97c:	e7ee      	b.n	800b95c <__gethex+0x2c6>
 800b97e:	1e67      	subs	r7, r4, #1
 800b980:	f1ba 0f00 	cmp.w	sl, #0
 800b984:	d131      	bne.n	800b9ea <__gethex+0x354>
 800b986:	b127      	cbz	r7, 800b992 <__gethex+0x2fc>
 800b988:	4639      	mov	r1, r7
 800b98a:	4628      	mov	r0, r5
 800b98c:	f000 fd70 	bl	800c470 <__any_on>
 800b990:	4682      	mov	sl, r0
 800b992:	117a      	asrs	r2, r7, #5
 800b994:	2301      	movs	r3, #1
 800b996:	f007 071f 	and.w	r7, r7, #31
 800b99a:	fa03 f707 	lsl.w	r7, r3, r7
 800b99e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800b9a2:	4621      	mov	r1, r4
 800b9a4:	421f      	tst	r7, r3
 800b9a6:	4628      	mov	r0, r5
 800b9a8:	bf18      	it	ne
 800b9aa:	f04a 0a02 	orrne.w	sl, sl, #2
 800b9ae:	1b36      	subs	r6, r6, r4
 800b9b0:	f7ff fe22 	bl	800b5f8 <rshift>
 800b9b4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800b9b8:	2702      	movs	r7, #2
 800b9ba:	f1ba 0f00 	cmp.w	sl, #0
 800b9be:	d048      	beq.n	800ba52 <__gethex+0x3bc>
 800b9c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b9c4:	2b02      	cmp	r3, #2
 800b9c6:	d015      	beq.n	800b9f4 <__gethex+0x35e>
 800b9c8:	2b03      	cmp	r3, #3
 800b9ca:	d017      	beq.n	800b9fc <__gethex+0x366>
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d109      	bne.n	800b9e4 <__gethex+0x34e>
 800b9d0:	f01a 0f02 	tst.w	sl, #2
 800b9d4:	d006      	beq.n	800b9e4 <__gethex+0x34e>
 800b9d6:	f8d9 3000 	ldr.w	r3, [r9]
 800b9da:	ea4a 0a03 	orr.w	sl, sl, r3
 800b9de:	f01a 0f01 	tst.w	sl, #1
 800b9e2:	d10e      	bne.n	800ba02 <__gethex+0x36c>
 800b9e4:	f047 0710 	orr.w	r7, r7, #16
 800b9e8:	e033      	b.n	800ba52 <__gethex+0x3bc>
 800b9ea:	f04f 0a01 	mov.w	sl, #1
 800b9ee:	e7d0      	b.n	800b992 <__gethex+0x2fc>
 800b9f0:	2701      	movs	r7, #1
 800b9f2:	e7e2      	b.n	800b9ba <__gethex+0x324>
 800b9f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9f6:	f1c3 0301 	rsb	r3, r3, #1
 800b9fa:	9315      	str	r3, [sp, #84]	; 0x54
 800b9fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d0f0      	beq.n	800b9e4 <__gethex+0x34e>
 800ba02:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800ba06:	f105 0314 	add.w	r3, r5, #20
 800ba0a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800ba0e:	eb03 010a 	add.w	r1, r3, sl
 800ba12:	f04f 0c00 	mov.w	ip, #0
 800ba16:	4618      	mov	r0, r3
 800ba18:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba1c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ba20:	d01c      	beq.n	800ba5c <__gethex+0x3c6>
 800ba22:	3201      	adds	r2, #1
 800ba24:	6002      	str	r2, [r0, #0]
 800ba26:	2f02      	cmp	r7, #2
 800ba28:	f105 0314 	add.w	r3, r5, #20
 800ba2c:	d138      	bne.n	800baa0 <__gethex+0x40a>
 800ba2e:	f8d8 2000 	ldr.w	r2, [r8]
 800ba32:	3a01      	subs	r2, #1
 800ba34:	42b2      	cmp	r2, r6
 800ba36:	d10a      	bne.n	800ba4e <__gethex+0x3b8>
 800ba38:	1171      	asrs	r1, r6, #5
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	f006 061f 	and.w	r6, r6, #31
 800ba40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ba44:	fa02 f606 	lsl.w	r6, r2, r6
 800ba48:	421e      	tst	r6, r3
 800ba4a:	bf18      	it	ne
 800ba4c:	4617      	movne	r7, r2
 800ba4e:	f047 0720 	orr.w	r7, r7, #32
 800ba52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ba54:	601d      	str	r5, [r3, #0]
 800ba56:	9b06      	ldr	r3, [sp, #24]
 800ba58:	601c      	str	r4, [r3, #0]
 800ba5a:	e6a4      	b.n	800b7a6 <__gethex+0x110>
 800ba5c:	4299      	cmp	r1, r3
 800ba5e:	f843 cc04 	str.w	ip, [r3, #-4]
 800ba62:	d8d8      	bhi.n	800ba16 <__gethex+0x380>
 800ba64:	68ab      	ldr	r3, [r5, #8]
 800ba66:	4599      	cmp	r9, r3
 800ba68:	db12      	blt.n	800ba90 <__gethex+0x3fa>
 800ba6a:	6869      	ldr	r1, [r5, #4]
 800ba6c:	9802      	ldr	r0, [sp, #8]
 800ba6e:	3101      	adds	r1, #1
 800ba70:	f000 f921 	bl	800bcb6 <_Balloc>
 800ba74:	692a      	ldr	r2, [r5, #16]
 800ba76:	3202      	adds	r2, #2
 800ba78:	f105 010c 	add.w	r1, r5, #12
 800ba7c:	4683      	mov	fp, r0
 800ba7e:	0092      	lsls	r2, r2, #2
 800ba80:	300c      	adds	r0, #12
 800ba82:	f000 f90d 	bl	800bca0 <memcpy>
 800ba86:	4629      	mov	r1, r5
 800ba88:	9802      	ldr	r0, [sp, #8]
 800ba8a:	f000 f948 	bl	800bd1e <_Bfree>
 800ba8e:	465d      	mov	r5, fp
 800ba90:	692b      	ldr	r3, [r5, #16]
 800ba92:	1c5a      	adds	r2, r3, #1
 800ba94:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ba98:	612a      	str	r2, [r5, #16]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	615a      	str	r2, [r3, #20]
 800ba9e:	e7c2      	b.n	800ba26 <__gethex+0x390>
 800baa0:	692a      	ldr	r2, [r5, #16]
 800baa2:	454a      	cmp	r2, r9
 800baa4:	dd0b      	ble.n	800babe <__gethex+0x428>
 800baa6:	2101      	movs	r1, #1
 800baa8:	4628      	mov	r0, r5
 800baaa:	f7ff fda5 	bl	800b5f8 <rshift>
 800baae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bab2:	3401      	adds	r4, #1
 800bab4:	42a3      	cmp	r3, r4
 800bab6:	f6ff aed9 	blt.w	800b86c <__gethex+0x1d6>
 800baba:	2701      	movs	r7, #1
 800babc:	e7c7      	b.n	800ba4e <__gethex+0x3b8>
 800babe:	f016 061f 	ands.w	r6, r6, #31
 800bac2:	d0fa      	beq.n	800baba <__gethex+0x424>
 800bac4:	449a      	add	sl, r3
 800bac6:	f1c6 0620 	rsb	r6, r6, #32
 800baca:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800bace:	f000 f9b6 	bl	800be3e <__hi0bits>
 800bad2:	42b0      	cmp	r0, r6
 800bad4:	dbe7      	blt.n	800baa6 <__gethex+0x410>
 800bad6:	e7f0      	b.n	800baba <__gethex+0x424>

0800bad8 <L_shift>:
 800bad8:	f1c2 0208 	rsb	r2, r2, #8
 800badc:	0092      	lsls	r2, r2, #2
 800bade:	b570      	push	{r4, r5, r6, lr}
 800bae0:	f1c2 0620 	rsb	r6, r2, #32
 800bae4:	6843      	ldr	r3, [r0, #4]
 800bae6:	6804      	ldr	r4, [r0, #0]
 800bae8:	fa03 f506 	lsl.w	r5, r3, r6
 800baec:	432c      	orrs	r4, r5
 800baee:	40d3      	lsrs	r3, r2
 800baf0:	6004      	str	r4, [r0, #0]
 800baf2:	f840 3f04 	str.w	r3, [r0, #4]!
 800baf6:	4288      	cmp	r0, r1
 800baf8:	d3f4      	bcc.n	800bae4 <L_shift+0xc>
 800bafa:	bd70      	pop	{r4, r5, r6, pc}

0800bafc <__match>:
 800bafc:	b530      	push	{r4, r5, lr}
 800bafe:	6803      	ldr	r3, [r0, #0]
 800bb00:	3301      	adds	r3, #1
 800bb02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb06:	b914      	cbnz	r4, 800bb0e <__match+0x12>
 800bb08:	6003      	str	r3, [r0, #0]
 800bb0a:	2001      	movs	r0, #1
 800bb0c:	bd30      	pop	{r4, r5, pc}
 800bb0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb12:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bb16:	2d19      	cmp	r5, #25
 800bb18:	bf98      	it	ls
 800bb1a:	3220      	addls	r2, #32
 800bb1c:	42a2      	cmp	r2, r4
 800bb1e:	d0f0      	beq.n	800bb02 <__match+0x6>
 800bb20:	2000      	movs	r0, #0
 800bb22:	e7f3      	b.n	800bb0c <__match+0x10>

0800bb24 <__hexnan>:
 800bb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb28:	680b      	ldr	r3, [r1, #0]
 800bb2a:	6801      	ldr	r1, [r0, #0]
 800bb2c:	115f      	asrs	r7, r3, #5
 800bb2e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800bb32:	f013 031f 	ands.w	r3, r3, #31
 800bb36:	b087      	sub	sp, #28
 800bb38:	bf18      	it	ne
 800bb3a:	3704      	addne	r7, #4
 800bb3c:	2500      	movs	r5, #0
 800bb3e:	1f3e      	subs	r6, r7, #4
 800bb40:	4682      	mov	sl, r0
 800bb42:	4690      	mov	r8, r2
 800bb44:	9301      	str	r3, [sp, #4]
 800bb46:	f847 5c04 	str.w	r5, [r7, #-4]
 800bb4a:	46b1      	mov	r9, r6
 800bb4c:	4634      	mov	r4, r6
 800bb4e:	9502      	str	r5, [sp, #8]
 800bb50:	46ab      	mov	fp, r5
 800bb52:	784a      	ldrb	r2, [r1, #1]
 800bb54:	1c4b      	adds	r3, r1, #1
 800bb56:	9303      	str	r3, [sp, #12]
 800bb58:	b342      	cbz	r2, 800bbac <__hexnan+0x88>
 800bb5a:	4610      	mov	r0, r2
 800bb5c:	9105      	str	r1, [sp, #20]
 800bb5e:	9204      	str	r2, [sp, #16]
 800bb60:	f7ff fd84 	bl	800b66c <__hexdig_fun>
 800bb64:	2800      	cmp	r0, #0
 800bb66:	d143      	bne.n	800bbf0 <__hexnan+0xcc>
 800bb68:	9a04      	ldr	r2, [sp, #16]
 800bb6a:	9905      	ldr	r1, [sp, #20]
 800bb6c:	2a20      	cmp	r2, #32
 800bb6e:	d818      	bhi.n	800bba2 <__hexnan+0x7e>
 800bb70:	9b02      	ldr	r3, [sp, #8]
 800bb72:	459b      	cmp	fp, r3
 800bb74:	dd13      	ble.n	800bb9e <__hexnan+0x7a>
 800bb76:	454c      	cmp	r4, r9
 800bb78:	d206      	bcs.n	800bb88 <__hexnan+0x64>
 800bb7a:	2d07      	cmp	r5, #7
 800bb7c:	dc04      	bgt.n	800bb88 <__hexnan+0x64>
 800bb7e:	462a      	mov	r2, r5
 800bb80:	4649      	mov	r1, r9
 800bb82:	4620      	mov	r0, r4
 800bb84:	f7ff ffa8 	bl	800bad8 <L_shift>
 800bb88:	4544      	cmp	r4, r8
 800bb8a:	d944      	bls.n	800bc16 <__hexnan+0xf2>
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	f1a4 0904 	sub.w	r9, r4, #4
 800bb92:	f844 3c04 	str.w	r3, [r4, #-4]
 800bb96:	f8cd b008 	str.w	fp, [sp, #8]
 800bb9a:	464c      	mov	r4, r9
 800bb9c:	461d      	mov	r5, r3
 800bb9e:	9903      	ldr	r1, [sp, #12]
 800bba0:	e7d7      	b.n	800bb52 <__hexnan+0x2e>
 800bba2:	2a29      	cmp	r2, #41	; 0x29
 800bba4:	d14a      	bne.n	800bc3c <__hexnan+0x118>
 800bba6:	3102      	adds	r1, #2
 800bba8:	f8ca 1000 	str.w	r1, [sl]
 800bbac:	f1bb 0f00 	cmp.w	fp, #0
 800bbb0:	d044      	beq.n	800bc3c <__hexnan+0x118>
 800bbb2:	454c      	cmp	r4, r9
 800bbb4:	d206      	bcs.n	800bbc4 <__hexnan+0xa0>
 800bbb6:	2d07      	cmp	r5, #7
 800bbb8:	dc04      	bgt.n	800bbc4 <__hexnan+0xa0>
 800bbba:	462a      	mov	r2, r5
 800bbbc:	4649      	mov	r1, r9
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	f7ff ff8a 	bl	800bad8 <L_shift>
 800bbc4:	4544      	cmp	r4, r8
 800bbc6:	d928      	bls.n	800bc1a <__hexnan+0xf6>
 800bbc8:	4643      	mov	r3, r8
 800bbca:	f854 2b04 	ldr.w	r2, [r4], #4
 800bbce:	f843 2b04 	str.w	r2, [r3], #4
 800bbd2:	42a6      	cmp	r6, r4
 800bbd4:	d2f9      	bcs.n	800bbca <__hexnan+0xa6>
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	f843 2b04 	str.w	r2, [r3], #4
 800bbdc:	429e      	cmp	r6, r3
 800bbde:	d2fb      	bcs.n	800bbd8 <__hexnan+0xb4>
 800bbe0:	6833      	ldr	r3, [r6, #0]
 800bbe2:	b91b      	cbnz	r3, 800bbec <__hexnan+0xc8>
 800bbe4:	4546      	cmp	r6, r8
 800bbe6:	d127      	bne.n	800bc38 <__hexnan+0x114>
 800bbe8:	2301      	movs	r3, #1
 800bbea:	6033      	str	r3, [r6, #0]
 800bbec:	2005      	movs	r0, #5
 800bbee:	e026      	b.n	800bc3e <__hexnan+0x11a>
 800bbf0:	3501      	adds	r5, #1
 800bbf2:	2d08      	cmp	r5, #8
 800bbf4:	f10b 0b01 	add.w	fp, fp, #1
 800bbf8:	dd06      	ble.n	800bc08 <__hexnan+0xe4>
 800bbfa:	4544      	cmp	r4, r8
 800bbfc:	d9cf      	bls.n	800bb9e <__hexnan+0x7a>
 800bbfe:	2300      	movs	r3, #0
 800bc00:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc04:	2501      	movs	r5, #1
 800bc06:	3c04      	subs	r4, #4
 800bc08:	6822      	ldr	r2, [r4, #0]
 800bc0a:	f000 000f 	and.w	r0, r0, #15
 800bc0e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bc12:	6020      	str	r0, [r4, #0]
 800bc14:	e7c3      	b.n	800bb9e <__hexnan+0x7a>
 800bc16:	2508      	movs	r5, #8
 800bc18:	e7c1      	b.n	800bb9e <__hexnan+0x7a>
 800bc1a:	9b01      	ldr	r3, [sp, #4]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d0df      	beq.n	800bbe0 <__hexnan+0xbc>
 800bc20:	f04f 32ff 	mov.w	r2, #4294967295
 800bc24:	f1c3 0320 	rsb	r3, r3, #32
 800bc28:	fa22 f303 	lsr.w	r3, r2, r3
 800bc2c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800bc30:	401a      	ands	r2, r3
 800bc32:	f847 2c04 	str.w	r2, [r7, #-4]
 800bc36:	e7d3      	b.n	800bbe0 <__hexnan+0xbc>
 800bc38:	3e04      	subs	r6, #4
 800bc3a:	e7d1      	b.n	800bbe0 <__hexnan+0xbc>
 800bc3c:	2004      	movs	r0, #4
 800bc3e:	b007      	add	sp, #28
 800bc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bc44 <__locale_ctype_ptr_l>:
 800bc44:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800bc48:	4770      	bx	lr

0800bc4a <__localeconv_l>:
 800bc4a:	30f0      	adds	r0, #240	; 0xf0
 800bc4c:	4770      	bx	lr
	...

0800bc50 <_localeconv_r>:
 800bc50:	4b04      	ldr	r3, [pc, #16]	; (800bc64 <_localeconv_r+0x14>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	6a18      	ldr	r0, [r3, #32]
 800bc56:	4b04      	ldr	r3, [pc, #16]	; (800bc68 <_localeconv_r+0x18>)
 800bc58:	2800      	cmp	r0, #0
 800bc5a:	bf08      	it	eq
 800bc5c:	4618      	moveq	r0, r3
 800bc5e:	30f0      	adds	r0, #240	; 0xf0
 800bc60:	4770      	bx	lr
 800bc62:	bf00      	nop
 800bc64:	20000014 	.word	0x20000014
 800bc68:	20000078 	.word	0x20000078

0800bc6c <malloc>:
 800bc6c:	4b02      	ldr	r3, [pc, #8]	; (800bc78 <malloc+0xc>)
 800bc6e:	4601      	mov	r1, r0
 800bc70:	6818      	ldr	r0, [r3, #0]
 800bc72:	f000 bc7b 	b.w	800c56c <_malloc_r>
 800bc76:	bf00      	nop
 800bc78:	20000014 	.word	0x20000014

0800bc7c <__ascii_mbtowc>:
 800bc7c:	b082      	sub	sp, #8
 800bc7e:	b901      	cbnz	r1, 800bc82 <__ascii_mbtowc+0x6>
 800bc80:	a901      	add	r1, sp, #4
 800bc82:	b142      	cbz	r2, 800bc96 <__ascii_mbtowc+0x1a>
 800bc84:	b14b      	cbz	r3, 800bc9a <__ascii_mbtowc+0x1e>
 800bc86:	7813      	ldrb	r3, [r2, #0]
 800bc88:	600b      	str	r3, [r1, #0]
 800bc8a:	7812      	ldrb	r2, [r2, #0]
 800bc8c:	1c10      	adds	r0, r2, #0
 800bc8e:	bf18      	it	ne
 800bc90:	2001      	movne	r0, #1
 800bc92:	b002      	add	sp, #8
 800bc94:	4770      	bx	lr
 800bc96:	4610      	mov	r0, r2
 800bc98:	e7fb      	b.n	800bc92 <__ascii_mbtowc+0x16>
 800bc9a:	f06f 0001 	mvn.w	r0, #1
 800bc9e:	e7f8      	b.n	800bc92 <__ascii_mbtowc+0x16>

0800bca0 <memcpy>:
 800bca0:	b510      	push	{r4, lr}
 800bca2:	1e43      	subs	r3, r0, #1
 800bca4:	440a      	add	r2, r1
 800bca6:	4291      	cmp	r1, r2
 800bca8:	d100      	bne.n	800bcac <memcpy+0xc>
 800bcaa:	bd10      	pop	{r4, pc}
 800bcac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcb4:	e7f7      	b.n	800bca6 <memcpy+0x6>

0800bcb6 <_Balloc>:
 800bcb6:	b570      	push	{r4, r5, r6, lr}
 800bcb8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bcba:	4604      	mov	r4, r0
 800bcbc:	460e      	mov	r6, r1
 800bcbe:	b93d      	cbnz	r5, 800bcd0 <_Balloc+0x1a>
 800bcc0:	2010      	movs	r0, #16
 800bcc2:	f7ff ffd3 	bl	800bc6c <malloc>
 800bcc6:	6260      	str	r0, [r4, #36]	; 0x24
 800bcc8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bccc:	6005      	str	r5, [r0, #0]
 800bcce:	60c5      	str	r5, [r0, #12]
 800bcd0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800bcd2:	68eb      	ldr	r3, [r5, #12]
 800bcd4:	b183      	cbz	r3, 800bcf8 <_Balloc+0x42>
 800bcd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcd8:	68db      	ldr	r3, [r3, #12]
 800bcda:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bcde:	b9b8      	cbnz	r0, 800bd10 <_Balloc+0x5a>
 800bce0:	2101      	movs	r1, #1
 800bce2:	fa01 f506 	lsl.w	r5, r1, r6
 800bce6:	1d6a      	adds	r2, r5, #5
 800bce8:	0092      	lsls	r2, r2, #2
 800bcea:	4620      	mov	r0, r4
 800bcec:	f000 fbe1 	bl	800c4b2 <_calloc_r>
 800bcf0:	b160      	cbz	r0, 800bd0c <_Balloc+0x56>
 800bcf2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800bcf6:	e00e      	b.n	800bd16 <_Balloc+0x60>
 800bcf8:	2221      	movs	r2, #33	; 0x21
 800bcfa:	2104      	movs	r1, #4
 800bcfc:	4620      	mov	r0, r4
 800bcfe:	f000 fbd8 	bl	800c4b2 <_calloc_r>
 800bd02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd04:	60e8      	str	r0, [r5, #12]
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d1e4      	bne.n	800bcd6 <_Balloc+0x20>
 800bd0c:	2000      	movs	r0, #0
 800bd0e:	bd70      	pop	{r4, r5, r6, pc}
 800bd10:	6802      	ldr	r2, [r0, #0]
 800bd12:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800bd16:	2300      	movs	r3, #0
 800bd18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd1c:	e7f7      	b.n	800bd0e <_Balloc+0x58>

0800bd1e <_Bfree>:
 800bd1e:	b570      	push	{r4, r5, r6, lr}
 800bd20:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800bd22:	4606      	mov	r6, r0
 800bd24:	460d      	mov	r5, r1
 800bd26:	b93c      	cbnz	r4, 800bd38 <_Bfree+0x1a>
 800bd28:	2010      	movs	r0, #16
 800bd2a:	f7ff ff9f 	bl	800bc6c <malloc>
 800bd2e:	6270      	str	r0, [r6, #36]	; 0x24
 800bd30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd34:	6004      	str	r4, [r0, #0]
 800bd36:	60c4      	str	r4, [r0, #12]
 800bd38:	b13d      	cbz	r5, 800bd4a <_Bfree+0x2c>
 800bd3a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bd3c:	686a      	ldr	r2, [r5, #4]
 800bd3e:	68db      	ldr	r3, [r3, #12]
 800bd40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd44:	6029      	str	r1, [r5, #0]
 800bd46:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800bd4a:	bd70      	pop	{r4, r5, r6, pc}

0800bd4c <__multadd>:
 800bd4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd50:	690d      	ldr	r5, [r1, #16]
 800bd52:	461f      	mov	r7, r3
 800bd54:	4606      	mov	r6, r0
 800bd56:	460c      	mov	r4, r1
 800bd58:	f101 0c14 	add.w	ip, r1, #20
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	f8dc 0000 	ldr.w	r0, [ip]
 800bd62:	b281      	uxth	r1, r0
 800bd64:	fb02 7101 	mla	r1, r2, r1, r7
 800bd68:	0c0f      	lsrs	r7, r1, #16
 800bd6a:	0c00      	lsrs	r0, r0, #16
 800bd6c:	fb02 7000 	mla	r0, r2, r0, r7
 800bd70:	b289      	uxth	r1, r1
 800bd72:	3301      	adds	r3, #1
 800bd74:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800bd78:	429d      	cmp	r5, r3
 800bd7a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800bd7e:	f84c 1b04 	str.w	r1, [ip], #4
 800bd82:	dcec      	bgt.n	800bd5e <__multadd+0x12>
 800bd84:	b1d7      	cbz	r7, 800bdbc <__multadd+0x70>
 800bd86:	68a3      	ldr	r3, [r4, #8]
 800bd88:	42ab      	cmp	r3, r5
 800bd8a:	dc12      	bgt.n	800bdb2 <__multadd+0x66>
 800bd8c:	6861      	ldr	r1, [r4, #4]
 800bd8e:	4630      	mov	r0, r6
 800bd90:	3101      	adds	r1, #1
 800bd92:	f7ff ff90 	bl	800bcb6 <_Balloc>
 800bd96:	6922      	ldr	r2, [r4, #16]
 800bd98:	3202      	adds	r2, #2
 800bd9a:	f104 010c 	add.w	r1, r4, #12
 800bd9e:	4680      	mov	r8, r0
 800bda0:	0092      	lsls	r2, r2, #2
 800bda2:	300c      	adds	r0, #12
 800bda4:	f7ff ff7c 	bl	800bca0 <memcpy>
 800bda8:	4621      	mov	r1, r4
 800bdaa:	4630      	mov	r0, r6
 800bdac:	f7ff ffb7 	bl	800bd1e <_Bfree>
 800bdb0:	4644      	mov	r4, r8
 800bdb2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bdb6:	3501      	adds	r5, #1
 800bdb8:	615f      	str	r7, [r3, #20]
 800bdba:	6125      	str	r5, [r4, #16]
 800bdbc:	4620      	mov	r0, r4
 800bdbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bdc2 <__s2b>:
 800bdc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdc6:	460c      	mov	r4, r1
 800bdc8:	4615      	mov	r5, r2
 800bdca:	461f      	mov	r7, r3
 800bdcc:	2209      	movs	r2, #9
 800bdce:	3308      	adds	r3, #8
 800bdd0:	4606      	mov	r6, r0
 800bdd2:	fb93 f3f2 	sdiv	r3, r3, r2
 800bdd6:	2100      	movs	r1, #0
 800bdd8:	2201      	movs	r2, #1
 800bdda:	429a      	cmp	r2, r3
 800bddc:	db20      	blt.n	800be20 <__s2b+0x5e>
 800bdde:	4630      	mov	r0, r6
 800bde0:	f7ff ff69 	bl	800bcb6 <_Balloc>
 800bde4:	9b08      	ldr	r3, [sp, #32]
 800bde6:	6143      	str	r3, [r0, #20]
 800bde8:	2d09      	cmp	r5, #9
 800bdea:	f04f 0301 	mov.w	r3, #1
 800bdee:	6103      	str	r3, [r0, #16]
 800bdf0:	dd19      	ble.n	800be26 <__s2b+0x64>
 800bdf2:	f104 0809 	add.w	r8, r4, #9
 800bdf6:	46c1      	mov	r9, r8
 800bdf8:	442c      	add	r4, r5
 800bdfa:	f819 3b01 	ldrb.w	r3, [r9], #1
 800bdfe:	4601      	mov	r1, r0
 800be00:	3b30      	subs	r3, #48	; 0x30
 800be02:	220a      	movs	r2, #10
 800be04:	4630      	mov	r0, r6
 800be06:	f7ff ffa1 	bl	800bd4c <__multadd>
 800be0a:	45a1      	cmp	r9, r4
 800be0c:	d1f5      	bne.n	800bdfa <__s2b+0x38>
 800be0e:	eb08 0405 	add.w	r4, r8, r5
 800be12:	3c08      	subs	r4, #8
 800be14:	1b2d      	subs	r5, r5, r4
 800be16:	1963      	adds	r3, r4, r5
 800be18:	42bb      	cmp	r3, r7
 800be1a:	db07      	blt.n	800be2c <__s2b+0x6a>
 800be1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be20:	0052      	lsls	r2, r2, #1
 800be22:	3101      	adds	r1, #1
 800be24:	e7d9      	b.n	800bdda <__s2b+0x18>
 800be26:	340a      	adds	r4, #10
 800be28:	2509      	movs	r5, #9
 800be2a:	e7f3      	b.n	800be14 <__s2b+0x52>
 800be2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800be30:	4601      	mov	r1, r0
 800be32:	3b30      	subs	r3, #48	; 0x30
 800be34:	220a      	movs	r2, #10
 800be36:	4630      	mov	r0, r6
 800be38:	f7ff ff88 	bl	800bd4c <__multadd>
 800be3c:	e7eb      	b.n	800be16 <__s2b+0x54>

0800be3e <__hi0bits>:
 800be3e:	0c02      	lsrs	r2, r0, #16
 800be40:	0412      	lsls	r2, r2, #16
 800be42:	4603      	mov	r3, r0
 800be44:	b9b2      	cbnz	r2, 800be74 <__hi0bits+0x36>
 800be46:	0403      	lsls	r3, r0, #16
 800be48:	2010      	movs	r0, #16
 800be4a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800be4e:	bf04      	itt	eq
 800be50:	021b      	lsleq	r3, r3, #8
 800be52:	3008      	addeq	r0, #8
 800be54:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800be58:	bf04      	itt	eq
 800be5a:	011b      	lsleq	r3, r3, #4
 800be5c:	3004      	addeq	r0, #4
 800be5e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800be62:	bf04      	itt	eq
 800be64:	009b      	lsleq	r3, r3, #2
 800be66:	3002      	addeq	r0, #2
 800be68:	2b00      	cmp	r3, #0
 800be6a:	db06      	blt.n	800be7a <__hi0bits+0x3c>
 800be6c:	005b      	lsls	r3, r3, #1
 800be6e:	d503      	bpl.n	800be78 <__hi0bits+0x3a>
 800be70:	3001      	adds	r0, #1
 800be72:	4770      	bx	lr
 800be74:	2000      	movs	r0, #0
 800be76:	e7e8      	b.n	800be4a <__hi0bits+0xc>
 800be78:	2020      	movs	r0, #32
 800be7a:	4770      	bx	lr

0800be7c <__lo0bits>:
 800be7c:	6803      	ldr	r3, [r0, #0]
 800be7e:	f013 0207 	ands.w	r2, r3, #7
 800be82:	4601      	mov	r1, r0
 800be84:	d00b      	beq.n	800be9e <__lo0bits+0x22>
 800be86:	07da      	lsls	r2, r3, #31
 800be88:	d423      	bmi.n	800bed2 <__lo0bits+0x56>
 800be8a:	0798      	lsls	r0, r3, #30
 800be8c:	bf49      	itett	mi
 800be8e:	085b      	lsrmi	r3, r3, #1
 800be90:	089b      	lsrpl	r3, r3, #2
 800be92:	2001      	movmi	r0, #1
 800be94:	600b      	strmi	r3, [r1, #0]
 800be96:	bf5c      	itt	pl
 800be98:	600b      	strpl	r3, [r1, #0]
 800be9a:	2002      	movpl	r0, #2
 800be9c:	4770      	bx	lr
 800be9e:	b298      	uxth	r0, r3
 800bea0:	b9a8      	cbnz	r0, 800bece <__lo0bits+0x52>
 800bea2:	0c1b      	lsrs	r3, r3, #16
 800bea4:	2010      	movs	r0, #16
 800bea6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800beaa:	bf04      	itt	eq
 800beac:	0a1b      	lsreq	r3, r3, #8
 800beae:	3008      	addeq	r0, #8
 800beb0:	071a      	lsls	r2, r3, #28
 800beb2:	bf04      	itt	eq
 800beb4:	091b      	lsreq	r3, r3, #4
 800beb6:	3004      	addeq	r0, #4
 800beb8:	079a      	lsls	r2, r3, #30
 800beba:	bf04      	itt	eq
 800bebc:	089b      	lsreq	r3, r3, #2
 800bebe:	3002      	addeq	r0, #2
 800bec0:	07da      	lsls	r2, r3, #31
 800bec2:	d402      	bmi.n	800beca <__lo0bits+0x4e>
 800bec4:	085b      	lsrs	r3, r3, #1
 800bec6:	d006      	beq.n	800bed6 <__lo0bits+0x5a>
 800bec8:	3001      	adds	r0, #1
 800beca:	600b      	str	r3, [r1, #0]
 800becc:	4770      	bx	lr
 800bece:	4610      	mov	r0, r2
 800bed0:	e7e9      	b.n	800bea6 <__lo0bits+0x2a>
 800bed2:	2000      	movs	r0, #0
 800bed4:	4770      	bx	lr
 800bed6:	2020      	movs	r0, #32
 800bed8:	4770      	bx	lr

0800beda <__i2b>:
 800beda:	b510      	push	{r4, lr}
 800bedc:	460c      	mov	r4, r1
 800bede:	2101      	movs	r1, #1
 800bee0:	f7ff fee9 	bl	800bcb6 <_Balloc>
 800bee4:	2201      	movs	r2, #1
 800bee6:	6144      	str	r4, [r0, #20]
 800bee8:	6102      	str	r2, [r0, #16]
 800beea:	bd10      	pop	{r4, pc}

0800beec <__multiply>:
 800beec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bef0:	4614      	mov	r4, r2
 800bef2:	690a      	ldr	r2, [r1, #16]
 800bef4:	6923      	ldr	r3, [r4, #16]
 800bef6:	429a      	cmp	r2, r3
 800bef8:	bfb8      	it	lt
 800befa:	460b      	movlt	r3, r1
 800befc:	4688      	mov	r8, r1
 800befe:	bfbc      	itt	lt
 800bf00:	46a0      	movlt	r8, r4
 800bf02:	461c      	movlt	r4, r3
 800bf04:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bf08:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bf0c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf10:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bf14:	eb07 0609 	add.w	r6, r7, r9
 800bf18:	42b3      	cmp	r3, r6
 800bf1a:	bfb8      	it	lt
 800bf1c:	3101      	addlt	r1, #1
 800bf1e:	f7ff feca 	bl	800bcb6 <_Balloc>
 800bf22:	f100 0514 	add.w	r5, r0, #20
 800bf26:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800bf2a:	462b      	mov	r3, r5
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	4573      	cmp	r3, lr
 800bf30:	d316      	bcc.n	800bf60 <__multiply+0x74>
 800bf32:	f104 0214 	add.w	r2, r4, #20
 800bf36:	f108 0114 	add.w	r1, r8, #20
 800bf3a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800bf3e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800bf42:	9300      	str	r3, [sp, #0]
 800bf44:	9b00      	ldr	r3, [sp, #0]
 800bf46:	9201      	str	r2, [sp, #4]
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	d80c      	bhi.n	800bf66 <__multiply+0x7a>
 800bf4c:	2e00      	cmp	r6, #0
 800bf4e:	dd03      	ble.n	800bf58 <__multiply+0x6c>
 800bf50:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d05d      	beq.n	800c014 <__multiply+0x128>
 800bf58:	6106      	str	r6, [r0, #16]
 800bf5a:	b003      	add	sp, #12
 800bf5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf60:	f843 2b04 	str.w	r2, [r3], #4
 800bf64:	e7e3      	b.n	800bf2e <__multiply+0x42>
 800bf66:	f8b2 b000 	ldrh.w	fp, [r2]
 800bf6a:	f1bb 0f00 	cmp.w	fp, #0
 800bf6e:	d023      	beq.n	800bfb8 <__multiply+0xcc>
 800bf70:	4689      	mov	r9, r1
 800bf72:	46ac      	mov	ip, r5
 800bf74:	f04f 0800 	mov.w	r8, #0
 800bf78:	f859 4b04 	ldr.w	r4, [r9], #4
 800bf7c:	f8dc a000 	ldr.w	sl, [ip]
 800bf80:	b2a3      	uxth	r3, r4
 800bf82:	fa1f fa8a 	uxth.w	sl, sl
 800bf86:	fb0b a303 	mla	r3, fp, r3, sl
 800bf8a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bf8e:	f8dc 4000 	ldr.w	r4, [ip]
 800bf92:	4443      	add	r3, r8
 800bf94:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800bf98:	fb0b 840a 	mla	r4, fp, sl, r8
 800bf9c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800bfa0:	46e2      	mov	sl, ip
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bfa8:	454f      	cmp	r7, r9
 800bfaa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800bfae:	f84a 3b04 	str.w	r3, [sl], #4
 800bfb2:	d82b      	bhi.n	800c00c <__multiply+0x120>
 800bfb4:	f8cc 8004 	str.w	r8, [ip, #4]
 800bfb8:	9b01      	ldr	r3, [sp, #4]
 800bfba:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800bfbe:	3204      	adds	r2, #4
 800bfc0:	f1ba 0f00 	cmp.w	sl, #0
 800bfc4:	d020      	beq.n	800c008 <__multiply+0x11c>
 800bfc6:	682b      	ldr	r3, [r5, #0]
 800bfc8:	4689      	mov	r9, r1
 800bfca:	46a8      	mov	r8, r5
 800bfcc:	f04f 0b00 	mov.w	fp, #0
 800bfd0:	f8b9 c000 	ldrh.w	ip, [r9]
 800bfd4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800bfd8:	fb0a 440c 	mla	r4, sl, ip, r4
 800bfdc:	445c      	add	r4, fp
 800bfde:	46c4      	mov	ip, r8
 800bfe0:	b29b      	uxth	r3, r3
 800bfe2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bfe6:	f84c 3b04 	str.w	r3, [ip], #4
 800bfea:	f859 3b04 	ldr.w	r3, [r9], #4
 800bfee:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800bff2:	0c1b      	lsrs	r3, r3, #16
 800bff4:	fb0a b303 	mla	r3, sl, r3, fp
 800bff8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800bffc:	454f      	cmp	r7, r9
 800bffe:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c002:	d805      	bhi.n	800c010 <__multiply+0x124>
 800c004:	f8c8 3004 	str.w	r3, [r8, #4]
 800c008:	3504      	adds	r5, #4
 800c00a:	e79b      	b.n	800bf44 <__multiply+0x58>
 800c00c:	46d4      	mov	ip, sl
 800c00e:	e7b3      	b.n	800bf78 <__multiply+0x8c>
 800c010:	46e0      	mov	r8, ip
 800c012:	e7dd      	b.n	800bfd0 <__multiply+0xe4>
 800c014:	3e01      	subs	r6, #1
 800c016:	e799      	b.n	800bf4c <__multiply+0x60>

0800c018 <__pow5mult>:
 800c018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c01c:	4615      	mov	r5, r2
 800c01e:	f012 0203 	ands.w	r2, r2, #3
 800c022:	4606      	mov	r6, r0
 800c024:	460f      	mov	r7, r1
 800c026:	d007      	beq.n	800c038 <__pow5mult+0x20>
 800c028:	3a01      	subs	r2, #1
 800c02a:	4c21      	ldr	r4, [pc, #132]	; (800c0b0 <__pow5mult+0x98>)
 800c02c:	2300      	movs	r3, #0
 800c02e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c032:	f7ff fe8b 	bl	800bd4c <__multadd>
 800c036:	4607      	mov	r7, r0
 800c038:	10ad      	asrs	r5, r5, #2
 800c03a:	d035      	beq.n	800c0a8 <__pow5mult+0x90>
 800c03c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c03e:	b93c      	cbnz	r4, 800c050 <__pow5mult+0x38>
 800c040:	2010      	movs	r0, #16
 800c042:	f7ff fe13 	bl	800bc6c <malloc>
 800c046:	6270      	str	r0, [r6, #36]	; 0x24
 800c048:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c04c:	6004      	str	r4, [r0, #0]
 800c04e:	60c4      	str	r4, [r0, #12]
 800c050:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c054:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c058:	b94c      	cbnz	r4, 800c06e <__pow5mult+0x56>
 800c05a:	f240 2171 	movw	r1, #625	; 0x271
 800c05e:	4630      	mov	r0, r6
 800c060:	f7ff ff3b 	bl	800beda <__i2b>
 800c064:	2300      	movs	r3, #0
 800c066:	f8c8 0008 	str.w	r0, [r8, #8]
 800c06a:	4604      	mov	r4, r0
 800c06c:	6003      	str	r3, [r0, #0]
 800c06e:	f04f 0800 	mov.w	r8, #0
 800c072:	07eb      	lsls	r3, r5, #31
 800c074:	d50a      	bpl.n	800c08c <__pow5mult+0x74>
 800c076:	4639      	mov	r1, r7
 800c078:	4622      	mov	r2, r4
 800c07a:	4630      	mov	r0, r6
 800c07c:	f7ff ff36 	bl	800beec <__multiply>
 800c080:	4639      	mov	r1, r7
 800c082:	4681      	mov	r9, r0
 800c084:	4630      	mov	r0, r6
 800c086:	f7ff fe4a 	bl	800bd1e <_Bfree>
 800c08a:	464f      	mov	r7, r9
 800c08c:	106d      	asrs	r5, r5, #1
 800c08e:	d00b      	beq.n	800c0a8 <__pow5mult+0x90>
 800c090:	6820      	ldr	r0, [r4, #0]
 800c092:	b938      	cbnz	r0, 800c0a4 <__pow5mult+0x8c>
 800c094:	4622      	mov	r2, r4
 800c096:	4621      	mov	r1, r4
 800c098:	4630      	mov	r0, r6
 800c09a:	f7ff ff27 	bl	800beec <__multiply>
 800c09e:	6020      	str	r0, [r4, #0]
 800c0a0:	f8c0 8000 	str.w	r8, [r0]
 800c0a4:	4604      	mov	r4, r0
 800c0a6:	e7e4      	b.n	800c072 <__pow5mult+0x5a>
 800c0a8:	4638      	mov	r0, r7
 800c0aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ae:	bf00      	nop
 800c0b0:	0800d3c8 	.word	0x0800d3c8

0800c0b4 <__lshift>:
 800c0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0b8:	460c      	mov	r4, r1
 800c0ba:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c0be:	6923      	ldr	r3, [r4, #16]
 800c0c0:	6849      	ldr	r1, [r1, #4]
 800c0c2:	eb0a 0903 	add.w	r9, sl, r3
 800c0c6:	68a3      	ldr	r3, [r4, #8]
 800c0c8:	4607      	mov	r7, r0
 800c0ca:	4616      	mov	r6, r2
 800c0cc:	f109 0501 	add.w	r5, r9, #1
 800c0d0:	42ab      	cmp	r3, r5
 800c0d2:	db32      	blt.n	800c13a <__lshift+0x86>
 800c0d4:	4638      	mov	r0, r7
 800c0d6:	f7ff fdee 	bl	800bcb6 <_Balloc>
 800c0da:	2300      	movs	r3, #0
 800c0dc:	4680      	mov	r8, r0
 800c0de:	f100 0114 	add.w	r1, r0, #20
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	4553      	cmp	r3, sl
 800c0e6:	db2b      	blt.n	800c140 <__lshift+0x8c>
 800c0e8:	6920      	ldr	r0, [r4, #16]
 800c0ea:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c0ee:	f104 0314 	add.w	r3, r4, #20
 800c0f2:	f016 021f 	ands.w	r2, r6, #31
 800c0f6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c0fa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c0fe:	d025      	beq.n	800c14c <__lshift+0x98>
 800c100:	f1c2 0e20 	rsb	lr, r2, #32
 800c104:	2000      	movs	r0, #0
 800c106:	681e      	ldr	r6, [r3, #0]
 800c108:	468a      	mov	sl, r1
 800c10a:	4096      	lsls	r6, r2
 800c10c:	4330      	orrs	r0, r6
 800c10e:	f84a 0b04 	str.w	r0, [sl], #4
 800c112:	f853 0b04 	ldr.w	r0, [r3], #4
 800c116:	459c      	cmp	ip, r3
 800c118:	fa20 f00e 	lsr.w	r0, r0, lr
 800c11c:	d814      	bhi.n	800c148 <__lshift+0x94>
 800c11e:	6048      	str	r0, [r1, #4]
 800c120:	b108      	cbz	r0, 800c126 <__lshift+0x72>
 800c122:	f109 0502 	add.w	r5, r9, #2
 800c126:	3d01      	subs	r5, #1
 800c128:	4638      	mov	r0, r7
 800c12a:	f8c8 5010 	str.w	r5, [r8, #16]
 800c12e:	4621      	mov	r1, r4
 800c130:	f7ff fdf5 	bl	800bd1e <_Bfree>
 800c134:	4640      	mov	r0, r8
 800c136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c13a:	3101      	adds	r1, #1
 800c13c:	005b      	lsls	r3, r3, #1
 800c13e:	e7c7      	b.n	800c0d0 <__lshift+0x1c>
 800c140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c144:	3301      	adds	r3, #1
 800c146:	e7cd      	b.n	800c0e4 <__lshift+0x30>
 800c148:	4651      	mov	r1, sl
 800c14a:	e7dc      	b.n	800c106 <__lshift+0x52>
 800c14c:	3904      	subs	r1, #4
 800c14e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c152:	f841 2f04 	str.w	r2, [r1, #4]!
 800c156:	459c      	cmp	ip, r3
 800c158:	d8f9      	bhi.n	800c14e <__lshift+0x9a>
 800c15a:	e7e4      	b.n	800c126 <__lshift+0x72>

0800c15c <__mcmp>:
 800c15c:	6903      	ldr	r3, [r0, #16]
 800c15e:	690a      	ldr	r2, [r1, #16]
 800c160:	1a9b      	subs	r3, r3, r2
 800c162:	b530      	push	{r4, r5, lr}
 800c164:	d10c      	bne.n	800c180 <__mcmp+0x24>
 800c166:	0092      	lsls	r2, r2, #2
 800c168:	3014      	adds	r0, #20
 800c16a:	3114      	adds	r1, #20
 800c16c:	1884      	adds	r4, r0, r2
 800c16e:	4411      	add	r1, r2
 800c170:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c174:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c178:	4295      	cmp	r5, r2
 800c17a:	d003      	beq.n	800c184 <__mcmp+0x28>
 800c17c:	d305      	bcc.n	800c18a <__mcmp+0x2e>
 800c17e:	2301      	movs	r3, #1
 800c180:	4618      	mov	r0, r3
 800c182:	bd30      	pop	{r4, r5, pc}
 800c184:	42a0      	cmp	r0, r4
 800c186:	d3f3      	bcc.n	800c170 <__mcmp+0x14>
 800c188:	e7fa      	b.n	800c180 <__mcmp+0x24>
 800c18a:	f04f 33ff 	mov.w	r3, #4294967295
 800c18e:	e7f7      	b.n	800c180 <__mcmp+0x24>

0800c190 <__mdiff>:
 800c190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c194:	460d      	mov	r5, r1
 800c196:	4607      	mov	r7, r0
 800c198:	4611      	mov	r1, r2
 800c19a:	4628      	mov	r0, r5
 800c19c:	4614      	mov	r4, r2
 800c19e:	f7ff ffdd 	bl	800c15c <__mcmp>
 800c1a2:	1e06      	subs	r6, r0, #0
 800c1a4:	d108      	bne.n	800c1b8 <__mdiff+0x28>
 800c1a6:	4631      	mov	r1, r6
 800c1a8:	4638      	mov	r0, r7
 800c1aa:	f7ff fd84 	bl	800bcb6 <_Balloc>
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1b8:	bfa4      	itt	ge
 800c1ba:	4623      	movge	r3, r4
 800c1bc:	462c      	movge	r4, r5
 800c1be:	4638      	mov	r0, r7
 800c1c0:	6861      	ldr	r1, [r4, #4]
 800c1c2:	bfa6      	itte	ge
 800c1c4:	461d      	movge	r5, r3
 800c1c6:	2600      	movge	r6, #0
 800c1c8:	2601      	movlt	r6, #1
 800c1ca:	f7ff fd74 	bl	800bcb6 <_Balloc>
 800c1ce:	692b      	ldr	r3, [r5, #16]
 800c1d0:	60c6      	str	r6, [r0, #12]
 800c1d2:	6926      	ldr	r6, [r4, #16]
 800c1d4:	f105 0914 	add.w	r9, r5, #20
 800c1d8:	f104 0214 	add.w	r2, r4, #20
 800c1dc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c1e0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c1e4:	f100 0514 	add.w	r5, r0, #20
 800c1e8:	f04f 0e00 	mov.w	lr, #0
 800c1ec:	f852 ab04 	ldr.w	sl, [r2], #4
 800c1f0:	f859 4b04 	ldr.w	r4, [r9], #4
 800c1f4:	fa1e f18a 	uxtah	r1, lr, sl
 800c1f8:	b2a3      	uxth	r3, r4
 800c1fa:	1ac9      	subs	r1, r1, r3
 800c1fc:	0c23      	lsrs	r3, r4, #16
 800c1fe:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c202:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c206:	b289      	uxth	r1, r1
 800c208:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c20c:	45c8      	cmp	r8, r9
 800c20e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c212:	4694      	mov	ip, r2
 800c214:	f845 3b04 	str.w	r3, [r5], #4
 800c218:	d8e8      	bhi.n	800c1ec <__mdiff+0x5c>
 800c21a:	45bc      	cmp	ip, r7
 800c21c:	d304      	bcc.n	800c228 <__mdiff+0x98>
 800c21e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c222:	b183      	cbz	r3, 800c246 <__mdiff+0xb6>
 800c224:	6106      	str	r6, [r0, #16]
 800c226:	e7c5      	b.n	800c1b4 <__mdiff+0x24>
 800c228:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c22c:	fa1e f381 	uxtah	r3, lr, r1
 800c230:	141a      	asrs	r2, r3, #16
 800c232:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c236:	b29b      	uxth	r3, r3
 800c238:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c23c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c240:	f845 3b04 	str.w	r3, [r5], #4
 800c244:	e7e9      	b.n	800c21a <__mdiff+0x8a>
 800c246:	3e01      	subs	r6, #1
 800c248:	e7e9      	b.n	800c21e <__mdiff+0x8e>
	...

0800c24c <__ulp>:
 800c24c:	4b12      	ldr	r3, [pc, #72]	; (800c298 <__ulp+0x4c>)
 800c24e:	ee10 2a90 	vmov	r2, s1
 800c252:	401a      	ands	r2, r3
 800c254:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800c258:	2b00      	cmp	r3, #0
 800c25a:	dd04      	ble.n	800c266 <__ulp+0x1a>
 800c25c:	2000      	movs	r0, #0
 800c25e:	4619      	mov	r1, r3
 800c260:	ec41 0b10 	vmov	d0, r0, r1
 800c264:	4770      	bx	lr
 800c266:	425b      	negs	r3, r3
 800c268:	151b      	asrs	r3, r3, #20
 800c26a:	2b13      	cmp	r3, #19
 800c26c:	f04f 0000 	mov.w	r0, #0
 800c270:	f04f 0100 	mov.w	r1, #0
 800c274:	dc04      	bgt.n	800c280 <__ulp+0x34>
 800c276:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c27a:	fa42 f103 	asr.w	r1, r2, r3
 800c27e:	e7ef      	b.n	800c260 <__ulp+0x14>
 800c280:	3b14      	subs	r3, #20
 800c282:	2b1e      	cmp	r3, #30
 800c284:	f04f 0201 	mov.w	r2, #1
 800c288:	bfda      	itte	le
 800c28a:	f1c3 031f 	rsble	r3, r3, #31
 800c28e:	fa02 f303 	lslle.w	r3, r2, r3
 800c292:	4613      	movgt	r3, r2
 800c294:	4618      	mov	r0, r3
 800c296:	e7e3      	b.n	800c260 <__ulp+0x14>
 800c298:	7ff00000 	.word	0x7ff00000

0800c29c <__b2d>:
 800c29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c29e:	6905      	ldr	r5, [r0, #16]
 800c2a0:	f100 0714 	add.w	r7, r0, #20
 800c2a4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c2a8:	1f2e      	subs	r6, r5, #4
 800c2aa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	f7ff fdc5 	bl	800be3e <__hi0bits>
 800c2b4:	f1c0 0320 	rsb	r3, r0, #32
 800c2b8:	280a      	cmp	r0, #10
 800c2ba:	600b      	str	r3, [r1, #0]
 800c2bc:	f8df c074 	ldr.w	ip, [pc, #116]	; 800c334 <__b2d+0x98>
 800c2c0:	dc14      	bgt.n	800c2ec <__b2d+0x50>
 800c2c2:	f1c0 0e0b 	rsb	lr, r0, #11
 800c2c6:	fa24 f10e 	lsr.w	r1, r4, lr
 800c2ca:	42b7      	cmp	r7, r6
 800c2cc:	ea41 030c 	orr.w	r3, r1, ip
 800c2d0:	bf34      	ite	cc
 800c2d2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c2d6:	2100      	movcs	r1, #0
 800c2d8:	3015      	adds	r0, #21
 800c2da:	fa04 f000 	lsl.w	r0, r4, r0
 800c2de:	fa21 f10e 	lsr.w	r1, r1, lr
 800c2e2:	ea40 0201 	orr.w	r2, r0, r1
 800c2e6:	ec43 2b10 	vmov	d0, r2, r3
 800c2ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2ec:	42b7      	cmp	r7, r6
 800c2ee:	bf3a      	itte	cc
 800c2f0:	f1a5 0608 	subcc.w	r6, r5, #8
 800c2f4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c2f8:	2100      	movcs	r1, #0
 800c2fa:	380b      	subs	r0, #11
 800c2fc:	d015      	beq.n	800c32a <__b2d+0x8e>
 800c2fe:	4084      	lsls	r4, r0
 800c300:	f1c0 0520 	rsb	r5, r0, #32
 800c304:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800c308:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800c30c:	42be      	cmp	r6, r7
 800c30e:	fa21 fc05 	lsr.w	ip, r1, r5
 800c312:	ea44 030c 	orr.w	r3, r4, ip
 800c316:	bf8c      	ite	hi
 800c318:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c31c:	2400      	movls	r4, #0
 800c31e:	fa01 f000 	lsl.w	r0, r1, r0
 800c322:	40ec      	lsrs	r4, r5
 800c324:	ea40 0204 	orr.w	r2, r0, r4
 800c328:	e7dd      	b.n	800c2e6 <__b2d+0x4a>
 800c32a:	ea44 030c 	orr.w	r3, r4, ip
 800c32e:	460a      	mov	r2, r1
 800c330:	e7d9      	b.n	800c2e6 <__b2d+0x4a>
 800c332:	bf00      	nop
 800c334:	3ff00000 	.word	0x3ff00000

0800c338 <__d2b>:
 800c338:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c33c:	460e      	mov	r6, r1
 800c33e:	2101      	movs	r1, #1
 800c340:	ec59 8b10 	vmov	r8, r9, d0
 800c344:	4615      	mov	r5, r2
 800c346:	f7ff fcb6 	bl	800bcb6 <_Balloc>
 800c34a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c34e:	4607      	mov	r7, r0
 800c350:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c354:	bb34      	cbnz	r4, 800c3a4 <__d2b+0x6c>
 800c356:	9301      	str	r3, [sp, #4]
 800c358:	f1b8 0300 	subs.w	r3, r8, #0
 800c35c:	d027      	beq.n	800c3ae <__d2b+0x76>
 800c35e:	a802      	add	r0, sp, #8
 800c360:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c364:	f7ff fd8a 	bl	800be7c <__lo0bits>
 800c368:	9900      	ldr	r1, [sp, #0]
 800c36a:	b1f0      	cbz	r0, 800c3aa <__d2b+0x72>
 800c36c:	9a01      	ldr	r2, [sp, #4]
 800c36e:	f1c0 0320 	rsb	r3, r0, #32
 800c372:	fa02 f303 	lsl.w	r3, r2, r3
 800c376:	430b      	orrs	r3, r1
 800c378:	40c2      	lsrs	r2, r0
 800c37a:	617b      	str	r3, [r7, #20]
 800c37c:	9201      	str	r2, [sp, #4]
 800c37e:	9b01      	ldr	r3, [sp, #4]
 800c380:	61bb      	str	r3, [r7, #24]
 800c382:	2b00      	cmp	r3, #0
 800c384:	bf14      	ite	ne
 800c386:	2102      	movne	r1, #2
 800c388:	2101      	moveq	r1, #1
 800c38a:	6139      	str	r1, [r7, #16]
 800c38c:	b1c4      	cbz	r4, 800c3c0 <__d2b+0x88>
 800c38e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c392:	4404      	add	r4, r0
 800c394:	6034      	str	r4, [r6, #0]
 800c396:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c39a:	6028      	str	r0, [r5, #0]
 800c39c:	4638      	mov	r0, r7
 800c39e:	b003      	add	sp, #12
 800c3a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c3a8:	e7d5      	b.n	800c356 <__d2b+0x1e>
 800c3aa:	6179      	str	r1, [r7, #20]
 800c3ac:	e7e7      	b.n	800c37e <__d2b+0x46>
 800c3ae:	a801      	add	r0, sp, #4
 800c3b0:	f7ff fd64 	bl	800be7c <__lo0bits>
 800c3b4:	9b01      	ldr	r3, [sp, #4]
 800c3b6:	617b      	str	r3, [r7, #20]
 800c3b8:	2101      	movs	r1, #1
 800c3ba:	6139      	str	r1, [r7, #16]
 800c3bc:	3020      	adds	r0, #32
 800c3be:	e7e5      	b.n	800c38c <__d2b+0x54>
 800c3c0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c3c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c3c8:	6030      	str	r0, [r6, #0]
 800c3ca:	6918      	ldr	r0, [r3, #16]
 800c3cc:	f7ff fd37 	bl	800be3e <__hi0bits>
 800c3d0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c3d4:	e7e1      	b.n	800c39a <__d2b+0x62>

0800c3d6 <__ratio>:
 800c3d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3da:	4688      	mov	r8, r1
 800c3dc:	4669      	mov	r1, sp
 800c3de:	4681      	mov	r9, r0
 800c3e0:	f7ff ff5c 	bl	800c29c <__b2d>
 800c3e4:	a901      	add	r1, sp, #4
 800c3e6:	4640      	mov	r0, r8
 800c3e8:	ec57 6b10 	vmov	r6, r7, d0
 800c3ec:	f7ff ff56 	bl	800c29c <__b2d>
 800c3f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c3f4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c3f8:	eba3 0c02 	sub.w	ip, r3, r2
 800c3fc:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c400:	1a9b      	subs	r3, r3, r2
 800c402:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c406:	ec5b ab10 	vmov	sl, fp, d0
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	bfce      	itee	gt
 800c40e:	463a      	movgt	r2, r7
 800c410:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c414:	465a      	movle	r2, fp
 800c416:	4659      	mov	r1, fp
 800c418:	463d      	mov	r5, r7
 800c41a:	bfd4      	ite	le
 800c41c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800c420:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800c424:	4630      	mov	r0, r6
 800c426:	ee10 2a10 	vmov	r2, s0
 800c42a:	460b      	mov	r3, r1
 800c42c:	4629      	mov	r1, r5
 800c42e:	f7f4 fa1d 	bl	800086c <__aeabi_ddiv>
 800c432:	ec41 0b10 	vmov	d0, r0, r1
 800c436:	b003      	add	sp, #12
 800c438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c43c <__copybits>:
 800c43c:	3901      	subs	r1, #1
 800c43e:	b510      	push	{r4, lr}
 800c440:	1149      	asrs	r1, r1, #5
 800c442:	6914      	ldr	r4, [r2, #16]
 800c444:	3101      	adds	r1, #1
 800c446:	f102 0314 	add.w	r3, r2, #20
 800c44a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c44e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c452:	42a3      	cmp	r3, r4
 800c454:	4602      	mov	r2, r0
 800c456:	d303      	bcc.n	800c460 <__copybits+0x24>
 800c458:	2300      	movs	r3, #0
 800c45a:	428a      	cmp	r2, r1
 800c45c:	d305      	bcc.n	800c46a <__copybits+0x2e>
 800c45e:	bd10      	pop	{r4, pc}
 800c460:	f853 2b04 	ldr.w	r2, [r3], #4
 800c464:	f840 2b04 	str.w	r2, [r0], #4
 800c468:	e7f3      	b.n	800c452 <__copybits+0x16>
 800c46a:	f842 3b04 	str.w	r3, [r2], #4
 800c46e:	e7f4      	b.n	800c45a <__copybits+0x1e>

0800c470 <__any_on>:
 800c470:	f100 0214 	add.w	r2, r0, #20
 800c474:	6900      	ldr	r0, [r0, #16]
 800c476:	114b      	asrs	r3, r1, #5
 800c478:	4298      	cmp	r0, r3
 800c47a:	b510      	push	{r4, lr}
 800c47c:	db11      	blt.n	800c4a2 <__any_on+0x32>
 800c47e:	dd0a      	ble.n	800c496 <__any_on+0x26>
 800c480:	f011 011f 	ands.w	r1, r1, #31
 800c484:	d007      	beq.n	800c496 <__any_on+0x26>
 800c486:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c48a:	fa24 f001 	lsr.w	r0, r4, r1
 800c48e:	fa00 f101 	lsl.w	r1, r0, r1
 800c492:	428c      	cmp	r4, r1
 800c494:	d10b      	bne.n	800c4ae <__any_on+0x3e>
 800c496:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d803      	bhi.n	800c4a6 <__any_on+0x36>
 800c49e:	2000      	movs	r0, #0
 800c4a0:	bd10      	pop	{r4, pc}
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	e7f7      	b.n	800c496 <__any_on+0x26>
 800c4a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c4aa:	2900      	cmp	r1, #0
 800c4ac:	d0f5      	beq.n	800c49a <__any_on+0x2a>
 800c4ae:	2001      	movs	r0, #1
 800c4b0:	e7f6      	b.n	800c4a0 <__any_on+0x30>

0800c4b2 <_calloc_r>:
 800c4b2:	b538      	push	{r3, r4, r5, lr}
 800c4b4:	fb02 f401 	mul.w	r4, r2, r1
 800c4b8:	4621      	mov	r1, r4
 800c4ba:	f000 f857 	bl	800c56c <_malloc_r>
 800c4be:	4605      	mov	r5, r0
 800c4c0:	b118      	cbz	r0, 800c4ca <_calloc_r+0x18>
 800c4c2:	4622      	mov	r2, r4
 800c4c4:	2100      	movs	r1, #0
 800c4c6:	f7fc fd03 	bl	8008ed0 <memset>
 800c4ca:	4628      	mov	r0, r5
 800c4cc:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c4d0 <_free_r>:
 800c4d0:	b538      	push	{r3, r4, r5, lr}
 800c4d2:	4605      	mov	r5, r0
 800c4d4:	2900      	cmp	r1, #0
 800c4d6:	d045      	beq.n	800c564 <_free_r+0x94>
 800c4d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4dc:	1f0c      	subs	r4, r1, #4
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	bfb8      	it	lt
 800c4e2:	18e4      	addlt	r4, r4, r3
 800c4e4:	f000 fa36 	bl	800c954 <__malloc_lock>
 800c4e8:	4a1f      	ldr	r2, [pc, #124]	; (800c568 <_free_r+0x98>)
 800c4ea:	6813      	ldr	r3, [r2, #0]
 800c4ec:	4610      	mov	r0, r2
 800c4ee:	b933      	cbnz	r3, 800c4fe <_free_r+0x2e>
 800c4f0:	6063      	str	r3, [r4, #4]
 800c4f2:	6014      	str	r4, [r2, #0]
 800c4f4:	4628      	mov	r0, r5
 800c4f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4fa:	f000 ba2c 	b.w	800c956 <__malloc_unlock>
 800c4fe:	42a3      	cmp	r3, r4
 800c500:	d90c      	bls.n	800c51c <_free_r+0x4c>
 800c502:	6821      	ldr	r1, [r4, #0]
 800c504:	1862      	adds	r2, r4, r1
 800c506:	4293      	cmp	r3, r2
 800c508:	bf04      	itt	eq
 800c50a:	681a      	ldreq	r2, [r3, #0]
 800c50c:	685b      	ldreq	r3, [r3, #4]
 800c50e:	6063      	str	r3, [r4, #4]
 800c510:	bf04      	itt	eq
 800c512:	1852      	addeq	r2, r2, r1
 800c514:	6022      	streq	r2, [r4, #0]
 800c516:	6004      	str	r4, [r0, #0]
 800c518:	e7ec      	b.n	800c4f4 <_free_r+0x24>
 800c51a:	4613      	mov	r3, r2
 800c51c:	685a      	ldr	r2, [r3, #4]
 800c51e:	b10a      	cbz	r2, 800c524 <_free_r+0x54>
 800c520:	42a2      	cmp	r2, r4
 800c522:	d9fa      	bls.n	800c51a <_free_r+0x4a>
 800c524:	6819      	ldr	r1, [r3, #0]
 800c526:	1858      	adds	r0, r3, r1
 800c528:	42a0      	cmp	r0, r4
 800c52a:	d10b      	bne.n	800c544 <_free_r+0x74>
 800c52c:	6820      	ldr	r0, [r4, #0]
 800c52e:	4401      	add	r1, r0
 800c530:	1858      	adds	r0, r3, r1
 800c532:	4282      	cmp	r2, r0
 800c534:	6019      	str	r1, [r3, #0]
 800c536:	d1dd      	bne.n	800c4f4 <_free_r+0x24>
 800c538:	6810      	ldr	r0, [r2, #0]
 800c53a:	6852      	ldr	r2, [r2, #4]
 800c53c:	605a      	str	r2, [r3, #4]
 800c53e:	4401      	add	r1, r0
 800c540:	6019      	str	r1, [r3, #0]
 800c542:	e7d7      	b.n	800c4f4 <_free_r+0x24>
 800c544:	d902      	bls.n	800c54c <_free_r+0x7c>
 800c546:	230c      	movs	r3, #12
 800c548:	602b      	str	r3, [r5, #0]
 800c54a:	e7d3      	b.n	800c4f4 <_free_r+0x24>
 800c54c:	6820      	ldr	r0, [r4, #0]
 800c54e:	1821      	adds	r1, r4, r0
 800c550:	428a      	cmp	r2, r1
 800c552:	bf04      	itt	eq
 800c554:	6811      	ldreq	r1, [r2, #0]
 800c556:	6852      	ldreq	r2, [r2, #4]
 800c558:	6062      	str	r2, [r4, #4]
 800c55a:	bf04      	itt	eq
 800c55c:	1809      	addeq	r1, r1, r0
 800c55e:	6021      	streq	r1, [r4, #0]
 800c560:	605c      	str	r4, [r3, #4]
 800c562:	e7c7      	b.n	800c4f4 <_free_r+0x24>
 800c564:	bd38      	pop	{r3, r4, r5, pc}
 800c566:	bf00      	nop
 800c568:	200006cc 	.word	0x200006cc

0800c56c <_malloc_r>:
 800c56c:	b570      	push	{r4, r5, r6, lr}
 800c56e:	1ccd      	adds	r5, r1, #3
 800c570:	f025 0503 	bic.w	r5, r5, #3
 800c574:	3508      	adds	r5, #8
 800c576:	2d0c      	cmp	r5, #12
 800c578:	bf38      	it	cc
 800c57a:	250c      	movcc	r5, #12
 800c57c:	2d00      	cmp	r5, #0
 800c57e:	4606      	mov	r6, r0
 800c580:	db01      	blt.n	800c586 <_malloc_r+0x1a>
 800c582:	42a9      	cmp	r1, r5
 800c584:	d903      	bls.n	800c58e <_malloc_r+0x22>
 800c586:	230c      	movs	r3, #12
 800c588:	6033      	str	r3, [r6, #0]
 800c58a:	2000      	movs	r0, #0
 800c58c:	bd70      	pop	{r4, r5, r6, pc}
 800c58e:	f000 f9e1 	bl	800c954 <__malloc_lock>
 800c592:	4a21      	ldr	r2, [pc, #132]	; (800c618 <_malloc_r+0xac>)
 800c594:	6814      	ldr	r4, [r2, #0]
 800c596:	4621      	mov	r1, r4
 800c598:	b991      	cbnz	r1, 800c5c0 <_malloc_r+0x54>
 800c59a:	4c20      	ldr	r4, [pc, #128]	; (800c61c <_malloc_r+0xb0>)
 800c59c:	6823      	ldr	r3, [r4, #0]
 800c59e:	b91b      	cbnz	r3, 800c5a8 <_malloc_r+0x3c>
 800c5a0:	4630      	mov	r0, r6
 800c5a2:	f000 f98f 	bl	800c8c4 <_sbrk_r>
 800c5a6:	6020      	str	r0, [r4, #0]
 800c5a8:	4629      	mov	r1, r5
 800c5aa:	4630      	mov	r0, r6
 800c5ac:	f000 f98a 	bl	800c8c4 <_sbrk_r>
 800c5b0:	1c43      	adds	r3, r0, #1
 800c5b2:	d124      	bne.n	800c5fe <_malloc_r+0x92>
 800c5b4:	230c      	movs	r3, #12
 800c5b6:	6033      	str	r3, [r6, #0]
 800c5b8:	4630      	mov	r0, r6
 800c5ba:	f000 f9cc 	bl	800c956 <__malloc_unlock>
 800c5be:	e7e4      	b.n	800c58a <_malloc_r+0x1e>
 800c5c0:	680b      	ldr	r3, [r1, #0]
 800c5c2:	1b5b      	subs	r3, r3, r5
 800c5c4:	d418      	bmi.n	800c5f8 <_malloc_r+0x8c>
 800c5c6:	2b0b      	cmp	r3, #11
 800c5c8:	d90f      	bls.n	800c5ea <_malloc_r+0x7e>
 800c5ca:	600b      	str	r3, [r1, #0]
 800c5cc:	50cd      	str	r5, [r1, r3]
 800c5ce:	18cc      	adds	r4, r1, r3
 800c5d0:	4630      	mov	r0, r6
 800c5d2:	f000 f9c0 	bl	800c956 <__malloc_unlock>
 800c5d6:	f104 000b 	add.w	r0, r4, #11
 800c5da:	1d23      	adds	r3, r4, #4
 800c5dc:	f020 0007 	bic.w	r0, r0, #7
 800c5e0:	1ac3      	subs	r3, r0, r3
 800c5e2:	d0d3      	beq.n	800c58c <_malloc_r+0x20>
 800c5e4:	425a      	negs	r2, r3
 800c5e6:	50e2      	str	r2, [r4, r3]
 800c5e8:	e7d0      	b.n	800c58c <_malloc_r+0x20>
 800c5ea:	428c      	cmp	r4, r1
 800c5ec:	684b      	ldr	r3, [r1, #4]
 800c5ee:	bf16      	itet	ne
 800c5f0:	6063      	strne	r3, [r4, #4]
 800c5f2:	6013      	streq	r3, [r2, #0]
 800c5f4:	460c      	movne	r4, r1
 800c5f6:	e7eb      	b.n	800c5d0 <_malloc_r+0x64>
 800c5f8:	460c      	mov	r4, r1
 800c5fa:	6849      	ldr	r1, [r1, #4]
 800c5fc:	e7cc      	b.n	800c598 <_malloc_r+0x2c>
 800c5fe:	1cc4      	adds	r4, r0, #3
 800c600:	f024 0403 	bic.w	r4, r4, #3
 800c604:	42a0      	cmp	r0, r4
 800c606:	d005      	beq.n	800c614 <_malloc_r+0xa8>
 800c608:	1a21      	subs	r1, r4, r0
 800c60a:	4630      	mov	r0, r6
 800c60c:	f000 f95a 	bl	800c8c4 <_sbrk_r>
 800c610:	3001      	adds	r0, #1
 800c612:	d0cf      	beq.n	800c5b4 <_malloc_r+0x48>
 800c614:	6025      	str	r5, [r4, #0]
 800c616:	e7db      	b.n	800c5d0 <_malloc_r+0x64>
 800c618:	200006cc 	.word	0x200006cc
 800c61c:	200006d0 	.word	0x200006d0

0800c620 <__ssputs_r>:
 800c620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c624:	688e      	ldr	r6, [r1, #8]
 800c626:	429e      	cmp	r6, r3
 800c628:	4682      	mov	sl, r0
 800c62a:	460c      	mov	r4, r1
 800c62c:	4690      	mov	r8, r2
 800c62e:	4699      	mov	r9, r3
 800c630:	d837      	bhi.n	800c6a2 <__ssputs_r+0x82>
 800c632:	898a      	ldrh	r2, [r1, #12]
 800c634:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c638:	d031      	beq.n	800c69e <__ssputs_r+0x7e>
 800c63a:	6825      	ldr	r5, [r4, #0]
 800c63c:	6909      	ldr	r1, [r1, #16]
 800c63e:	1a6f      	subs	r7, r5, r1
 800c640:	6965      	ldr	r5, [r4, #20]
 800c642:	2302      	movs	r3, #2
 800c644:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c648:	fb95 f5f3 	sdiv	r5, r5, r3
 800c64c:	f109 0301 	add.w	r3, r9, #1
 800c650:	443b      	add	r3, r7
 800c652:	429d      	cmp	r5, r3
 800c654:	bf38      	it	cc
 800c656:	461d      	movcc	r5, r3
 800c658:	0553      	lsls	r3, r2, #21
 800c65a:	d530      	bpl.n	800c6be <__ssputs_r+0x9e>
 800c65c:	4629      	mov	r1, r5
 800c65e:	f7ff ff85 	bl	800c56c <_malloc_r>
 800c662:	4606      	mov	r6, r0
 800c664:	b950      	cbnz	r0, 800c67c <__ssputs_r+0x5c>
 800c666:	230c      	movs	r3, #12
 800c668:	f8ca 3000 	str.w	r3, [sl]
 800c66c:	89a3      	ldrh	r3, [r4, #12]
 800c66e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c672:	81a3      	strh	r3, [r4, #12]
 800c674:	f04f 30ff 	mov.w	r0, #4294967295
 800c678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c67c:	463a      	mov	r2, r7
 800c67e:	6921      	ldr	r1, [r4, #16]
 800c680:	f7ff fb0e 	bl	800bca0 <memcpy>
 800c684:	89a3      	ldrh	r3, [r4, #12]
 800c686:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c68a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c68e:	81a3      	strh	r3, [r4, #12]
 800c690:	6126      	str	r6, [r4, #16]
 800c692:	6165      	str	r5, [r4, #20]
 800c694:	443e      	add	r6, r7
 800c696:	1bed      	subs	r5, r5, r7
 800c698:	6026      	str	r6, [r4, #0]
 800c69a:	60a5      	str	r5, [r4, #8]
 800c69c:	464e      	mov	r6, r9
 800c69e:	454e      	cmp	r6, r9
 800c6a0:	d900      	bls.n	800c6a4 <__ssputs_r+0x84>
 800c6a2:	464e      	mov	r6, r9
 800c6a4:	4632      	mov	r2, r6
 800c6a6:	4641      	mov	r1, r8
 800c6a8:	6820      	ldr	r0, [r4, #0]
 800c6aa:	f000 f93a 	bl	800c922 <memmove>
 800c6ae:	68a3      	ldr	r3, [r4, #8]
 800c6b0:	1b9b      	subs	r3, r3, r6
 800c6b2:	60a3      	str	r3, [r4, #8]
 800c6b4:	6823      	ldr	r3, [r4, #0]
 800c6b6:	441e      	add	r6, r3
 800c6b8:	6026      	str	r6, [r4, #0]
 800c6ba:	2000      	movs	r0, #0
 800c6bc:	e7dc      	b.n	800c678 <__ssputs_r+0x58>
 800c6be:	462a      	mov	r2, r5
 800c6c0:	f000 f94a 	bl	800c958 <_realloc_r>
 800c6c4:	4606      	mov	r6, r0
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	d1e2      	bne.n	800c690 <__ssputs_r+0x70>
 800c6ca:	6921      	ldr	r1, [r4, #16]
 800c6cc:	4650      	mov	r0, sl
 800c6ce:	f7ff feff 	bl	800c4d0 <_free_r>
 800c6d2:	e7c8      	b.n	800c666 <__ssputs_r+0x46>

0800c6d4 <_svfiprintf_r>:
 800c6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d8:	461d      	mov	r5, r3
 800c6da:	898b      	ldrh	r3, [r1, #12]
 800c6dc:	061f      	lsls	r7, r3, #24
 800c6de:	b09d      	sub	sp, #116	; 0x74
 800c6e0:	4680      	mov	r8, r0
 800c6e2:	460c      	mov	r4, r1
 800c6e4:	4616      	mov	r6, r2
 800c6e6:	d50f      	bpl.n	800c708 <_svfiprintf_r+0x34>
 800c6e8:	690b      	ldr	r3, [r1, #16]
 800c6ea:	b96b      	cbnz	r3, 800c708 <_svfiprintf_r+0x34>
 800c6ec:	2140      	movs	r1, #64	; 0x40
 800c6ee:	f7ff ff3d 	bl	800c56c <_malloc_r>
 800c6f2:	6020      	str	r0, [r4, #0]
 800c6f4:	6120      	str	r0, [r4, #16]
 800c6f6:	b928      	cbnz	r0, 800c704 <_svfiprintf_r+0x30>
 800c6f8:	230c      	movs	r3, #12
 800c6fa:	f8c8 3000 	str.w	r3, [r8]
 800c6fe:	f04f 30ff 	mov.w	r0, #4294967295
 800c702:	e0c8      	b.n	800c896 <_svfiprintf_r+0x1c2>
 800c704:	2340      	movs	r3, #64	; 0x40
 800c706:	6163      	str	r3, [r4, #20]
 800c708:	2300      	movs	r3, #0
 800c70a:	9309      	str	r3, [sp, #36]	; 0x24
 800c70c:	2320      	movs	r3, #32
 800c70e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c712:	2330      	movs	r3, #48	; 0x30
 800c714:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c718:	9503      	str	r5, [sp, #12]
 800c71a:	f04f 0b01 	mov.w	fp, #1
 800c71e:	4637      	mov	r7, r6
 800c720:	463d      	mov	r5, r7
 800c722:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c726:	b10b      	cbz	r3, 800c72c <_svfiprintf_r+0x58>
 800c728:	2b25      	cmp	r3, #37	; 0x25
 800c72a:	d13e      	bne.n	800c7aa <_svfiprintf_r+0xd6>
 800c72c:	ebb7 0a06 	subs.w	sl, r7, r6
 800c730:	d00b      	beq.n	800c74a <_svfiprintf_r+0x76>
 800c732:	4653      	mov	r3, sl
 800c734:	4632      	mov	r2, r6
 800c736:	4621      	mov	r1, r4
 800c738:	4640      	mov	r0, r8
 800c73a:	f7ff ff71 	bl	800c620 <__ssputs_r>
 800c73e:	3001      	adds	r0, #1
 800c740:	f000 80a4 	beq.w	800c88c <_svfiprintf_r+0x1b8>
 800c744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c746:	4453      	add	r3, sl
 800c748:	9309      	str	r3, [sp, #36]	; 0x24
 800c74a:	783b      	ldrb	r3, [r7, #0]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	f000 809d 	beq.w	800c88c <_svfiprintf_r+0x1b8>
 800c752:	2300      	movs	r3, #0
 800c754:	f04f 32ff 	mov.w	r2, #4294967295
 800c758:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c75c:	9304      	str	r3, [sp, #16]
 800c75e:	9307      	str	r3, [sp, #28]
 800c760:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c764:	931a      	str	r3, [sp, #104]	; 0x68
 800c766:	462f      	mov	r7, r5
 800c768:	2205      	movs	r2, #5
 800c76a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c76e:	4850      	ldr	r0, [pc, #320]	; (800c8b0 <_svfiprintf_r+0x1dc>)
 800c770:	f7f3 fd46 	bl	8000200 <memchr>
 800c774:	9b04      	ldr	r3, [sp, #16]
 800c776:	b9d0      	cbnz	r0, 800c7ae <_svfiprintf_r+0xda>
 800c778:	06d9      	lsls	r1, r3, #27
 800c77a:	bf44      	itt	mi
 800c77c:	2220      	movmi	r2, #32
 800c77e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c782:	071a      	lsls	r2, r3, #28
 800c784:	bf44      	itt	mi
 800c786:	222b      	movmi	r2, #43	; 0x2b
 800c788:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c78c:	782a      	ldrb	r2, [r5, #0]
 800c78e:	2a2a      	cmp	r2, #42	; 0x2a
 800c790:	d015      	beq.n	800c7be <_svfiprintf_r+0xea>
 800c792:	9a07      	ldr	r2, [sp, #28]
 800c794:	462f      	mov	r7, r5
 800c796:	2000      	movs	r0, #0
 800c798:	250a      	movs	r5, #10
 800c79a:	4639      	mov	r1, r7
 800c79c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7a0:	3b30      	subs	r3, #48	; 0x30
 800c7a2:	2b09      	cmp	r3, #9
 800c7a4:	d94d      	bls.n	800c842 <_svfiprintf_r+0x16e>
 800c7a6:	b1b8      	cbz	r0, 800c7d8 <_svfiprintf_r+0x104>
 800c7a8:	e00f      	b.n	800c7ca <_svfiprintf_r+0xf6>
 800c7aa:	462f      	mov	r7, r5
 800c7ac:	e7b8      	b.n	800c720 <_svfiprintf_r+0x4c>
 800c7ae:	4a40      	ldr	r2, [pc, #256]	; (800c8b0 <_svfiprintf_r+0x1dc>)
 800c7b0:	1a80      	subs	r0, r0, r2
 800c7b2:	fa0b f000 	lsl.w	r0, fp, r0
 800c7b6:	4318      	orrs	r0, r3
 800c7b8:	9004      	str	r0, [sp, #16]
 800c7ba:	463d      	mov	r5, r7
 800c7bc:	e7d3      	b.n	800c766 <_svfiprintf_r+0x92>
 800c7be:	9a03      	ldr	r2, [sp, #12]
 800c7c0:	1d11      	adds	r1, r2, #4
 800c7c2:	6812      	ldr	r2, [r2, #0]
 800c7c4:	9103      	str	r1, [sp, #12]
 800c7c6:	2a00      	cmp	r2, #0
 800c7c8:	db01      	blt.n	800c7ce <_svfiprintf_r+0xfa>
 800c7ca:	9207      	str	r2, [sp, #28]
 800c7cc:	e004      	b.n	800c7d8 <_svfiprintf_r+0x104>
 800c7ce:	4252      	negs	r2, r2
 800c7d0:	f043 0302 	orr.w	r3, r3, #2
 800c7d4:	9207      	str	r2, [sp, #28]
 800c7d6:	9304      	str	r3, [sp, #16]
 800c7d8:	783b      	ldrb	r3, [r7, #0]
 800c7da:	2b2e      	cmp	r3, #46	; 0x2e
 800c7dc:	d10c      	bne.n	800c7f8 <_svfiprintf_r+0x124>
 800c7de:	787b      	ldrb	r3, [r7, #1]
 800c7e0:	2b2a      	cmp	r3, #42	; 0x2a
 800c7e2:	d133      	bne.n	800c84c <_svfiprintf_r+0x178>
 800c7e4:	9b03      	ldr	r3, [sp, #12]
 800c7e6:	1d1a      	adds	r2, r3, #4
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	9203      	str	r2, [sp, #12]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	bfb8      	it	lt
 800c7f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7f4:	3702      	adds	r7, #2
 800c7f6:	9305      	str	r3, [sp, #20]
 800c7f8:	4d2e      	ldr	r5, [pc, #184]	; (800c8b4 <_svfiprintf_r+0x1e0>)
 800c7fa:	7839      	ldrb	r1, [r7, #0]
 800c7fc:	2203      	movs	r2, #3
 800c7fe:	4628      	mov	r0, r5
 800c800:	f7f3 fcfe 	bl	8000200 <memchr>
 800c804:	b138      	cbz	r0, 800c816 <_svfiprintf_r+0x142>
 800c806:	2340      	movs	r3, #64	; 0x40
 800c808:	1b40      	subs	r0, r0, r5
 800c80a:	fa03 f000 	lsl.w	r0, r3, r0
 800c80e:	9b04      	ldr	r3, [sp, #16]
 800c810:	4303      	orrs	r3, r0
 800c812:	3701      	adds	r7, #1
 800c814:	9304      	str	r3, [sp, #16]
 800c816:	7839      	ldrb	r1, [r7, #0]
 800c818:	4827      	ldr	r0, [pc, #156]	; (800c8b8 <_svfiprintf_r+0x1e4>)
 800c81a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c81e:	2206      	movs	r2, #6
 800c820:	1c7e      	adds	r6, r7, #1
 800c822:	f7f3 fced 	bl	8000200 <memchr>
 800c826:	2800      	cmp	r0, #0
 800c828:	d038      	beq.n	800c89c <_svfiprintf_r+0x1c8>
 800c82a:	4b24      	ldr	r3, [pc, #144]	; (800c8bc <_svfiprintf_r+0x1e8>)
 800c82c:	bb13      	cbnz	r3, 800c874 <_svfiprintf_r+0x1a0>
 800c82e:	9b03      	ldr	r3, [sp, #12]
 800c830:	3307      	adds	r3, #7
 800c832:	f023 0307 	bic.w	r3, r3, #7
 800c836:	3308      	adds	r3, #8
 800c838:	9303      	str	r3, [sp, #12]
 800c83a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c83c:	444b      	add	r3, r9
 800c83e:	9309      	str	r3, [sp, #36]	; 0x24
 800c840:	e76d      	b.n	800c71e <_svfiprintf_r+0x4a>
 800c842:	fb05 3202 	mla	r2, r5, r2, r3
 800c846:	2001      	movs	r0, #1
 800c848:	460f      	mov	r7, r1
 800c84a:	e7a6      	b.n	800c79a <_svfiprintf_r+0xc6>
 800c84c:	2300      	movs	r3, #0
 800c84e:	3701      	adds	r7, #1
 800c850:	9305      	str	r3, [sp, #20]
 800c852:	4619      	mov	r1, r3
 800c854:	250a      	movs	r5, #10
 800c856:	4638      	mov	r0, r7
 800c858:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c85c:	3a30      	subs	r2, #48	; 0x30
 800c85e:	2a09      	cmp	r2, #9
 800c860:	d903      	bls.n	800c86a <_svfiprintf_r+0x196>
 800c862:	2b00      	cmp	r3, #0
 800c864:	d0c8      	beq.n	800c7f8 <_svfiprintf_r+0x124>
 800c866:	9105      	str	r1, [sp, #20]
 800c868:	e7c6      	b.n	800c7f8 <_svfiprintf_r+0x124>
 800c86a:	fb05 2101 	mla	r1, r5, r1, r2
 800c86e:	2301      	movs	r3, #1
 800c870:	4607      	mov	r7, r0
 800c872:	e7f0      	b.n	800c856 <_svfiprintf_r+0x182>
 800c874:	ab03      	add	r3, sp, #12
 800c876:	9300      	str	r3, [sp, #0]
 800c878:	4622      	mov	r2, r4
 800c87a:	4b11      	ldr	r3, [pc, #68]	; (800c8c0 <_svfiprintf_r+0x1ec>)
 800c87c:	a904      	add	r1, sp, #16
 800c87e:	4640      	mov	r0, r8
 800c880:	f7fc fbc2 	bl	8009008 <_printf_float>
 800c884:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c888:	4681      	mov	r9, r0
 800c88a:	d1d6      	bne.n	800c83a <_svfiprintf_r+0x166>
 800c88c:	89a3      	ldrh	r3, [r4, #12]
 800c88e:	065b      	lsls	r3, r3, #25
 800c890:	f53f af35 	bmi.w	800c6fe <_svfiprintf_r+0x2a>
 800c894:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c896:	b01d      	add	sp, #116	; 0x74
 800c898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c89c:	ab03      	add	r3, sp, #12
 800c89e:	9300      	str	r3, [sp, #0]
 800c8a0:	4622      	mov	r2, r4
 800c8a2:	4b07      	ldr	r3, [pc, #28]	; (800c8c0 <_svfiprintf_r+0x1ec>)
 800c8a4:	a904      	add	r1, sp, #16
 800c8a6:	4640      	mov	r0, r8
 800c8a8:	f7fc fe64 	bl	8009574 <_printf_i>
 800c8ac:	e7ea      	b.n	800c884 <_svfiprintf_r+0x1b0>
 800c8ae:	bf00      	nop
 800c8b0:	0800d3d4 	.word	0x0800d3d4
 800c8b4:	0800d3da 	.word	0x0800d3da
 800c8b8:	0800d3de 	.word	0x0800d3de
 800c8bc:	08009009 	.word	0x08009009
 800c8c0:	0800c621 	.word	0x0800c621

0800c8c4 <_sbrk_r>:
 800c8c4:	b538      	push	{r3, r4, r5, lr}
 800c8c6:	4c06      	ldr	r4, [pc, #24]	; (800c8e0 <_sbrk_r+0x1c>)
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	4605      	mov	r5, r0
 800c8cc:	4608      	mov	r0, r1
 800c8ce:	6023      	str	r3, [r4, #0]
 800c8d0:	f7f4 fe56 	bl	8001580 <_sbrk>
 800c8d4:	1c43      	adds	r3, r0, #1
 800c8d6:	d102      	bne.n	800c8de <_sbrk_r+0x1a>
 800c8d8:	6823      	ldr	r3, [r4, #0]
 800c8da:	b103      	cbz	r3, 800c8de <_sbrk_r+0x1a>
 800c8dc:	602b      	str	r3, [r5, #0]
 800c8de:	bd38      	pop	{r3, r4, r5, pc}
 800c8e0:	20000b78 	.word	0x20000b78

0800c8e4 <strncmp>:
 800c8e4:	b510      	push	{r4, lr}
 800c8e6:	b16a      	cbz	r2, 800c904 <strncmp+0x20>
 800c8e8:	3901      	subs	r1, #1
 800c8ea:	1884      	adds	r4, r0, r2
 800c8ec:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c8f0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d103      	bne.n	800c900 <strncmp+0x1c>
 800c8f8:	42a0      	cmp	r0, r4
 800c8fa:	d001      	beq.n	800c900 <strncmp+0x1c>
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d1f5      	bne.n	800c8ec <strncmp+0x8>
 800c900:	1a98      	subs	r0, r3, r2
 800c902:	bd10      	pop	{r4, pc}
 800c904:	4610      	mov	r0, r2
 800c906:	e7fc      	b.n	800c902 <strncmp+0x1e>

0800c908 <__ascii_wctomb>:
 800c908:	b149      	cbz	r1, 800c91e <__ascii_wctomb+0x16>
 800c90a:	2aff      	cmp	r2, #255	; 0xff
 800c90c:	bf85      	ittet	hi
 800c90e:	238a      	movhi	r3, #138	; 0x8a
 800c910:	6003      	strhi	r3, [r0, #0]
 800c912:	700a      	strbls	r2, [r1, #0]
 800c914:	f04f 30ff 	movhi.w	r0, #4294967295
 800c918:	bf98      	it	ls
 800c91a:	2001      	movls	r0, #1
 800c91c:	4770      	bx	lr
 800c91e:	4608      	mov	r0, r1
 800c920:	4770      	bx	lr

0800c922 <memmove>:
 800c922:	4288      	cmp	r0, r1
 800c924:	b510      	push	{r4, lr}
 800c926:	eb01 0302 	add.w	r3, r1, r2
 800c92a:	d807      	bhi.n	800c93c <memmove+0x1a>
 800c92c:	1e42      	subs	r2, r0, #1
 800c92e:	4299      	cmp	r1, r3
 800c930:	d00a      	beq.n	800c948 <memmove+0x26>
 800c932:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c936:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c93a:	e7f8      	b.n	800c92e <memmove+0xc>
 800c93c:	4283      	cmp	r3, r0
 800c93e:	d9f5      	bls.n	800c92c <memmove+0xa>
 800c940:	1881      	adds	r1, r0, r2
 800c942:	1ad2      	subs	r2, r2, r3
 800c944:	42d3      	cmn	r3, r2
 800c946:	d100      	bne.n	800c94a <memmove+0x28>
 800c948:	bd10      	pop	{r4, pc}
 800c94a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c94e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c952:	e7f7      	b.n	800c944 <memmove+0x22>

0800c954 <__malloc_lock>:
 800c954:	4770      	bx	lr

0800c956 <__malloc_unlock>:
 800c956:	4770      	bx	lr

0800c958 <_realloc_r>:
 800c958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c95a:	4607      	mov	r7, r0
 800c95c:	4614      	mov	r4, r2
 800c95e:	460e      	mov	r6, r1
 800c960:	b921      	cbnz	r1, 800c96c <_realloc_r+0x14>
 800c962:	4611      	mov	r1, r2
 800c964:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c968:	f7ff be00 	b.w	800c56c <_malloc_r>
 800c96c:	b922      	cbnz	r2, 800c978 <_realloc_r+0x20>
 800c96e:	f7ff fdaf 	bl	800c4d0 <_free_r>
 800c972:	4625      	mov	r5, r4
 800c974:	4628      	mov	r0, r5
 800c976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c978:	f000 f814 	bl	800c9a4 <_malloc_usable_size_r>
 800c97c:	42a0      	cmp	r0, r4
 800c97e:	d20f      	bcs.n	800c9a0 <_realloc_r+0x48>
 800c980:	4621      	mov	r1, r4
 800c982:	4638      	mov	r0, r7
 800c984:	f7ff fdf2 	bl	800c56c <_malloc_r>
 800c988:	4605      	mov	r5, r0
 800c98a:	2800      	cmp	r0, #0
 800c98c:	d0f2      	beq.n	800c974 <_realloc_r+0x1c>
 800c98e:	4631      	mov	r1, r6
 800c990:	4622      	mov	r2, r4
 800c992:	f7ff f985 	bl	800bca0 <memcpy>
 800c996:	4631      	mov	r1, r6
 800c998:	4638      	mov	r0, r7
 800c99a:	f7ff fd99 	bl	800c4d0 <_free_r>
 800c99e:	e7e9      	b.n	800c974 <_realloc_r+0x1c>
 800c9a0:	4635      	mov	r5, r6
 800c9a2:	e7e7      	b.n	800c974 <_realloc_r+0x1c>

0800c9a4 <_malloc_usable_size_r>:
 800c9a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9a8:	1f18      	subs	r0, r3, #4
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	bfbc      	itt	lt
 800c9ae:	580b      	ldrlt	r3, [r1, r0]
 800c9b0:	18c0      	addlt	r0, r0, r3
 800c9b2:	4770      	bx	lr

0800c9b4 <_init>:
 800c9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9b6:	bf00      	nop
 800c9b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9ba:	bc08      	pop	{r3}
 800c9bc:	469e      	mov	lr, r3
 800c9be:	4770      	bx	lr

0800c9c0 <_fini>:
 800c9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9c2:	bf00      	nop
 800c9c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9c6:	bc08      	pop	{r3}
 800c9c8:	469e      	mov	lr, r3
 800c9ca:	4770      	bx	lr
