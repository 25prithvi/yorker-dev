
yorker-dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007174  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08007324  08007324  00017324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800762c  0800762c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800762c  0800762c  0001762c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007634  08007634  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007634  08007634  00017634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007638  08007638  00017638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800763c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  20000078  080076b4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  080076b4  00020570  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001582b  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036bd  00000000  00000000  000358d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012b0  00000000  00000000  00038f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010b8  00000000  00000000  0003a240  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027191  00000000  00000000  0003b2f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012f07  00000000  00000000  00062489  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e4fee  00000000  00000000  00075390  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015a37e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004da0  00000000  00000000  0015a3fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800730c 	.word	0x0800730c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	0800730c 	.word	0x0800730c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <display_screens>:

unsigned char end_char[4] = {0xff,0xff,0xff,'\0'};
char disp_cmd[100];
int disp_cmd_len = 0;

void display_screens(){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0

	switch (current_screen_state){
 8000594:	4b64      	ldr	r3, [pc, #400]	; (8000728 <display_screens+0x198>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b03      	cmp	r3, #3
 800059a:	f200 80c2 	bhi.w	8000722 <display_screens+0x192>
 800059e:	a201      	add	r2, pc, #4	; (adr r2, 80005a4 <display_screens+0x14>)
 80005a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a4:	080005b5 	.word	0x080005b5
 80005a8:	080005d9 	.word	0x080005d9
 80005ac:	08000635 	.word	0x08000635
 80005b0:	080006c5 	.word	0x080006c5

	case GOTO_HOME_SCREEN:
		disp_cmd_len = sprintf(disp_cmd,"page 0%s",end_char);
 80005b4:	4a5d      	ldr	r2, [pc, #372]	; (800072c <display_screens+0x19c>)
 80005b6:	495e      	ldr	r1, [pc, #376]	; (8000730 <display_screens+0x1a0>)
 80005b8:	485e      	ldr	r0, [pc, #376]	; (8000734 <display_screens+0x1a4>)
 80005ba:	f006 faa1 	bl	8006b00 <siprintf>
 80005be:	4602      	mov	r2, r0
 80005c0:	4b5d      	ldr	r3, [pc, #372]	; (8000738 <display_screens+0x1a8>)
 80005c2:	601a      	str	r2, [r3, #0]
		lcd_send_cmd(disp_cmd,disp_cmd_len);
 80005c4:	4b5c      	ldr	r3, [pc, #368]	; (8000738 <display_screens+0x1a8>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4619      	mov	r1, r3
 80005ca:	485a      	ldr	r0, [pc, #360]	; (8000734 <display_screens+0x1a4>)
 80005cc:	f002 fcba 	bl	8002f44 <lcd_send_cmd>
		current_screen_state = UPDATE_HOME_SCREEN;
 80005d0:	4b55      	ldr	r3, [pc, #340]	; (8000728 <display_screens+0x198>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	601a      	str	r2, [r3, #0]
		break;
 80005d6:	e0a4      	b.n	8000722 <display_screens+0x192>


	case UPDATE_HOME_SCREEN:
		if(key_pressed == NONE_KEY_PRESSED)
 80005d8:	4b58      	ldr	r3, [pc, #352]	; (800073c <display_screens+0x1ac>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d102      	bne.n	80005e6 <display_screens+0x56>
		{
			homescreen_update();
 80005e0:	f000 fad0 	bl	8000b84 <homescreen_update>
			disp_cmd_len = sprintf(disp_cmd,"page 2%s",end_char);
			lcd_send_cmd(disp_cmd,disp_cmd_len);
			key_pressed = NONE_KEY_PRESSED;
			current_screen_state = ALARMS_SCREEN;
		}
		break;
 80005e4:	e098      	b.n	8000718 <display_screens+0x188>
		else if(key_pressed == RIGHT_KEY_PRESSED)
 80005e6:	4b55      	ldr	r3, [pc, #340]	; (800073c <display_screens+0x1ac>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b02      	cmp	r3, #2
 80005ec:	d108      	bne.n	8000600 <display_screens+0x70>
			settings_update();
 80005ee:	f001 fdb1 	bl	8002154 <settings_update>
			key_pressed = NONE_KEY_PRESSED;
 80005f2:	4b52      	ldr	r3, [pc, #328]	; (800073c <display_screens+0x1ac>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
			current_screen_state = SETTINGS_SCREEN;
 80005f8:	4b4b      	ldr	r3, [pc, #300]	; (8000728 <display_screens+0x198>)
 80005fa:	2202      	movs	r2, #2
 80005fc:	601a      	str	r2, [r3, #0]
		break;
 80005fe:	e08b      	b.n	8000718 <display_screens+0x188>
		else if(key_pressed == LEFT_KEY_PRESSED)
 8000600:	4b4e      	ldr	r3, [pc, #312]	; (800073c <display_screens+0x1ac>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b01      	cmp	r3, #1
 8000606:	f040 8087 	bne.w	8000718 <display_screens+0x188>
			disp_cmd_len = sprintf(disp_cmd,"page 2%s",end_char);
 800060a:	4a48      	ldr	r2, [pc, #288]	; (800072c <display_screens+0x19c>)
 800060c:	494c      	ldr	r1, [pc, #304]	; (8000740 <display_screens+0x1b0>)
 800060e:	4849      	ldr	r0, [pc, #292]	; (8000734 <display_screens+0x1a4>)
 8000610:	f006 fa76 	bl	8006b00 <siprintf>
 8000614:	4602      	mov	r2, r0
 8000616:	4b48      	ldr	r3, [pc, #288]	; (8000738 <display_screens+0x1a8>)
 8000618:	601a      	str	r2, [r3, #0]
			lcd_send_cmd(disp_cmd,disp_cmd_len);
 800061a:	4b47      	ldr	r3, [pc, #284]	; (8000738 <display_screens+0x1a8>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4619      	mov	r1, r3
 8000620:	4844      	ldr	r0, [pc, #272]	; (8000734 <display_screens+0x1a4>)
 8000622:	f002 fc8f 	bl	8002f44 <lcd_send_cmd>
			key_pressed = NONE_KEY_PRESSED;
 8000626:	4b45      	ldr	r3, [pc, #276]	; (800073c <display_screens+0x1ac>)
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
			current_screen_state = ALARMS_SCREEN;
 800062c:	4b3e      	ldr	r3, [pc, #248]	; (8000728 <display_screens+0x198>)
 800062e:	2203      	movs	r2, #3
 8000630:	601a      	str	r2, [r3, #0]
		break;
 8000632:	e071      	b.n	8000718 <display_screens+0x188>

	case SETTINGS_SCREEN:
		if(key_pressed == NONE_KEY_PRESSED)
 8000634:	4b41      	ldr	r3, [pc, #260]	; (800073c <display_screens+0x1ac>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d106      	bne.n	800064a <display_screens+0xba>
		{
			if(save_settings == 2)
 800063c:	4b41      	ldr	r3, [pc, #260]	; (8000744 <display_screens+0x1b4>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b02      	cmp	r3, #2
 8000642:	d16b      	bne.n	800071c <display_screens+0x18c>
			{
				settings_update();
 8000644:	f001 fd86 	bl	8002154 <settings_update>
		else if(key_pressed == ENTER_KEY_PRESSED)
		{
			DisplayActions = display_edit_settings;
			key_pressed = NONE_KEY_PRESSED;
		}
		break;
 8000648:	e068      	b.n	800071c <display_screens+0x18c>
		else if(key_pressed == RIGHT_KEY_PRESSED)
 800064a:	4b3c      	ldr	r3, [pc, #240]	; (800073c <display_screens+0x1ac>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b02      	cmp	r3, #2
 8000650:	d114      	bne.n	800067c <display_screens+0xec>
			disp_cmd_len = sprintf(disp_cmd,"page 2%s",end_char);
 8000652:	4a36      	ldr	r2, [pc, #216]	; (800072c <display_screens+0x19c>)
 8000654:	493a      	ldr	r1, [pc, #232]	; (8000740 <display_screens+0x1b0>)
 8000656:	4837      	ldr	r0, [pc, #220]	; (8000734 <display_screens+0x1a4>)
 8000658:	f006 fa52 	bl	8006b00 <siprintf>
 800065c:	4602      	mov	r2, r0
 800065e:	4b36      	ldr	r3, [pc, #216]	; (8000738 <display_screens+0x1a8>)
 8000660:	601a      	str	r2, [r3, #0]
			lcd_send_cmd(disp_cmd,disp_cmd_len);
 8000662:	4b35      	ldr	r3, [pc, #212]	; (8000738 <display_screens+0x1a8>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4619      	mov	r1, r3
 8000668:	4832      	ldr	r0, [pc, #200]	; (8000734 <display_screens+0x1a4>)
 800066a:	f002 fc6b 	bl	8002f44 <lcd_send_cmd>
			key_pressed = NONE_KEY_PRESSED;
 800066e:	4b33      	ldr	r3, [pc, #204]	; (800073c <display_screens+0x1ac>)
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
			current_screen_state = ALARMS_SCREEN;
 8000674:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <display_screens+0x198>)
 8000676:	2203      	movs	r2, #3
 8000678:	601a      	str	r2, [r3, #0]
		break;
 800067a:	e04f      	b.n	800071c <display_screens+0x18c>
		else if(key_pressed == LEFT_KEY_PRESSED)
 800067c:	4b2f      	ldr	r3, [pc, #188]	; (800073c <display_screens+0x1ac>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d114      	bne.n	80006ae <display_screens+0x11e>
			disp_cmd_len = sprintf(disp_cmd,"page 0%s",end_char);
 8000684:	4a29      	ldr	r2, [pc, #164]	; (800072c <display_screens+0x19c>)
 8000686:	492a      	ldr	r1, [pc, #168]	; (8000730 <display_screens+0x1a0>)
 8000688:	482a      	ldr	r0, [pc, #168]	; (8000734 <display_screens+0x1a4>)
 800068a:	f006 fa39 	bl	8006b00 <siprintf>
 800068e:	4602      	mov	r2, r0
 8000690:	4b29      	ldr	r3, [pc, #164]	; (8000738 <display_screens+0x1a8>)
 8000692:	601a      	str	r2, [r3, #0]
			lcd_send_cmd(disp_cmd,disp_cmd_len);
 8000694:	4b28      	ldr	r3, [pc, #160]	; (8000738 <display_screens+0x1a8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4619      	mov	r1, r3
 800069a:	4826      	ldr	r0, [pc, #152]	; (8000734 <display_screens+0x1a4>)
 800069c:	f002 fc52 	bl	8002f44 <lcd_send_cmd>
			key_pressed = NONE_KEY_PRESSED;
 80006a0:	4b26      	ldr	r3, [pc, #152]	; (800073c <display_screens+0x1ac>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
			current_screen_state = UPDATE_HOME_SCREEN;
 80006a6:	4b20      	ldr	r3, [pc, #128]	; (8000728 <display_screens+0x198>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	601a      	str	r2, [r3, #0]
		break;
 80006ac:	e036      	b.n	800071c <display_screens+0x18c>
		else if(key_pressed == ENTER_KEY_PRESSED)
 80006ae:	4b23      	ldr	r3, [pc, #140]	; (800073c <display_screens+0x1ac>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b03      	cmp	r3, #3
 80006b4:	d132      	bne.n	800071c <display_screens+0x18c>
			DisplayActions = display_edit_settings;
 80006b6:	4b24      	ldr	r3, [pc, #144]	; (8000748 <display_screens+0x1b8>)
 80006b8:	4a24      	ldr	r2, [pc, #144]	; (800074c <display_screens+0x1bc>)
 80006ba:	601a      	str	r2, [r3, #0]
			key_pressed = NONE_KEY_PRESSED;
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <display_screens+0x1ac>)
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
		break;
 80006c2:	e02b      	b.n	800071c <display_screens+0x18c>

	case ALARMS_SCREEN:
		if(key_pressed == NONE_KEY_PRESSED)
 80006c4:	4b1d      	ldr	r3, [pc, #116]	; (800073c <display_screens+0x1ac>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d029      	beq.n	8000720 <display_screens+0x190>
		{

		}
		else if(key_pressed == RIGHT_KEY_PRESSED)
 80006cc:	4b1b      	ldr	r3, [pc, #108]	; (800073c <display_screens+0x1ac>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b02      	cmp	r3, #2
 80006d2:	d114      	bne.n	80006fe <display_screens+0x16e>
		{
			disp_cmd_len = sprintf(disp_cmd,"page 0%s",end_char);
 80006d4:	4a15      	ldr	r2, [pc, #84]	; (800072c <display_screens+0x19c>)
 80006d6:	4916      	ldr	r1, [pc, #88]	; (8000730 <display_screens+0x1a0>)
 80006d8:	4816      	ldr	r0, [pc, #88]	; (8000734 <display_screens+0x1a4>)
 80006da:	f006 fa11 	bl	8006b00 <siprintf>
 80006de:	4602      	mov	r2, r0
 80006e0:	4b15      	ldr	r3, [pc, #84]	; (8000738 <display_screens+0x1a8>)
 80006e2:	601a      	str	r2, [r3, #0]
			lcd_send_cmd(disp_cmd,disp_cmd_len);
 80006e4:	4b14      	ldr	r3, [pc, #80]	; (8000738 <display_screens+0x1a8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4619      	mov	r1, r3
 80006ea:	4812      	ldr	r0, [pc, #72]	; (8000734 <display_screens+0x1a4>)
 80006ec:	f002 fc2a 	bl	8002f44 <lcd_send_cmd>
			key_pressed = NONE_KEY_PRESSED;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <display_screens+0x1ac>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
			current_screen_state = UPDATE_HOME_SCREEN;
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <display_screens+0x198>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	601a      	str	r2, [r3, #0]
//			disp_cmd_len = sprintf(disp_cmd,"page 1%s",end_char);
//			lcd_send_cmd(disp_cmd,disp_cmd_len);
			key_pressed = NONE_KEY_PRESSED;
			current_screen_state = SETTINGS_SCREEN;
		}
		break;
 80006fc:	e010      	b.n	8000720 <display_screens+0x190>
		else if(key_pressed == LEFT_KEY_PRESSED)
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <display_screens+0x1ac>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d10c      	bne.n	8000720 <display_screens+0x190>
			settings_update();
 8000706:	f001 fd25 	bl	8002154 <settings_update>
			key_pressed = NONE_KEY_PRESSED;
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <display_screens+0x1ac>)
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
			current_screen_state = SETTINGS_SCREEN;
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <display_screens+0x198>)
 8000712:	2202      	movs	r2, #2
 8000714:	601a      	str	r2, [r3, #0]
		break;
 8000716:	e003      	b.n	8000720 <display_screens+0x190>
		break;
 8000718:	bf00      	nop
 800071a:	e002      	b.n	8000722 <display_screens+0x192>
		break;
 800071c:	bf00      	nop
 800071e:	e000      	b.n	8000722 <display_screens+0x192>
		break;
 8000720:	bf00      	nop

	}

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000094 	.word	0x20000094
 800072c:	20000000 	.word	0x20000000
 8000730:	08007324 	.word	0x08007324
 8000734:	2000012c 	.word	0x2000012c
 8000738:	20000098 	.word	0x20000098
 800073c:	2000009c 	.word	0x2000009c
 8000740:	08007330 	.word	0x08007330
 8000744:	20000100 	.word	0x20000100
 8000748:	20000128 	.word	0x20000128
 800074c:	08001d15 	.word	0x08001d15

08000750 <__update_makeup_water_added>:

/*******************************************************************************
 *  PRIVATE
 ******************************************************************************/
void __update_makeup_water_added(char *disp_mwa_cmd, int *disp_mwa_cmd_len)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af02      	add	r7, sp, #8
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
	uint8_t n[6];
	int temp = makeup_water_added;
 800075a:	4b24      	ldr	r3, [pc, #144]	; (80007ec <__update_makeup_water_added+0x9c>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 6; i++)
 8000760:	2300      	movs	r3, #0
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	e03a      	b.n	80007dc <__update_makeup_water_added+0x8c>
	{
		n[i] = temp % 10;
 8000766:	697a      	ldr	r2, [r7, #20]
 8000768:	4b21      	ldr	r3, [pc, #132]	; (80007f0 <__update_makeup_water_added+0xa0>)
 800076a:	fb83 1302 	smull	r1, r3, r3, r2
 800076e:	1099      	asrs	r1, r3, #2
 8000770:	17d3      	asrs	r3, r2, #31
 8000772:	1ac9      	subs	r1, r1, r3
 8000774:	460b      	mov	r3, r1
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	440b      	add	r3, r1
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	1ad1      	subs	r1, r2, r3
 800077e:	b2c9      	uxtb	r1, r1
 8000780:	f107 0208 	add.w	r2, r7, #8
 8000784:	693b      	ldr	r3, [r7, #16]
 8000786:	4413      	add	r3, r2
 8000788:	460a      	mov	r2, r1
 800078a:	701a      	strb	r2, [r3, #0]
		temp = temp / 10;
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	4a18      	ldr	r2, [pc, #96]	; (80007f0 <__update_makeup_water_added+0xa0>)
 8000790:	fb82 1203 	smull	r1, r2, r2, r3
 8000794:	1092      	asrs	r2, r2, #2
 8000796:	17db      	asrs	r3, r3, #31
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	617b      	str	r3, [r7, #20]
		*disp_mwa_cmd_len += snprintf (disp_mwa_cmd+(*disp_mwa_cmd_len),1024-(*disp_mwa_cmd_len),"n%d.val=%d%s",i,n[i],end_char);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	1898      	adds	r0, r3, r2
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80007ae:	4619      	mov	r1, r3
 80007b0:	f107 0208 	add.w	r2, r7, #8
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	4413      	add	r3, r2
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	461a      	mov	r2, r3
 80007bc:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <__update_makeup_water_added+0xa4>)
 80007be:	9301      	str	r3, [sp, #4]
 80007c0:	9200      	str	r2, [sp, #0]
 80007c2:	693b      	ldr	r3, [r7, #16]
 80007c4:	4a0c      	ldr	r2, [pc, #48]	; (80007f8 <__update_makeup_water_added+0xa8>)
 80007c6:	f006 f967 	bl	8006a98 <sniprintf>
 80007ca:	4602      	mov	r2, r0
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	441a      	add	r2, r3
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 6; i++)
 80007d6:	693b      	ldr	r3, [r7, #16]
 80007d8:	3301      	adds	r3, #1
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
 80007de:	2b05      	cmp	r3, #5
 80007e0:	ddc1      	ble.n	8000766 <__update_makeup_water_added+0x16>
	}
}
 80007e2:	bf00      	nop
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000c0 	.word	0x200000c0
 80007f0:	66666667 	.word	0x66666667
 80007f4:	20000000 	.word	0x20000000
 80007f8:	0800733c 	.word	0x0800733c

080007fc <__update_blowdown_water>:

void __update_blowdown_water(char *disp_bd_cmd,int *disp_bd_cmd_len)
{
 80007fc:	b590      	push	{r4, r7, lr}
 80007fe:	b089      	sub	sp, #36	; 0x24
 8000800:	af02      	add	r7, sp, #8
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
	uint8_t n[6];
	int temp = blowdown_water;
 8000806:	4b25      	ldr	r3, [pc, #148]	; (800089c <__update_blowdown_water+0xa0>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 6; i++)
 800080c:	2300      	movs	r3, #0
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	e03d      	b.n	800088e <__update_blowdown_water+0x92>
	{
		n[i] = temp % 10;
 8000812:	697a      	ldr	r2, [r7, #20]
 8000814:	4b22      	ldr	r3, [pc, #136]	; (80008a0 <__update_blowdown_water+0xa4>)
 8000816:	fb83 1302 	smull	r1, r3, r3, r2
 800081a:	1099      	asrs	r1, r3, #2
 800081c:	17d3      	asrs	r3, r2, #31
 800081e:	1ac9      	subs	r1, r1, r3
 8000820:	460b      	mov	r3, r1
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	440b      	add	r3, r1
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	1ad1      	subs	r1, r2, r3
 800082a:	b2c9      	uxtb	r1, r1
 800082c:	f107 0208 	add.w	r2, r7, #8
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	4413      	add	r3, r2
 8000834:	460a      	mov	r2, r1
 8000836:	701a      	strb	r2, [r3, #0]
		temp = temp / 10;
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	4a19      	ldr	r2, [pc, #100]	; (80008a0 <__update_blowdown_water+0xa4>)
 800083c:	fb82 1203 	smull	r1, r2, r2, r3
 8000840:	1092      	asrs	r2, r2, #2
 8000842:	17db      	asrs	r3, r3, #31
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	617b      	str	r3, [r7, #20]
		*disp_bd_cmd_len += snprintf (disp_bd_cmd+(*disp_bd_cmd_len),1024-(*disp_bd_cmd_len),"n%d.val=%d%s",i+6,n[i],end_char);
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	461a      	mov	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	1898      	adds	r0, r3, r2
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800085a:	461c      	mov	r4, r3
 800085c:	693b      	ldr	r3, [r7, #16]
 800085e:	1d99      	adds	r1, r3, #6
 8000860:	f107 0208 	add.w	r2, r7, #8
 8000864:	693b      	ldr	r3, [r7, #16]
 8000866:	4413      	add	r3, r2
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	461a      	mov	r2, r3
 800086c:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <__update_blowdown_water+0xa8>)
 800086e:	9301      	str	r3, [sp, #4]
 8000870:	9200      	str	r2, [sp, #0]
 8000872:	460b      	mov	r3, r1
 8000874:	4a0c      	ldr	r2, [pc, #48]	; (80008a8 <__update_blowdown_water+0xac>)
 8000876:	4621      	mov	r1, r4
 8000878:	f006 f90e 	bl	8006a98 <sniprintf>
 800087c:	4602      	mov	r2, r0
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	441a      	add	r2, r3
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 6; i++)
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	3301      	adds	r3, #1
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	2b05      	cmp	r3, #5
 8000892:	ddbe      	ble.n	8000812 <__update_blowdown_water+0x16>
	}
}
 8000894:	bf00      	nop
 8000896:	371c      	adds	r7, #28
 8000898:	46bd      	mov	sp, r7
 800089a:	bd90      	pop	{r4, r7, pc}
 800089c:	200000c4 	.word	0x200000c4
 80008a0:	66666667 	.word	0x66666667
 80008a4:	20000000 	.word	0x20000000
 80008a8:	0800733c 	.word	0x0800733c

080008ac <__update_chemical1>:

void __update_chemical1(char *disp_che1_cmd,int *disp_che1_cmd_len)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af02      	add	r7, sp, #8
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
	*disp_che1_cmd_len += snprintf (disp_che1_cmd+(*disp_che1_cmd_len),1024-(*disp_che1_cmd_len),"n12.val=%d%s",chemical1,end_char); //n12 block on display
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	461a      	mov	r2, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	1898      	adds	r0, r3, r2
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80008c8:	4619      	mov	r1, r3
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <__update_chemical1+0x44>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <__update_chemical1+0x48>)
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	4613      	mov	r3, r2
 80008d4:	4a08      	ldr	r2, [pc, #32]	; (80008f8 <__update_chemical1+0x4c>)
 80008d6:	f006 f8df 	bl	8006a98 <sniprintf>
 80008da:	4602      	mov	r2, r0
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	441a      	add	r2, r3
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	601a      	str	r2, [r3, #0]
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200000c8 	.word	0x200000c8
 80008f4:	20000000 	.word	0x20000000
 80008f8:	0800734c 	.word	0x0800734c

080008fc <__update_chemical2>:

void __update_chemical2(char *disp_che2_cmd,int *disp_che2_cmd_len)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af02      	add	r7, sp, #8
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
	*disp_che2_cmd_len += snprintf (disp_che2_cmd+(*disp_che2_cmd_len),1024-(*disp_che2_cmd_len),"n13.val=%d%s",chemical2,end_char); //n13 block on display
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	461a      	mov	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	1898      	adds	r0, r3, r2
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000918:	4619      	mov	r1, r3
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <__update_chemical2+0x44>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <__update_chemical2+0x48>)
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	4613      	mov	r3, r2
 8000924:	4a08      	ldr	r2, [pc, #32]	; (8000948 <__update_chemical2+0x4c>)
 8000926:	f006 f8b7 	bl	8006a98 <sniprintf>
 800092a:	4602      	mov	r2, r0
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	441a      	add	r2, r3
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	601a      	str	r2, [r3, #0]
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200000cc 	.word	0x200000cc
 8000944:	20000000 	.word	0x20000000
 8000948:	0800735c 	.word	0x0800735c

0800094c <__update_ph_inlet_water>:

void __update_ph_inlet_water(char *disp_ph_inlet_cmd,int *disp_ph_inlet_cmd_len)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af02      	add	r7, sp, #8
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
	*disp_ph_inlet_cmd_len += snprintf (disp_ph_inlet_cmd+(*disp_ph_inlet_cmd_len),1024-(*disp_ph_inlet_cmd_len),"x0.val=%d%s",ph_inlet_water,end_char); //x0 block on display
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	461a      	mov	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	1898      	adds	r0, r3, r2
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000968:	4619      	mov	r1, r3
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <__update_ph_inlet_water+0x44>)
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	461a      	mov	r2, r3
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <__update_ph_inlet_water+0x48>)
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	4613      	mov	r3, r2
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <__update_ph_inlet_water+0x4c>)
 8000978:	f006 f88e 	bl	8006a98 <sniprintf>
 800097c:	4602      	mov	r2, r0
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	441a      	add	r2, r3
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	601a      	str	r2, [r3, #0]
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200000d0 	.word	0x200000d0
 8000994:	20000000 	.word	0x20000000
 8000998:	0800736c 	.word	0x0800736c

0800099c <__update_ph_plant_water>:

void __update_ph_plant_water(char *disp_ph_plant_cmd,int *disp_ph_plant_cmd_len)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af02      	add	r7, sp, #8
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
	*disp_ph_plant_cmd_len += snprintf (disp_ph_plant_cmd+(*disp_ph_plant_cmd_len),1024-(*disp_ph_plant_cmd_len),"x1.val=%d%s",ph_plant_water,end_char); //x1 block on display
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	461a      	mov	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	1898      	adds	r0, r3, r2
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80009b8:	4619      	mov	r1, r3
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <__update_ph_plant_water+0x44>)
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	461a      	mov	r2, r3
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <__update_ph_plant_water+0x48>)
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	4613      	mov	r3, r2
 80009c6:	4a08      	ldr	r2, [pc, #32]	; (80009e8 <__update_ph_plant_water+0x4c>)
 80009c8:	f006 f866 	bl	8006a98 <sniprintf>
 80009cc:	4602      	mov	r2, r0
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	441a      	add	r2, r3
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	601a      	str	r2, [r3, #0]
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	200000d2 	.word	0x200000d2
 80009e4:	20000000 	.word	0x20000000
 80009e8:	08007378 	.word	0x08007378

080009ec <__update_tds_inlet_water>:

void __update_tds_inlet_water(char *disp_tds_inlet_cmd,int *disp_tds_inlet_cmd_len)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af02      	add	r7, sp, #8
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
	*disp_tds_inlet_cmd_len += snprintf (disp_tds_inlet_cmd+(*disp_tds_inlet_cmd_len),1024-(*disp_tds_inlet_cmd_len),"n14.val=%d%s",tds_inlet_water,end_char); //n14 block on display
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	461a      	mov	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	1898      	adds	r0, r3, r2
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <__update_tds_inlet_water+0x44>)
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <__update_tds_inlet_water+0x48>)
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	4613      	mov	r3, r2
 8000a16:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <__update_tds_inlet_water+0x4c>)
 8000a18:	f006 f83e 	bl	8006a98 <sniprintf>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	441a      	add	r2, r3
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	601a      	str	r2, [r3, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200000d4 	.word	0x200000d4
 8000a34:	20000000 	.word	0x20000000
 8000a38:	08007384 	.word	0x08007384

08000a3c <__update_tds_plant_water>:

void __update_tds_plant_water(char *disp_tds_plant_cmd,int *disp_tds_plant_cmd_len)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af02      	add	r7, sp, #8
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
	*disp_tds_plant_cmd_len += snprintf (disp_tds_plant_cmd+(*disp_tds_plant_cmd_len),1024-(*disp_tds_plant_cmd_len),"n15.val=%d%s",tds_plant_water,end_char); //n15 block on display
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	1898      	adds	r0, r3, r2
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <__update_tds_plant_water+0x44>)
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <__update_tds_plant_water+0x48>)
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	4613      	mov	r3, r2
 8000a66:	4a08      	ldr	r2, [pc, #32]	; (8000a88 <__update_tds_plant_water+0x4c>)
 8000a68:	f006 f816 	bl	8006a98 <sniprintf>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	441a      	add	r2, r3
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	601a      	str	r2, [r3, #0]
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	200000d6 	.word	0x200000d6
 8000a84:	20000000 	.word	0x20000000
 8000a88:	08007394 	.word	0x08007394

08000a8c <__update_pump1_status>:

void __update_pump1_status(char *disp_pump1_status_cmd,int *disp_pump1_status_cmd_len)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
	if(pump1_state) //ON State
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <__update_pump1_status+0x6c>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d014      	beq.n	8000ac8 <__update_pump1_status+0x3c>
	{
		*disp_pump1_status_cmd_len += snprintf (disp_pump1_status_cmd+(*disp_pump1_status_cmd_len),1024-(*disp_pump1_status_cmd_len),"p3.pic=3%s",end_char); //p3 block on display
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	1898      	adds	r0, r3, r2
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4b12      	ldr	r3, [pc, #72]	; (8000afc <__update_pump1_status+0x70>)
 8000ab4:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <__update_pump1_status+0x74>)
 8000ab6:	f005 ffef 	bl	8006a98 <sniprintf>
 8000aba:	4602      	mov	r2, r0
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	441a      	add	r2, r3
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	601a      	str	r2, [r3, #0]
	else //OFF State
	{
		*disp_pump1_status_cmd_len += snprintf (disp_pump1_status_cmd+(*disp_pump1_status_cmd_len),1024-(*disp_pump1_status_cmd_len),"p3.pic=2%s",end_char); //p3 block on display
	}

}
 8000ac6:	e013      	b.n	8000af0 <__update_pump1_status+0x64>
		*disp_pump1_status_cmd_len += snprintf (disp_pump1_status_cmd+(*disp_pump1_status_cmd_len),1024-(*disp_pump1_status_cmd_len),"p3.pic=2%s",end_char); //p3 block on display
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	1898      	adds	r0, r3, r2
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000ada:	4619      	mov	r1, r3
 8000adc:	4b07      	ldr	r3, [pc, #28]	; (8000afc <__update_pump1_status+0x70>)
 8000ade:	4a09      	ldr	r2, [pc, #36]	; (8000b04 <__update_pump1_status+0x78>)
 8000ae0:	f005 ffda 	bl	8006a98 <sniprintf>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	441a      	add	r2, r3
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	601a      	str	r2, [r3, #0]
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200000d8 	.word	0x200000d8
 8000afc:	20000000 	.word	0x20000000
 8000b00:	080073a4 	.word	0x080073a4
 8000b04:	080073b0 	.word	0x080073b0

08000b08 <__update_pump2_status>:

void __update_pump2_status(char *disp_pump2_status_cmd,int *disp_pump2_status_cmd_len)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
	if(pump2_state) //ON State
 8000b12:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <__update_pump2_status+0x6c>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d014      	beq.n	8000b44 <__update_pump2_status+0x3c>
	{
		*disp_pump2_status_cmd_len += snprintf (disp_pump2_status_cmd+(*disp_pump2_status_cmd_len),1024-(*disp_pump2_status_cmd_len),"p2.pic=3%s",end_char); //p2 block on display
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	461a      	mov	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	1898      	adds	r0, r3, r2
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <__update_pump2_status+0x70>)
 8000b30:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <__update_pump2_status+0x74>)
 8000b32:	f005 ffb1 	bl	8006a98 <sniprintf>
 8000b36:	4602      	mov	r2, r0
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	441a      	add	r2, r3
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	601a      	str	r2, [r3, #0]
	else //OFF State
	{
		*disp_pump2_status_cmd_len += snprintf (disp_pump2_status_cmd+(*disp_pump2_status_cmd_len),1024-(*disp_pump2_status_cmd_len),"p2.pic=2%s",end_char); //p2 block on display
	}

}
 8000b42:	e013      	b.n	8000b6c <__update_pump2_status+0x64>
		*disp_pump2_status_cmd_len += snprintf (disp_pump2_status_cmd+(*disp_pump2_status_cmd_len),1024-(*disp_pump2_status_cmd_len),"p2.pic=2%s",end_char); //p2 block on display
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	1898      	adds	r0, r3, r2
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000b56:	4619      	mov	r1, r3
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <__update_pump2_status+0x70>)
 8000b5a:	4a09      	ldr	r2, [pc, #36]	; (8000b80 <__update_pump2_status+0x78>)
 8000b5c:	f005 ff9c 	bl	8006a98 <sniprintf>
 8000b60:	4602      	mov	r2, r0
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	441a      	add	r2, r3
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	601a      	str	r2, [r3, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000004 	.word	0x20000004
 8000b78:	20000000 	.word	0x20000000
 8000b7c:	080073bc 	.word	0x080073bc
 8000b80:	080073c8 	.word	0x080073c8

08000b84 <homescreen_update>:

/*******************************************************************************
 *  PUBLIC
 ******************************************************************************/
void homescreen_update()
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8000b8a:	af00      	add	r7, sp, #0
	char homescreen_cmd[1024] = {0};
 8000b8c:	f107 0308 	add.w	r3, r7, #8
 8000b90:	4618      	mov	r0, r3
 8000b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b96:	461a      	mov	r2, r3
 8000b98:	2100      	movs	r1, #0
 8000b9a:	f005 ff75 	bl	8006a88 <memset>
	int homescreen_cmd_len = 0;
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]

	__update_makeup_water_added(homescreen_cmd,&homescreen_cmd_len);
 8000ba4:	1d3a      	adds	r2, r7, #4
 8000ba6:	f107 0308 	add.w	r3, r7, #8
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fdcf 	bl	8000750 <__update_makeup_water_added>
	__update_blowdown_water(homescreen_cmd,&homescreen_cmd_len);
 8000bb2:	1d3a      	adds	r2, r7, #4
 8000bb4:	f107 0308 	add.w	r3, r7, #8
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fe1e 	bl	80007fc <__update_blowdown_water>
	__update_chemical1(homescreen_cmd,&homescreen_cmd_len);
 8000bc0:	1d3a      	adds	r2, r7, #4
 8000bc2:	f107 0308 	add.w	r3, r7, #8
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fe6f 	bl	80008ac <__update_chemical1>
	__update_chemical2(homescreen_cmd,&homescreen_cmd_len);
 8000bce:	1d3a      	adds	r2, r7, #4
 8000bd0:	f107 0308 	add.w	r3, r7, #8
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fe90 	bl	80008fc <__update_chemical2>
	__update_ph_inlet_water(homescreen_cmd,&homescreen_cmd_len);
 8000bdc:	1d3a      	adds	r2, r7, #4
 8000bde:	f107 0308 	add.w	r3, r7, #8
 8000be2:	4611      	mov	r1, r2
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff feb1 	bl	800094c <__update_ph_inlet_water>
	__update_ph_plant_water(homescreen_cmd,&homescreen_cmd_len);
 8000bea:	1d3a      	adds	r2, r7, #4
 8000bec:	f107 0308 	add.w	r3, r7, #8
 8000bf0:	4611      	mov	r1, r2
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fed2 	bl	800099c <__update_ph_plant_water>
	__update_tds_inlet_water(homescreen_cmd,&homescreen_cmd_len);
 8000bf8:	1d3a      	adds	r2, r7, #4
 8000bfa:	f107 0308 	add.w	r3, r7, #8
 8000bfe:	4611      	mov	r1, r2
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fef3 	bl	80009ec <__update_tds_inlet_water>
	__update_tds_plant_water(homescreen_cmd,&homescreen_cmd_len);
 8000c06:	1d3a      	adds	r2, r7, #4
 8000c08:	f107 0308 	add.w	r3, r7, #8
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff ff14 	bl	8000a3c <__update_tds_plant_water>
	__update_pump1_status(homescreen_cmd,&homescreen_cmd_len);
 8000c14:	1d3a      	adds	r2, r7, #4
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff35 	bl	8000a8c <__update_pump1_status>
	__update_pump2_status(homescreen_cmd,&homescreen_cmd_len);
 8000c22:	1d3a      	adds	r2, r7, #4
 8000c24:	f107 0308 	add.w	r3, r7, #8
 8000c28:	4611      	mov	r1, r2
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff ff6c 	bl	8000b08 <__update_pump2_status>

	lcd_send_cmd(homescreen_cmd,homescreen_cmd_len);
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	f107 0308 	add.w	r3, r7, #8
 8000c38:	4611      	mov	r1, r2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f002 f982 	bl	8002f44 <lcd_send_cmd>

}
 8000c40:	bf00      	nop
 8000c42:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <keys_action>:
#include "stm32f4xx_hal.h"

int key_pressed_flag;
int key_pressed = NONE_KEY_PRESSED;

void keys_action(){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0

	if(HAL_GPIO_ReadPin(LEFT_KEY_GPIO_Port,LEFT_KEY_Pin) == 1 && key_pressed_flag == NONE_KEY_PRESSED )
 8000c50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c54:	4845      	ldr	r0, [pc, #276]	; (8000d6c <keys_action+0x120>)
 8000c56:	f003 fc97 	bl	8004588 <HAL_GPIO_ReadPin>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d107      	bne.n	8000c70 <keys_action+0x24>
 8000c60:	4b43      	ldr	r3, [pc, #268]	; (8000d70 <keys_action+0x124>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d103      	bne.n	8000c70 <keys_action+0x24>
	{
		key_pressed_flag = LEFT_KEY_PRESSED;
 8000c68:	4b41      	ldr	r3, [pc, #260]	; (8000d70 <keys_action+0x124>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	e07b      	b.n	8000d68 <keys_action+0x11c>
	}
	else if(HAL_GPIO_ReadPin(LEFT_KEY_GPIO_Port,LEFT_KEY_Pin) == 0 && key_pressed_flag == LEFT_KEY_PRESSED)
 8000c70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c74:	483d      	ldr	r0, [pc, #244]	; (8000d6c <keys_action+0x120>)
 8000c76:	f003 fc87 	bl	8004588 <HAL_GPIO_ReadPin>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d10a      	bne.n	8000c96 <keys_action+0x4a>
 8000c80:	4b3b      	ldr	r3, [pc, #236]	; (8000d70 <keys_action+0x124>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d106      	bne.n	8000c96 <keys_action+0x4a>
	{
		key_pressed = LEFT_KEY_PRESSED;
 8000c88:	4b3a      	ldr	r3, [pc, #232]	; (8000d74 <keys_action+0x128>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	601a      	str	r2, [r3, #0]
		key_pressed_flag = NONE_KEY_PRESSED;
 8000c8e:	4b38      	ldr	r3, [pc, #224]	; (8000d70 <keys_action+0x124>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	e068      	b.n	8000d68 <keys_action+0x11c>
	}
	else if(HAL_GPIO_ReadPin(RIGHT_KEY_GPIO_Port,RIGHT_KEY_Pin) == 1 && key_pressed_flag == NONE_KEY_PRESSED )
 8000c96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c9a:	4834      	ldr	r0, [pc, #208]	; (8000d6c <keys_action+0x120>)
 8000c9c:	f003 fc74 	bl	8004588 <HAL_GPIO_ReadPin>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d107      	bne.n	8000cb6 <keys_action+0x6a>
 8000ca6:	4b32      	ldr	r3, [pc, #200]	; (8000d70 <keys_action+0x124>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d103      	bne.n	8000cb6 <keys_action+0x6a>
	{
		key_pressed_flag = RIGHT_KEY_PRESSED;
 8000cae:	4b30      	ldr	r3, [pc, #192]	; (8000d70 <keys_action+0x124>)
 8000cb0:	2202      	movs	r2, #2
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	e058      	b.n	8000d68 <keys_action+0x11c>
	}
	else if(HAL_GPIO_ReadPin(RIGHT_KEY_GPIO_Port,RIGHT_KEY_Pin) == 0 && key_pressed_flag == RIGHT_KEY_PRESSED)
 8000cb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cba:	482c      	ldr	r0, [pc, #176]	; (8000d6c <keys_action+0x120>)
 8000cbc:	f003 fc64 	bl	8004588 <HAL_GPIO_ReadPin>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d10a      	bne.n	8000cdc <keys_action+0x90>
 8000cc6:	4b2a      	ldr	r3, [pc, #168]	; (8000d70 <keys_action+0x124>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d106      	bne.n	8000cdc <keys_action+0x90>
	{
		key_pressed = RIGHT_KEY_PRESSED;
 8000cce:	4b29      	ldr	r3, [pc, #164]	; (8000d74 <keys_action+0x128>)
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	601a      	str	r2, [r3, #0]
		key_pressed_flag = NONE_KEY_PRESSED;
 8000cd4:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <keys_action+0x124>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	e045      	b.n	8000d68 <keys_action+0x11c>
	}
	else if(HAL_GPIO_ReadPin(ENTER_KEY_GPIO_Port,ENTER_KEY_Pin) == 1 && key_pressed_flag == NONE_KEY_PRESSED )
 8000cdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ce0:	4822      	ldr	r0, [pc, #136]	; (8000d6c <keys_action+0x120>)
 8000ce2:	f003 fc51 	bl	8004588 <HAL_GPIO_ReadPin>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d107      	bne.n	8000cfc <keys_action+0xb0>
 8000cec:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <keys_action+0x124>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d103      	bne.n	8000cfc <keys_action+0xb0>
	{
		key_pressed_flag = ENTER_KEY_PRESSED;
 8000cf4:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <keys_action+0x124>)
 8000cf6:	2203      	movs	r2, #3
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	e035      	b.n	8000d68 <keys_action+0x11c>
	}
	else if(HAL_GPIO_ReadPin(ENTER_KEY_GPIO_Port,ENTER_KEY_Pin) == 0 && key_pressed_flag == ENTER_KEY_PRESSED)
 8000cfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d00:	481a      	ldr	r0, [pc, #104]	; (8000d6c <keys_action+0x120>)
 8000d02:	f003 fc41 	bl	8004588 <HAL_GPIO_ReadPin>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d10a      	bne.n	8000d22 <keys_action+0xd6>
 8000d0c:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <keys_action+0x124>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b03      	cmp	r3, #3
 8000d12:	d106      	bne.n	8000d22 <keys_action+0xd6>
	{
		key_pressed = ENTER_KEY_PRESSED;
 8000d14:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <keys_action+0x128>)
 8000d16:	2203      	movs	r2, #3
 8000d18:	601a      	str	r2, [r3, #0]
		key_pressed_flag = NONE_KEY_PRESSED;
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <keys_action+0x124>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	e022      	b.n	8000d68 <keys_action+0x11c>
	}
	else if(HAL_GPIO_ReadPin(ESC_KEY_GPIO_Port,ESC_KEY_Pin) == 1 && key_pressed_flag == NONE_KEY_PRESSED )
 8000d22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d26:	4814      	ldr	r0, [pc, #80]	; (8000d78 <keys_action+0x12c>)
 8000d28:	f003 fc2e 	bl	8004588 <HAL_GPIO_ReadPin>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d107      	bne.n	8000d42 <keys_action+0xf6>
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <keys_action+0x124>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d103      	bne.n	8000d42 <keys_action+0xf6>
	{
		key_pressed_flag = ESC_KEY_PRESSED;
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <keys_action+0x124>)
 8000d3c:	2204      	movs	r2, #4
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	e012      	b.n	8000d68 <keys_action+0x11c>
	}
	else if(HAL_GPIO_ReadPin(ESC_KEY_GPIO_Port,ESC_KEY_Pin) == 0 && key_pressed_flag == ESC_KEY_PRESSED)
 8000d42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d46:	480c      	ldr	r0, [pc, #48]	; (8000d78 <keys_action+0x12c>)
 8000d48:	f003 fc1e 	bl	8004588 <HAL_GPIO_ReadPin>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10a      	bne.n	8000d68 <keys_action+0x11c>
 8000d52:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <keys_action+0x124>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b04      	cmp	r3, #4
 8000d58:	d106      	bne.n	8000d68 <keys_action+0x11c>
	{
		key_pressed = ESC_KEY_PRESSED;
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <keys_action+0x128>)
 8000d5c:	2204      	movs	r2, #4
 8000d5e:	601a      	str	r2, [r3, #0]
		key_pressed_flag = NONE_KEY_PRESSED;
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <keys_action+0x124>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
	}

}
 8000d66:	e7ff      	b.n	8000d68 <keys_action+0x11c>
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40020c00 	.word	0x40020c00
 8000d70:	20000190 	.word	0x20000190
 8000d74:	2000009c 	.word	0x2000009c
 8000d78:	40020400 	.word	0x40020400

08000d7c <__settings_selection>:
/*******************************************************************************
 *  PRIVATE
 ******************************************************************************/
void
__settings_selection(uint8_t src, uint8_t dest)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af02      	add	r7, sp, #8
 8000d82:	4603      	mov	r3, r0
 8000d84:	460a      	mov	r2, r1
 8000d86:	71fb      	strb	r3, [r7, #7]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	71bb      	strb	r3, [r7, #6]
	edit_settings_cmd_len = sprintf(edit_settings_cmd,"t%d.pco=65535%st%d.pco=63488%s",src,end_char,dest,end_char);
 8000d8c:	79f9      	ldrb	r1, [r7, #7]
 8000d8e:	79bb      	ldrb	r3, [r7, #6]
 8000d90:	4a0c      	ldr	r2, [pc, #48]	; (8000dc4 <__settings_selection+0x48>)
 8000d92:	9201      	str	r2, [sp, #4]
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <__settings_selection+0x48>)
 8000d98:	460a      	mov	r2, r1
 8000d9a:	490b      	ldr	r1, [pc, #44]	; (8000dc8 <__settings_selection+0x4c>)
 8000d9c:	480b      	ldr	r0, [pc, #44]	; (8000dcc <__settings_selection+0x50>)
 8000d9e:	f005 feaf 	bl	8006b00 <siprintf>
 8000da2:	4602      	mov	r2, r0
 8000da4:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <__settings_selection+0x54>)
 8000da6:	601a      	str	r2, [r3, #0]
	lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <__settings_selection+0x54>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4619      	mov	r1, r3
 8000dae:	4807      	ldr	r0, [pc, #28]	; (8000dcc <__settings_selection+0x50>)
 8000db0:	f002 f8c8 	bl	8002f44 <lcd_send_cmd>
	key_pressed = NONE_KEY_PRESSED;
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <__settings_selection+0x58>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	080073d4 	.word	0x080073d4
 8000dcc:	20000194 	.word	0x20000194
 8000dd0:	200000a4 	.word	0x200000a4
 8000dd4:	2000009c 	.word	0x2000009c

08000dd8 <__esc_settings_selection>:

void
__esc_settings_selection(uint8_t src)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
	edit_settings_cmd_len = sprintf(edit_settings_cmd,"t%d.pco=65535%s",src,end_char);
 8000de2:	79fa      	ldrb	r2, [r7, #7]
 8000de4:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <__esc_settings_selection+0x50>)
 8000de6:	4911      	ldr	r1, [pc, #68]	; (8000e2c <__esc_settings_selection+0x54>)
 8000de8:	4811      	ldr	r0, [pc, #68]	; (8000e30 <__esc_settings_selection+0x58>)
 8000dea:	f005 fe89 	bl	8006b00 <siprintf>
 8000dee:	4602      	mov	r2, r0
 8000df0:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <__esc_settings_selection+0x5c>)
 8000df2:	601a      	str	r2, [r3, #0]
	lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <__esc_settings_selection+0x5c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	480d      	ldr	r0, [pc, #52]	; (8000e30 <__esc_settings_selection+0x58>)
 8000dfc:	f002 f8a2 	bl	8002f44 <lcd_send_cmd>
	if(save_settings == 1)
 8000e00:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <__esc_settings_selection+0x60>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d102      	bne.n	8000e0e <__esc_settings_selection+0x36>
	{
		save_settings = 2;
 8000e08:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <__esc_settings_selection+0x60>)
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	701a      	strb	r2, [r3, #0]
	}
	DisplayActions = display_screens;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <__esc_settings_selection+0x64>)
 8000e10:	4a0b      	ldr	r2, [pc, #44]	; (8000e40 <__esc_settings_selection+0x68>)
 8000e12:	601a      	str	r2, [r3, #0]
	key_pressed = NONE_KEY_PRESSED;
 8000e14:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <__esc_settings_selection+0x6c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
	current_edit_settings_state = GOTO_OFFSET_MAKE_UP_WATER;
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <__esc_settings_selection+0x70>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	080073f4 	.word	0x080073f4
 8000e30:	20000194 	.word	0x20000194
 8000e34:	200000a4 	.word	0x200000a4
 8000e38:	20000100 	.word	0x20000100
 8000e3c:	20000128 	.word	0x20000128
 8000e40:	08000591 	.word	0x08000591
 8000e44:	2000009c 	.word	0x2000009c
 8000e48:	200000a0 	.word	0x200000a0

08000e4c <__select_six_digits>:

void
__select_six_digits(uint8_t src)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b0a0      	sub	sp, #128	; 0x80
 8000e50:	af02      	add	r7, sp, #8
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
	char select_six_digits_cmd[100] = {0};
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	2264      	movs	r2, #100	; 0x64
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f005 fe12 	bl	8006a88 <memset>
	int select_six_digits_cmd_len = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	677b      	str	r3, [r7, #116]	; 0x74
	for(int i = src; i < (src + 6); i++)
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	673b      	str	r3, [r7, #112]	; 0x70
 8000e6c:	e014      	b.n	8000e98 <__select_six_digits+0x4c>
	{
		select_six_digits_cmd_len += snprintf (select_six_digits_cmd+select_six_digits_cmd_len,100-select_six_digits_cmd_len,"n%d.pco=63488%s",i,end_char);
 8000e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e70:	f107 020c 	add.w	r2, r7, #12
 8000e74:	18d0      	adds	r0, r2, r3
 8000e76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e78:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <__select_six_digits+0x88>)
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e84:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <__select_six_digits+0x8c>)
 8000e86:	f005 fe07 	bl	8006a98 <sniprintf>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e8e:	4413      	add	r3, r2
 8000e90:	677b      	str	r3, [r7, #116]	; 0x74
	for(int i = src; i < (src + 6); i++)
 8000e92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e94:	3301      	adds	r3, #1
 8000e96:	673b      	str	r3, [r7, #112]	; 0x70
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	3306      	adds	r3, #6
 8000e9c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	dbe5      	blt.n	8000e6e <__select_six_digits+0x22>
	}
	edit_settings_cmd_len = sprintf(edit_settings_cmd,select_six_digits_cmd);
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	480c      	ldr	r0, [pc, #48]	; (8000edc <__select_six_digits+0x90>)
 8000eaa:	f005 fe29 	bl	8006b00 <siprintf>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <__select_six_digits+0x94>)
 8000eb2:	601a      	str	r2, [r3, #0]
	lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <__select_six_digits+0x94>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4808      	ldr	r0, [pc, #32]	; (8000edc <__select_six_digits+0x90>)
 8000ebc:	f002 f842 	bl	8002f44 <lcd_send_cmd>
	DisplayActions = display_edit_digits;
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <__select_six_digits+0x98>)
 8000ec2:	4a09      	ldr	r2, [pc, #36]	; (8000ee8 <__select_six_digits+0x9c>)
 8000ec4:	601a      	str	r2, [r3, #0]
	key_pressed = NONE_KEY_PRESSED;
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <__select_six_digits+0xa0>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	3778      	adds	r7, #120	; 0x78
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	08007404 	.word	0x08007404
 8000edc:	20000194 	.word	0x20000194
 8000ee0:	200000a4 	.word	0x200000a4
 8000ee4:	20000128 	.word	0x20000128
 8000ee8:	08002099 	.word	0x08002099
 8000eec:	2000009c 	.word	0x2000009c

08000ef0 <__select_four_digits>:

void
__select_four_digits(uint8_t src)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	edit_settings_cmd_len = sprintf(edit_settings_cmd,"n%d.pco=63488%s",src,end_char);
 8000efa:	79fa      	ldrb	r2, [r7, #7]
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <__select_four_digits+0x3c>)
 8000efe:	490c      	ldr	r1, [pc, #48]	; (8000f30 <__select_four_digits+0x40>)
 8000f00:	480c      	ldr	r0, [pc, #48]	; (8000f34 <__select_four_digits+0x44>)
 8000f02:	f005 fdfd 	bl	8006b00 <siprintf>
 8000f06:	4602      	mov	r2, r0
 8000f08:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <__select_four_digits+0x48>)
 8000f0a:	601a      	str	r2, [r3, #0]
	lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8000f0c:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <__select_four_digits+0x48>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	4808      	ldr	r0, [pc, #32]	; (8000f34 <__select_four_digits+0x44>)
 8000f14:	f002 f816 	bl	8002f44 <lcd_send_cmd>
	DisplayActions = display_edit_digits;
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <__select_four_digits+0x4c>)
 8000f1a:	4a09      	ldr	r2, [pc, #36]	; (8000f40 <__select_four_digits+0x50>)
 8000f1c:	601a      	str	r2, [r3, #0]
	key_pressed = NONE_KEY_PRESSED;
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <__select_four_digits+0x54>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	08007404 	.word	0x08007404
 8000f34:	20000194 	.word	0x20000194
 8000f38:	200000a4 	.word	0x200000a4
 8000f3c:	20000128 	.word	0x20000128
 8000f40:	08002099 	.word	0x08002099
 8000f44:	2000009c 	.word	0x2000009c

08000f48 <__select_button>:

void
__select_button(uint8_t src)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
	edit_settings_cmd_len = sprintf(edit_settings_cmd,"b%d.pco=63488%sb%d.pco2=63488%s",src,end_char,src,end_char);
 8000f52:	79f9      	ldrb	r1, [r7, #7]
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <__select_button+0x48>)
 8000f58:	9201      	str	r2, [sp, #4]
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <__select_button+0x48>)
 8000f5e:	460a      	mov	r2, r1
 8000f60:	490c      	ldr	r1, [pc, #48]	; (8000f94 <__select_button+0x4c>)
 8000f62:	480d      	ldr	r0, [pc, #52]	; (8000f98 <__select_button+0x50>)
 8000f64:	f005 fdcc 	bl	8006b00 <siprintf>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <__select_button+0x54>)
 8000f6c:	601a      	str	r2, [r3, #0]
	lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <__select_button+0x54>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4619      	mov	r1, r3
 8000f74:	4808      	ldr	r0, [pc, #32]	; (8000f98 <__select_button+0x50>)
 8000f76:	f001 ffe5 	bl	8002f44 <lcd_send_cmd>
	DisplayActions = display_edit_digits;
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <__select_button+0x58>)
 8000f7c:	4a09      	ldr	r2, [pc, #36]	; (8000fa4 <__select_button+0x5c>)
 8000f7e:	601a      	str	r2, [r3, #0]
	key_pressed = NONE_KEY_PRESSED;
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <__select_button+0x60>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000000 	.word	0x20000000
 8000f94:	08007414 	.word	0x08007414
 8000f98:	20000194 	.word	0x20000194
 8000f9c:	200000a4 	.word	0x200000a4
 8000fa0:	20000128 	.word	0x20000128
 8000fa4:	08002099 	.word	0x08002099
 8000fa8:	2000009c 	.word	0x2000009c

08000fac <__store_six_digits>:

void
__store_six_digits(int *set_val, uint8_t onscreen_digit_loc)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b0bc      	sub	sp, #240	; 0xf0
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	70fb      	strb	r3, [r7, #3]
	onscreen_digit_loc += current_digit_loc;
 8000fb8:	4ba1      	ldr	r3, [pc, #644]	; (8001240 <__store_six_digits+0x294>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	78fb      	ldrb	r3, [r7, #3]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	70fb      	strb	r3, [r7, #3]
	if(key_pressed == RIGHT_KEY_PRESSED)
 8000fc4:	4b9f      	ldr	r3, [pc, #636]	; (8001244 <__store_six_digits+0x298>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d12e      	bne.n	800102a <__store_six_digits+0x7e>
	{
		if(new_digits[current_digit_loc] == 0)
 8000fcc:	4b9c      	ldr	r3, [pc, #624]	; (8001240 <__store_six_digits+0x294>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a9d      	ldr	r2, [pc, #628]	; (8001248 <__store_six_digits+0x29c>)
 8000fd2:	5cd3      	ldrb	r3, [r2, r3]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d105      	bne.n	8000fe4 <__store_six_digits+0x38>
		{
			new_digits[current_digit_loc] = 9;
 8000fd8:	4b99      	ldr	r3, [pc, #612]	; (8001240 <__store_six_digits+0x294>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a9a      	ldr	r2, [pc, #616]	; (8001248 <__store_six_digits+0x29c>)
 8000fde:	2109      	movs	r1, #9
 8000fe0:	54d1      	strb	r1, [r2, r3]
 8000fe2:	e007      	b.n	8000ff4 <__store_six_digits+0x48>
		}
		else
		{
			new_digits[current_digit_loc]--;
 8000fe4:	4b96      	ldr	r3, [pc, #600]	; (8001240 <__store_six_digits+0x294>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a97      	ldr	r2, [pc, #604]	; (8001248 <__store_six_digits+0x29c>)
 8000fea:	5cd2      	ldrb	r2, [r2, r3]
 8000fec:	3a01      	subs	r2, #1
 8000fee:	b2d1      	uxtb	r1, r2
 8000ff0:	4a95      	ldr	r2, [pc, #596]	; (8001248 <__store_six_digits+0x29c>)
 8000ff2:	54d1      	strb	r1, [r2, r3]
		}
		edit_settings_cmd_len = sprintf(edit_settings_cmd,"n%d.val=%d%s",onscreen_digit_loc,new_digits[current_digit_loc],end_char);
 8000ff4:	78f9      	ldrb	r1, [r7, #3]
 8000ff6:	4b92      	ldr	r3, [pc, #584]	; (8001240 <__store_six_digits+0x294>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a93      	ldr	r2, [pc, #588]	; (8001248 <__store_six_digits+0x29c>)
 8000ffc:	5cd3      	ldrb	r3, [r2, r3]
 8000ffe:	461a      	mov	r2, r3
 8001000:	4b92      	ldr	r3, [pc, #584]	; (800124c <__store_six_digits+0x2a0>)
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	4613      	mov	r3, r2
 8001006:	460a      	mov	r2, r1
 8001008:	4991      	ldr	r1, [pc, #580]	; (8001250 <__store_six_digits+0x2a4>)
 800100a:	4892      	ldr	r0, [pc, #584]	; (8001254 <__store_six_digits+0x2a8>)
 800100c:	f005 fd78 	bl	8006b00 <siprintf>
 8001010:	4602      	mov	r2, r0
 8001012:	4b91      	ldr	r3, [pc, #580]	; (8001258 <__store_six_digits+0x2ac>)
 8001014:	601a      	str	r2, [r3, #0]
		lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8001016:	4b90      	ldr	r3, [pc, #576]	; (8001258 <__store_six_digits+0x2ac>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4619      	mov	r1, r3
 800101c:	488d      	ldr	r0, [pc, #564]	; (8001254 <__store_six_digits+0x2a8>)
 800101e:	f001 ff91 	bl	8002f44 <lcd_send_cmd>
		key_pressed = NONE_KEY_PRESSED;
 8001022:	4b88      	ldr	r3, [pc, #544]	; (8001244 <__store_six_digits+0x298>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	e106      	b.n	8001238 <__store_six_digits+0x28c>
	}
	else if(key_pressed == LEFT_KEY_PRESSED)
 800102a:	4b86      	ldr	r3, [pc, #536]	; (8001244 <__store_six_digits+0x298>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d12e      	bne.n	8001090 <__store_six_digits+0xe4>
	{
		if(new_digits[current_digit_loc] == 9)
 8001032:	4b83      	ldr	r3, [pc, #524]	; (8001240 <__store_six_digits+0x294>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a84      	ldr	r2, [pc, #528]	; (8001248 <__store_six_digits+0x29c>)
 8001038:	5cd3      	ldrb	r3, [r2, r3]
 800103a:	2b09      	cmp	r3, #9
 800103c:	d105      	bne.n	800104a <__store_six_digits+0x9e>
		{
			new_digits[current_digit_loc] = 0;
 800103e:	4b80      	ldr	r3, [pc, #512]	; (8001240 <__store_six_digits+0x294>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a81      	ldr	r2, [pc, #516]	; (8001248 <__store_six_digits+0x29c>)
 8001044:	2100      	movs	r1, #0
 8001046:	54d1      	strb	r1, [r2, r3]
 8001048:	e007      	b.n	800105a <__store_six_digits+0xae>
		}
		else
		{
			new_digits[current_digit_loc]++;
 800104a:	4b7d      	ldr	r3, [pc, #500]	; (8001240 <__store_six_digits+0x294>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a7e      	ldr	r2, [pc, #504]	; (8001248 <__store_six_digits+0x29c>)
 8001050:	5cd2      	ldrb	r2, [r2, r3]
 8001052:	3201      	adds	r2, #1
 8001054:	b2d1      	uxtb	r1, r2
 8001056:	4a7c      	ldr	r2, [pc, #496]	; (8001248 <__store_six_digits+0x29c>)
 8001058:	54d1      	strb	r1, [r2, r3]
		}
		edit_settings_cmd_len = sprintf(edit_settings_cmd,"n%d.val=%d%s",onscreen_digit_loc,new_digits[current_digit_loc],end_char);
 800105a:	78f9      	ldrb	r1, [r7, #3]
 800105c:	4b78      	ldr	r3, [pc, #480]	; (8001240 <__store_six_digits+0x294>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a79      	ldr	r2, [pc, #484]	; (8001248 <__store_six_digits+0x29c>)
 8001062:	5cd3      	ldrb	r3, [r2, r3]
 8001064:	461a      	mov	r2, r3
 8001066:	4b79      	ldr	r3, [pc, #484]	; (800124c <__store_six_digits+0x2a0>)
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	4613      	mov	r3, r2
 800106c:	460a      	mov	r2, r1
 800106e:	4978      	ldr	r1, [pc, #480]	; (8001250 <__store_six_digits+0x2a4>)
 8001070:	4878      	ldr	r0, [pc, #480]	; (8001254 <__store_six_digits+0x2a8>)
 8001072:	f005 fd45 	bl	8006b00 <siprintf>
 8001076:	4602      	mov	r2, r0
 8001078:	4b77      	ldr	r3, [pc, #476]	; (8001258 <__store_six_digits+0x2ac>)
 800107a:	601a      	str	r2, [r3, #0]
		lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 800107c:	4b76      	ldr	r3, [pc, #472]	; (8001258 <__store_six_digits+0x2ac>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	4874      	ldr	r0, [pc, #464]	; (8001254 <__store_six_digits+0x2a8>)
 8001084:	f001 ff5e 	bl	8002f44 <lcd_send_cmd>
		key_pressed = NONE_KEY_PRESSED;
 8001088:	4b6e      	ldr	r3, [pc, #440]	; (8001244 <__store_six_digits+0x298>)
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	e0d3      	b.n	8001238 <__store_six_digits+0x28c>
	}
	else if(key_pressed == ENTER_KEY_PRESSED)
 8001090:	4b6c      	ldr	r3, [pc, #432]	; (8001244 <__store_six_digits+0x298>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b03      	cmp	r3, #3
 8001096:	d120      	bne.n	80010da <__store_six_digits+0x12e>
	{
		edit_settings_cmd_len = sprintf(edit_settings_cmd,"n%d.pco=0%s",onscreen_digit_loc,end_char);
 8001098:	78fa      	ldrb	r2, [r7, #3]
 800109a:	4b6c      	ldr	r3, [pc, #432]	; (800124c <__store_six_digits+0x2a0>)
 800109c:	496f      	ldr	r1, [pc, #444]	; (800125c <__store_six_digits+0x2b0>)
 800109e:	486d      	ldr	r0, [pc, #436]	; (8001254 <__store_six_digits+0x2a8>)
 80010a0:	f005 fd2e 	bl	8006b00 <siprintf>
 80010a4:	4602      	mov	r2, r0
 80010a6:	4b6c      	ldr	r3, [pc, #432]	; (8001258 <__store_six_digits+0x2ac>)
 80010a8:	601a      	str	r2, [r3, #0]
		lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 80010aa:	4b6b      	ldr	r3, [pc, #428]	; (8001258 <__store_six_digits+0x2ac>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4619      	mov	r1, r3
 80010b0:	4868      	ldr	r0, [pc, #416]	; (8001254 <__store_six_digits+0x2a8>)
 80010b2:	f001 ff47 	bl	8002f44 <lcd_send_cmd>
		key_pressed = NONE_KEY_PRESSED;
 80010b6:	4b63      	ldr	r3, [pc, #396]	; (8001244 <__store_six_digits+0x298>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
		current_digit_loc = (current_digit_loc == SIXTH_DIGIT) ? FIRST_DIGIT : current_digit_loc+1;
 80010bc:	4b60      	ldr	r3, [pc, #384]	; (8001240 <__store_six_digits+0x294>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b05      	cmp	r3, #5
 80010c2:	d003      	beq.n	80010cc <__store_six_digits+0x120>
 80010c4:	4b5e      	ldr	r3, [pc, #376]	; (8001240 <__store_six_digits+0x294>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	3301      	adds	r3, #1
 80010ca:	e000      	b.n	80010ce <__store_six_digits+0x122>
 80010cc:	2300      	movs	r3, #0
 80010ce:	4a5c      	ldr	r2, [pc, #368]	; (8001240 <__store_six_digits+0x294>)
 80010d0:	6013      	str	r3, [r2, #0]
		settings_semaphore = 2;
 80010d2:	4b63      	ldr	r3, [pc, #396]	; (8001260 <__store_six_digits+0x2b4>)
 80010d4:	2202      	movs	r2, #2
 80010d6:	601a      	str	r2, [r3, #0]
		return;
 80010d8:	e0ae      	b.n	8001238 <__store_six_digits+0x28c>
	}
	else if(key_pressed == ESC_KEY_PRESSED)
 80010da:	4b5a      	ldr	r3, [pc, #360]	; (8001244 <__store_six_digits+0x298>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b04      	cmp	r3, #4
 80010e0:	f040 80aa 	bne.w	8001238 <__store_six_digits+0x28c>
	{
		char digit_color_cmd[100] = {0};
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	2264      	movs	r2, #100	; 0x64
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f005 fccb 	bl	8006a88 <memset>
		int digit_color_cmd_len = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		for(int i = onscreen_digit_loc; i < (onscreen_digit_loc - current_digit_loc + 6); i++)
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80010fe:	e01b      	b.n	8001138 <__store_six_digits+0x18c>
		{
			digit_color_cmd_len += snprintf (digit_color_cmd+digit_color_cmd_len,100-digit_color_cmd_len,"n%d.pco=0%s",i,end_char);
 8001100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001104:	f107 0208 	add.w	r2, r7, #8
 8001108:	18d0      	adds	r0, r2, r3
 800110a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800110e:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001112:	4619      	mov	r1, r3
 8001114:	4b4d      	ldr	r3, [pc, #308]	; (800124c <__store_six_digits+0x2a0>)
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800111c:	4a4f      	ldr	r2, [pc, #316]	; (800125c <__store_six_digits+0x2b0>)
 800111e:	f005 fcbb 	bl	8006a98 <sniprintf>
 8001122:	4602      	mov	r2, r0
 8001124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001128:	4413      	add	r3, r2
 800112a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		for(int i = onscreen_digit_loc; i < (onscreen_digit_loc - current_digit_loc + 6); i++)
 800112e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001132:	3301      	adds	r3, #1
 8001134:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001138:	78fa      	ldrb	r2, [r7, #3]
 800113a:	4b41      	ldr	r3, [pc, #260]	; (8001240 <__store_six_digits+0x294>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	3306      	adds	r3, #6
 8001142:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001146:	429a      	cmp	r2, r3
 8001148:	dbda      	blt.n	8001100 <__store_six_digits+0x154>
		}
		char digit_val_cmd[100] = {0};
 800114a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800114e:	2264      	movs	r2, #100	; 0x64
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f005 fc98 	bl	8006a88 <memset>
		int digit_val_cmd_len = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		int temp = *set_val;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		int digit = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		for(int i = onscreen_digit_loc-current_digit_loc; i < (onscreen_digit_loc - current_digit_loc + 6); i++)
 800116c:	78fa      	ldrb	r2, [r7, #3]
 800116e:	4b34      	ldr	r3, [pc, #208]	; (8001240 <__store_six_digits+0x294>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001178:	e037      	b.n	80011ea <__store_six_digits+0x23e>
		{
			digit = temp % 10;
 800117a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800117e:	4b39      	ldr	r3, [pc, #228]	; (8001264 <__store_six_digits+0x2b8>)
 8001180:	fb83 1302 	smull	r1, r3, r3, r2
 8001184:	1099      	asrs	r1, r3, #2
 8001186:	17d3      	asrs	r3, r2, #31
 8001188:	1ac9      	subs	r1, r1, r3
 800118a:	460b      	mov	r3, r1
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	440b      	add	r3, r1
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			temp = temp / 10;
 8001198:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800119c:	4a31      	ldr	r2, [pc, #196]	; (8001264 <__store_six_digits+0x2b8>)
 800119e:	fb82 1203 	smull	r1, r2, r2, r3
 80011a2:	1092      	asrs	r2, r2, #2
 80011a4:	17db      	asrs	r3, r3, #31
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			digit_val_cmd_len += snprintf (digit_val_cmd+digit_val_cmd_len,100-digit_val_cmd_len,"n%d.val=%d%s",i,digit,end_char);
 80011ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80011b0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80011b4:	18d0      	adds	r0, r2, r3
 80011b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80011ba:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80011be:	4619      	mov	r1, r3
 80011c0:	4b22      	ldr	r3, [pc, #136]	; (800124c <__store_six_digits+0x2a0>)
 80011c2:	9301      	str	r3, [sp, #4]
 80011c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80011ce:	4a20      	ldr	r2, [pc, #128]	; (8001250 <__store_six_digits+0x2a4>)
 80011d0:	f005 fc62 	bl	8006a98 <sniprintf>
 80011d4:	4602      	mov	r2, r0
 80011d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80011da:	4413      	add	r3, r2
 80011dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		for(int i = onscreen_digit_loc-current_digit_loc; i < (onscreen_digit_loc - current_digit_loc + 6); i++)
 80011e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80011e4:	3301      	adds	r3, #1
 80011e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80011ea:	78fa      	ldrb	r2, [r7, #3]
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <__store_six_digits+0x294>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	3306      	adds	r3, #6
 80011f4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80011f8:	429a      	cmp	r2, r3
 80011fa:	dbbe      	blt.n	800117a <__store_six_digits+0x1ce>
		}
		edit_settings_cmd_len = sprintf(edit_settings_cmd,"%s%s",digit_color_cmd,digit_val_cmd);
 80011fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001200:	f107 0208 	add.w	r2, r7, #8
 8001204:	4918      	ldr	r1, [pc, #96]	; (8001268 <__store_six_digits+0x2bc>)
 8001206:	4813      	ldr	r0, [pc, #76]	; (8001254 <__store_six_digits+0x2a8>)
 8001208:	f005 fc7a 	bl	8006b00 <siprintf>
 800120c:	4602      	mov	r2, r0
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <__store_six_digits+0x2ac>)
 8001210:	601a      	str	r2, [r3, #0]
		lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <__store_six_digits+0x2ac>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4619      	mov	r1, r3
 8001218:	480e      	ldr	r0, [pc, #56]	; (8001254 <__store_six_digits+0x2a8>)
 800121a:	f001 fe93 	bl	8002f44 <lcd_send_cmd>
		settings_semaphore = 0;
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <__store_six_digits+0x2b4>)
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
		current_digit_loc = FIRST_DIGIT;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <__store_six_digits+0x294>)
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
		key_pressed = NONE_KEY_PRESSED;
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <__store_six_digits+0x298>)
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
		DisplayActions = display_edit_settings;
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <__store_six_digits+0x2c0>)
 8001232:	4a0f      	ldr	r2, [pc, #60]	; (8001270 <__store_six_digits+0x2c4>)
 8001234:	601a      	str	r2, [r3, #0]
		return;
 8001236:	bf00      	nop
	}
}
 8001238:	37e8      	adds	r7, #232	; 0xe8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200000ac 	.word	0x200000ac
 8001244:	2000009c 	.word	0x2000009c
 8001248:	200000b0 	.word	0x200000b0
 800124c:	20000000 	.word	0x20000000
 8001250:	08007434 	.word	0x08007434
 8001254:	20000194 	.word	0x20000194
 8001258:	200000a4 	.word	0x200000a4
 800125c:	08007444 	.word	0x08007444
 8001260:	200000a8 	.word	0x200000a8
 8001264:	66666667 	.word	0x66666667
 8001268:	08007450 	.word	0x08007450
 800126c:	20000128 	.word	0x20000128
 8001270:	08001d15 	.word	0x08001d15

08001274 <__check_and_print_four_digits_limit>:

void
__check_and_print_four_digits_limit(uint8_t src)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af02      	add	r7, sp, #8
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
	if(new_four_digits < 0)
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <__check_and_print_four_digits_limit+0x70>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	da07      	bge.n	8001296 <__check_and_print_four_digits_limit+0x22>
	{
		new_four_digits = 10000 + new_four_digits;
 8001286:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <__check_and_print_four_digits_limit+0x70>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800128e:	3310      	adds	r3, #16
 8001290:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <__check_and_print_four_digits_limit+0x70>)
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	e00c      	b.n	80012b0 <__check_and_print_four_digits_limit+0x3c>
	}
	else if(new_four_digits > 9999)
 8001296:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <__check_and_print_four_digits_limit+0x70>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f242 720f 	movw	r2, #9999	; 0x270f
 800129e:	4293      	cmp	r3, r2
 80012a0:	dd06      	ble.n	80012b0 <__check_and_print_four_digits_limit+0x3c>
	{
		new_four_digits = new_four_digits - 10000;
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <__check_and_print_four_digits_limit+0x70>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 80012aa:	3b10      	subs	r3, #16
 80012ac:	4a0d      	ldr	r2, [pc, #52]	; (80012e4 <__check_and_print_four_digits_limit+0x70>)
 80012ae:	6013      	str	r3, [r2, #0]
	}
	edit_settings_cmd_len = sprintf(edit_settings_cmd,"n%d.val=%d%s",src,new_four_digits,end_char);
 80012b0:	79fa      	ldrb	r2, [r7, #7]
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <__check_and_print_four_digits_limit+0x70>)
 80012b4:	6819      	ldr	r1, [r3, #0]
 80012b6:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <__check_and_print_four_digits_limit+0x74>)
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	460b      	mov	r3, r1
 80012bc:	490b      	ldr	r1, [pc, #44]	; (80012ec <__check_and_print_four_digits_limit+0x78>)
 80012be:	480c      	ldr	r0, [pc, #48]	; (80012f0 <__check_and_print_four_digits_limit+0x7c>)
 80012c0:	f005 fc1e 	bl	8006b00 <siprintf>
 80012c4:	4602      	mov	r2, r0
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <__check_and_print_four_digits_limit+0x80>)
 80012c8:	601a      	str	r2, [r3, #0]
	lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <__check_and_print_four_digits_limit+0x80>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4619      	mov	r1, r3
 80012d0:	4807      	ldr	r0, [pc, #28]	; (80012f0 <__check_and_print_four_digits_limit+0x7c>)
 80012d2:	f001 fe37 	bl	8002f44 <lcd_send_cmd>
	key_pressed = NONE_KEY_PRESSED;
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <__check_and_print_four_digits_limit+0x84>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200000b8 	.word	0x200000b8
 80012e8:	20000000 	.word	0x20000000
 80012ec:	08007434 	.word	0x08007434
 80012f0:	20000194 	.word	0x20000194
 80012f4:	200000a4 	.word	0x200000a4
 80012f8:	2000009c 	.word	0x2000009c

080012fc <__edit_six_digits>:

void
__edit_six_digits(int *settings_val, uint8_t src)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	70fb      	strb	r3, [r7, #3]
	if(settings_semaphore == 0)
 8001308:	4b4d      	ldr	r3, [pc, #308]	; (8001440 <__edit_six_digits+0x144>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d129      	bne.n	8001364 <__edit_six_digits+0x68>
	{
		settings_semaphore = 1;
 8001310:	4b4b      	ldr	r3, [pc, #300]	; (8001440 <__edit_six_digits+0x144>)
 8001312:	2201      	movs	r2, #1
 8001314:	601a      	str	r2, [r3, #0]
		int temp = *settings_val;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	617b      	str	r3, [r7, #20]
		for(int i = 0; i < 6; i++)
 800131c:	2300      	movs	r3, #0
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	e01c      	b.n	800135c <__edit_six_digits+0x60>
		{
			new_digits[i] = temp % 10;
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	4b47      	ldr	r3, [pc, #284]	; (8001444 <__edit_six_digits+0x148>)
 8001326:	fb83 1302 	smull	r1, r3, r3, r2
 800132a:	1099      	asrs	r1, r3, #2
 800132c:	17d3      	asrs	r3, r2, #31
 800132e:	1ac9      	subs	r1, r1, r3
 8001330:	460b      	mov	r3, r1
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	440b      	add	r3, r1
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	1ad1      	subs	r1, r2, r3
 800133a:	b2c9      	uxtb	r1, r1
 800133c:	4a42      	ldr	r2, [pc, #264]	; (8001448 <__edit_six_digits+0x14c>)
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4413      	add	r3, r2
 8001342:	460a      	mov	r2, r1
 8001344:	701a      	strb	r2, [r3, #0]
			temp = temp / 10;
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	4a3e      	ldr	r2, [pc, #248]	; (8001444 <__edit_six_digits+0x148>)
 800134a:	fb82 1203 	smull	r1, r2, r2, r3
 800134e:	1092      	asrs	r2, r2, #2
 8001350:	17db      	asrs	r3, r3, #31
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	617b      	str	r3, [r7, #20]
		for(int i = 0; i < 6; i++)
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	3301      	adds	r3, #1
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	2b05      	cmp	r3, #5
 8001360:	dddf      	ble.n	8001322 <__edit_six_digits+0x26>
					}
				}
				break;
		}
	}
}
 8001362:	e069      	b.n	8001438 <__edit_six_digits+0x13c>
		switch(current_digit_loc)
 8001364:	4b39      	ldr	r3, [pc, #228]	; (800144c <__edit_six_digits+0x150>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b05      	cmp	r3, #5
 800136a:	d865      	bhi.n	8001438 <__edit_six_digits+0x13c>
 800136c:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <__edit_six_digits+0x78>)
 800136e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001372:	bf00      	nop
 8001374:	0800138d 	.word	0x0800138d
 8001378:	08001399 	.word	0x08001399
 800137c:	080013a5 	.word	0x080013a5
 8001380:	080013b1 	.word	0x080013b1
 8001384:	080013bd 	.word	0x080013bd
 8001388:	080013c9 	.word	0x080013c9
				__store_six_digits(settings_val,src);
 800138c:	78fb      	ldrb	r3, [r7, #3]
 800138e:	4619      	mov	r1, r3
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff fe0b 	bl	8000fac <__store_six_digits>
				break;
 8001396:	e04f      	b.n	8001438 <__edit_six_digits+0x13c>
				__store_six_digits(settings_val,src);
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	4619      	mov	r1, r3
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff fe05 	bl	8000fac <__store_six_digits>
				break;
 80013a2:	e049      	b.n	8001438 <__edit_six_digits+0x13c>
				__store_six_digits(settings_val,src);
 80013a4:	78fb      	ldrb	r3, [r7, #3]
 80013a6:	4619      	mov	r1, r3
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff fdff 	bl	8000fac <__store_six_digits>
				break;
 80013ae:	e043      	b.n	8001438 <__edit_six_digits+0x13c>
				__store_six_digits(settings_val,src);
 80013b0:	78fb      	ldrb	r3, [r7, #3]
 80013b2:	4619      	mov	r1, r3
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff fdf9 	bl	8000fac <__store_six_digits>
				break;
 80013ba:	e03d      	b.n	8001438 <__edit_six_digits+0x13c>
				__store_six_digits(settings_val,src);
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	4619      	mov	r1, r3
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff fdf3 	bl	8000fac <__store_six_digits>
				break;
 80013c6:	e037      	b.n	8001438 <__edit_six_digits+0x13c>
				__store_six_digits(settings_val,src);
 80013c8:	78fb      	ldrb	r3, [r7, #3]
 80013ca:	4619      	mov	r1, r3
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff fded 	bl	8000fac <__store_six_digits>
				if(current_digit_loc == FIRST_DIGIT && settings_semaphore == 2)
 80013d2:	4b1e      	ldr	r3, [pc, #120]	; (800144c <__edit_six_digits+0x150>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d12d      	bne.n	8001436 <__edit_six_digits+0x13a>
 80013da:	4b19      	ldr	r3, [pc, #100]	; (8001440 <__edit_six_digits+0x144>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d129      	bne.n	8001436 <__edit_six_digits+0x13a>
					save_settings = 1;
 80013e2:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <__edit_six_digits+0x154>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	701a      	strb	r2, [r3, #0]
					DisplayActions = display_edit_settings;
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <__edit_six_digits+0x158>)
 80013ea:	4a1b      	ldr	r2, [pc, #108]	; (8001458 <__edit_six_digits+0x15c>)
 80013ec:	601a      	str	r2, [r3, #0]
					settings_semaphore = 0;
 80013ee:	4b14      	ldr	r3, [pc, #80]	; (8001440 <__edit_six_digits+0x144>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
					*settings_val = 0;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
					int place_val = 1;
 80013fa:	2301      	movs	r3, #1
 80013fc:	60fb      	str	r3, [r7, #12]
					for(int i = 0 ; i < 6; i++)
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	e015      	b.n	8001430 <__edit_six_digits+0x134>
						*settings_val += new_digits[i] * place_val;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	490f      	ldr	r1, [pc, #60]	; (8001448 <__edit_six_digits+0x14c>)
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	440b      	add	r3, r1
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4619      	mov	r1, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	fb03 f301 	mul.w	r3, r3, r1
 8001418:	441a      	add	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	601a      	str	r2, [r3, #0]
						place_val *= 10;
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	4613      	mov	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	60fb      	str	r3, [r7, #12]
					for(int i = 0 ; i < 6; i++)
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	3301      	adds	r3, #1
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	2b05      	cmp	r3, #5
 8001434:	dde6      	ble.n	8001404 <__edit_six_digits+0x108>
				break;
 8001436:	bf00      	nop
}
 8001438:	bf00      	nop
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200000a8 	.word	0x200000a8
 8001444:	66666667 	.word	0x66666667
 8001448:	200000b0 	.word	0x200000b0
 800144c:	200000ac 	.word	0x200000ac
 8001450:	20000100 	.word	0x20000100
 8001454:	20000128 	.word	0x20000128
 8001458:	08001d15 	.word	0x08001d15

0800145c <__edit_four_digits>:

void
__edit_four_digits(int *settings_val, uint8_t src)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af04      	add	r7, sp, #16
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	70fb      	strb	r3, [r7, #3]
	if(settings_semaphore == 0)
 8001468:	4b7b      	ldr	r3, [pc, #492]	; (8001658 <__edit_four_digits+0x1fc>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d107      	bne.n	8001480 <__edit_four_digits+0x24>
	{
		settings_semaphore = 1;
 8001470:	4b79      	ldr	r3, [pc, #484]	; (8001658 <__edit_four_digits+0x1fc>)
 8001472:	2201      	movs	r2, #1
 8001474:	601a      	str	r2, [r3, #0]
		new_four_digits = *settings_val;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a78      	ldr	r2, [pc, #480]	; (800165c <__edit_four_digits+0x200>)
 800147c:	6013      	str	r3, [r2, #0]
			settings_semaphore = 0;
			key_pressed = NONE_KEY_PRESSED;
			DisplayActions = display_edit_settings;
		}
	}
}
 800147e:	e0e7      	b.n	8001650 <__edit_four_digits+0x1f4>
	else if(settings_semaphore == 1)
 8001480:	4b75      	ldr	r3, [pc, #468]	; (8001658 <__edit_four_digits+0x1fc>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d160      	bne.n	800154a <__edit_four_digits+0xee>
		if(key_pressed == LEFT_KEY_PRESSED && key_pressed_flag == NONE_KEY_PRESSED)
 8001488:	4b75      	ldr	r3, [pc, #468]	; (8001660 <__edit_four_digits+0x204>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d10d      	bne.n	80014ac <__edit_four_digits+0x50>
 8001490:	4b74      	ldr	r3, [pc, #464]	; (8001664 <__edit_four_digits+0x208>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d109      	bne.n	80014ac <__edit_four_digits+0x50>
			new_four_digits++;
 8001498:	4b70      	ldr	r3, [pc, #448]	; (800165c <__edit_four_digits+0x200>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	3301      	adds	r3, #1
 800149e:	4a6f      	ldr	r2, [pc, #444]	; (800165c <__edit_four_digits+0x200>)
 80014a0:	6013      	str	r3, [r2, #0]
			__check_and_print_four_digits_limit(src);
 80014a2:	78fb      	ldrb	r3, [r7, #3]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fee5 	bl	8001274 <__check_and_print_four_digits_limit>
 80014aa:	e0d1      	b.n	8001650 <__edit_four_digits+0x1f4>
		else if(key_pressed == RIGHT_KEY_PRESSED && key_pressed_flag == NONE_KEY_PRESSED)
 80014ac:	4b6c      	ldr	r3, [pc, #432]	; (8001660 <__edit_four_digits+0x204>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d10d      	bne.n	80014d0 <__edit_four_digits+0x74>
 80014b4:	4b6b      	ldr	r3, [pc, #428]	; (8001664 <__edit_four_digits+0x208>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d109      	bne.n	80014d0 <__edit_four_digits+0x74>
			new_four_digits--;
 80014bc:	4b67      	ldr	r3, [pc, #412]	; (800165c <__edit_four_digits+0x200>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	4a66      	ldr	r2, [pc, #408]	; (800165c <__edit_four_digits+0x200>)
 80014c4:	6013      	str	r3, [r2, #0]
			__check_and_print_four_digits_limit(src);
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fed3 	bl	8001274 <__check_and_print_four_digits_limit>
 80014ce:	e0bf      	b.n	8001650 <__edit_four_digits+0x1f4>
		else if(key_pressed == ENTER_KEY_PRESSED && key_pressed_flag == NONE_KEY_PRESSED)
 80014d0:	4b63      	ldr	r3, [pc, #396]	; (8001660 <__edit_four_digits+0x204>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	d10c      	bne.n	80014f2 <__edit_four_digits+0x96>
 80014d8:	4b62      	ldr	r3, [pc, #392]	; (8001664 <__edit_four_digits+0x208>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d108      	bne.n	80014f2 <__edit_four_digits+0x96>
			settings_semaphore++;
 80014e0:	4b5d      	ldr	r3, [pc, #372]	; (8001658 <__edit_four_digits+0x1fc>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	3301      	adds	r3, #1
 80014e6:	4a5c      	ldr	r2, [pc, #368]	; (8001658 <__edit_four_digits+0x1fc>)
 80014e8:	6013      	str	r3, [r2, #0]
			key_pressed = NONE_KEY_PRESSED;
 80014ea:	4b5d      	ldr	r3, [pc, #372]	; (8001660 <__edit_four_digits+0x204>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	e0ae      	b.n	8001650 <__edit_four_digits+0x1f4>
		else if(key_pressed == ESC_KEY_PRESSED && key_pressed_flag == NONE_KEY_PRESSED)
 80014f2:	4b5b      	ldr	r3, [pc, #364]	; (8001660 <__edit_four_digits+0x204>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	f040 80aa 	bne.w	8001650 <__edit_four_digits+0x1f4>
 80014fc:	4b59      	ldr	r3, [pc, #356]	; (8001664 <__edit_four_digits+0x208>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	f040 80a5 	bne.w	8001650 <__edit_four_digits+0x1f4>
			edit_settings_cmd_len = sprintf(edit_settings_cmd,"n%d.val=%d%sn%d.pco=0%s",src, *settings_val,end_char,src,end_char);
 8001506:	78f9      	ldrb	r1, [r7, #3]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6818      	ldr	r0, [r3, #0]
 800150c:	78fb      	ldrb	r3, [r7, #3]
 800150e:	4a56      	ldr	r2, [pc, #344]	; (8001668 <__edit_four_digits+0x20c>)
 8001510:	9202      	str	r2, [sp, #8]
 8001512:	9301      	str	r3, [sp, #4]
 8001514:	4b54      	ldr	r3, [pc, #336]	; (8001668 <__edit_four_digits+0x20c>)
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	4603      	mov	r3, r0
 800151a:	460a      	mov	r2, r1
 800151c:	4953      	ldr	r1, [pc, #332]	; (800166c <__edit_four_digits+0x210>)
 800151e:	4854      	ldr	r0, [pc, #336]	; (8001670 <__edit_four_digits+0x214>)
 8001520:	f005 faee 	bl	8006b00 <siprintf>
 8001524:	4602      	mov	r2, r0
 8001526:	4b53      	ldr	r3, [pc, #332]	; (8001674 <__edit_four_digits+0x218>)
 8001528:	601a      	str	r2, [r3, #0]
			lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 800152a:	4b52      	ldr	r3, [pc, #328]	; (8001674 <__edit_four_digits+0x218>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4619      	mov	r1, r3
 8001530:	484f      	ldr	r0, [pc, #316]	; (8001670 <__edit_four_digits+0x214>)
 8001532:	f001 fd07 	bl	8002f44 <lcd_send_cmd>
			settings_semaphore = 0;
 8001536:	4b48      	ldr	r3, [pc, #288]	; (8001658 <__edit_four_digits+0x1fc>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
			key_pressed = NONE_KEY_PRESSED;
 800153c:	4b48      	ldr	r3, [pc, #288]	; (8001660 <__edit_four_digits+0x204>)
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
			DisplayActions = display_edit_settings;
 8001542:	4b4d      	ldr	r3, [pc, #308]	; (8001678 <__edit_four_digits+0x21c>)
 8001544:	4a4d      	ldr	r2, [pc, #308]	; (800167c <__edit_four_digits+0x220>)
 8001546:	601a      	str	r2, [r3, #0]
}
 8001548:	e082      	b.n	8001650 <__edit_four_digits+0x1f4>
	else if(settings_semaphore == 2)
 800154a:	4b43      	ldr	r3, [pc, #268]	; (8001658 <__edit_four_digits+0x1fc>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b02      	cmp	r3, #2
 8001550:	d17e      	bne.n	8001650 <__edit_four_digits+0x1f4>
		if(key_pressed == LEFT_KEY_PRESSED && key_pressed_flag == NONE_KEY_PRESSED)
 8001552:	4b43      	ldr	r3, [pc, #268]	; (8001660 <__edit_four_digits+0x204>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d10d      	bne.n	8001576 <__edit_four_digits+0x11a>
 800155a:	4b42      	ldr	r3, [pc, #264]	; (8001664 <__edit_four_digits+0x208>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d109      	bne.n	8001576 <__edit_four_digits+0x11a>
			new_four_digits+=10;
 8001562:	4b3e      	ldr	r3, [pc, #248]	; (800165c <__edit_four_digits+0x200>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	330a      	adds	r3, #10
 8001568:	4a3c      	ldr	r2, [pc, #240]	; (800165c <__edit_four_digits+0x200>)
 800156a:	6013      	str	r3, [r2, #0]
			__check_and_print_four_digits_limit(src);
 800156c:	78fb      	ldrb	r3, [r7, #3]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fe80 	bl	8001274 <__check_and_print_four_digits_limit>
 8001574:	e06c      	b.n	8001650 <__edit_four_digits+0x1f4>
		else if(key_pressed == RIGHT_KEY_PRESSED && key_pressed_flag == NONE_KEY_PRESSED)
 8001576:	4b3a      	ldr	r3, [pc, #232]	; (8001660 <__edit_four_digits+0x204>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d10d      	bne.n	800159a <__edit_four_digits+0x13e>
 800157e:	4b39      	ldr	r3, [pc, #228]	; (8001664 <__edit_four_digits+0x208>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d109      	bne.n	800159a <__edit_four_digits+0x13e>
			new_four_digits-=10;
 8001586:	4b35      	ldr	r3, [pc, #212]	; (800165c <__edit_four_digits+0x200>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	3b0a      	subs	r3, #10
 800158c:	4a33      	ldr	r2, [pc, #204]	; (800165c <__edit_four_digits+0x200>)
 800158e:	6013      	str	r3, [r2, #0]
			__check_and_print_four_digits_limit(src);
 8001590:	78fb      	ldrb	r3, [r7, #3]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fe6e 	bl	8001274 <__check_and_print_four_digits_limit>
 8001598:	e05a      	b.n	8001650 <__edit_four_digits+0x1f4>
		else if(key_pressed == ENTER_KEY_PRESSED && key_pressed_flag == NONE_KEY_PRESSED)
 800159a:	4b31      	ldr	r3, [pc, #196]	; (8001660 <__edit_four_digits+0x204>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b03      	cmp	r3, #3
 80015a0:	d12c      	bne.n	80015fc <__edit_four_digits+0x1a0>
 80015a2:	4b30      	ldr	r3, [pc, #192]	; (8001664 <__edit_four_digits+0x208>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d128      	bne.n	80015fc <__edit_four_digits+0x1a0>
			*settings_val = new_four_digits;
 80015aa:	4b2c      	ldr	r3, [pc, #176]	; (800165c <__edit_four_digits+0x200>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	601a      	str	r2, [r3, #0]
			settings_semaphore=0;
 80015b2:	4b29      	ldr	r3, [pc, #164]	; (8001658 <__edit_four_digits+0x1fc>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
			edit_settings_cmd_len = sprintf(edit_settings_cmd,"n%d.val=%d%sn%d.pco=0%s",src, *settings_val,end_char,src,end_char);
 80015b8:	78f9      	ldrb	r1, [r7, #3]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	78fb      	ldrb	r3, [r7, #3]
 80015c0:	4a29      	ldr	r2, [pc, #164]	; (8001668 <__edit_four_digits+0x20c>)
 80015c2:	9202      	str	r2, [sp, #8]
 80015c4:	9301      	str	r3, [sp, #4]
 80015c6:	4b28      	ldr	r3, [pc, #160]	; (8001668 <__edit_four_digits+0x20c>)
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	4603      	mov	r3, r0
 80015cc:	460a      	mov	r2, r1
 80015ce:	4927      	ldr	r1, [pc, #156]	; (800166c <__edit_four_digits+0x210>)
 80015d0:	4827      	ldr	r0, [pc, #156]	; (8001670 <__edit_four_digits+0x214>)
 80015d2:	f005 fa95 	bl	8006b00 <siprintf>
 80015d6:	4602      	mov	r2, r0
 80015d8:	4b26      	ldr	r3, [pc, #152]	; (8001674 <__edit_four_digits+0x218>)
 80015da:	601a      	str	r2, [r3, #0]
			lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 80015dc:	4b25      	ldr	r3, [pc, #148]	; (8001674 <__edit_four_digits+0x218>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4619      	mov	r1, r3
 80015e2:	4823      	ldr	r0, [pc, #140]	; (8001670 <__edit_four_digits+0x214>)
 80015e4:	f001 fcae 	bl	8002f44 <lcd_send_cmd>
			key_pressed = NONE_KEY_PRESSED;
 80015e8:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <__edit_four_digits+0x204>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
			save_settings = 1;
 80015ee:	4b24      	ldr	r3, [pc, #144]	; (8001680 <__edit_four_digits+0x224>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	701a      	strb	r2, [r3, #0]
			DisplayActions = display_edit_settings;
 80015f4:	4b20      	ldr	r3, [pc, #128]	; (8001678 <__edit_four_digits+0x21c>)
 80015f6:	4a21      	ldr	r2, [pc, #132]	; (800167c <__edit_four_digits+0x220>)
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	e029      	b.n	8001650 <__edit_four_digits+0x1f4>
		else if(key_pressed == ESC_KEY_PRESSED && key_pressed_flag == NONE_KEY_PRESSED)
 80015fc:	4b18      	ldr	r3, [pc, #96]	; (8001660 <__edit_four_digits+0x204>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b04      	cmp	r3, #4
 8001602:	d125      	bne.n	8001650 <__edit_four_digits+0x1f4>
 8001604:	4b17      	ldr	r3, [pc, #92]	; (8001664 <__edit_four_digits+0x208>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d121      	bne.n	8001650 <__edit_four_digits+0x1f4>
			edit_settings_cmd_len = sprintf(edit_settings_cmd,"n%d.val=%d%sn%d.pco=0%s",src, *settings_val,end_char,src,end_char);
 800160c:	78f9      	ldrb	r1, [r7, #3]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6818      	ldr	r0, [r3, #0]
 8001612:	78fb      	ldrb	r3, [r7, #3]
 8001614:	4a14      	ldr	r2, [pc, #80]	; (8001668 <__edit_four_digits+0x20c>)
 8001616:	9202      	str	r2, [sp, #8]
 8001618:	9301      	str	r3, [sp, #4]
 800161a:	4b13      	ldr	r3, [pc, #76]	; (8001668 <__edit_four_digits+0x20c>)
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	4603      	mov	r3, r0
 8001620:	460a      	mov	r2, r1
 8001622:	4912      	ldr	r1, [pc, #72]	; (800166c <__edit_four_digits+0x210>)
 8001624:	4812      	ldr	r0, [pc, #72]	; (8001670 <__edit_four_digits+0x214>)
 8001626:	f005 fa6b 	bl	8006b00 <siprintf>
 800162a:	4602      	mov	r2, r0
 800162c:	4b11      	ldr	r3, [pc, #68]	; (8001674 <__edit_four_digits+0x218>)
 800162e:	601a      	str	r2, [r3, #0]
			lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8001630:	4b10      	ldr	r3, [pc, #64]	; (8001674 <__edit_four_digits+0x218>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4619      	mov	r1, r3
 8001636:	480e      	ldr	r0, [pc, #56]	; (8001670 <__edit_four_digits+0x214>)
 8001638:	f001 fc84 	bl	8002f44 <lcd_send_cmd>
			settings_semaphore = 0;
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <__edit_four_digits+0x1fc>)
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
			key_pressed = NONE_KEY_PRESSED;
 8001642:	4b07      	ldr	r3, [pc, #28]	; (8001660 <__edit_four_digits+0x204>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
			DisplayActions = display_edit_settings;
 8001648:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <__edit_four_digits+0x21c>)
 800164a:	4a0c      	ldr	r2, [pc, #48]	; (800167c <__edit_four_digits+0x220>)
 800164c:	601a      	str	r2, [r3, #0]
}
 800164e:	e7ff      	b.n	8001650 <__edit_four_digits+0x1f4>
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200000a8 	.word	0x200000a8
 800165c:	200000b8 	.word	0x200000b8
 8001660:	2000009c 	.word	0x2000009c
 8001664:	20000190 	.word	0x20000190
 8001668:	20000000 	.word	0x20000000
 800166c:	08007458 	.word	0x08007458
 8001670:	20000194 	.word	0x20000194
 8001674:	200000a4 	.word	0x200000a4
 8001678:	20000128 	.word	0x20000128
 800167c:	08001d15 	.word	0x08001d15
 8001680:	20000100 	.word	0x20000100

08001684 <__edit_button_selection>:

void
__edit_button_selection(uint8_t *settings_val)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af04      	add	r7, sp, #16
 800168a:	6078      	str	r0, [r7, #4]
	if(key_pressed == LEFT_KEY_PRESSED)
 800168c:	4b4f      	ldr	r3, [pc, #316]	; (80017cc <__edit_button_selection+0x148>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d119      	bne.n	80016c8 <__edit_button_selection+0x44>
	{
		button_state = 1;
 8001694:	4b4e      	ldr	r3, [pc, #312]	; (80017d0 <__edit_button_selection+0x14c>)
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]
		edit_settings_cmd_len = sprintf(edit_settings_cmd,"b1.pco=63488%sb1.pco2=63488%sb0.pco=65535%sb1.pco2=65535%s",end_char,end_char,end_char,end_char);
 800169a:	4b4e      	ldr	r3, [pc, #312]	; (80017d4 <__edit_button_selection+0x150>)
 800169c:	9301      	str	r3, [sp, #4]
 800169e:	4b4d      	ldr	r3, [pc, #308]	; (80017d4 <__edit_button_selection+0x150>)
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	4b4c      	ldr	r3, [pc, #304]	; (80017d4 <__edit_button_selection+0x150>)
 80016a4:	4a4b      	ldr	r2, [pc, #300]	; (80017d4 <__edit_button_selection+0x150>)
 80016a6:	494c      	ldr	r1, [pc, #304]	; (80017d8 <__edit_button_selection+0x154>)
 80016a8:	484c      	ldr	r0, [pc, #304]	; (80017dc <__edit_button_selection+0x158>)
 80016aa:	f005 fa29 	bl	8006b00 <siprintf>
 80016ae:	4602      	mov	r2, r0
 80016b0:	4b4b      	ldr	r3, [pc, #300]	; (80017e0 <__edit_button_selection+0x15c>)
 80016b2:	601a      	str	r2, [r3, #0]
		lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 80016b4:	4b4a      	ldr	r3, [pc, #296]	; (80017e0 <__edit_button_selection+0x15c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4619      	mov	r1, r3
 80016ba:	4848      	ldr	r0, [pc, #288]	; (80017dc <__edit_button_selection+0x158>)
 80016bc:	f001 fc42 	bl	8002f44 <lcd_send_cmd>
		key_pressed = NONE_KEY_PRESSED;
 80016c0:	4b42      	ldr	r3, [pc, #264]	; (80017cc <__edit_button_selection+0x148>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
		edit_settings_cmd_len = sprintf(edit_settings_cmd,"b1.pco=65535%sb1.pco2=65535%sb0.pco=65535%sb0.pco2=65535%s",end_char,end_char,end_char,end_char);
		lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
		key_pressed = NONE_KEY_PRESSED;
		DisplayActions = display_edit_settings;
	}
}
 80016c6:	e07d      	b.n	80017c4 <__edit_button_selection+0x140>
	else if(key_pressed == RIGHT_KEY_PRESSED)
 80016c8:	4b40      	ldr	r3, [pc, #256]	; (80017cc <__edit_button_selection+0x148>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d119      	bne.n	8001704 <__edit_button_selection+0x80>
		button_state = 0;
 80016d0:	4b3f      	ldr	r3, [pc, #252]	; (80017d0 <__edit_button_selection+0x14c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	701a      	strb	r2, [r3, #0]
		edit_settings_cmd_len = sprintf(edit_settings_cmd,"b0.pco=63488%sb0.pco2=63488%sb1.pco=65535%sb1.pco2=65535%s",end_char,end_char,end_char,end_char);
 80016d6:	4b3f      	ldr	r3, [pc, #252]	; (80017d4 <__edit_button_selection+0x150>)
 80016d8:	9301      	str	r3, [sp, #4]
 80016da:	4b3e      	ldr	r3, [pc, #248]	; (80017d4 <__edit_button_selection+0x150>)
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	4b3d      	ldr	r3, [pc, #244]	; (80017d4 <__edit_button_selection+0x150>)
 80016e0:	4a3c      	ldr	r2, [pc, #240]	; (80017d4 <__edit_button_selection+0x150>)
 80016e2:	4940      	ldr	r1, [pc, #256]	; (80017e4 <__edit_button_selection+0x160>)
 80016e4:	483d      	ldr	r0, [pc, #244]	; (80017dc <__edit_button_selection+0x158>)
 80016e6:	f005 fa0b 	bl	8006b00 <siprintf>
 80016ea:	4602      	mov	r2, r0
 80016ec:	4b3c      	ldr	r3, [pc, #240]	; (80017e0 <__edit_button_selection+0x15c>)
 80016ee:	601a      	str	r2, [r3, #0]
		lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 80016f0:	4b3b      	ldr	r3, [pc, #236]	; (80017e0 <__edit_button_selection+0x15c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	4839      	ldr	r0, [pc, #228]	; (80017dc <__edit_button_selection+0x158>)
 80016f8:	f001 fc24 	bl	8002f44 <lcd_send_cmd>
		key_pressed = NONE_KEY_PRESSED;
 80016fc:	4b33      	ldr	r3, [pc, #204]	; (80017cc <__edit_button_selection+0x148>)
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
}
 8001702:	e05f      	b.n	80017c4 <__edit_button_selection+0x140>
	else if(key_pressed == ENTER_KEY_PRESSED)
 8001704:	4b31      	ldr	r3, [pc, #196]	; (80017cc <__edit_button_selection+0x148>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b03      	cmp	r3, #3
 800170a:	d13e      	bne.n	800178a <__edit_button_selection+0x106>
		*settings_val = button_state;
 800170c:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <__edit_button_selection+0x14c>)
 800170e:	781a      	ldrb	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	701a      	strb	r2, [r3, #0]
		if(button_state == 0)
 8001714:	4b2e      	ldr	r3, [pc, #184]	; (80017d0 <__edit_button_selection+0x14c>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d111      	bne.n	8001740 <__edit_button_selection+0xbc>
			edit_settings_cmd_len = sprintf(edit_settings_cmd,"b0.pic=6%sb1.pic=5%sb1.pco=65535%sb1.pco2=65535%sb0.pco=65535%sb0.pco2=65535%s",end_char,end_char,end_char,end_char,end_char,end_char);
 800171c:	4b2d      	ldr	r3, [pc, #180]	; (80017d4 <__edit_button_selection+0x150>)
 800171e:	9303      	str	r3, [sp, #12]
 8001720:	4b2c      	ldr	r3, [pc, #176]	; (80017d4 <__edit_button_selection+0x150>)
 8001722:	9302      	str	r3, [sp, #8]
 8001724:	4b2b      	ldr	r3, [pc, #172]	; (80017d4 <__edit_button_selection+0x150>)
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <__edit_button_selection+0x150>)
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	4b29      	ldr	r3, [pc, #164]	; (80017d4 <__edit_button_selection+0x150>)
 800172e:	4a29      	ldr	r2, [pc, #164]	; (80017d4 <__edit_button_selection+0x150>)
 8001730:	492d      	ldr	r1, [pc, #180]	; (80017e8 <__edit_button_selection+0x164>)
 8001732:	482a      	ldr	r0, [pc, #168]	; (80017dc <__edit_button_selection+0x158>)
 8001734:	f005 f9e4 	bl	8006b00 <siprintf>
 8001738:	4602      	mov	r2, r0
 800173a:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <__edit_button_selection+0x15c>)
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	e014      	b.n	800176a <__edit_button_selection+0xe6>
		else if(button_state == 1)
 8001740:	4b23      	ldr	r3, [pc, #140]	; (80017d0 <__edit_button_selection+0x14c>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d110      	bne.n	800176a <__edit_button_selection+0xe6>
			edit_settings_cmd_len = sprintf(edit_settings_cmd,"b1.pic=4%sb0.pic=5%sb1.pco=65535%sb1.pco2=65535%sb0.pco=65535%sb0.pco2=65535%s",end_char,end_char,end_char,end_char,end_char,end_char);
 8001748:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <__edit_button_selection+0x150>)
 800174a:	9303      	str	r3, [sp, #12]
 800174c:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <__edit_button_selection+0x150>)
 800174e:	9302      	str	r3, [sp, #8]
 8001750:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <__edit_button_selection+0x150>)
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <__edit_button_selection+0x150>)
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	4b1e      	ldr	r3, [pc, #120]	; (80017d4 <__edit_button_selection+0x150>)
 800175a:	4a1e      	ldr	r2, [pc, #120]	; (80017d4 <__edit_button_selection+0x150>)
 800175c:	4923      	ldr	r1, [pc, #140]	; (80017ec <__edit_button_selection+0x168>)
 800175e:	481f      	ldr	r0, [pc, #124]	; (80017dc <__edit_button_selection+0x158>)
 8001760:	f005 f9ce 	bl	8006b00 <siprintf>
 8001764:	4602      	mov	r2, r0
 8001766:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <__edit_button_selection+0x15c>)
 8001768:	601a      	str	r2, [r3, #0]
		lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 800176a:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <__edit_button_selection+0x15c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4619      	mov	r1, r3
 8001770:	481a      	ldr	r0, [pc, #104]	; (80017dc <__edit_button_selection+0x158>)
 8001772:	f001 fbe7 	bl	8002f44 <lcd_send_cmd>
		key_pressed = NONE_KEY_PRESSED;
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <__edit_button_selection+0x148>)
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
		save_settings = 1;
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <__edit_button_selection+0x16c>)
 800177e:	2201      	movs	r2, #1
 8001780:	701a      	strb	r2, [r3, #0]
		DisplayActions = display_edit_settings;
 8001782:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <__edit_button_selection+0x170>)
 8001784:	4a1c      	ldr	r2, [pc, #112]	; (80017f8 <__edit_button_selection+0x174>)
 8001786:	601a      	str	r2, [r3, #0]
}
 8001788:	e01c      	b.n	80017c4 <__edit_button_selection+0x140>
	else if(key_pressed == ESC_KEY_PRESSED)
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <__edit_button_selection+0x148>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b04      	cmp	r3, #4
 8001790:	d118      	bne.n	80017c4 <__edit_button_selection+0x140>
		edit_settings_cmd_len = sprintf(edit_settings_cmd,"b1.pco=65535%sb1.pco2=65535%sb0.pco=65535%sb0.pco2=65535%s",end_char,end_char,end_char,end_char);
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <__edit_button_selection+0x150>)
 8001794:	9301      	str	r3, [sp, #4]
 8001796:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <__edit_button_selection+0x150>)
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <__edit_button_selection+0x150>)
 800179c:	4a0d      	ldr	r2, [pc, #52]	; (80017d4 <__edit_button_selection+0x150>)
 800179e:	4917      	ldr	r1, [pc, #92]	; (80017fc <__edit_button_selection+0x178>)
 80017a0:	480e      	ldr	r0, [pc, #56]	; (80017dc <__edit_button_selection+0x158>)
 80017a2:	f005 f9ad 	bl	8006b00 <siprintf>
 80017a6:	4602      	mov	r2, r0
 80017a8:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <__edit_button_selection+0x15c>)
 80017aa:	601a      	str	r2, [r3, #0]
		lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <__edit_button_selection+0x15c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4619      	mov	r1, r3
 80017b2:	480a      	ldr	r0, [pc, #40]	; (80017dc <__edit_button_selection+0x158>)
 80017b4:	f001 fbc6 	bl	8002f44 <lcd_send_cmd>
		key_pressed = NONE_KEY_PRESSED;
 80017b8:	4b04      	ldr	r3, [pc, #16]	; (80017cc <__edit_button_selection+0x148>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
		DisplayActions = display_edit_settings;
 80017be:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <__edit_button_selection+0x170>)
 80017c0:	4a0d      	ldr	r2, [pc, #52]	; (80017f8 <__edit_button_selection+0x174>)
 80017c2:	601a      	str	r2, [r3, #0]
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	2000009c 	.word	0x2000009c
 80017d0:	200000bc 	.word	0x200000bc
 80017d4:	20000000 	.word	0x20000000
 80017d8:	08007470 	.word	0x08007470
 80017dc:	20000194 	.word	0x20000194
 80017e0:	200000a4 	.word	0x200000a4
 80017e4:	080074ac 	.word	0x080074ac
 80017e8:	080074e8 	.word	0x080074e8
 80017ec:	08007538 	.word	0x08007538
 80017f0:	20000100 	.word	0x20000100
 80017f4:	20000128 	.word	0x20000128
 80017f8:	08001d15 	.word	0x08001d15
 80017fc:	08007588 	.word	0x08007588

08001800 <__update_offset_makeup_water_added>:

void __update_offset_makeup_water_added(char *disp_mwa_cmd, int *disp_mwa_cmd_len)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af02      	add	r7, sp, #8
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
	uint8_t n[6];
	int temp = yorker_settings.offset_mkupwater;
 800180a:	4b24      	ldr	r3, [pc, #144]	; (800189c <__update_offset_makeup_water_added+0x9c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 6; i++)
 8001810:	2300      	movs	r3, #0
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	e03a      	b.n	800188c <__update_offset_makeup_water_added+0x8c>
	{
		n[i] = temp % 10;
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	4b21      	ldr	r3, [pc, #132]	; (80018a0 <__update_offset_makeup_water_added+0xa0>)
 800181a:	fb83 1302 	smull	r1, r3, r3, r2
 800181e:	1099      	asrs	r1, r3, #2
 8001820:	17d3      	asrs	r3, r2, #31
 8001822:	1ac9      	subs	r1, r1, r3
 8001824:	460b      	mov	r3, r1
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	1ad1      	subs	r1, r2, r3
 800182e:	b2c9      	uxtb	r1, r1
 8001830:	f107 0208 	add.w	r2, r7, #8
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4413      	add	r3, r2
 8001838:	460a      	mov	r2, r1
 800183a:	701a      	strb	r2, [r3, #0]
		temp = temp / 10;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	4a18      	ldr	r2, [pc, #96]	; (80018a0 <__update_offset_makeup_water_added+0xa0>)
 8001840:	fb82 1203 	smull	r1, r2, r2, r3
 8001844:	1092      	asrs	r2, r2, #2
 8001846:	17db      	asrs	r3, r3, #31
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	617b      	str	r3, [r7, #20]
		*disp_mwa_cmd_len += snprintf (disp_mwa_cmd+(*disp_mwa_cmd_len),1024-(*disp_mwa_cmd_len),"n%d.val=%d%s",i,n[i],end_char);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	1898      	adds	r0, r3, r2
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800185e:	4619      	mov	r1, r3
 8001860:	f107 0208 	add.w	r2, r7, #8
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4413      	add	r3, r2
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	461a      	mov	r2, r3
 800186c:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <__update_offset_makeup_water_added+0xa4>)
 800186e:	9301      	str	r3, [sp, #4]
 8001870:	9200      	str	r2, [sp, #0]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4a0c      	ldr	r2, [pc, #48]	; (80018a8 <__update_offset_makeup_water_added+0xa8>)
 8001876:	f005 f90f 	bl	8006a98 <sniprintf>
 800187a:	4602      	mov	r2, r0
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	441a      	add	r2, r3
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 6; i++)
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	3301      	adds	r3, #1
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	2b05      	cmp	r3, #5
 8001890:	ddc1      	ble.n	8001816 <__update_offset_makeup_water_added+0x16>
	}
}
 8001892:	bf00      	nop
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200000dc 	.word	0x200000dc
 80018a0:	66666667 	.word	0x66666667
 80018a4:	20000000 	.word	0x20000000
 80018a8:	08007434 	.word	0x08007434

080018ac <__update_offset_blowdown_water>:

void __update_offset_blowdown_water(char *disp_mwa_cmd, int *disp_mwa_cmd_len)
{
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af02      	add	r7, sp, #8
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
	uint8_t n[6];
	int temp = yorker_settings.offset_blowdown;
 80018b6:	4b25      	ldr	r3, [pc, #148]	; (800194c <__update_offset_blowdown_water+0xa0>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 6; i++)
 80018bc:	2300      	movs	r3, #0
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	e03d      	b.n	800193e <__update_offset_blowdown_water+0x92>
	{
		n[i] = temp % 10;
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	4b22      	ldr	r3, [pc, #136]	; (8001950 <__update_offset_blowdown_water+0xa4>)
 80018c6:	fb83 1302 	smull	r1, r3, r3, r2
 80018ca:	1099      	asrs	r1, r3, #2
 80018cc:	17d3      	asrs	r3, r2, #31
 80018ce:	1ac9      	subs	r1, r1, r3
 80018d0:	460b      	mov	r3, r1
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	1ad1      	subs	r1, r2, r3
 80018da:	b2c9      	uxtb	r1, r1
 80018dc:	f107 0208 	add.w	r2, r7, #8
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	4413      	add	r3, r2
 80018e4:	460a      	mov	r2, r1
 80018e6:	701a      	strb	r2, [r3, #0]
		temp = temp / 10;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	4a19      	ldr	r2, [pc, #100]	; (8001950 <__update_offset_blowdown_water+0xa4>)
 80018ec:	fb82 1203 	smull	r1, r2, r2, r3
 80018f0:	1092      	asrs	r2, r2, #2
 80018f2:	17db      	asrs	r3, r3, #31
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	617b      	str	r3, [r7, #20]
		*disp_mwa_cmd_len += snprintf (disp_mwa_cmd+(*disp_mwa_cmd_len),1024-(*disp_mwa_cmd_len),"n%d.val=%d%s",i+6,n[i],end_char);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	1898      	adds	r0, r3, r2
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800190a:	461c      	mov	r4, r3
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1d99      	adds	r1, r3, #6
 8001910:	f107 0208 	add.w	r2, r7, #8
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	4413      	add	r3, r2
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <__update_offset_blowdown_water+0xa8>)
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	9200      	str	r2, [sp, #0]
 8001922:	460b      	mov	r3, r1
 8001924:	4a0c      	ldr	r2, [pc, #48]	; (8001958 <__update_offset_blowdown_water+0xac>)
 8001926:	4621      	mov	r1, r4
 8001928:	f005 f8b6 	bl	8006a98 <sniprintf>
 800192c:	4602      	mov	r2, r0
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	441a      	add	r2, r3
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 6; i++)
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	3301      	adds	r3, #1
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	2b05      	cmp	r3, #5
 8001942:	ddbe      	ble.n	80018c2 <__update_offset_blowdown_water+0x16>
	}
}
 8001944:	bf00      	nop
 8001946:	371c      	adds	r7, #28
 8001948:	46bd      	mov	sp, r7
 800194a:	bd90      	pop	{r4, r7, pc}
 800194c:	200000dc 	.word	0x200000dc
 8001950:	66666667 	.word	0x66666667
 8001954:	20000000 	.word	0x20000000
 8001958:	08007434 	.word	0x08007434

0800195c <__update_pump1_lts_per_pulse>:

void __update_pump1_lts_per_pulse(char *disp_mwa_cmd, int *disp_mwa_cmd_len)
{
 800195c:	b590      	push	{r4, r7, lr}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af02      	add	r7, sp, #8
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
	uint8_t n[6];
	int temp = yorker_settings.pump1_lts_per_pulse;
 8001966:	4b26      	ldr	r3, [pc, #152]	; (8001a00 <__update_pump1_lts_per_pulse+0xa4>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 6; i++)
 800196c:	2300      	movs	r3, #0
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	e03e      	b.n	80019f0 <__update_pump1_lts_per_pulse+0x94>
	{
		n[i] = temp % 10;
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	4b23      	ldr	r3, [pc, #140]	; (8001a04 <__update_pump1_lts_per_pulse+0xa8>)
 8001976:	fb83 1302 	smull	r1, r3, r3, r2
 800197a:	1099      	asrs	r1, r3, #2
 800197c:	17d3      	asrs	r3, r2, #31
 800197e:	1ac9      	subs	r1, r1, r3
 8001980:	460b      	mov	r3, r1
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	1ad1      	subs	r1, r2, r3
 800198a:	b2c9      	uxtb	r1, r1
 800198c:	f107 0208 	add.w	r2, r7, #8
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	4413      	add	r3, r2
 8001994:	460a      	mov	r2, r1
 8001996:	701a      	strb	r2, [r3, #0]
		temp = temp / 10;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	4a1a      	ldr	r2, [pc, #104]	; (8001a04 <__update_pump1_lts_per_pulse+0xa8>)
 800199c:	fb82 1203 	smull	r1, r2, r2, r3
 80019a0:	1092      	asrs	r2, r2, #2
 80019a2:	17db      	asrs	r3, r3, #31
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	617b      	str	r3, [r7, #20]
		*disp_mwa_cmd_len += snprintf (disp_mwa_cmd+(*disp_mwa_cmd_len),1024-(*disp_mwa_cmd_len),"n%d.val=%d%s",i+12,n[i],end_char);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	1898      	adds	r0, r3, r2
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80019ba:	461c      	mov	r4, r3
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	f103 010c 	add.w	r1, r3, #12
 80019c2:	f107 0208 	add.w	r2, r7, #8
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	4413      	add	r3, r2
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <__update_pump1_lts_per_pulse+0xac>)
 80019d0:	9301      	str	r3, [sp, #4]
 80019d2:	9200      	str	r2, [sp, #0]
 80019d4:	460b      	mov	r3, r1
 80019d6:	4a0d      	ldr	r2, [pc, #52]	; (8001a0c <__update_pump1_lts_per_pulse+0xb0>)
 80019d8:	4621      	mov	r1, r4
 80019da:	f005 f85d 	bl	8006a98 <sniprintf>
 80019de:	4602      	mov	r2, r0
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	441a      	add	r2, r3
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 6; i++)
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	3301      	adds	r3, #1
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	2b05      	cmp	r3, #5
 80019f4:	ddbd      	ble.n	8001972 <__update_pump1_lts_per_pulse+0x16>
	}
}
 80019f6:	bf00      	nop
 80019f8:	371c      	adds	r7, #28
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd90      	pop	{r4, r7, pc}
 80019fe:	bf00      	nop
 8001a00:	200000dc 	.word	0x200000dc
 8001a04:	66666667 	.word	0x66666667
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	08007434 	.word	0x08007434

08001a10 <__update_pump2_lts_per_pulse>:

void __update_pump2_lts_per_pulse(char *disp_mwa_cmd, int *disp_mwa_cmd_len)
{
 8001a10:	b590      	push	{r4, r7, lr}
 8001a12:	b089      	sub	sp, #36	; 0x24
 8001a14:	af02      	add	r7, sp, #8
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
	uint8_t n[6];
	int temp = yorker_settings.pump2_lts_per_pulse;
 8001a1a:	4b26      	ldr	r3, [pc, #152]	; (8001ab4 <__update_pump2_lts_per_pulse+0xa4>)
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 6; i++)
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	e03e      	b.n	8001aa4 <__update_pump2_lts_per_pulse+0x94>
	{
		n[i] = temp % 10;
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	4b23      	ldr	r3, [pc, #140]	; (8001ab8 <__update_pump2_lts_per_pulse+0xa8>)
 8001a2a:	fb83 1302 	smull	r1, r3, r3, r2
 8001a2e:	1099      	asrs	r1, r3, #2
 8001a30:	17d3      	asrs	r3, r2, #31
 8001a32:	1ac9      	subs	r1, r1, r3
 8001a34:	460b      	mov	r3, r1
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	440b      	add	r3, r1
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	1ad1      	subs	r1, r2, r3
 8001a3e:	b2c9      	uxtb	r1, r1
 8001a40:	f107 0208 	add.w	r2, r7, #8
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4413      	add	r3, r2
 8001a48:	460a      	mov	r2, r1
 8001a4a:	701a      	strb	r2, [r3, #0]
		temp = temp / 10;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	4a1a      	ldr	r2, [pc, #104]	; (8001ab8 <__update_pump2_lts_per_pulse+0xa8>)
 8001a50:	fb82 1203 	smull	r1, r2, r2, r3
 8001a54:	1092      	asrs	r2, r2, #2
 8001a56:	17db      	asrs	r3, r3, #31
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	617b      	str	r3, [r7, #20]
		*disp_mwa_cmd_len += snprintf (disp_mwa_cmd+(*disp_mwa_cmd_len),1024-(*disp_mwa_cmd_len),"n%d.val=%d%s",i+18,n[i],end_char);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	1898      	adds	r0, r3, r2
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001a6e:	461c      	mov	r4, r3
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	f103 0112 	add.w	r1, r3, #18
 8001a76:	f107 0208 	add.w	r2, r7, #8
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <__update_pump2_lts_per_pulse+0xac>)
 8001a84:	9301      	str	r3, [sp, #4]
 8001a86:	9200      	str	r2, [sp, #0]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4a0d      	ldr	r2, [pc, #52]	; (8001ac0 <__update_pump2_lts_per_pulse+0xb0>)
 8001a8c:	4621      	mov	r1, r4
 8001a8e:	f005 f803 	bl	8006a98 <sniprintf>
 8001a92:	4602      	mov	r2, r0
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	441a      	add	r2, r3
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 6; i++)
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	2b05      	cmp	r3, #5
 8001aa8:	ddbd      	ble.n	8001a26 <__update_pump2_lts_per_pulse+0x16>
	}
}
 8001aaa:	bf00      	nop
 8001aac:	371c      	adds	r7, #28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd90      	pop	{r4, r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	200000dc 	.word	0x200000dc
 8001ab8:	66666667 	.word	0x66666667
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	08007434 	.word	0x08007434

08001ac4 <__update_ratio_1>:

void __update_ratio_1(char *disp_mwa_cmd, int *disp_mwa_cmd_len)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af02      	add	r7, sp, #8
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
	*disp_mwa_cmd_len += snprintf (disp_mwa_cmd+(*disp_mwa_cmd_len),1024-(*disp_mwa_cmd_len),"n%d.val=%d%s",24,yorker_settings.ratio_1,end_char);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	1898      	adds	r0, r3, r2
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <__update_ratio_1+0x44>)
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	4a09      	ldr	r2, [pc, #36]	; (8001b0c <__update_ratio_1+0x48>)
 8001ae8:	9201      	str	r2, [sp, #4]
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	2318      	movs	r3, #24
 8001aee:	4a08      	ldr	r2, [pc, #32]	; (8001b10 <__update_ratio_1+0x4c>)
 8001af0:	f004 ffd2 	bl	8006a98 <sniprintf>
 8001af4:	4602      	mov	r2, r0
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	441a      	add	r2, r3
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	601a      	str	r2, [r3, #0]
}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	200000dc 	.word	0x200000dc
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	08007434 	.word	0x08007434

08001b14 <__update_ratio_2>:

void __update_ratio_2(char *disp_mwa_cmd, int *disp_mwa_cmd_len)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af02      	add	r7, sp, #8
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
	*disp_mwa_cmd_len += snprintf (disp_mwa_cmd+(*disp_mwa_cmd_len),1024-(*disp_mwa_cmd_len),"n%d.val=%d%s",25,yorker_settings.ratio_2,end_char);
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	461a      	mov	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	1898      	adds	r0, r3, r2
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001b30:	4619      	mov	r1, r3
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <__update_ratio_2+0x44>)
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	4a09      	ldr	r2, [pc, #36]	; (8001b5c <__update_ratio_2+0x48>)
 8001b38:	9201      	str	r2, [sp, #4]
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	2319      	movs	r3, #25
 8001b3e:	4a08      	ldr	r2, [pc, #32]	; (8001b60 <__update_ratio_2+0x4c>)
 8001b40:	f004 ffaa 	bl	8006a98 <sniprintf>
 8001b44:	4602      	mov	r2, r0
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	441a      	add	r2, r3
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	601a      	str	r2, [r3, #0]
}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	200000dc 	.word	0x200000dc
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	08007434 	.word	0x08007434

08001b64 <__update_auto_blowdown>:

void __update_auto_blowdown(char *disp_mwa_cmd, int *disp_mwa_cmd_len)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af06      	add	r7, sp, #24
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
	if( yorker_settings.auto_blowdown == 0)
 8001b6e:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <__update_auto_blowdown+0x9c>)
 8001b70:	7e1b      	ldrb	r3, [r3, #24]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d11e      	bne.n	8001bb4 <__update_auto_blowdown+0x50>
	{
		*disp_mwa_cmd_len += snprintf (disp_mwa_cmd+(*disp_mwa_cmd_len),1024-(*disp_mwa_cmd_len),"b0.pic=6%sb1.pic=5%sb1.pco=65535%sb1.pco2=65535%sb0.pco=65535%sb0.pco2=65535%s",end_char,end_char,end_char,end_char,end_char,end_char);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	1898      	adds	r0, r3, r2
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <__update_auto_blowdown+0xa0>)
 8001b8c:	9304      	str	r3, [sp, #16]
 8001b8e:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <__update_auto_blowdown+0xa0>)
 8001b90:	9303      	str	r3, [sp, #12]
 8001b92:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <__update_auto_blowdown+0xa0>)
 8001b94:	9302      	str	r3, [sp, #8]
 8001b96:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <__update_auto_blowdown+0xa0>)
 8001b98:	9301      	str	r3, [sp, #4]
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <__update_auto_blowdown+0xa0>)
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <__update_auto_blowdown+0xa0>)
 8001ba0:	4a19      	ldr	r2, [pc, #100]	; (8001c08 <__update_auto_blowdown+0xa4>)
 8001ba2:	f004 ff79 	bl	8006a98 <sniprintf>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	441a      	add	r2, r3
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	601a      	str	r2, [r3, #0]
	}
	else if(yorker_settings.auto_blowdown == 1)
	{
		*disp_mwa_cmd_len += snprintf (disp_mwa_cmd+(*disp_mwa_cmd_len),1024-(*disp_mwa_cmd_len),"b1.pic=4%sb0.pic=5%sb1.pco=65535%sb1.pco2=65535%sb0.pco=65535%sb0.pco2=65535%s",end_char,end_char,end_char,end_char,end_char,end_char);
	}
}
 8001bb2:	e021      	b.n	8001bf8 <__update_auto_blowdown+0x94>
	else if(yorker_settings.auto_blowdown == 1)
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <__update_auto_blowdown+0x9c>)
 8001bb6:	7e1b      	ldrb	r3, [r3, #24]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d11d      	bne.n	8001bf8 <__update_auto_blowdown+0x94>
		*disp_mwa_cmd_len += snprintf (disp_mwa_cmd+(*disp_mwa_cmd_len),1024-(*disp_mwa_cmd_len),"b1.pic=4%sb0.pic=5%sb1.pco=65535%sb1.pco2=65535%sb0.pco=65535%sb0.pco2=65535%s",end_char,end_char,end_char,end_char,end_char,end_char);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	1898      	adds	r0, r3, r2
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <__update_auto_blowdown+0xa0>)
 8001bd2:	9304      	str	r3, [sp, #16]
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <__update_auto_blowdown+0xa0>)
 8001bd6:	9303      	str	r3, [sp, #12]
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <__update_auto_blowdown+0xa0>)
 8001bda:	9302      	str	r3, [sp, #8]
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <__update_auto_blowdown+0xa0>)
 8001bde:	9301      	str	r3, [sp, #4]
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <__update_auto_blowdown+0xa0>)
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <__update_auto_blowdown+0xa0>)
 8001be6:	4a09      	ldr	r2, [pc, #36]	; (8001c0c <__update_auto_blowdown+0xa8>)
 8001be8:	f004 ff56 	bl	8006a98 <sniprintf>
 8001bec:	4602      	mov	r2, r0
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	441a      	add	r2, r3
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	601a      	str	r2, [r3, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	200000dc 	.word	0x200000dc
 8001c04:	20000000 	.word	0x20000000
 8001c08:	080074e8 	.word	0x080074e8
 8001c0c:	08007538 	.word	0x08007538

08001c10 <__update_set_blowdown_tds>:

void __update_set_blowdown_tds(char *disp_mwa_cmd, int *disp_mwa_cmd_len)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af02      	add	r7, sp, #8
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
	*disp_mwa_cmd_len += snprintf (disp_mwa_cmd+(*disp_mwa_cmd_len),1024-(*disp_mwa_cmd_len),"n%d.val=%d%s",26,yorker_settings.set_blowdown_tds,end_char);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	1898      	adds	r0, r3, r2
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <__update_set_blowdown_tds+0x44>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	4a09      	ldr	r2, [pc, #36]	; (8001c58 <__update_set_blowdown_tds+0x48>)
 8001c34:	9201      	str	r2, [sp, #4]
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	231a      	movs	r3, #26
 8001c3a:	4a08      	ldr	r2, [pc, #32]	; (8001c5c <__update_set_blowdown_tds+0x4c>)
 8001c3c:	f004 ff2c 	bl	8006a98 <sniprintf>
 8001c40:	4602      	mov	r2, r0
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	441a      	add	r2, r3
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	601a      	str	r2, [r3, #0]
}
 8001c4c:	bf00      	nop
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	200000dc 	.word	0x200000dc
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	08007434 	.word	0x08007434

08001c60 <__update_set_blowdown_in_m3>:

void __update_set_blowdown_in_m3(char *disp_mwa_cmd, int *disp_mwa_cmd_len)
{
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b089      	sub	sp, #36	; 0x24
 8001c64:	af02      	add	r7, sp, #8
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
	uint8_t n[6];
	int temp = yorker_settings.set_blowdown_in_m3;
 8001c6a:	4b26      	ldr	r3, [pc, #152]	; (8001d04 <__update_set_blowdown_in_m3+0xa4>)
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 6; i++)
 8001c70:	2300      	movs	r3, #0
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	e03e      	b.n	8001cf4 <__update_set_blowdown_in_m3+0x94>
	{
		n[i] = temp % 10;
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	4b23      	ldr	r3, [pc, #140]	; (8001d08 <__update_set_blowdown_in_m3+0xa8>)
 8001c7a:	fb83 1302 	smull	r1, r3, r3, r2
 8001c7e:	1099      	asrs	r1, r3, #2
 8001c80:	17d3      	asrs	r3, r2, #31
 8001c82:	1ac9      	subs	r1, r1, r3
 8001c84:	460b      	mov	r3, r1
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	1ad1      	subs	r1, r2, r3
 8001c8e:	b2c9      	uxtb	r1, r1
 8001c90:	f107 0208 	add.w	r2, r7, #8
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4413      	add	r3, r2
 8001c98:	460a      	mov	r2, r1
 8001c9a:	701a      	strb	r2, [r3, #0]
		temp = temp / 10;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	4a1a      	ldr	r2, [pc, #104]	; (8001d08 <__update_set_blowdown_in_m3+0xa8>)
 8001ca0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ca4:	1092      	asrs	r2, r2, #2
 8001ca6:	17db      	asrs	r3, r3, #31
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	617b      	str	r3, [r7, #20]
		*disp_mwa_cmd_len += snprintf (disp_mwa_cmd+(*disp_mwa_cmd_len),1024-(*disp_mwa_cmd_len),"n%d.val=%d%s",i+27,n[i],end_char);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	1898      	adds	r0, r3, r2
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001cbe:	461c      	mov	r4, r3
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	f103 011b 	add.w	r1, r3, #27
 8001cc6:	f107 0208 	add.w	r2, r7, #8
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4413      	add	r3, r2
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <__update_set_blowdown_in_m3+0xac>)
 8001cd4:	9301      	str	r3, [sp, #4]
 8001cd6:	9200      	str	r2, [sp, #0]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4a0d      	ldr	r2, [pc, #52]	; (8001d10 <__update_set_blowdown_in_m3+0xb0>)
 8001cdc:	4621      	mov	r1, r4
 8001cde:	f004 fedb 	bl	8006a98 <sniprintf>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	441a      	add	r2, r3
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 6; i++)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	2b05      	cmp	r3, #5
 8001cf8:	ddbd      	ble.n	8001c76 <__update_set_blowdown_in_m3+0x16>
	}
}
 8001cfa:	bf00      	nop
 8001cfc:	371c      	adds	r7, #28
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd90      	pop	{r4, r7, pc}
 8001d02:	bf00      	nop
 8001d04:	200000dc 	.word	0x200000dc
 8001d08:	66666667 	.word	0x66666667
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	08007434 	.word	0x08007434

08001d14 <display_edit_settings>:
/*******************************************************************************
 *  PUBLIC
 ******************************************************************************/
void display_edit_settings()
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
	switch(current_edit_settings_state)
 8001d18:	4bab      	ldr	r3, [pc, #684]	; (8001fc8 <display_edit_settings+0x2b4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b09      	cmp	r3, #9
 8001d1e:	f200 81b4 	bhi.w	800208a <display_edit_settings+0x376>
 8001d22:	a201      	add	r2, pc, #4	; (adr r2, 8001d28 <display_edit_settings+0x14>)
 8001d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d28:	08001d51 	.word	0x08001d51
 8001d2c:	08001d75 	.word	0x08001d75
 8001d30:	08001dc7 	.word	0x08001dc7
 8001d34:	08001e19 	.word	0x08001e19
 8001d38:	08001e6b 	.word	0x08001e6b
 8001d3c:	08001ebd 	.word	0x08001ebd
 8001d40:	08001f0f 	.word	0x08001f0f
 8001d44:	08001f61 	.word	0x08001f61
 8001d48:	08001fb1 	.word	0x08001fb1
 8001d4c:	08002019 	.word	0x08002019
	{
		case GOTO_OFFSET_MAKE_UP_WATER:
			edit_settings_cmd_len = sprintf(edit_settings_cmd,"t7.pco=63488%s",end_char);
 8001d50:	4a9e      	ldr	r2, [pc, #632]	; (8001fcc <display_edit_settings+0x2b8>)
 8001d52:	499f      	ldr	r1, [pc, #636]	; (8001fd0 <display_edit_settings+0x2bc>)
 8001d54:	489f      	ldr	r0, [pc, #636]	; (8001fd4 <display_edit_settings+0x2c0>)
 8001d56:	f004 fed3 	bl	8006b00 <siprintf>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	4b9e      	ldr	r3, [pc, #632]	; (8001fd8 <display_edit_settings+0x2c4>)
 8001d5e:	601a      	str	r2, [r3, #0]
			lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8001d60:	4b9d      	ldr	r3, [pc, #628]	; (8001fd8 <display_edit_settings+0x2c4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4619      	mov	r1, r3
 8001d66:	489b      	ldr	r0, [pc, #620]	; (8001fd4 <display_edit_settings+0x2c0>)
 8001d68:	f001 f8ec 	bl	8002f44 <lcd_send_cmd>
			current_edit_settings_state = OFFSET_MAKE_UP_WATER;
 8001d6c:	4b96      	ldr	r3, [pc, #600]	; (8001fc8 <display_edit_settings+0x2b4>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	601a      	str	r2, [r3, #0]
			break;
 8001d72:	e18a      	b.n	800208a <display_edit_settings+0x376>

		case OFFSET_MAKE_UP_WATER:
			if(key_pressed == RIGHT_KEY_PRESSED)
 8001d74:	4b99      	ldr	r3, [pc, #612]	; (8001fdc <display_edit_settings+0x2c8>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d107      	bne.n	8001d8c <display_edit_settings+0x78>
			{
				__settings_selection(7,9);
 8001d7c:	2109      	movs	r1, #9
 8001d7e:	2007      	movs	r0, #7
 8001d80:	f7fe fffc 	bl	8000d7c <__settings_selection>
				current_edit_settings_state = OFFSET_BLOWDOWN;
 8001d84:	4b90      	ldr	r3, [pc, #576]	; (8001fc8 <display_edit_settings+0x2b4>)
 8001d86:	2202      	movs	r2, #2
 8001d88:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_six_digits(0);
			}
			break;
 8001d8a:	e16d      	b.n	8002068 <display_edit_settings+0x354>
			else if(key_pressed == LEFT_KEY_PRESSED)
 8001d8c:	4b93      	ldr	r3, [pc, #588]	; (8001fdc <display_edit_settings+0x2c8>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d107      	bne.n	8001da4 <display_edit_settings+0x90>
				__settings_selection(7,18);
 8001d94:	2112      	movs	r1, #18
 8001d96:	2007      	movs	r0, #7
 8001d98:	f7fe fff0 	bl	8000d7c <__settings_selection>
				current_edit_settings_state = SET_BLOWDOWN_IN_M3;
 8001d9c:	4b8a      	ldr	r3, [pc, #552]	; (8001fc8 <display_edit_settings+0x2b4>)
 8001d9e:	2209      	movs	r2, #9
 8001da0:	601a      	str	r2, [r3, #0]
			break;
 8001da2:	e161      	b.n	8002068 <display_edit_settings+0x354>
			else if(key_pressed == ESC_KEY_PRESSED)
 8001da4:	4b8d      	ldr	r3, [pc, #564]	; (8001fdc <display_edit_settings+0x2c8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d103      	bne.n	8001db4 <display_edit_settings+0xa0>
				__esc_settings_selection(7);
 8001dac:	2007      	movs	r0, #7
 8001dae:	f7ff f813 	bl	8000dd8 <__esc_settings_selection>
			break;
 8001db2:	e159      	b.n	8002068 <display_edit_settings+0x354>
			else if(key_pressed == ENTER_KEY_PRESSED)
 8001db4:	4b89      	ldr	r3, [pc, #548]	; (8001fdc <display_edit_settings+0x2c8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	f040 8155 	bne.w	8002068 <display_edit_settings+0x354>
				__select_six_digits(0);
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	f7ff f844 	bl	8000e4c <__select_six_digits>
			break;
 8001dc4:	e150      	b.n	8002068 <display_edit_settings+0x354>
		case OFFSET_BLOWDOWN:
			if(key_pressed == RIGHT_KEY_PRESSED)
 8001dc6:	4b85      	ldr	r3, [pc, #532]	; (8001fdc <display_edit_settings+0x2c8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d107      	bne.n	8001dde <display_edit_settings+0xca>
			{
				__settings_selection(9,19);
 8001dce:	2113      	movs	r1, #19
 8001dd0:	2009      	movs	r0, #9
 8001dd2:	f7fe ffd3 	bl	8000d7c <__settings_selection>
				current_edit_settings_state = PUMP1_LTS_PER_PULSE;
 8001dd6:	4b7c      	ldr	r3, [pc, #496]	; (8001fc8 <display_edit_settings+0x2b4>)
 8001dd8:	2203      	movs	r2, #3
 8001dda:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_six_digits(6);
			}
			break;
 8001ddc:	e146      	b.n	800206c <display_edit_settings+0x358>
			else if(key_pressed == LEFT_KEY_PRESSED)
 8001dde:	4b7f      	ldr	r3, [pc, #508]	; (8001fdc <display_edit_settings+0x2c8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d107      	bne.n	8001df6 <display_edit_settings+0xe2>
				__settings_selection(9,7);
 8001de6:	2107      	movs	r1, #7
 8001de8:	2009      	movs	r0, #9
 8001dea:	f7fe ffc7 	bl	8000d7c <__settings_selection>
				current_edit_settings_state = OFFSET_MAKE_UP_WATER;
 8001dee:	4b76      	ldr	r3, [pc, #472]	; (8001fc8 <display_edit_settings+0x2b4>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	601a      	str	r2, [r3, #0]
			break;
 8001df4:	e13a      	b.n	800206c <display_edit_settings+0x358>
			else if(key_pressed == ESC_KEY_PRESSED)
 8001df6:	4b79      	ldr	r3, [pc, #484]	; (8001fdc <display_edit_settings+0x2c8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d103      	bne.n	8001e06 <display_edit_settings+0xf2>
				__esc_settings_selection(9);
 8001dfe:	2009      	movs	r0, #9
 8001e00:	f7fe ffea 	bl	8000dd8 <__esc_settings_selection>
			break;
 8001e04:	e132      	b.n	800206c <display_edit_settings+0x358>
			else if(key_pressed == ENTER_KEY_PRESSED)
 8001e06:	4b75      	ldr	r3, [pc, #468]	; (8001fdc <display_edit_settings+0x2c8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	f040 812e 	bne.w	800206c <display_edit_settings+0x358>
				__select_six_digits(6);
 8001e10:	2006      	movs	r0, #6
 8001e12:	f7ff f81b 	bl	8000e4c <__select_six_digits>
			break;
 8001e16:	e129      	b.n	800206c <display_edit_settings+0x358>
		case PUMP1_LTS_PER_PULSE:
			if(key_pressed == RIGHT_KEY_PRESSED)
 8001e18:	4b70      	ldr	r3, [pc, #448]	; (8001fdc <display_edit_settings+0x2c8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d107      	bne.n	8001e30 <display_edit_settings+0x11c>
			{
				__settings_selection(19,21);
 8001e20:	2115      	movs	r1, #21
 8001e22:	2013      	movs	r0, #19
 8001e24:	f7fe ffaa 	bl	8000d7c <__settings_selection>
				current_edit_settings_state = PUMP2_LTS_PER_PULSE;
 8001e28:	4b67      	ldr	r3, [pc, #412]	; (8001fc8 <display_edit_settings+0x2b4>)
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_six_digits(12);
			}
			break;
 8001e2e:	e11f      	b.n	8002070 <display_edit_settings+0x35c>
			else if(key_pressed == LEFT_KEY_PRESSED)
 8001e30:	4b6a      	ldr	r3, [pc, #424]	; (8001fdc <display_edit_settings+0x2c8>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d107      	bne.n	8001e48 <display_edit_settings+0x134>
				__settings_selection(19,9);
 8001e38:	2109      	movs	r1, #9
 8001e3a:	2013      	movs	r0, #19
 8001e3c:	f7fe ff9e 	bl	8000d7c <__settings_selection>
				current_edit_settings_state = OFFSET_BLOWDOWN;
 8001e40:	4b61      	ldr	r3, [pc, #388]	; (8001fc8 <display_edit_settings+0x2b4>)
 8001e42:	2202      	movs	r2, #2
 8001e44:	601a      	str	r2, [r3, #0]
			break;
 8001e46:	e113      	b.n	8002070 <display_edit_settings+0x35c>
			else if(key_pressed == ESC_KEY_PRESSED)
 8001e48:	4b64      	ldr	r3, [pc, #400]	; (8001fdc <display_edit_settings+0x2c8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d103      	bne.n	8001e58 <display_edit_settings+0x144>
				__esc_settings_selection(19);
 8001e50:	2013      	movs	r0, #19
 8001e52:	f7fe ffc1 	bl	8000dd8 <__esc_settings_selection>
			break;
 8001e56:	e10b      	b.n	8002070 <display_edit_settings+0x35c>
			else if(key_pressed == ENTER_KEY_PRESSED)
 8001e58:	4b60      	ldr	r3, [pc, #384]	; (8001fdc <display_edit_settings+0x2c8>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	f040 8107 	bne.w	8002070 <display_edit_settings+0x35c>
				__select_six_digits(12);
 8001e62:	200c      	movs	r0, #12
 8001e64:	f7fe fff2 	bl	8000e4c <__select_six_digits>
			break;
 8001e68:	e102      	b.n	8002070 <display_edit_settings+0x35c>
		case PUMP2_LTS_PER_PULSE:
			if(key_pressed == RIGHT_KEY_PRESSED)
 8001e6a:	4b5c      	ldr	r3, [pc, #368]	; (8001fdc <display_edit_settings+0x2c8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d107      	bne.n	8001e82 <display_edit_settings+0x16e>
			{
				__settings_selection(21,13);
 8001e72:	210d      	movs	r1, #13
 8001e74:	2015      	movs	r0, #21
 8001e76:	f7fe ff81 	bl	8000d7c <__settings_selection>
				current_edit_settings_state = RATIO_1;
 8001e7a:	4b53      	ldr	r3, [pc, #332]	; (8001fc8 <display_edit_settings+0x2b4>)
 8001e7c:	2205      	movs	r2, #5
 8001e7e:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_six_digits(18);
			}
			break;
 8001e80:	e0f8      	b.n	8002074 <display_edit_settings+0x360>
			else if(key_pressed == LEFT_KEY_PRESSED)
 8001e82:	4b56      	ldr	r3, [pc, #344]	; (8001fdc <display_edit_settings+0x2c8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d107      	bne.n	8001e9a <display_edit_settings+0x186>
				__settings_selection(21,19);
 8001e8a:	2113      	movs	r1, #19
 8001e8c:	2015      	movs	r0, #21
 8001e8e:	f7fe ff75 	bl	8000d7c <__settings_selection>
				current_edit_settings_state = PUMP1_LTS_PER_PULSE;
 8001e92:	4b4d      	ldr	r3, [pc, #308]	; (8001fc8 <display_edit_settings+0x2b4>)
 8001e94:	2203      	movs	r2, #3
 8001e96:	601a      	str	r2, [r3, #0]
			break;
 8001e98:	e0ec      	b.n	8002074 <display_edit_settings+0x360>
			else if(key_pressed == ESC_KEY_PRESSED)
 8001e9a:	4b50      	ldr	r3, [pc, #320]	; (8001fdc <display_edit_settings+0x2c8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d103      	bne.n	8001eaa <display_edit_settings+0x196>
				__esc_settings_selection(21);
 8001ea2:	2015      	movs	r0, #21
 8001ea4:	f7fe ff98 	bl	8000dd8 <__esc_settings_selection>
			break;
 8001ea8:	e0e4      	b.n	8002074 <display_edit_settings+0x360>
			else if(key_pressed == ENTER_KEY_PRESSED)
 8001eaa:	4b4c      	ldr	r3, [pc, #304]	; (8001fdc <display_edit_settings+0x2c8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	f040 80e0 	bne.w	8002074 <display_edit_settings+0x360>
				__select_six_digits(18);
 8001eb4:	2012      	movs	r0, #18
 8001eb6:	f7fe ffc9 	bl	8000e4c <__select_six_digits>
			break;
 8001eba:	e0db      	b.n	8002074 <display_edit_settings+0x360>
		case RATIO_1:
			if(key_pressed == RIGHT_KEY_PRESSED)
 8001ebc:	4b47      	ldr	r3, [pc, #284]	; (8001fdc <display_edit_settings+0x2c8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d107      	bne.n	8001ed4 <display_edit_settings+0x1c0>
			{
				__settings_selection(13,29);
 8001ec4:	211d      	movs	r1, #29
 8001ec6:	200d      	movs	r0, #13
 8001ec8:	f7fe ff58 	bl	8000d7c <__settings_selection>
				current_edit_settings_state = RATIO_2;
 8001ecc:	4b3e      	ldr	r3, [pc, #248]	; (8001fc8 <display_edit_settings+0x2b4>)
 8001ece:	2206      	movs	r2, #6
 8001ed0:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_four_digits(24);
			}
			break;
 8001ed2:	e0d1      	b.n	8002078 <display_edit_settings+0x364>
			else if(key_pressed == LEFT_KEY_PRESSED)
 8001ed4:	4b41      	ldr	r3, [pc, #260]	; (8001fdc <display_edit_settings+0x2c8>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d107      	bne.n	8001eec <display_edit_settings+0x1d8>
				__settings_selection(13,21);
 8001edc:	2115      	movs	r1, #21
 8001ede:	200d      	movs	r0, #13
 8001ee0:	f7fe ff4c 	bl	8000d7c <__settings_selection>
				current_edit_settings_state = PUMP2_LTS_PER_PULSE;
 8001ee4:	4b38      	ldr	r3, [pc, #224]	; (8001fc8 <display_edit_settings+0x2b4>)
 8001ee6:	2204      	movs	r2, #4
 8001ee8:	601a      	str	r2, [r3, #0]
			break;
 8001eea:	e0c5      	b.n	8002078 <display_edit_settings+0x364>
			else if(key_pressed == ESC_KEY_PRESSED)
 8001eec:	4b3b      	ldr	r3, [pc, #236]	; (8001fdc <display_edit_settings+0x2c8>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d103      	bne.n	8001efc <display_edit_settings+0x1e8>
				__esc_settings_selection(13);
 8001ef4:	200d      	movs	r0, #13
 8001ef6:	f7fe ff6f 	bl	8000dd8 <__esc_settings_selection>
			break;
 8001efa:	e0bd      	b.n	8002078 <display_edit_settings+0x364>
			else if(key_pressed == ENTER_KEY_PRESSED)
 8001efc:	4b37      	ldr	r3, [pc, #220]	; (8001fdc <display_edit_settings+0x2c8>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	f040 80b9 	bne.w	8002078 <display_edit_settings+0x364>
				__select_four_digits(24);
 8001f06:	2018      	movs	r0, #24
 8001f08:	f7fe fff2 	bl	8000ef0 <__select_four_digits>
			break;
 8001f0c:	e0b4      	b.n	8002078 <display_edit_settings+0x364>
		case RATIO_2:
			if(key_pressed == RIGHT_KEY_PRESSED)
 8001f0e:	4b33      	ldr	r3, [pc, #204]	; (8001fdc <display_edit_settings+0x2c8>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d107      	bne.n	8001f26 <display_edit_settings+0x212>
			{
				__settings_selection(29,24);
 8001f16:	2118      	movs	r1, #24
 8001f18:	201d      	movs	r0, #29
 8001f1a:	f7fe ff2f 	bl	8000d7c <__settings_selection>
				current_edit_settings_state = AUTO_BLOWDOWN;
 8001f1e:	4b2a      	ldr	r3, [pc, #168]	; (8001fc8 <display_edit_settings+0x2b4>)
 8001f20:	2207      	movs	r2, #7
 8001f22:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_four_digits(25);
			}
			break;
 8001f24:	e0aa      	b.n	800207c <display_edit_settings+0x368>
			else if(key_pressed == LEFT_KEY_PRESSED)
 8001f26:	4b2d      	ldr	r3, [pc, #180]	; (8001fdc <display_edit_settings+0x2c8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d107      	bne.n	8001f3e <display_edit_settings+0x22a>
				__settings_selection(29,13);
 8001f2e:	210d      	movs	r1, #13
 8001f30:	201d      	movs	r0, #29
 8001f32:	f7fe ff23 	bl	8000d7c <__settings_selection>
				current_edit_settings_state = RATIO_1;
 8001f36:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <display_edit_settings+0x2b4>)
 8001f38:	2205      	movs	r2, #5
 8001f3a:	601a      	str	r2, [r3, #0]
			break;
 8001f3c:	e09e      	b.n	800207c <display_edit_settings+0x368>
			else if(key_pressed == ESC_KEY_PRESSED)
 8001f3e:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <display_edit_settings+0x2c8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d103      	bne.n	8001f4e <display_edit_settings+0x23a>
				__esc_settings_selection(29);
 8001f46:	201d      	movs	r0, #29
 8001f48:	f7fe ff46 	bl	8000dd8 <__esc_settings_selection>
			break;
 8001f4c:	e096      	b.n	800207c <display_edit_settings+0x368>
			else if(key_pressed == ENTER_KEY_PRESSED)
 8001f4e:	4b23      	ldr	r3, [pc, #140]	; (8001fdc <display_edit_settings+0x2c8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	f040 8092 	bne.w	800207c <display_edit_settings+0x368>
				__select_four_digits(25);
 8001f58:	2019      	movs	r0, #25
 8001f5a:	f7fe ffc9 	bl	8000ef0 <__select_four_digits>
			break;
 8001f5e:	e08d      	b.n	800207c <display_edit_settings+0x368>
		case AUTO_BLOWDOWN:
			if(key_pressed == RIGHT_KEY_PRESSED)
 8001f60:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <display_edit_settings+0x2c8>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d107      	bne.n	8001f78 <display_edit_settings+0x264>
			{
				__settings_selection(24,14);
 8001f68:	210e      	movs	r1, #14
 8001f6a:	2018      	movs	r0, #24
 8001f6c:	f7fe ff06 	bl	8000d7c <__settings_selection>
				current_edit_settings_state = SET_BLOWDOWN_TDS;
 8001f70:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <display_edit_settings+0x2b4>)
 8001f72:	2208      	movs	r2, #8
 8001f74:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_button(0);
			}
			break;
 8001f76:	e083      	b.n	8002080 <display_edit_settings+0x36c>
			else if(key_pressed == LEFT_KEY_PRESSED)
 8001f78:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <display_edit_settings+0x2c8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d107      	bne.n	8001f90 <display_edit_settings+0x27c>
				__settings_selection(24,29);
 8001f80:	211d      	movs	r1, #29
 8001f82:	2018      	movs	r0, #24
 8001f84:	f7fe fefa 	bl	8000d7c <__settings_selection>
				current_edit_settings_state = RATIO_2;
 8001f88:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <display_edit_settings+0x2b4>)
 8001f8a:	2206      	movs	r2, #6
 8001f8c:	601a      	str	r2, [r3, #0]
			break;
 8001f8e:	e077      	b.n	8002080 <display_edit_settings+0x36c>
			else if(key_pressed == ESC_KEY_PRESSED)
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <display_edit_settings+0x2c8>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d103      	bne.n	8001fa0 <display_edit_settings+0x28c>
				__esc_settings_selection(24);
 8001f98:	2018      	movs	r0, #24
 8001f9a:	f7fe ff1d 	bl	8000dd8 <__esc_settings_selection>
			break;
 8001f9e:	e06f      	b.n	8002080 <display_edit_settings+0x36c>
			else if(key_pressed == ENTER_KEY_PRESSED)
 8001fa0:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <display_edit_settings+0x2c8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	d16b      	bne.n	8002080 <display_edit_settings+0x36c>
				__select_button(0);
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f7fe ffcd 	bl	8000f48 <__select_button>
			break;
 8001fae:	e067      	b.n	8002080 <display_edit_settings+0x36c>
		case SET_BLOWDOWN_TDS:
			if(key_pressed == RIGHT_KEY_PRESSED)
 8001fb0:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <display_edit_settings+0x2c8>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d113      	bne.n	8001fe0 <display_edit_settings+0x2cc>
			{
				__settings_selection(14,18);
 8001fb8:	2112      	movs	r1, #18
 8001fba:	200e      	movs	r0, #14
 8001fbc:	f7fe fede 	bl	8000d7c <__settings_selection>
				current_edit_settings_state = SET_BLOWDOWN_IN_M3;
 8001fc0:	4b01      	ldr	r3, [pc, #4]	; (8001fc8 <display_edit_settings+0x2b4>)
 8001fc2:	2209      	movs	r2, #9
 8001fc4:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_four_digits(26);
			}
			break;
 8001fc6:	e05d      	b.n	8002084 <display_edit_settings+0x370>
 8001fc8:	200000a0 	.word	0x200000a0
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	080075c4 	.word	0x080075c4
 8001fd4:	20000194 	.word	0x20000194
 8001fd8:	200000a4 	.word	0x200000a4
 8001fdc:	2000009c 	.word	0x2000009c
			else if(key_pressed == LEFT_KEY_PRESSED)
 8001fe0:	4b2b      	ldr	r3, [pc, #172]	; (8002090 <display_edit_settings+0x37c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d107      	bne.n	8001ff8 <display_edit_settings+0x2e4>
				__settings_selection(14,24);
 8001fe8:	2118      	movs	r1, #24
 8001fea:	200e      	movs	r0, #14
 8001fec:	f7fe fec6 	bl	8000d7c <__settings_selection>
				current_edit_settings_state = AUTO_BLOWDOWN;
 8001ff0:	4b28      	ldr	r3, [pc, #160]	; (8002094 <display_edit_settings+0x380>)
 8001ff2:	2207      	movs	r2, #7
 8001ff4:	601a      	str	r2, [r3, #0]
			break;
 8001ff6:	e045      	b.n	8002084 <display_edit_settings+0x370>
			else if(key_pressed == ESC_KEY_PRESSED)
 8001ff8:	4b25      	ldr	r3, [pc, #148]	; (8002090 <display_edit_settings+0x37c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d103      	bne.n	8002008 <display_edit_settings+0x2f4>
				__esc_settings_selection(14);
 8002000:	200e      	movs	r0, #14
 8002002:	f7fe fee9 	bl	8000dd8 <__esc_settings_selection>
			break;
 8002006:	e03d      	b.n	8002084 <display_edit_settings+0x370>
			else if(key_pressed == ENTER_KEY_PRESSED)
 8002008:	4b21      	ldr	r3, [pc, #132]	; (8002090 <display_edit_settings+0x37c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b03      	cmp	r3, #3
 800200e:	d139      	bne.n	8002084 <display_edit_settings+0x370>
				__select_four_digits(26);
 8002010:	201a      	movs	r0, #26
 8002012:	f7fe ff6d 	bl	8000ef0 <__select_four_digits>
			break;
 8002016:	e035      	b.n	8002084 <display_edit_settings+0x370>
		case SET_BLOWDOWN_IN_M3:
			if(key_pressed == RIGHT_KEY_PRESSED)
 8002018:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <display_edit_settings+0x37c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b02      	cmp	r3, #2
 800201e:	d107      	bne.n	8002030 <display_edit_settings+0x31c>
			{
				__settings_selection(18,7);
 8002020:	2107      	movs	r1, #7
 8002022:	2012      	movs	r0, #18
 8002024:	f7fe feaa 	bl	8000d7c <__settings_selection>
				current_edit_settings_state = OFFSET_MAKE_UP_WATER;
 8002028:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <display_edit_settings+0x380>)
 800202a:	2201      	movs	r2, #1
 800202c:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_six_digits(27);
			}
			break;
 800202e:	e02b      	b.n	8002088 <display_edit_settings+0x374>
			else if(key_pressed == LEFT_KEY_PRESSED)
 8002030:	4b17      	ldr	r3, [pc, #92]	; (8002090 <display_edit_settings+0x37c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d107      	bne.n	8002048 <display_edit_settings+0x334>
				__settings_selection(18,14);
 8002038:	210e      	movs	r1, #14
 800203a:	2012      	movs	r0, #18
 800203c:	f7fe fe9e 	bl	8000d7c <__settings_selection>
				current_edit_settings_state = SET_BLOWDOWN_TDS;
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <display_edit_settings+0x380>)
 8002042:	2208      	movs	r2, #8
 8002044:	601a      	str	r2, [r3, #0]
			break;
 8002046:	e01f      	b.n	8002088 <display_edit_settings+0x374>
			else if(key_pressed == ESC_KEY_PRESSED)
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <display_edit_settings+0x37c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b04      	cmp	r3, #4
 800204e:	d103      	bne.n	8002058 <display_edit_settings+0x344>
				__esc_settings_selection(18);
 8002050:	2012      	movs	r0, #18
 8002052:	f7fe fec1 	bl	8000dd8 <__esc_settings_selection>
			break;
 8002056:	e017      	b.n	8002088 <display_edit_settings+0x374>
			else if(key_pressed == ENTER_KEY_PRESSED)
 8002058:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <display_edit_settings+0x37c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b03      	cmp	r3, #3
 800205e:	d113      	bne.n	8002088 <display_edit_settings+0x374>
				__select_six_digits(27);
 8002060:	201b      	movs	r0, #27
 8002062:	f7fe fef3 	bl	8000e4c <__select_six_digits>
			break;
 8002066:	e00f      	b.n	8002088 <display_edit_settings+0x374>
			break;
 8002068:	bf00      	nop
 800206a:	e00e      	b.n	800208a <display_edit_settings+0x376>
			break;
 800206c:	bf00      	nop
 800206e:	e00c      	b.n	800208a <display_edit_settings+0x376>
			break;
 8002070:	bf00      	nop
 8002072:	e00a      	b.n	800208a <display_edit_settings+0x376>
			break;
 8002074:	bf00      	nop
 8002076:	e008      	b.n	800208a <display_edit_settings+0x376>
			break;
 8002078:	bf00      	nop
 800207a:	e006      	b.n	800208a <display_edit_settings+0x376>
			break;
 800207c:	bf00      	nop
 800207e:	e004      	b.n	800208a <display_edit_settings+0x376>
			break;
 8002080:	bf00      	nop
 8002082:	e002      	b.n	800208a <display_edit_settings+0x376>
			break;
 8002084:	bf00      	nop
 8002086:	e000      	b.n	800208a <display_edit_settings+0x376>
			break;
 8002088:	bf00      	nop
	}
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	2000009c 	.word	0x2000009c
 8002094:	200000a0 	.word	0x200000a0

08002098 <display_edit_digits>:

void display_edit_digits()
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
	switch(current_edit_settings_state)
 800209c:	4b23      	ldr	r3, [pc, #140]	; (800212c <display_edit_digits+0x94>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	3b01      	subs	r3, #1
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d840      	bhi.n	8002128 <display_edit_digits+0x90>
 80020a6:	a201      	add	r2, pc, #4	; (adr r2, 80020ac <display_edit_digits+0x14>)
 80020a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ac:	080020d1 	.word	0x080020d1
 80020b0:	080020db 	.word	0x080020db
 80020b4:	080020e5 	.word	0x080020e5
 80020b8:	080020ef 	.word	0x080020ef
 80020bc:	080020f9 	.word	0x080020f9
 80020c0:	08002103 	.word	0x08002103
 80020c4:	0800210d 	.word	0x0800210d
 80020c8:	08002115 	.word	0x08002115
 80020cc:	0800211f 	.word	0x0800211f
	{
		case OFFSET_MAKE_UP_WATER:
			__edit_six_digits(&yorker_settings.offset_mkupwater,0);
 80020d0:	2100      	movs	r1, #0
 80020d2:	4817      	ldr	r0, [pc, #92]	; (8002130 <display_edit_digits+0x98>)
 80020d4:	f7ff f912 	bl	80012fc <__edit_six_digits>
			break;
 80020d8:	e026      	b.n	8002128 <display_edit_digits+0x90>
		case OFFSET_BLOWDOWN:
			__edit_six_digits(&yorker_settings.offset_blowdown,6);
 80020da:	2106      	movs	r1, #6
 80020dc:	4815      	ldr	r0, [pc, #84]	; (8002134 <display_edit_digits+0x9c>)
 80020de:	f7ff f90d 	bl	80012fc <__edit_six_digits>
			break;
 80020e2:	e021      	b.n	8002128 <display_edit_digits+0x90>
		case PUMP1_LTS_PER_PULSE:
			__edit_six_digits(&yorker_settings.pump1_lts_per_pulse,12);
 80020e4:	210c      	movs	r1, #12
 80020e6:	4814      	ldr	r0, [pc, #80]	; (8002138 <display_edit_digits+0xa0>)
 80020e8:	f7ff f908 	bl	80012fc <__edit_six_digits>
			break;
 80020ec:	e01c      	b.n	8002128 <display_edit_digits+0x90>
		case PUMP2_LTS_PER_PULSE:
			__edit_six_digits(&yorker_settings.pump2_lts_per_pulse,18);
 80020ee:	2112      	movs	r1, #18
 80020f0:	4812      	ldr	r0, [pc, #72]	; (800213c <display_edit_digits+0xa4>)
 80020f2:	f7ff f903 	bl	80012fc <__edit_six_digits>
			break;
 80020f6:	e017      	b.n	8002128 <display_edit_digits+0x90>
		case RATIO_1:
			__edit_four_digits(&yorker_settings.ratio_1,24);
 80020f8:	2118      	movs	r1, #24
 80020fa:	4811      	ldr	r0, [pc, #68]	; (8002140 <display_edit_digits+0xa8>)
 80020fc:	f7ff f9ae 	bl	800145c <__edit_four_digits>
			break;
 8002100:	e012      	b.n	8002128 <display_edit_digits+0x90>
		case RATIO_2:
			__edit_four_digits(&yorker_settings.ratio_2,25);
 8002102:	2119      	movs	r1, #25
 8002104:	480f      	ldr	r0, [pc, #60]	; (8002144 <display_edit_digits+0xac>)
 8002106:	f7ff f9a9 	bl	800145c <__edit_four_digits>
			break;
 800210a:	e00d      	b.n	8002128 <display_edit_digits+0x90>
		case AUTO_BLOWDOWN:
			__edit_button_selection(&yorker_settings.auto_blowdown);
 800210c:	480e      	ldr	r0, [pc, #56]	; (8002148 <display_edit_digits+0xb0>)
 800210e:	f7ff fab9 	bl	8001684 <__edit_button_selection>
			break;
 8002112:	e009      	b.n	8002128 <display_edit_digits+0x90>
		case SET_BLOWDOWN_TDS:
			__edit_four_digits(&yorker_settings.set_blowdown_tds,26);
 8002114:	211a      	movs	r1, #26
 8002116:	480d      	ldr	r0, [pc, #52]	; (800214c <display_edit_digits+0xb4>)
 8002118:	f7ff f9a0 	bl	800145c <__edit_four_digits>
			break;
 800211c:	e004      	b.n	8002128 <display_edit_digits+0x90>
		case SET_BLOWDOWN_IN_M3:
			__edit_six_digits(&yorker_settings.set_blowdown_in_m3,27);
 800211e:	211b      	movs	r1, #27
 8002120:	480b      	ldr	r0, [pc, #44]	; (8002150 <display_edit_digits+0xb8>)
 8002122:	f7ff f8eb 	bl	80012fc <__edit_six_digits>
			break;
 8002126:	bf00      	nop
	}
}
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}
 800212c:	200000a0 	.word	0x200000a0
 8002130:	200000dc 	.word	0x200000dc
 8002134:	200000e0 	.word	0x200000e0
 8002138:	200000e4 	.word	0x200000e4
 800213c:	200000e8 	.word	0x200000e8
 8002140:	200000ec 	.word	0x200000ec
 8002144:	200000f0 	.word	0x200000f0
 8002148:	200000f4 	.word	0x200000f4
 800214c:	200000f8 	.word	0x200000f8
 8002150:	200000fc 	.word	0x200000fc

08002154 <settings_update>:

void settings_update()
{
 8002154:	b580      	push	{r7, lr}
 8002156:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 800215a:	af00      	add	r7, sp, #0
	char settings_cmd[1024] = {0};
 800215c:	f107 0308 	add.w	r3, r7, #8
 8002160:	4618      	mov	r0, r3
 8002162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002166:	461a      	mov	r2, r3
 8002168:	2100      	movs	r1, #0
 800216a:	f004 fc8d 	bl	8006a88 <memset>
	int settings_cmd_len = 0;
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]

	settings_cmd_len = sprintf(settings_cmd,"page 1%s",end_char);
 8002174:	f107 0308 	add.w	r3, r7, #8
 8002178:	4a29      	ldr	r2, [pc, #164]	; (8002220 <settings_update+0xcc>)
 800217a:	492a      	ldr	r1, [pc, #168]	; (8002224 <settings_update+0xd0>)
 800217c:	4618      	mov	r0, r3
 800217e:	f004 fcbf 	bl	8006b00 <siprintf>
 8002182:	4602      	mov	r2, r0
 8002184:	1d3b      	adds	r3, r7, #4
 8002186:	601a      	str	r2, [r3, #0]
	__update_offset_makeup_water_added(settings_cmd,&settings_cmd_len);
 8002188:	1d3a      	adds	r2, r7, #4
 800218a:	f107 0308 	add.w	r3, r7, #8
 800218e:	4611      	mov	r1, r2
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fb35 	bl	8001800 <__update_offset_makeup_water_added>
	__update_offset_blowdown_water(settings_cmd,&settings_cmd_len);
 8002196:	1d3a      	adds	r2, r7, #4
 8002198:	f107 0308 	add.w	r3, r7, #8
 800219c:	4611      	mov	r1, r2
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fb84 	bl	80018ac <__update_offset_blowdown_water>
	__update_pump1_lts_per_pulse(settings_cmd,&settings_cmd_len);
 80021a4:	1d3a      	adds	r2, r7, #4
 80021a6:	f107 0308 	add.w	r3, r7, #8
 80021aa:	4611      	mov	r1, r2
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fbd5 	bl	800195c <__update_pump1_lts_per_pulse>
	__update_pump2_lts_per_pulse(settings_cmd,&settings_cmd_len);
 80021b2:	1d3a      	adds	r2, r7, #4
 80021b4:	f107 0308 	add.w	r3, r7, #8
 80021b8:	4611      	mov	r1, r2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fc28 	bl	8001a10 <__update_pump2_lts_per_pulse>
	__update_ratio_1(settings_cmd,&settings_cmd_len);
 80021c0:	1d3a      	adds	r2, r7, #4
 80021c2:	f107 0308 	add.w	r3, r7, #8
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fc7b 	bl	8001ac4 <__update_ratio_1>
	__update_ratio_2(settings_cmd,&settings_cmd_len);
 80021ce:	1d3a      	adds	r2, r7, #4
 80021d0:	f107 0308 	add.w	r3, r7, #8
 80021d4:	4611      	mov	r1, r2
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fc9c 	bl	8001b14 <__update_ratio_2>
	__update_auto_blowdown(settings_cmd,&settings_cmd_len);
 80021dc:	1d3a      	adds	r2, r7, #4
 80021de:	f107 0308 	add.w	r3, r7, #8
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fcbd 	bl	8001b64 <__update_auto_blowdown>
	__update_set_blowdown_tds(settings_cmd,&settings_cmd_len);
 80021ea:	1d3a      	adds	r2, r7, #4
 80021ec:	f107 0308 	add.w	r3, r7, #8
 80021f0:	4611      	mov	r1, r2
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fd0c 	bl	8001c10 <__update_set_blowdown_tds>
	__update_set_blowdown_in_m3(settings_cmd,&settings_cmd_len);
 80021f8:	1d3a      	adds	r2, r7, #4
 80021fa:	f107 0308 	add.w	r3, r7, #8
 80021fe:	4611      	mov	r1, r2
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff fd2d 	bl	8001c60 <__update_set_blowdown_in_m3>

	lcd_send_cmd(settings_cmd,settings_cmd_len);
 8002206:	1d3b      	adds	r3, r7, #4
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	f107 0308 	add.w	r3, r7, #8
 800220e:	4611      	mov	r1, r2
 8002210:	4618      	mov	r0, r3
 8002212:	f000 fe97 	bl	8002f44 <lcd_send_cmd>
}
 8002216:	bf00      	nop
 8002218:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20000000 	.word	0x20000000
 8002224:	080075d4 	.word	0x080075d4

08002228 <platform_start_yorker>:

RTC_TimeTypeDef cTime = {0};
RTC_DateTypeDef cDate = {0};

void platform_start_yorker()
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
	 HAL_Init();
 800222c:	f001 f9b6 	bl	800359c <HAL_Init>
	 platform_sysclk_cfg();
 8002230:	f000 fc58 	bl	8002ae4 <platform_sysclk_cfg>
	 platform_gpio_init();
 8002234:	f000 fbd8 	bl	80029e8 <platform_gpio_init>
	 platform_adc_init();
 8002238:	f000 f9a6 	bl	8002588 <platform_adc_init>
	 platform_uart_init();
 800223c:	f000 fe78 	bl	8002f30 <platform_uart_init>
	 platform_display_init();
 8002240:	f000 f9ac 	bl	800259c <platform_display_init>
	 platform_rtc_init();
 8002244:	f000 fc98 	bl	8002b78 <platform_rtc_init>
	 platform_timer_init();
 8002248:	f000 fd9c 	bl	8002d84 <platform_timer_init>



	 platform_flashcfg_init(&yorker_homescreen_settings, &yorker_settings);
 800224c:	4940      	ldr	r1, [pc, #256]	; (8002350 <platform_start_yorker+0x128>)
 800224e:	4841      	ldr	r0, [pc, #260]	; (8002354 <platform_start_yorker+0x12c>)
 8002250:	f000 f9d2 	bl	80025f8 <platform_flashcfg_init>

	 platform_timer_start();
 8002254:	f000 fda0 	bl	8002d98 <platform_timer_start>

	 while (1)
	   {
	     /* USER CODE END WHILE */
		 HAL_Delay(1000);
 8002258:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800225c:	f001 fa10 	bl	8003680 <HAL_Delay>
		 makeup_water_added = yorker_homescreen_settings.blowdown_water_pulse_cnt;
 8002260:	4b3c      	ldr	r3, [pc, #240]	; (8002354 <platform_start_yorker+0x12c>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4a3c      	ldr	r2, [pc, #240]	; (8002358 <platform_start_yorker+0x130>)
 8002266:	6013      	str	r3, [r2, #0]
		 blowdown_water = yorker_homescreen_settings.blowdown_water_pulse_cnt;
 8002268:	4b3a      	ldr	r3, [pc, #232]	; (8002354 <platform_start_yorker+0x12c>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	4a3b      	ldr	r2, [pc, #236]	; (800235c <platform_start_yorker+0x134>)
 800226e:	6013      	str	r3, [r2, #0]
		 chemical1 = yorker_homescreen_settings.chemical_1;
 8002270:	4b38      	ldr	r3, [pc, #224]	; (8002354 <platform_start_yorker+0x12c>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	4a3a      	ldr	r2, [pc, #232]	; (8002360 <platform_start_yorker+0x138>)
 8002276:	6013      	str	r3, [r2, #0]
		 chemical2 = yorker_homescreen_settings.chemical_2;
 8002278:	4b36      	ldr	r3, [pc, #216]	; (8002354 <platform_start_yorker+0x12c>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	4a39      	ldr	r2, [pc, #228]	; (8002364 <platform_start_yorker+0x13c>)
 800227e:	6013      	str	r3, [r2, #0]

		 yorker_homescreen_settings.blowdown_water_pulse_cnt++;
 8002280:	4b34      	ldr	r3, [pc, #208]	; (8002354 <platform_start_yorker+0x12c>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	3301      	adds	r3, #1
 8002286:	4a33      	ldr	r2, [pc, #204]	; (8002354 <platform_start_yorker+0x12c>)
 8002288:	6053      	str	r3, [r2, #4]
		 yorker_homescreen_settings.blowdown_water_pulse_cnt++;
 800228a:	4b32      	ldr	r3, [pc, #200]	; (8002354 <platform_start_yorker+0x12c>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	3301      	adds	r3, #1
 8002290:	4a30      	ldr	r2, [pc, #192]	; (8002354 <platform_start_yorker+0x12c>)
 8002292:	6053      	str	r3, [r2, #4]
		 yorker_homescreen_settings.chemical_1++;
 8002294:	4b2f      	ldr	r3, [pc, #188]	; (8002354 <platform_start_yorker+0x12c>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	3301      	adds	r3, #1
 800229a:	4a2e      	ldr	r2, [pc, #184]	; (8002354 <platform_start_yorker+0x12c>)
 800229c:	6093      	str	r3, [r2, #8]
		 yorker_homescreen_settings.chemical_2++;
 800229e:	4b2d      	ldr	r3, [pc, #180]	; (8002354 <platform_start_yorker+0x12c>)
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	3301      	adds	r3, #1
 80022a4:	4a2b      	ldr	r2, [pc, #172]	; (8002354 <platform_start_yorker+0x12c>)
 80022a6:	60d3      	str	r3, [r2, #12]
//		 makeup_water_added++;
//		 blowdown_water++;
//		 chemical1++;
//		 chemical2++;
		 ph_inlet_water++;
 80022a8:	4b2f      	ldr	r3, [pc, #188]	; (8002368 <platform_start_yorker+0x140>)
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	3301      	adds	r3, #1
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	4b2d      	ldr	r3, [pc, #180]	; (8002368 <platform_start_yorker+0x140>)
 80022b2:	801a      	strh	r2, [r3, #0]
		 ph_plant_water++;
 80022b4:	4b2d      	ldr	r3, [pc, #180]	; (800236c <platform_start_yorker+0x144>)
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	3301      	adds	r3, #1
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	4b2b      	ldr	r3, [pc, #172]	; (800236c <platform_start_yorker+0x144>)
 80022be:	801a      	strh	r2, [r3, #0]
		 tds_inlet_water++;
 80022c0:	4b2b      	ldr	r3, [pc, #172]	; (8002370 <platform_start_yorker+0x148>)
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	3301      	adds	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	4b29      	ldr	r3, [pc, #164]	; (8002370 <platform_start_yorker+0x148>)
 80022ca:	801a      	strh	r2, [r3, #0]
		 tds_plant_water++;
 80022cc:	4b29      	ldr	r3, [pc, #164]	; (8002374 <platform_start_yorker+0x14c>)
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	3301      	adds	r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	4b27      	ldr	r3, [pc, #156]	; (8002374 <platform_start_yorker+0x14c>)
 80022d6:	801a      	strh	r2, [r3, #0]
		 pump1_state = !pump1_state;
 80022d8:	4b27      	ldr	r3, [pc, #156]	; (8002378 <platform_start_yorker+0x150>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	bf14      	ite	ne
 80022e0:	2301      	movne	r3, #1
 80022e2:	2300      	moveq	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	f083 0301 	eor.w	r3, r3, #1
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4b21      	ldr	r3, [pc, #132]	; (8002378 <platform_start_yorker+0x150>)
 80022f4:	701a      	strb	r2, [r3, #0]
		 pump2_state = !pump2_state;
 80022f6:	4b21      	ldr	r3, [pc, #132]	; (800237c <platform_start_yorker+0x154>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	bf14      	ite	ne
 80022fe:	2301      	movne	r3, #1
 8002300:	2300      	moveq	r3, #0
 8002302:	b2db      	uxtb	r3, r3
 8002304:	f083 0301 	eor.w	r3, r3, #1
 8002308:	b2db      	uxtb	r3, r3
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	b2da      	uxtb	r2, r3
 8002310:	4b1a      	ldr	r3, [pc, #104]	; (800237c <platform_start_yorker+0x154>)
 8002312:	701a      	strb	r2, [r3, #0]

		 if(yorker_homescreen_settings.blowdown_water_pulse_cnt != makeup_water_added)
 8002314:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <platform_start_yorker+0x12c>)
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <platform_start_yorker+0x130>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d003      	beq.n	8002328 <platform_start_yorker+0x100>
		 {
			platform_timer_stop();
 8002320:	f000 fd48 	bl	8002db4 <platform_timer_stop>
			//platform_flashcfg_set_homescreen_settings(&yorker_homescreen_settings);
			platform_timer_start();
 8002324:	f000 fd38 	bl	8002d98 <platform_timer_start>
		 }

		 if(save_settings == 2)// don't remove this
 8002328:	4b15      	ldr	r3, [pc, #84]	; (8002380 <platform_start_yorker+0x158>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b02      	cmp	r3, #2
 800232e:	d109      	bne.n	8002344 <platform_start_yorker+0x11c>
		 {
			platform_timer_stop();
 8002330:	f000 fd40 	bl	8002db4 <platform_timer_stop>
			platform_flashcfg_set_yorker_settings(&yorker_settings);
 8002334:	4806      	ldr	r0, [pc, #24]	; (8002350 <platform_start_yorker+0x128>)
 8002336:	f000 f9a3 	bl	8002680 <platform_flashcfg_set_yorker_settings>
			platform_timer_start();
 800233a:	f000 fd2d 	bl	8002d98 <platform_timer_start>
			save_settings = 0;
 800233e:	4b10      	ldr	r3, [pc, #64]	; (8002380 <platform_start_yorker+0x158>)
 8002340:	2200      	movs	r2, #0
 8002342:	701a      	strb	r2, [r3, #0]
		 }
	     /* USER CODE BEGIN 3 */

		 platform_get_date_and_time(&cDate, &cTime);
 8002344:	490f      	ldr	r1, [pc, #60]	; (8002384 <platform_start_yorker+0x15c>)
 8002346:	4810      	ldr	r0, [pc, #64]	; (8002388 <platform_start_yorker+0x160>)
 8002348:	f000 fc1c 	bl	8002b84 <platform_get_date_and_time>
		 HAL_Delay(1000);
 800234c:	e784      	b.n	8002258 <platform_start_yorker+0x30>
 800234e:	bf00      	nop
 8002350:	200000dc 	.word	0x200000dc
 8002354:	200002c0 	.word	0x200002c0
 8002358:	200000c0 	.word	0x200000c0
 800235c:	200000c4 	.word	0x200000c4
 8002360:	200000c8 	.word	0x200000c8
 8002364:	200000cc 	.word	0x200000cc
 8002368:	200000d0 	.word	0x200000d0
 800236c:	200000d2 	.word	0x200000d2
 8002370:	200000d4 	.word	0x200000d4
 8002374:	200000d6 	.word	0x200000d6
 8002378:	200000d8 	.word	0x200000d8
 800237c:	20000004 	.word	0x20000004
 8002380:	20000100 	.word	0x20000100
 8002384:	20000104 	.word	0x20000104
 8002388:	20000118 	.word	0x20000118

0800238c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <__MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void __MX_ADC1_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023a2:	463b      	mov	r3, r7
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80023ae:	4b21      	ldr	r3, [pc, #132]	; (8002434 <__MX_ADC1_Init+0x98>)
 80023b0:	4a21      	ldr	r2, [pc, #132]	; (8002438 <__MX_ADC1_Init+0x9c>)
 80023b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80023b4:	4b1f      	ldr	r3, [pc, #124]	; (8002434 <__MX_ADC1_Init+0x98>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80023ba:	4b1e      	ldr	r3, [pc, #120]	; (8002434 <__MX_ADC1_Init+0x98>)
 80023bc:	2200      	movs	r2, #0
 80023be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80023c0:	4b1c      	ldr	r3, [pc, #112]	; (8002434 <__MX_ADC1_Init+0x98>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80023c6:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <__MX_ADC1_Init+0x98>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023cc:	4b19      	ldr	r3, [pc, #100]	; (8002434 <__MX_ADC1_Init+0x98>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023d4:	4b17      	ldr	r3, [pc, #92]	; (8002434 <__MX_ADC1_Init+0x98>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023da:	4b16      	ldr	r3, [pc, #88]	; (8002434 <__MX_ADC1_Init+0x98>)
 80023dc:	4a17      	ldr	r2, [pc, #92]	; (800243c <__MX_ADC1_Init+0xa0>)
 80023de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023e0:	4b14      	ldr	r3, [pc, #80]	; (8002434 <__MX_ADC1_Init+0x98>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80023e6:	4b13      	ldr	r3, [pc, #76]	; (8002434 <__MX_ADC1_Init+0x98>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80023ec:	4b11      	ldr	r3, [pc, #68]	; (8002434 <__MX_ADC1_Init+0x98>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023f4:	4b0f      	ldr	r3, [pc, #60]	; (8002434 <__MX_ADC1_Init+0x98>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023fa:	480e      	ldr	r0, [pc, #56]	; (8002434 <__MX_ADC1_Init+0x98>)
 80023fc:	f001 f962 	bl	80036c4 <HAL_ADC_Init>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <__MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002406:	f7ff ffc1 	bl	800238c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800240a:	230a      	movs	r3, #10
 800240c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800240e:	2301      	movs	r3, #1
 8002410:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002412:	2300      	movs	r3, #0
 8002414:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002416:	463b      	mov	r3, r7
 8002418:	4619      	mov	r1, r3
 800241a:	4806      	ldr	r0, [pc, #24]	; (8002434 <__MX_ADC1_Init+0x98>)
 800241c:	f001 f996 	bl	800374c <HAL_ADC_ConfigChannel>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <__MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002426:	f7ff ffb1 	bl	800238c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800242a:	bf00      	nop
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000318 	.word	0x20000318
 8002438:	40012000 	.word	0x40012000
 800243c:	0f000001 	.word	0x0f000001

08002440 <__MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
void __MX_ADC2_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002446:	463b      	mov	r3, r7
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002452:	4b21      	ldr	r3, [pc, #132]	; (80024d8 <__MX_ADC2_Init+0x98>)
 8002454:	4a21      	ldr	r2, [pc, #132]	; (80024dc <__MX_ADC2_Init+0x9c>)
 8002456:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002458:	4b1f      	ldr	r3, [pc, #124]	; (80024d8 <__MX_ADC2_Init+0x98>)
 800245a:	2200      	movs	r2, #0
 800245c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800245e:	4b1e      	ldr	r3, [pc, #120]	; (80024d8 <__MX_ADC2_Init+0x98>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8002464:	4b1c      	ldr	r3, [pc, #112]	; (80024d8 <__MX_ADC2_Init+0x98>)
 8002466:	2200      	movs	r2, #0
 8002468:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800246a:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <__MX_ADC2_Init+0x98>)
 800246c:	2200      	movs	r2, #0
 800246e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002470:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <__MX_ADC2_Init+0x98>)
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002478:	4b17      	ldr	r3, [pc, #92]	; (80024d8 <__MX_ADC2_Init+0x98>)
 800247a:	2200      	movs	r2, #0
 800247c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800247e:	4b16      	ldr	r3, [pc, #88]	; (80024d8 <__MX_ADC2_Init+0x98>)
 8002480:	4a17      	ldr	r2, [pc, #92]	; (80024e0 <__MX_ADC2_Init+0xa0>)
 8002482:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002484:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <__MX_ADC2_Init+0x98>)
 8002486:	2200      	movs	r2, #0
 8002488:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800248a:	4b13      	ldr	r3, [pc, #76]	; (80024d8 <__MX_ADC2_Init+0x98>)
 800248c:	2201      	movs	r2, #1
 800248e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002490:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <__MX_ADC2_Init+0x98>)
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002498:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <__MX_ADC2_Init+0x98>)
 800249a:	2201      	movs	r2, #1
 800249c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800249e:	480e      	ldr	r0, [pc, #56]	; (80024d8 <__MX_ADC2_Init+0x98>)
 80024a0:	f001 f910 	bl	80036c4 <HAL_ADC_Init>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <__MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80024aa:	f7ff ff6f 	bl	800238c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80024ae:	230b      	movs	r3, #11
 80024b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80024b2:	2301      	movs	r3, #1
 80024b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80024b6:	2300      	movs	r3, #0
 80024b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80024ba:	463b      	mov	r3, r7
 80024bc:	4619      	mov	r1, r3
 80024be:	4806      	ldr	r0, [pc, #24]	; (80024d8 <__MX_ADC2_Init+0x98>)
 80024c0:	f001 f944 	bl	800374c <HAL_ADC_ConfigChannel>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <__MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80024ca:	f7ff ff5f 	bl	800238c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	200002d0 	.word	0x200002d0
 80024dc:	40012100 	.word	0x40012100
 80024e0:	0f000001 	.word	0x0f000001

080024e4 <__MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
void __MX_ADC3_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80024ea:	463b      	mov	r3, r7
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80024f6:	4b21      	ldr	r3, [pc, #132]	; (800257c <__MX_ADC3_Init+0x98>)
 80024f8:	4a21      	ldr	r2, [pc, #132]	; (8002580 <__MX_ADC3_Init+0x9c>)
 80024fa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80024fc:	4b1f      	ldr	r3, [pc, #124]	; (800257c <__MX_ADC3_Init+0x98>)
 80024fe:	2200      	movs	r2, #0
 8002500:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002502:	4b1e      	ldr	r3, [pc, #120]	; (800257c <__MX_ADC3_Init+0x98>)
 8002504:	2200      	movs	r2, #0
 8002506:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8002508:	4b1c      	ldr	r3, [pc, #112]	; (800257c <__MX_ADC3_Init+0x98>)
 800250a:	2200      	movs	r2, #0
 800250c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800250e:	4b1b      	ldr	r3, [pc, #108]	; (800257c <__MX_ADC3_Init+0x98>)
 8002510:	2200      	movs	r2, #0
 8002512:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002514:	4b19      	ldr	r3, [pc, #100]	; (800257c <__MX_ADC3_Init+0x98>)
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800251c:	4b17      	ldr	r3, [pc, #92]	; (800257c <__MX_ADC3_Init+0x98>)
 800251e:	2200      	movs	r2, #0
 8002520:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002522:	4b16      	ldr	r3, [pc, #88]	; (800257c <__MX_ADC3_Init+0x98>)
 8002524:	4a17      	ldr	r2, [pc, #92]	; (8002584 <__MX_ADC3_Init+0xa0>)
 8002526:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002528:	4b14      	ldr	r3, [pc, #80]	; (800257c <__MX_ADC3_Init+0x98>)
 800252a:	2200      	movs	r2, #0
 800252c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800252e:	4b13      	ldr	r3, [pc, #76]	; (800257c <__MX_ADC3_Init+0x98>)
 8002530:	2201      	movs	r2, #1
 8002532:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <__MX_ADC3_Init+0x98>)
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <__MX_ADC3_Init+0x98>)
 800253e:	2201      	movs	r2, #1
 8002540:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002542:	480e      	ldr	r0, [pc, #56]	; (800257c <__MX_ADC3_Init+0x98>)
 8002544:	f001 f8be 	bl	80036c4 <HAL_ADC_Init>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <__MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800254e:	f7ff ff1d 	bl	800238c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002552:	230c      	movs	r3, #12
 8002554:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002556:	2301      	movs	r3, #1
 8002558:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800255a:	2300      	movs	r3, #0
 800255c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800255e:	463b      	mov	r3, r7
 8002560:	4619      	mov	r1, r3
 8002562:	4806      	ldr	r0, [pc, #24]	; (800257c <__MX_ADC3_Init+0x98>)
 8002564:	f001 f8f2 	bl	800374c <HAL_ADC_ConfigChannel>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <__MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800256e:	f7ff ff0d 	bl	800238c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000360 	.word	0x20000360
 8002580:	40012200 	.word	0x40012200
 8002584:	0f000001 	.word	0x0f000001

08002588 <platform_adc_init>:
/*******************************************************************************
 *  PUBLIC
 ******************************************************************************/

void platform_adc_init()
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
	__MX_ADC1_Init();
 800258c:	f7ff ff06 	bl	800239c <__MX_ADC1_Init>
	__MX_ADC2_Init();
 8002590:	f7ff ff56 	bl	8002440 <__MX_ADC2_Init>
	__MX_ADC3_Init();
 8002594:	f7ff ffa6 	bl	80024e4 <__MX_ADC3_Init>
}
 8002598:	bf00      	nop
 800259a:	bd80      	pop	{r7, pc}

0800259c <platform_display_init>:
/*******************************************************************************
 *  PUBLIC
 ******************************************************************************/

void platform_display_init()
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
	DisplayActions = display_screens;
 80025a0:	4b03      	ldr	r3, [pc, #12]	; (80025b0 <platform_display_init+0x14>)
 80025a2:	4a04      	ldr	r2, [pc, #16]	; (80025b4 <platform_display_init+0x18>)
 80025a4:	601a      	str	r2, [r3, #0]
}
 80025a6:	bf00      	nop
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	20000128 	.word	0x20000128
 80025b4:	08000591 	.word	0x08000591

080025b8 <__FLASH_Program_Word>:

/*******************************************************************************
 *  PRIVATE
 ******************************************************************************/

void __FLASH_Program_Word(uint32_t Address, uint32_t Data){
 80025b8:	b590      	push	{r4, r7, lr}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, Data);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	f04f 0400 	mov.w	r4, #0
 80025c8:	461a      	mov	r2, r3
 80025ca:	4623      	mov	r3, r4
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	2002      	movs	r0, #2
 80025d0:	f001 fc1e 	bl	8003e10 <HAL_FLASH_Program>
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd90      	pop	{r4, r7, pc}

080025dc <__FLASH_READ>:

uint32_t __FLASH_READ(uint32_t Flash_address){
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
	uint32_t Flash_data;

	Flash_data = *(uint32_t*) Flash_address;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	60fb      	str	r3, [r7, #12]

	return Flash_data;
 80025ea:	68fb      	ldr	r3, [r7, #12]

}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <platform_flashcfg_init>:

/*******************************************************************************
 *  PRIVATE
 ******************************************************************************/
void platform_flashcfg_init(homescreen_settings *flashcfg_yorker_homescreen_settings, settings *flashcfg_yorker_settings)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
//	uint32_t *check_flash_init;
//	*check_flash_init = __FLASH_READ(FLASHCFG_INIT_ADDRESS);
//
//	if(check_flash_init != 2873)
//	{
		flashcfg_yorker_homescreen_settings->mkup_water_added_pulse_cnt = 0;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
		flashcfg_yorker_homescreen_settings->blowdown_water_pulse_cnt = 0;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	605a      	str	r2, [r3, #4]
		flashcfg_yorker_homescreen_settings->chemical_1 = 0;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	609a      	str	r2, [r3, #8]
		flashcfg_yorker_homescreen_settings->chemical_2 = 0;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	60da      	str	r2, [r3, #12]
//		check_flash_init = 2873;
//		__flashcfg_init(check_flash_init);
//	}
//	else
//	{
		platform_flashcfg_get_homescreen_settings(flashcfg_yorker_homescreen_settings);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f808 	bl	8002630 <platform_flashcfg_get_homescreen_settings>
		platform_flashcfg_get_yorker_settings(flashcfg_yorker_settings);
 8002620:	6838      	ldr	r0, [r7, #0]
 8002622:	f000 f889 	bl	8002738 <platform_flashcfg_get_yorker_settings>
//	}
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <platform_flashcfg_get_homescreen_settings>:

	HAL_FLASH_Lock();
}

void platform_flashcfg_get_homescreen_settings(homescreen_settings *flash_yorker_homescreen_settings)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
	flash_yorker_homescreen_settings->mkup_water_added_pulse_cnt = __FLASH_READ(MKUP_WATER_ADDED_PULSE_CNT_ADDRESS);
 8002638:	480d      	ldr	r0, [pc, #52]	; (8002670 <platform_flashcfg_get_homescreen_settings+0x40>)
 800263a:	f7ff ffcf 	bl	80025dc <__FLASH_READ>
 800263e:	4602      	mov	r2, r0
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	601a      	str	r2, [r3, #0]
	flash_yorker_homescreen_settings->blowdown_water_pulse_cnt = __FLASH_READ(BLOWDOWN_WATER_PULSE_CNT_ADDRESS);
 8002644:	480b      	ldr	r0, [pc, #44]	; (8002674 <platform_flashcfg_get_homescreen_settings+0x44>)
 8002646:	f7ff ffc9 	bl	80025dc <__FLASH_READ>
 800264a:	4602      	mov	r2, r0
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	605a      	str	r2, [r3, #4]
	flash_yorker_homescreen_settings->chemical_1 = __FLASH_READ(CHEMICAL_1_ADDRESS);
 8002650:	4809      	ldr	r0, [pc, #36]	; (8002678 <platform_flashcfg_get_homescreen_settings+0x48>)
 8002652:	f7ff ffc3 	bl	80025dc <__FLASH_READ>
 8002656:	4602      	mov	r2, r0
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	609a      	str	r2, [r3, #8]
	flash_yorker_homescreen_settings->chemical_2 = __FLASH_READ(CHEMICAL_2_ADDRESS);
 800265c:	4807      	ldr	r0, [pc, #28]	; (800267c <platform_flashcfg_get_homescreen_settings+0x4c>)
 800265e:	f7ff ffbd 	bl	80025dc <__FLASH_READ>
 8002662:	4602      	mov	r2, r0
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	60da      	str	r2, [r3, #12]
}
 8002668:	bf00      	nop
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	081b0000 	.word	0x081b0000
 8002674:	081b0020 	.word	0x081b0020
 8002678:	081b0040 	.word	0x081b0040
 800267c:	081b0060 	.word	0x081b0060

08002680 <platform_flashcfg_set_yorker_settings>:

void platform_flashcfg_set_yorker_settings(settings *flash_yorker_settings)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8002688:	f001 fc16 	bl	8003eb8 <HAL_FLASH_Unlock>

	FLASH_Erase_Sector(FLASH_SECTOR_23,FLASH_VOLTAGE_RANGE_3);
 800268c:	2102      	movs	r1, #2
 800268e:	2017      	movs	r0, #23
 8002690:	f001 fd82 	bl	8004198 <FLASH_Erase_Sector>

	__FLASH_Program_Word(OFFSET_MKUP_WATER_ADDRESS, flash_yorker_settings->offset_mkupwater);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4619      	mov	r1, r3
 800269a:	481e      	ldr	r0, [pc, #120]	; (8002714 <platform_flashcfg_set_yorker_settings+0x94>)
 800269c:	f7ff ff8c 	bl	80025b8 <__FLASH_Program_Word>
	__FLASH_Program_Word(OFFSET_BLOWDOWN_ADDRESS, flash_yorker_settings->offset_blowdown);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	4619      	mov	r1, r3
 80026a6:	481c      	ldr	r0, [pc, #112]	; (8002718 <platform_flashcfg_set_yorker_settings+0x98>)
 80026a8:	f7ff ff86 	bl	80025b8 <__FLASH_Program_Word>
	__FLASH_Program_Word(PUMP1_LTS_PER_PULSE_ADDRESS, flash_yorker_settings->pump1_lts_per_pulse);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	4619      	mov	r1, r3
 80026b2:	481a      	ldr	r0, [pc, #104]	; (800271c <platform_flashcfg_set_yorker_settings+0x9c>)
 80026b4:	f7ff ff80 	bl	80025b8 <__FLASH_Program_Word>
	__FLASH_Program_Word(PUMP2_LTS_PER_PULSE_ADDRESS, flash_yorker_settings->pump2_lts_per_pulse);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	4619      	mov	r1, r3
 80026be:	4818      	ldr	r0, [pc, #96]	; (8002720 <platform_flashcfg_set_yorker_settings+0xa0>)
 80026c0:	f7ff ff7a 	bl	80025b8 <__FLASH_Program_Word>
	__FLASH_Program_Word(RATIO_1_ADDRESS, flash_yorker_settings->ratio_1);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	4619      	mov	r1, r3
 80026ca:	4816      	ldr	r0, [pc, #88]	; (8002724 <platform_flashcfg_set_yorker_settings+0xa4>)
 80026cc:	f7ff ff74 	bl	80025b8 <__FLASH_Program_Word>
	__FLASH_Program_Word(RATIO_2_ADDRESS, flash_yorker_settings->ratio_2);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	4619      	mov	r1, r3
 80026d6:	4814      	ldr	r0, [pc, #80]	; (8002728 <platform_flashcfg_set_yorker_settings+0xa8>)
 80026d8:	f7ff ff6e 	bl	80025b8 <__FLASH_Program_Word>
	__FLASH_Program_Word(AUTO_BLOWDOWN_ADDRESS, flash_yorker_settings->auto_blowdown);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	7e1b      	ldrb	r3, [r3, #24]
 80026e0:	4619      	mov	r1, r3
 80026e2:	4812      	ldr	r0, [pc, #72]	; (800272c <platform_flashcfg_set_yorker_settings+0xac>)
 80026e4:	f7ff ff68 	bl	80025b8 <__FLASH_Program_Word>
	__FLASH_Program_Word(SET_BLOWDOWN_TDS, flash_yorker_settings->set_blowdown_tds);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	4619      	mov	r1, r3
 80026ee:	4810      	ldr	r0, [pc, #64]	; (8002730 <platform_flashcfg_set_yorker_settings+0xb0>)
 80026f0:	f7ff ff62 	bl	80025b8 <__FLASH_Program_Word>
	__FLASH_Program_Word(SET_BLOWDOWN_IN_M3, flash_yorker_settings->set_blowdown_in_m3);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4619      	mov	r1, r3
 80026fa:	480e      	ldr	r0, [pc, #56]	; (8002734 <platform_flashcfg_set_yorker_settings+0xb4>)
 80026fc:	f7ff ff5c 	bl	80025b8 <__FLASH_Program_Word>

	HAL_Delay(2);
 8002700:	2002      	movs	r0, #2
 8002702:	f000 ffbd 	bl	8003680 <HAL_Delay>

	HAL_FLASH_Lock();
 8002706:	f001 fbf9 	bl	8003efc <HAL_FLASH_Lock>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	081e0000 	.word	0x081e0000
 8002718:	081e0008 	.word	0x081e0008
 800271c:	081e0016 	.word	0x081e0016
 8002720:	081e0024 	.word	0x081e0024
 8002724:	081e0032 	.word	0x081e0032
 8002728:	081e0040 	.word	0x081e0040
 800272c:	081e0048 	.word	0x081e0048
 8002730:	081e0056 	.word	0x081e0056
 8002734:	081e0064 	.word	0x081e0064

08002738 <platform_flashcfg_get_yorker_settings>:

void platform_flashcfg_get_yorker_settings(settings *flash_yorker_settings)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
	flash_yorker_settings->offset_mkupwater = __FLASH_READ(OFFSET_MKUP_WATER_ADDRESS);
 8002740:	4821      	ldr	r0, [pc, #132]	; (80027c8 <platform_flashcfg_get_yorker_settings+0x90>)
 8002742:	f7ff ff4b 	bl	80025dc <__FLASH_READ>
 8002746:	4603      	mov	r3, r0
 8002748:	461a      	mov	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	601a      	str	r2, [r3, #0]
	flash_yorker_settings->offset_blowdown = __FLASH_READ(OFFSET_BLOWDOWN_ADDRESS);
 800274e:	481f      	ldr	r0, [pc, #124]	; (80027cc <platform_flashcfg_get_yorker_settings+0x94>)
 8002750:	f7ff ff44 	bl	80025dc <__FLASH_READ>
 8002754:	4603      	mov	r3, r0
 8002756:	461a      	mov	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	605a      	str	r2, [r3, #4]
	flash_yorker_settings->pump1_lts_per_pulse = __FLASH_READ(PUMP1_LTS_PER_PULSE_ADDRESS);
 800275c:	481c      	ldr	r0, [pc, #112]	; (80027d0 <platform_flashcfg_get_yorker_settings+0x98>)
 800275e:	f7ff ff3d 	bl	80025dc <__FLASH_READ>
 8002762:	4603      	mov	r3, r0
 8002764:	461a      	mov	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	609a      	str	r2, [r3, #8]
	flash_yorker_settings->pump2_lts_per_pulse = __FLASH_READ(PUMP2_LTS_PER_PULSE_ADDRESS);
 800276a:	481a      	ldr	r0, [pc, #104]	; (80027d4 <platform_flashcfg_get_yorker_settings+0x9c>)
 800276c:	f7ff ff36 	bl	80025dc <__FLASH_READ>
 8002770:	4603      	mov	r3, r0
 8002772:	461a      	mov	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	60da      	str	r2, [r3, #12]
	flash_yorker_settings->ratio_1 = __FLASH_READ(RATIO_1_ADDRESS);
 8002778:	4817      	ldr	r0, [pc, #92]	; (80027d8 <platform_flashcfg_get_yorker_settings+0xa0>)
 800277a:	f7ff ff2f 	bl	80025dc <__FLASH_READ>
 800277e:	4603      	mov	r3, r0
 8002780:	461a      	mov	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	611a      	str	r2, [r3, #16]
	flash_yorker_settings->ratio_2 = __FLASH_READ(RATIO_2_ADDRESS);
 8002786:	4815      	ldr	r0, [pc, #84]	; (80027dc <platform_flashcfg_get_yorker_settings+0xa4>)
 8002788:	f7ff ff28 	bl	80025dc <__FLASH_READ>
 800278c:	4603      	mov	r3, r0
 800278e:	461a      	mov	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	615a      	str	r2, [r3, #20]
	flash_yorker_settings->auto_blowdown = __FLASH_READ(AUTO_BLOWDOWN_ADDRESS);
 8002794:	4812      	ldr	r0, [pc, #72]	; (80027e0 <platform_flashcfg_get_yorker_settings+0xa8>)
 8002796:	f7ff ff21 	bl	80025dc <__FLASH_READ>
 800279a:	4603      	mov	r3, r0
 800279c:	b2da      	uxtb	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	761a      	strb	r2, [r3, #24]
	flash_yorker_settings->set_blowdown_tds = __FLASH_READ(SET_BLOWDOWN_TDS);
 80027a2:	4810      	ldr	r0, [pc, #64]	; (80027e4 <platform_flashcfg_get_yorker_settings+0xac>)
 80027a4:	f7ff ff1a 	bl	80025dc <__FLASH_READ>
 80027a8:	4603      	mov	r3, r0
 80027aa:	461a      	mov	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	61da      	str	r2, [r3, #28]
	flash_yorker_settings->set_blowdown_in_m3 = __FLASH_READ(SET_BLOWDOWN_IN_M3);
 80027b0:	480d      	ldr	r0, [pc, #52]	; (80027e8 <platform_flashcfg_get_yorker_settings+0xb0>)
 80027b2:	f7ff ff13 	bl	80025dc <__FLASH_READ>
 80027b6:	4603      	mov	r3, r0
 80027b8:	461a      	mov	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	621a      	str	r2, [r3, #32]
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	081e0000 	.word	0x081e0000
 80027cc:	081e0008 	.word	0x081e0008
 80027d0:	081e0016 	.word	0x081e0016
 80027d4:	081e0024 	.word	0x081e0024
 80027d8:	081e0032 	.word	0x081e0032
 80027dc:	081e0040 	.word	0x081e0040
 80027e0:	081e0048 	.word	0x081e0048
 80027e4:	081e0056 	.word	0x081e0056
 80027e8:	081e0064 	.word	0x081e0064

080027ec <__MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void __MX_GPIO_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08c      	sub	sp, #48	; 0x30
 80027f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f2:	f107 031c 	add.w	r3, r7, #28
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	605a      	str	r2, [r3, #4]
 80027fc:	609a      	str	r2, [r3, #8]
 80027fe:	60da      	str	r2, [r3, #12]
 8002800:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	61bb      	str	r3, [r7, #24]
 8002806:	4b72      	ldr	r3, [pc, #456]	; (80029d0 <__MX_GPIO_Init+0x1e4>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	4a71      	ldr	r2, [pc, #452]	; (80029d0 <__MX_GPIO_Init+0x1e4>)
 800280c:	f043 0310 	orr.w	r3, r3, #16
 8002810:	6313      	str	r3, [r2, #48]	; 0x30
 8002812:	4b6f      	ldr	r3, [pc, #444]	; (80029d0 <__MX_GPIO_Init+0x1e4>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	f003 0310 	and.w	r3, r3, #16
 800281a:	61bb      	str	r3, [r7, #24]
 800281c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	4b6b      	ldr	r3, [pc, #428]	; (80029d0 <__MX_GPIO_Init+0x1e4>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a6a      	ldr	r2, [pc, #424]	; (80029d0 <__MX_GPIO_Init+0x1e4>)
 8002828:	f043 0304 	orr.w	r3, r3, #4
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b68      	ldr	r3, [pc, #416]	; (80029d0 <__MX_GPIO_Init+0x1e4>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	4b64      	ldr	r3, [pc, #400]	; (80029d0 <__MX_GPIO_Init+0x1e4>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	4a63      	ldr	r2, [pc, #396]	; (80029d0 <__MX_GPIO_Init+0x1e4>)
 8002844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002848:	6313      	str	r3, [r2, #48]	; 0x30
 800284a:	4b61      	ldr	r3, [pc, #388]	; (80029d0 <__MX_GPIO_Init+0x1e4>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	4b5d      	ldr	r3, [pc, #372]	; (80029d0 <__MX_GPIO_Init+0x1e4>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	4a5c      	ldr	r2, [pc, #368]	; (80029d0 <__MX_GPIO_Init+0x1e4>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	6313      	str	r3, [r2, #48]	; 0x30
 8002866:	4b5a      	ldr	r3, [pc, #360]	; (80029d0 <__MX_GPIO_Init+0x1e4>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	4b56      	ldr	r3, [pc, #344]	; (80029d0 <__MX_GPIO_Init+0x1e4>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	4a55      	ldr	r2, [pc, #340]	; (80029d0 <__MX_GPIO_Init+0x1e4>)
 800287c:	f043 0302 	orr.w	r3, r3, #2
 8002880:	6313      	str	r3, [r2, #48]	; 0x30
 8002882:	4b53      	ldr	r3, [pc, #332]	; (80029d0 <__MX_GPIO_Init+0x1e4>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	60bb      	str	r3, [r7, #8]
 800288c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	607b      	str	r3, [r7, #4]
 8002892:	4b4f      	ldr	r3, [pc, #316]	; (80029d0 <__MX_GPIO_Init+0x1e4>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	4a4e      	ldr	r2, [pc, #312]	; (80029d0 <__MX_GPIO_Init+0x1e4>)
 8002898:	f043 0308 	orr.w	r3, r3, #8
 800289c:	6313      	str	r3, [r2, #48]	; 0x30
 800289e:	4b4c      	ldr	r3, [pc, #304]	; (80029d0 <__MX_GPIO_Init+0x1e4>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	607b      	str	r3, [r7, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BUZZER_PIN_Pin|RELAY_1_Pin|RELAY_2_Pin|RELAY_3_Pin, GPIO_PIN_RESET);
 80028aa:	2200      	movs	r2, #0
 80028ac:	f24e 0140 	movw	r1, #57408	; 0xe040
 80028b0:	4848      	ldr	r0, [pc, #288]	; (80029d4 <__MX_GPIO_Init+0x1e8>)
 80028b2:	f001 fe81 	bl	80045b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY_4_Pin|RELAY_5_Pin, GPIO_PIN_RESET);
 80028b6:	2200      	movs	r2, #0
 80028b8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80028bc:	4846      	ldr	r0, [pc, #280]	; (80029d8 <__MX_GPIO_Init+0x1ec>)
 80028be:	f001 fe7b 	bl	80045b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEARTBEAT_LED_GPIO_Port, HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 80028c2:	2200      	movs	r2, #0
 80028c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028c8:	4844      	ldr	r0, [pc, #272]	; (80029dc <__MX_GPIO_Init+0x1f0>)
 80028ca:	f001 fe75 	bl	80045b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_ENABLE_GPIO_Port, RS485_ENABLE_Pin, GPIO_PIN_RESET);
 80028ce:	2200      	movs	r2, #0
 80028d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028d4:	4842      	ldr	r0, [pc, #264]	; (80029e0 <__MX_GPIO_Init+0x1f4>)
 80028d6:	f001 fe6f 	bl	80045b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RELAY_6_Pin|RELAY_7_Pin|RELAY_8_Pin, GPIO_PIN_RESET);
 80028da:	2200      	movs	r2, #0
 80028dc:	2138      	movs	r1, #56	; 0x38
 80028de:	4841      	ldr	r0, [pc, #260]	; (80029e4 <__MX_GPIO_Init+0x1f8>)
 80028e0:	f001 fe6a 	bl	80045b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUZZER_PIN_Pin RELAY_1_Pin RELAY_2_Pin RELAY_3_Pin */
  GPIO_InitStruct.Pin = BUZZER_PIN_Pin|RELAY_1_Pin|RELAY_2_Pin|RELAY_3_Pin;
 80028e4:	f24e 0340 	movw	r3, #57408	; 0xe040
 80028e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ea:	2301      	movs	r3, #1
 80028ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028ee:	2302      	movs	r3, #2
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f2:	2300      	movs	r3, #0
 80028f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028f6:	f107 031c 	add.w	r3, r7, #28
 80028fa:	4619      	mov	r1, r3
 80028fc:	4835      	ldr	r0, [pc, #212]	; (80029d4 <__MX_GPIO_Init+0x1e8>)
 80028fe:	f001 fc99 	bl	8004234 <HAL_GPIO_Init>

  /*Configure GPIO pins : POWER_MAINS_Pin LEVEL_SENS_5_Pin LEVEL_SENS_6_Pin */
  GPIO_InitStruct.Pin = POWER_MAINS_Pin|LEVEL_SENS_5_Pin|LEVEL_SENS_6_Pin;
 8002902:	f44f 5303 	mov.w	r3, #8384	; 0x20c0
 8002906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002908:	2300      	movs	r3, #0
 800290a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002910:	f107 031c 	add.w	r3, r7, #28
 8002914:	4619      	mov	r1, r3
 8002916:	4832      	ldr	r0, [pc, #200]	; (80029e0 <__MX_GPIO_Init+0x1f4>)
 8002918:	f001 fc8c 	bl	8004234 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_4_Pin RELAY_5_Pin */
  GPIO_InitStruct.Pin = RELAY_4_Pin|RELAY_5_Pin;
 800291c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002922:	2301      	movs	r3, #1
 8002924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002926:	2302      	movs	r3, #2
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292a:	2300      	movs	r3, #0
 800292c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800292e:	f107 031c 	add.w	r3, r7, #28
 8002932:	4619      	mov	r1, r3
 8002934:	4828      	ldr	r0, [pc, #160]	; (80029d8 <__MX_GPIO_Init+0x1ec>)
 8002936:	f001 fc7d 	bl	8004234 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_5_Pin LEVEL_SENS_4_Pin ESC_KEY_Pin LEVEL_SENS_3_Pin */
  GPIO_InitStruct.Pin = KEY_5_Pin|LEVEL_SENS_4_Pin|ESC_KEY_Pin|LEVEL_SENS_3_Pin;
 800293a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800293e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002940:	2300      	movs	r3, #0
 8002942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002948:	f107 031c 	add.w	r3, r7, #28
 800294c:	4619      	mov	r1, r3
 800294e:	4822      	ldr	r0, [pc, #136]	; (80029d8 <__MX_GPIO_Init+0x1ec>)
 8002950:	f001 fc70 	bl	8004234 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENTER_KEY_Pin LEVEL_SENS_2_Pin RIGHT_KEY_Pin LEVEL_SENS_1_Pin
                           LEFT_KEY_Pin PULSE_SENS_2_Pin PULSE_SENS_1_Pin */
  GPIO_InitStruct.Pin = ENTER_KEY_Pin|LEVEL_SENS_2_Pin|RIGHT_KEY_Pin|LEVEL_SENS_1_Pin
 8002954:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 8002958:	61fb      	str	r3, [r7, #28]
                          |LEFT_KEY_Pin|PULSE_SENS_2_Pin|PULSE_SENS_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800295a:	2300      	movs	r3, #0
 800295c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	2300      	movs	r3, #0
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002962:	f107 031c 	add.w	r3, r7, #28
 8002966:	4619      	mov	r1, r3
 8002968:	481e      	ldr	r0, [pc, #120]	; (80029e4 <__MX_GPIO_Init+0x1f8>)
 800296a:	f001 fc63 	bl	8004234 <HAL_GPIO_Init>

  /*Configure GPIO pin : HEARTBEAT_LED_Pin */
  GPIO_InitStruct.Pin = HEARTBEAT_LED_Pin;
 800296e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002974:	2301      	movs	r3, #1
 8002976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002978:	2302      	movs	r3, #2
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297c:	2300      	movs	r3, #0
 800297e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 8002980:	f107 031c 	add.w	r3, r7, #28
 8002984:	4619      	mov	r1, r3
 8002986:	4815      	ldr	r0, [pc, #84]	; (80029dc <__MX_GPIO_Init+0x1f0>)
 8002988:	f001 fc54 	bl	8004234 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_ENABLE_Pin */
  GPIO_InitStruct.Pin = RS485_ENABLE_Pin;
 800298c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002992:	2301      	movs	r3, #1
 8002994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299a:	2300      	movs	r3, #0
 800299c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RS485_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800299e:	f107 031c 	add.w	r3, r7, #28
 80029a2:	4619      	mov	r1, r3
 80029a4:	480e      	ldr	r0, [pc, #56]	; (80029e0 <__MX_GPIO_Init+0x1f4>)
 80029a6:	f001 fc45 	bl	8004234 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_6_Pin RELAY_7_Pin RELAY_8_Pin */
  GPIO_InitStruct.Pin = RELAY_6_Pin|RELAY_7_Pin|RELAY_8_Pin;
 80029aa:	2338      	movs	r3, #56	; 0x38
 80029ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ae:	2301      	movs	r3, #1
 80029b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029b2:	2302      	movs	r3, #2
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b6:	2300      	movs	r3, #0
 80029b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029ba:	f107 031c 	add.w	r3, r7, #28
 80029be:	4619      	mov	r1, r3
 80029c0:	4808      	ldr	r0, [pc, #32]	; (80029e4 <__MX_GPIO_Init+0x1f8>)
 80029c2:	f001 fc37 	bl	8004234 <HAL_GPIO_Init>

}
 80029c6:	bf00      	nop
 80029c8:	3730      	adds	r7, #48	; 0x30
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40021000 	.word	0x40021000
 80029d8:	40020400 	.word	0x40020400
 80029dc:	40020000 	.word	0x40020000
 80029e0:	40020800 	.word	0x40020800
 80029e4:	40020c00 	.word	0x40020c00

080029e8 <platform_gpio_init>:
  * @brief Platform GPIO Initialization Function
  * @param None
  * @retval None
  */
void platform_gpio_init()
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
	__MX_GPIO_Init();
 80029ec:	f7ff fefe 	bl	80027ec <__MX_GPIO_Init>
}
 80029f0:	bf00      	nop
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <__SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void __SystemClock_Config(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b0a0      	sub	sp, #128	; 0x80
 80029f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80029fe:	2230      	movs	r2, #48	; 0x30
 8002a00:	2100      	movs	r1, #0
 8002a02:	4618      	mov	r0, r3
 8002a04:	f004 f840 	bl	8006a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a08:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a18:	f107 030c 	add.w	r3, r7, #12
 8002a1c:	2230      	movs	r2, #48	; 0x30
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f004 f831 	bl	8006a88 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	4b2c      	ldr	r3, [pc, #176]	; (8002adc <__SystemClock_Config+0xe8>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	4a2b      	ldr	r2, [pc, #172]	; (8002adc <__SystemClock_Config+0xe8>)
 8002a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a34:	6413      	str	r3, [r2, #64]	; 0x40
 8002a36:	4b29      	ldr	r3, [pc, #164]	; (8002adc <__SystemClock_Config+0xe8>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3e:	60bb      	str	r3, [r7, #8]
 8002a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002a42:	2300      	movs	r3, #0
 8002a44:	607b      	str	r3, [r7, #4]
 8002a46:	4b26      	ldr	r3, [pc, #152]	; (8002ae0 <__SystemClock_Config+0xec>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002a4e:	4a24      	ldr	r2, [pc, #144]	; (8002ae0 <__SystemClock_Config+0xec>)
 8002a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <__SystemClock_Config+0xec>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a5e:	607b      	str	r3, [r7, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002a62:	230a      	movs	r3, #10
 8002a64:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a66:	2301      	movs	r3, #1
 8002a68:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a6a:	2310      	movs	r3, #16
 8002a6c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a72:	2300      	movs	r3, #0
 8002a74:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a76:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f001 fdb6 	bl	80045ec <HAL_RCC_OscConfig>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <__SystemClock_Config+0x96>
  {
    Error_Handler();
 8002a86:	f7ff fc81 	bl	800238c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a8a:	230f      	movs	r3, #15
 8002a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a92:	2300      	movs	r3, #0
 8002a94:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a96:	2300      	movs	r3, #0
 8002a98:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f002 f811 	bl	8004acc <HAL_RCC_ClockConfig>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <__SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002ab0:	f7ff fc6c 	bl	800238c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002ab4:	2320      	movs	r3, #32
 8002ab6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002ab8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002abc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002abe:	f107 030c 	add.w	r3, r7, #12
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f002 f9ce 	bl	8004e64 <HAL_RCCEx_PeriphCLKConfig>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <__SystemClock_Config+0xde>
  {
    Error_Handler();
 8002ace:	f7ff fc5d 	bl	800238c <Error_Handler>
  }
}
 8002ad2:	bf00      	nop
 8002ad4:	3780      	adds	r7, #128	; 0x80
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40007000 	.word	0x40007000

08002ae4 <platform_sysclk_cfg>:
/*******************************************************************************
 *  PUBLIC
 ******************************************************************************/

void platform_sysclk_cfg()
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
	__SystemClock_Config();
 8002ae8:	f7ff ff84 	bl	80029f4 <__SystemClock_Config>
}
 8002aec:	bf00      	nop
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <__MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void __MX_RTC_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002af6:	1d3b      	adds	r3, r7, #4
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002b04:	2300      	movs	r3, #0
 8002b06:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002b08:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <__MX_RTC_Init+0x80>)
 8002b0a:	4a1a      	ldr	r2, [pc, #104]	; (8002b74 <__MX_RTC_Init+0x84>)
 8002b0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002b0e:	4b18      	ldr	r3, [pc, #96]	; (8002b70 <__MX_RTC_Init+0x80>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002b14:	4b16      	ldr	r3, [pc, #88]	; (8002b70 <__MX_RTC_Init+0x80>)
 8002b16:	227f      	movs	r2, #127	; 0x7f
 8002b18:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002b1a:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <__MX_RTC_Init+0x80>)
 8002b1c:	22ff      	movs	r2, #255	; 0xff
 8002b1e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002b20:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <__MX_RTC_Init+0x80>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002b26:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <__MX_RTC_Init+0x80>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002b2c:	4b10      	ldr	r3, [pc, #64]	; (8002b70 <__MX_RTC_Init+0x80>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002b32:	480f      	ldr	r0, [pc, #60]	; (8002b70 <__MX_RTC_Init+0x80>)
 8002b34:	f002 fb54 	bl	80051e0 <HAL_RTC_Init>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <__MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002b3e:	f7ff fc25 	bl	800238c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x23;
 8002b42:	2323      	movs	r3, #35	; 0x23
 8002b44:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x36;
 8002b46:	2336      	movs	r3, #54	; 0x36
 8002b48:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x00;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
//  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
//  {
//    Error_Handler();
//  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8002b56:	2303      	movs	r3, #3
 8002b58:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8002b5a:	2311      	movs	r3, #17
 8002b5c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x25;
 8002b5e:	2325      	movs	r3, #37	; 0x25
 8002b60:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x20;
 8002b62:	2320      	movs	r3, #32
 8002b64:	70fb      	strb	r3, [r7, #3]
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002b66:	bf00      	nop
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	200003a8 	.word	0x200003a8
 8002b74:	40002800 	.word	0x40002800

08002b78 <platform_rtc_init>:

/*******************************************************************************
 *  PUBLIC
 ******************************************************************************/
void platform_rtc_init()
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
	__MX_RTC_Init();
 8002b7c:	f7ff ffb8 	bl	8002af0 <__MX_RTC_Init>
}
 8002b80:	bf00      	nop
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <platform_get_date_and_time>:

void platform_get_date_and_time(RTC_DateTypeDef *cDate, RTC_TimeTypeDef *cTime)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetTime(&hrtc, cTime, RTC_FORMAT_BCD);
 8002b8e:	2201      	movs	r2, #1
 8002b90:	6839      	ldr	r1, [r7, #0]
 8002b92:	4806      	ldr	r0, [pc, #24]	; (8002bac <platform_get_date_and_time+0x28>)
 8002b94:	f002 fbb5 	bl	8005302 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, cDate, RTC_FORMAT_BCD);
 8002b98:	2201      	movs	r2, #1
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	4803      	ldr	r0, [pc, #12]	; (8002bac <platform_get_date_and_time+0x28>)
 8002b9e:	f002 fc0e 	bl	80053be <HAL_RTC_GetDate>
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	200003a8 	.word	0x200003a8

08002bb0 <__MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void __MX_TIM2_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bb6:	f107 0308 	add.w	r3, r7, #8
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	605a      	str	r2, [r3, #4]
 8002bc0:	609a      	str	r2, [r3, #8]
 8002bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bc4:	463b      	mov	r3, r7
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002bcc:	4b1e      	ldr	r3, [pc, #120]	; (8002c48 <__MX_TIM2_Init+0x98>)
 8002bce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1600-1;
 8002bd4:	4b1c      	ldr	r3, [pc, #112]	; (8002c48 <__MX_TIM2_Init+0x98>)
 8002bd6:	f240 623f 	movw	r2, #1599	; 0x63f
 8002bda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bdc:	4b1a      	ldr	r3, [pc, #104]	; (8002c48 <__MX_TIM2_Init+0x98>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8002be2:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <__MX_TIM2_Init+0x98>)
 8002be4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002be8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bea:	4b17      	ldr	r3, [pc, #92]	; (8002c48 <__MX_TIM2_Init+0x98>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bf0:	4b15      	ldr	r3, [pc, #84]	; (8002c48 <__MX_TIM2_Init+0x98>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002bf6:	4814      	ldr	r0, [pc, #80]	; (8002c48 <__MX_TIM2_Init+0x98>)
 8002bf8:	f002 fca2 	bl	8005540 <HAL_TIM_Base_Init>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <__MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002c02:	f7ff fbc3 	bl	800238c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c0c:	f107 0308 	add.w	r3, r7, #8
 8002c10:	4619      	mov	r1, r3
 8002c12:	480d      	ldr	r0, [pc, #52]	; (8002c48 <__MX_TIM2_Init+0x98>)
 8002c14:	f002 fe16 	bl	8005844 <HAL_TIM_ConfigClockSource>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <__MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002c1e:	f7ff fbb5 	bl	800238c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c22:	2300      	movs	r3, #0
 8002c24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c26:	2300      	movs	r3, #0
 8002c28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c2a:	463b      	mov	r3, r7
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4806      	ldr	r0, [pc, #24]	; (8002c48 <__MX_TIM2_Init+0x98>)
 8002c30:	f003 f822 	bl	8005c78 <HAL_TIMEx_MasterConfigSynchronization>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <__MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002c3a:	f7ff fba7 	bl	800238c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c3e:	bf00      	nop
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20000448 	.word	0x20000448

08002c4c <__MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void __MX_TIM4_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c52:	f107 0308 	add.w	r3, r7, #8
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	605a      	str	r2, [r3, #4]
 8002c5c:	609a      	str	r2, [r3, #8]
 8002c5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c60:	463b      	mov	r3, r7
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c68:	4b1d      	ldr	r3, [pc, #116]	; (8002ce0 <__MX_TIM4_Init+0x94>)
 8002c6a:	4a1e      	ldr	r2, [pc, #120]	; (8002ce4 <__MX_TIM4_Init+0x98>)
 8002c6c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1600-1;
 8002c6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ce0 <__MX_TIM4_Init+0x94>)
 8002c70:	f240 623f 	movw	r2, #1599	; 0x63f
 8002c74:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c76:	4b1a      	ldr	r3, [pc, #104]	; (8002ce0 <__MX_TIM4_Init+0x94>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000-1;
 8002c7c:	4b18      	ldr	r3, [pc, #96]	; (8002ce0 <__MX_TIM4_Init+0x94>)
 8002c7e:	f241 3287 	movw	r2, #4999	; 0x1387
 8002c82:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c84:	4b16      	ldr	r3, [pc, #88]	; (8002ce0 <__MX_TIM4_Init+0x94>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <__MX_TIM4_Init+0x94>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002c90:	4813      	ldr	r0, [pc, #76]	; (8002ce0 <__MX_TIM4_Init+0x94>)
 8002c92:	f002 fc55 	bl	8005540 <HAL_TIM_Base_Init>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <__MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002c9c:	f7ff fb76 	bl	800238c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ca4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002ca6:	f107 0308 	add.w	r3, r7, #8
 8002caa:	4619      	mov	r1, r3
 8002cac:	480c      	ldr	r0, [pc, #48]	; (8002ce0 <__MX_TIM4_Init+0x94>)
 8002cae:	f002 fdc9 	bl	8005844 <HAL_TIM_ConfigClockSource>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <__MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002cb8:	f7ff fb68 	bl	800238c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002cc4:	463b      	mov	r3, r7
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4805      	ldr	r0, [pc, #20]	; (8002ce0 <__MX_TIM4_Init+0x94>)
 8002cca:	f002 ffd5 	bl	8005c78 <HAL_TIMEx_MasterConfigSynchronization>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <__MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002cd4:	f7ff fb5a 	bl	800238c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002cd8:	bf00      	nop
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	200003c8 	.word	0x200003c8
 8002ce4:	40000800 	.word	0x40000800

08002ce8 <__MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
void __MX_TIM5_Init(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cee:	f107 0308 	add.w	r3, r7, #8
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	605a      	str	r2, [r3, #4]
 8002cf8:	609a      	str	r2, [r3, #8]
 8002cfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cfc:	463b      	mov	r3, r7
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002d04:	4b1d      	ldr	r3, [pc, #116]	; (8002d7c <__MX_TIM5_Init+0x94>)
 8002d06:	4a1e      	ldr	r2, [pc, #120]	; (8002d80 <__MX_TIM5_Init+0x98>)
 8002d08:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1600-1;
 8002d0a:	4b1c      	ldr	r3, [pc, #112]	; (8002d7c <__MX_TIM5_Init+0x94>)
 8002d0c:	f240 623f 	movw	r2, #1599	; 0x63f
 8002d10:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d12:	4b1a      	ldr	r3, [pc, #104]	; (8002d7c <__MX_TIM5_Init+0x94>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 5000-1;
 8002d18:	4b18      	ldr	r3, [pc, #96]	; (8002d7c <__MX_TIM5_Init+0x94>)
 8002d1a:	f241 3287 	movw	r2, #4999	; 0x1387
 8002d1e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d20:	4b16      	ldr	r3, [pc, #88]	; (8002d7c <__MX_TIM5_Init+0x94>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d26:	4b15      	ldr	r3, [pc, #84]	; (8002d7c <__MX_TIM5_Init+0x94>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002d2c:	4813      	ldr	r0, [pc, #76]	; (8002d7c <__MX_TIM5_Init+0x94>)
 8002d2e:	f002 fc07 	bl	8005540 <HAL_TIM_Base_Init>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <__MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002d38:	f7ff fb28 	bl	800238c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002d42:	f107 0308 	add.w	r3, r7, #8
 8002d46:	4619      	mov	r1, r3
 8002d48:	480c      	ldr	r0, [pc, #48]	; (8002d7c <__MX_TIM5_Init+0x94>)
 8002d4a:	f002 fd7b 	bl	8005844 <HAL_TIM_ConfigClockSource>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <__MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002d54:	f7ff fb1a 	bl	800238c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002d60:	463b      	mov	r3, r7
 8002d62:	4619      	mov	r1, r3
 8002d64:	4805      	ldr	r0, [pc, #20]	; (8002d7c <__MX_TIM5_Init+0x94>)
 8002d66:	f002 ff87 	bl	8005c78 <HAL_TIMEx_MasterConfigSynchronization>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <__MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002d70:	f7ff fb0c 	bl	800238c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002d74:	bf00      	nop
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	20000408 	.word	0x20000408
 8002d80:	40000c00 	.word	0x40000c00

08002d84 <platform_timer_init>:
/*******************************************************************************
 *  PUBLIC
 ******************************************************************************/

void platform_timer_init()
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
	__MX_TIM2_Init();
 8002d88:	f7ff ff12 	bl	8002bb0 <__MX_TIM2_Init>
	__MX_TIM4_Init();
 8002d8c:	f7ff ff5e 	bl	8002c4c <__MX_TIM4_Init>
	__MX_TIM5_Init();
 8002d90:	f7ff ffaa 	bl	8002ce8 <__MX_TIM5_Init>
}
 8002d94:	bf00      	nop
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <platform_timer_start>:

void platform_timer_start()
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002d9c:	4803      	ldr	r0, [pc, #12]	; (8002dac <platform_timer_start+0x14>)
 8002d9e:	f002 fbfa 	bl	8005596 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8002da2:	4803      	ldr	r0, [pc, #12]	; (8002db0 <platform_timer_start+0x18>)
 8002da4:	f002 fbf7 	bl	8005596 <HAL_TIM_Base_Start_IT>
}
 8002da8:	bf00      	nop
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	20000448 	.word	0x20000448
 8002db0:	200003c8 	.word	0x200003c8

08002db4 <platform_timer_stop>:

void platform_timer_stop()
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim2);
 8002db8:	4803      	ldr	r0, [pc, #12]	; (8002dc8 <platform_timer_stop+0x14>)
 8002dba:	f002 fc10 	bl	80055de <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim4);
 8002dbe:	4803      	ldr	r0, [pc, #12]	; (8002dcc <platform_timer_stop+0x18>)
 8002dc0:	f002 fc0d 	bl	80055de <HAL_TIM_Base_Stop_IT>
}
 8002dc4:	bf00      	nop
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	20000448 	.word	0x20000448
 8002dcc:	200003c8 	.word	0x200003c8

08002dd0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == htim2.Instance)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d101      	bne.n	8002de8 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
    	keys_action();
 8002de4:	f7fd ff32 	bl	8000c4c <keys_action>
    	//pulse_counter();
    }
    if (htim->Instance == htim4.Instance)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d102      	bne.n	8002dfa <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
    	//keypad_status = 0;
    	DisplayActions();
 8002df4:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4798      	blx	r3
    else if (htim->Instance == htim5.Instance)
	{
    	//keypad_action();
    	//keypad_status = 1;
	}
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20000448 	.word	0x20000448
 8002e08:	200003c8 	.word	0x200003c8
 8002e0c:	20000128 	.word	0x20000128

08002e10 <__MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
void __MX_UART5_Init(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002e14:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <__MX_UART5_Init+0x4c>)
 8002e16:	4a12      	ldr	r2, [pc, #72]	; (8002e60 <__MX_UART5_Init+0x50>)
 8002e18:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8002e1a:	4b10      	ldr	r3, [pc, #64]	; (8002e5c <__MX_UART5_Init+0x4c>)
 8002e1c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e20:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002e22:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <__MX_UART5_Init+0x4c>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002e28:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <__MX_UART5_Init+0x4c>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002e2e:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <__MX_UART5_Init+0x4c>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002e34:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <__MX_UART5_Init+0x4c>)
 8002e36:	220c      	movs	r2, #12
 8002e38:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e3a:	4b08      	ldr	r3, [pc, #32]	; (8002e5c <__MX_UART5_Init+0x4c>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e40:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <__MX_UART5_Init+0x4c>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002e46:	4805      	ldr	r0, [pc, #20]	; (8002e5c <__MX_UART5_Init+0x4c>)
 8002e48:	f002 ffa6 	bl	8005d98 <HAL_UART_Init>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <__MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002e52:	f7ff fa9b 	bl	800238c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	200004c8 	.word	0x200004c8
 8002e60:	40005000 	.word	0x40005000

08002e64 <__MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
void __MX_UART7_Init(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002e68:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <__MX_UART7_Init+0x4c>)
 8002e6a:	4a12      	ldr	r2, [pc, #72]	; (8002eb4 <__MX_UART7_Init+0x50>)
 8002e6c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 8002e6e:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <__MX_UART7_Init+0x4c>)
 8002e70:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e74:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002e76:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <__MX_UART7_Init+0x4c>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <__MX_UART7_Init+0x4c>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002e82:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <__MX_UART7_Init+0x4c>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002e88:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <__MX_UART7_Init+0x4c>)
 8002e8a:	220c      	movs	r2, #12
 8002e8c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e8e:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <__MX_UART7_Init+0x4c>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e94:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <__MX_UART7_Init+0x4c>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002e9a:	4805      	ldr	r0, [pc, #20]	; (8002eb0 <__MX_UART7_Init+0x4c>)
 8002e9c:	f002 ff7c 	bl	8005d98 <HAL_UART_Init>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <__MX_UART7_Init+0x46>
  {
    Error_Handler();
 8002ea6:	f7ff fa71 	bl	800238c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000488 	.word	0x20000488
 8002eb4:	40007800 	.word	0x40007800

08002eb8 <__MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void __MX_USART2_UART_Init(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ebc:	4b11      	ldr	r3, [pc, #68]	; (8002f04 <__MX_USART2_UART_Init+0x4c>)
 8002ebe:	4a12      	ldr	r2, [pc, #72]	; (8002f08 <__MX_USART2_UART_Init+0x50>)
 8002ec0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ec2:	4b10      	ldr	r3, [pc, #64]	; (8002f04 <__MX_USART2_UART_Init+0x4c>)
 8002ec4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ec8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002eca:	4b0e      	ldr	r3, [pc, #56]	; (8002f04 <__MX_USART2_UART_Init+0x4c>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <__MX_USART2_UART_Init+0x4c>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ed6:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <__MX_USART2_UART_Init+0x4c>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002edc:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <__MX_USART2_UART_Init+0x4c>)
 8002ede:	220c      	movs	r2, #12
 8002ee0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ee2:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <__MX_USART2_UART_Init+0x4c>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ee8:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <__MX_USART2_UART_Init+0x4c>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002eee:	4805      	ldr	r0, [pc, #20]	; (8002f04 <__MX_USART2_UART_Init+0x4c>)
 8002ef0:	f002 ff52 	bl	8005d98 <HAL_UART_Init>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <__MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002efa:	f7ff fa47 	bl	800238c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002efe:	bf00      	nop
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20000508 	.word	0x20000508
 8002f08:	40004400 	.word	0x40004400

08002f0c <__wifi_uart_init>:

void __wifi_uart_init()
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
	__MX_USART2_UART_Init();
 8002f10:	f7ff ffd2 	bl	8002eb8 <__MX_USART2_UART_Init>
}
 8002f14:	bf00      	nop
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <__lcd_uart_init>:

void __lcd_uart_init()
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
	__MX_UART7_Init();
 8002f1c:	f7ff ffa2 	bl	8002e64 <__MX_UART7_Init>
}
 8002f20:	bf00      	nop
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <__rs485_uart_init>:

void __rs485_uart_init()
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
	__MX_UART5_Init();
 8002f28:	f7ff ff72 	bl	8002e10 <__MX_UART5_Init>
}
 8002f2c:	bf00      	nop
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <platform_uart_init>:
/*******************************************************************************
 *  PUBLIC
 ******************************************************************************/

void platform_uart_init()
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
	__wifi_uart_init();
 8002f34:	f7ff ffea 	bl	8002f0c <__wifi_uart_init>
	__lcd_uart_init();
 8002f38:	f7ff ffee 	bl	8002f18 <__lcd_uart_init>
	__rs485_uart_init();
 8002f3c:	f7ff fff2 	bl	8002f24 <__rs485_uart_init>
}
 8002f40:	bf00      	nop
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <lcd_send_cmd>:

void lcd_send_cmd(char *pData, int Size)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_IT(&huart7,pData,Size);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	461a      	mov	r2, r3
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	4803      	ldr	r0, [pc, #12]	; (8002f64 <lcd_send_cmd+0x20>)
 8002f58:	f002 ff6b 	bl	8005e32 <HAL_UART_Transmit_IT>
}
 8002f5c:	bf00      	nop
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	20000488 	.word	0x20000488

08002f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
	platform_start_yorker();
 8002f6c:	f7ff f95c 	bl	8002228 <platform_start_yorker>
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	607b      	str	r3, [r7, #4]
 8002f82:	4b10      	ldr	r3, [pc, #64]	; (8002fc4 <HAL_MspInit+0x4c>)
 8002f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f86:	4a0f      	ldr	r2, [pc, #60]	; (8002fc4 <HAL_MspInit+0x4c>)
 8002f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f8e:	4b0d      	ldr	r3, [pc, #52]	; (8002fc4 <HAL_MspInit+0x4c>)
 8002f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f96:	607b      	str	r3, [r7, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	603b      	str	r3, [r7, #0]
 8002f9e:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <HAL_MspInit+0x4c>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	4a08      	ldr	r2, [pc, #32]	; (8002fc4 <HAL_MspInit+0x4c>)
 8002fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8002faa:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_MspInit+0x4c>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40023800 	.word	0x40023800

08002fc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08e      	sub	sp, #56	; 0x38
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	605a      	str	r2, [r3, #4]
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	60da      	str	r2, [r3, #12]
 8002fde:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a45      	ldr	r2, [pc, #276]	; (80030fc <HAL_ADC_MspInit+0x134>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d128      	bne.n	800303c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	623b      	str	r3, [r7, #32]
 8002fee:	4b44      	ldr	r3, [pc, #272]	; (8003100 <HAL_ADC_MspInit+0x138>)
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	4a43      	ldr	r2, [pc, #268]	; (8003100 <HAL_ADC_MspInit+0x138>)
 8002ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ffa:	4b41      	ldr	r3, [pc, #260]	; (8003100 <HAL_ADC_MspInit+0x138>)
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003002:	623b      	str	r3, [r7, #32]
 8003004:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	61fb      	str	r3, [r7, #28]
 800300a:	4b3d      	ldr	r3, [pc, #244]	; (8003100 <HAL_ADC_MspInit+0x138>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	4a3c      	ldr	r2, [pc, #240]	; (8003100 <HAL_ADC_MspInit+0x138>)
 8003010:	f043 0304 	orr.w	r3, r3, #4
 8003014:	6313      	str	r3, [r2, #48]	; 0x30
 8003016:	4b3a      	ldr	r3, [pc, #232]	; (8003100 <HAL_ADC_MspInit+0x138>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	61fb      	str	r3, [r7, #28]
 8003020:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8003022:	2309      	movs	r3, #9
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003026:	2303      	movs	r3, #3
 8003028:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302a:	2300      	movs	r3, #0
 800302c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800302e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003032:	4619      	mov	r1, r3
 8003034:	4833      	ldr	r0, [pc, #204]	; (8003104 <HAL_ADC_MspInit+0x13c>)
 8003036:	f001 f8fd 	bl	8004234 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800303a:	e05a      	b.n	80030f2 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a31      	ldr	r2, [pc, #196]	; (8003108 <HAL_ADC_MspInit+0x140>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d128      	bne.n	8003098 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	61bb      	str	r3, [r7, #24]
 800304a:	4b2d      	ldr	r3, [pc, #180]	; (8003100 <HAL_ADC_MspInit+0x138>)
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304e:	4a2c      	ldr	r2, [pc, #176]	; (8003100 <HAL_ADC_MspInit+0x138>)
 8003050:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003054:	6453      	str	r3, [r2, #68]	; 0x44
 8003056:	4b2a      	ldr	r3, [pc, #168]	; (8003100 <HAL_ADC_MspInit+0x138>)
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800305e:	61bb      	str	r3, [r7, #24]
 8003060:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	4b26      	ldr	r3, [pc, #152]	; (8003100 <HAL_ADC_MspInit+0x138>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	4a25      	ldr	r2, [pc, #148]	; (8003100 <HAL_ADC_MspInit+0x138>)
 800306c:	f043 0304 	orr.w	r3, r3, #4
 8003070:	6313      	str	r3, [r2, #48]	; 0x30
 8003072:	4b23      	ldr	r3, [pc, #140]	; (8003100 <HAL_ADC_MspInit+0x138>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	f003 0304 	and.w	r3, r3, #4
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800307e:	2302      	movs	r3, #2
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003082:	2303      	movs	r3, #3
 8003084:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003086:	2300      	movs	r3, #0
 8003088:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800308a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800308e:	4619      	mov	r1, r3
 8003090:	481c      	ldr	r0, [pc, #112]	; (8003104 <HAL_ADC_MspInit+0x13c>)
 8003092:	f001 f8cf 	bl	8004234 <HAL_GPIO_Init>
}
 8003096:	e02c      	b.n	80030f2 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a1b      	ldr	r2, [pc, #108]	; (800310c <HAL_ADC_MspInit+0x144>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d127      	bne.n	80030f2 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	4b16      	ldr	r3, [pc, #88]	; (8003100 <HAL_ADC_MspInit+0x138>)
 80030a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030aa:	4a15      	ldr	r2, [pc, #84]	; (8003100 <HAL_ADC_MspInit+0x138>)
 80030ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030b0:	6453      	str	r3, [r2, #68]	; 0x44
 80030b2:	4b13      	ldr	r3, [pc, #76]	; (8003100 <HAL_ADC_MspInit+0x138>)
 80030b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	4b0f      	ldr	r3, [pc, #60]	; (8003100 <HAL_ADC_MspInit+0x138>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	4a0e      	ldr	r2, [pc, #56]	; (8003100 <HAL_ADC_MspInit+0x138>)
 80030c8:	f043 0304 	orr.w	r3, r3, #4
 80030cc:	6313      	str	r3, [r2, #48]	; 0x30
 80030ce:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <HAL_ADC_MspInit+0x138>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	f003 0304 	and.w	r3, r3, #4
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80030da:	2304      	movs	r3, #4
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030de:	2303      	movs	r3, #3
 80030e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ea:	4619      	mov	r1, r3
 80030ec:	4805      	ldr	r0, [pc, #20]	; (8003104 <HAL_ADC_MspInit+0x13c>)
 80030ee:	f001 f8a1 	bl	8004234 <HAL_GPIO_Init>
}
 80030f2:	bf00      	nop
 80030f4:	3738      	adds	r7, #56	; 0x38
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40012000 	.word	0x40012000
 8003100:	40023800 	.word	0x40023800
 8003104:	40020800 	.word	0x40020800
 8003108:	40012100 	.word	0x40012100
 800310c:	40012200 	.word	0x40012200

08003110 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a05      	ldr	r2, [pc, #20]	; (8003134 <HAL_RTC_MspInit+0x24>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d102      	bne.n	8003128 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003122:	4b05      	ldr	r3, [pc, #20]	; (8003138 <HAL_RTC_MspInit+0x28>)
 8003124:	2201      	movs	r2, #1
 8003126:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	40002800 	.word	0x40002800
 8003138:	42470e3c 	.word	0x42470e3c

0800313c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314c:	d116      	bne.n	800317c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	4b28      	ldr	r3, [pc, #160]	; (80031f4 <HAL_TIM_Base_MspInit+0xb8>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	4a27      	ldr	r2, [pc, #156]	; (80031f4 <HAL_TIM_Base_MspInit+0xb8>)
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	6413      	str	r3, [r2, #64]	; 0x40
 800315e:	4b25      	ldr	r3, [pc, #148]	; (80031f4 <HAL_TIM_Base_MspInit+0xb8>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	617b      	str	r3, [r7, #20]
 8003168:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800316a:	2200      	movs	r2, #0
 800316c:	2100      	movs	r1, #0
 800316e:	201c      	movs	r0, #28
 8003170:	f000 fdf5 	bl	8003d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003174:	201c      	movs	r0, #28
 8003176:	f000 fe0e 	bl	8003d96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800317a:	e036      	b.n	80031ea <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a1d      	ldr	r2, [pc, #116]	; (80031f8 <HAL_TIM_Base_MspInit+0xbc>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d116      	bne.n	80031b4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	4b1a      	ldr	r3, [pc, #104]	; (80031f4 <HAL_TIM_Base_MspInit+0xb8>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	4a19      	ldr	r2, [pc, #100]	; (80031f4 <HAL_TIM_Base_MspInit+0xb8>)
 8003190:	f043 0304 	orr.w	r3, r3, #4
 8003194:	6413      	str	r3, [r2, #64]	; 0x40
 8003196:	4b17      	ldr	r3, [pc, #92]	; (80031f4 <HAL_TIM_Base_MspInit+0xb8>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80031a2:	2200      	movs	r2, #0
 80031a4:	2100      	movs	r1, #0
 80031a6:	201e      	movs	r0, #30
 80031a8:	f000 fdd9 	bl	8003d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80031ac:	201e      	movs	r0, #30
 80031ae:	f000 fdf2 	bl	8003d96 <HAL_NVIC_EnableIRQ>
}
 80031b2:	e01a      	b.n	80031ea <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM5)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a10      	ldr	r2, [pc, #64]	; (80031fc <HAL_TIM_Base_MspInit+0xc0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d115      	bne.n	80031ea <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	4b0c      	ldr	r3, [pc, #48]	; (80031f4 <HAL_TIM_Base_MspInit+0xb8>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	4a0b      	ldr	r2, [pc, #44]	; (80031f4 <HAL_TIM_Base_MspInit+0xb8>)
 80031c8:	f043 0308 	orr.w	r3, r3, #8
 80031cc:	6413      	str	r3, [r2, #64]	; 0x40
 80031ce:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <HAL_TIM_Base_MspInit+0xb8>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80031da:	2200      	movs	r2, #0
 80031dc:	2100      	movs	r1, #0
 80031de:	2032      	movs	r0, #50	; 0x32
 80031e0:	f000 fdbd 	bl	8003d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80031e4:	2032      	movs	r0, #50	; 0x32
 80031e6:	f000 fdd6 	bl	8003d96 <HAL_NVIC_EnableIRQ>
}
 80031ea:	bf00      	nop
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40023800 	.word	0x40023800
 80031f8:	40000800 	.word	0x40000800
 80031fc:	40000c00 	.word	0x40000c00

08003200 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08e      	sub	sp, #56	; 0x38
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	605a      	str	r2, [r3, #4]
 8003212:	609a      	str	r2, [r3, #8]
 8003214:	60da      	str	r2, [r3, #12]
 8003216:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a67      	ldr	r2, [pc, #412]	; (80033bc <HAL_UART_MspInit+0x1bc>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d153      	bne.n	80032ca <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	623b      	str	r3, [r7, #32]
 8003226:	4b66      	ldr	r3, [pc, #408]	; (80033c0 <HAL_UART_MspInit+0x1c0>)
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	4a65      	ldr	r2, [pc, #404]	; (80033c0 <HAL_UART_MspInit+0x1c0>)
 800322c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003230:	6413      	str	r3, [r2, #64]	; 0x40
 8003232:	4b63      	ldr	r3, [pc, #396]	; (80033c0 <HAL_UART_MspInit+0x1c0>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800323a:	623b      	str	r3, [r7, #32]
 800323c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
 8003242:	4b5f      	ldr	r3, [pc, #380]	; (80033c0 <HAL_UART_MspInit+0x1c0>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	4a5e      	ldr	r2, [pc, #376]	; (80033c0 <HAL_UART_MspInit+0x1c0>)
 8003248:	f043 0304 	orr.w	r3, r3, #4
 800324c:	6313      	str	r3, [r2, #48]	; 0x30
 800324e:	4b5c      	ldr	r3, [pc, #368]	; (80033c0 <HAL_UART_MspInit+0x1c0>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	61fb      	str	r3, [r7, #28]
 8003258:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	61bb      	str	r3, [r7, #24]
 800325e:	4b58      	ldr	r3, [pc, #352]	; (80033c0 <HAL_UART_MspInit+0x1c0>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	4a57      	ldr	r2, [pc, #348]	; (80033c0 <HAL_UART_MspInit+0x1c0>)
 8003264:	f043 0308 	orr.w	r3, r3, #8
 8003268:	6313      	str	r3, [r2, #48]	; 0x30
 800326a:	4b55      	ldr	r3, [pc, #340]	; (80033c0 <HAL_UART_MspInit+0x1c0>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	61bb      	str	r3, [r7, #24]
 8003274:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = RS485_TX_Pin;
 8003276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327c:	2302      	movs	r3, #2
 800327e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003280:	2301      	movs	r3, #1
 8003282:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003284:	2303      	movs	r3, #3
 8003286:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003288:	2308      	movs	r3, #8
 800328a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 800328c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003290:	4619      	mov	r1, r3
 8003292:	484c      	ldr	r0, [pc, #304]	; (80033c4 <HAL_UART_MspInit+0x1c4>)
 8003294:	f000 ffce 	bl	8004234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RS485_RX_Pin;
 8003298:	2304      	movs	r3, #4
 800329a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329c:	2302      	movs	r3, #2
 800329e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032a0:	2301      	movs	r3, #1
 80032a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a4:	2303      	movs	r3, #3
 80032a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80032a8:	2308      	movs	r3, #8
 80032aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 80032ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032b0:	4619      	mov	r1, r3
 80032b2:	4845      	ldr	r0, [pc, #276]	; (80033c8 <HAL_UART_MspInit+0x1c8>)
 80032b4:	f000 ffbe 	bl	8004234 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80032b8:	2200      	movs	r2, #0
 80032ba:	2100      	movs	r1, #0
 80032bc:	2035      	movs	r0, #53	; 0x35
 80032be:	f000 fd4e 	bl	8003d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80032c2:	2035      	movs	r0, #53	; 0x35
 80032c4:	f000 fd67 	bl	8003d96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80032c8:	e073      	b.n	80033b2 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==UART7)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a3f      	ldr	r2, [pc, #252]	; (80033cc <HAL_UART_MspInit+0x1cc>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d135      	bne.n	8003340 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART7_CLK_ENABLE();
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	4b39      	ldr	r3, [pc, #228]	; (80033c0 <HAL_UART_MspInit+0x1c0>)
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	4a38      	ldr	r2, [pc, #224]	; (80033c0 <HAL_UART_MspInit+0x1c0>)
 80032de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032e2:	6413      	str	r3, [r2, #64]	; 0x40
 80032e4:	4b36      	ldr	r3, [pc, #216]	; (80033c0 <HAL_UART_MspInit+0x1c0>)
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80032f0:	2300      	movs	r3, #0
 80032f2:	613b      	str	r3, [r7, #16]
 80032f4:	4b32      	ldr	r3, [pc, #200]	; (80033c0 <HAL_UART_MspInit+0x1c0>)
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	4a31      	ldr	r2, [pc, #196]	; (80033c0 <HAL_UART_MspInit+0x1c0>)
 80032fa:	f043 0310 	orr.w	r3, r3, #16
 80032fe:	6313      	str	r3, [r2, #48]	; 0x30
 8003300:	4b2f      	ldr	r3, [pc, #188]	; (80033c0 <HAL_UART_MspInit+0x1c0>)
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	f003 0310 	and.w	r3, r3, #16
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_UART_RX_Pin|LCD_UART_TX_Pin;
 800330c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003312:	2302      	movs	r3, #2
 8003314:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003316:	2301      	movs	r3, #1
 8003318:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800331a:	2303      	movs	r3, #3
 800331c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800331e:	2308      	movs	r3, #8
 8003320:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003326:	4619      	mov	r1, r3
 8003328:	4829      	ldr	r0, [pc, #164]	; (80033d0 <HAL_UART_MspInit+0x1d0>)
 800332a:	f000 ff83 	bl	8004234 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800332e:	2200      	movs	r2, #0
 8003330:	2100      	movs	r1, #0
 8003332:	2052      	movs	r0, #82	; 0x52
 8003334:	f000 fd13 	bl	8003d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8003338:	2052      	movs	r0, #82	; 0x52
 800333a:	f000 fd2c 	bl	8003d96 <HAL_NVIC_EnableIRQ>
}
 800333e:	e038      	b.n	80033b2 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a23      	ldr	r2, [pc, #140]	; (80033d4 <HAL_UART_MspInit+0x1d4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d133      	bne.n	80033b2 <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	4b1c      	ldr	r3, [pc, #112]	; (80033c0 <HAL_UART_MspInit+0x1c0>)
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	4a1b      	ldr	r2, [pc, #108]	; (80033c0 <HAL_UART_MspInit+0x1c0>)
 8003354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003358:	6413      	str	r3, [r2, #64]	; 0x40
 800335a:	4b19      	ldr	r3, [pc, #100]	; (80033c0 <HAL_UART_MspInit+0x1c0>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003366:	2300      	movs	r3, #0
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	4b15      	ldr	r3, [pc, #84]	; (80033c0 <HAL_UART_MspInit+0x1c0>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	4a14      	ldr	r2, [pc, #80]	; (80033c0 <HAL_UART_MspInit+0x1c0>)
 8003370:	f043 0301 	orr.w	r3, r3, #1
 8003374:	6313      	str	r3, [r2, #48]	; 0x30
 8003376:	4b12      	ldr	r3, [pc, #72]	; (80033c0 <HAL_UART_MspInit+0x1c0>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	60bb      	str	r3, [r7, #8]
 8003380:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = WIFI_UART_TX_Pin|WIFI_UART_RX_Pin;
 8003382:	230c      	movs	r3, #12
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003386:	2302      	movs	r3, #2
 8003388:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338a:	2300      	movs	r3, #0
 800338c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800338e:	2303      	movs	r3, #3
 8003390:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003392:	2307      	movs	r3, #7
 8003394:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800339a:	4619      	mov	r1, r3
 800339c:	480e      	ldr	r0, [pc, #56]	; (80033d8 <HAL_UART_MspInit+0x1d8>)
 800339e:	f000 ff49 	bl	8004234 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033a2:	2200      	movs	r2, #0
 80033a4:	2100      	movs	r1, #0
 80033a6:	2026      	movs	r0, #38	; 0x26
 80033a8:	f000 fcd9 	bl	8003d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033ac:	2026      	movs	r0, #38	; 0x26
 80033ae:	f000 fcf2 	bl	8003d96 <HAL_NVIC_EnableIRQ>
}
 80033b2:	bf00      	nop
 80033b4:	3738      	adds	r7, #56	; 0x38
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40005000 	.word	0x40005000
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40020800 	.word	0x40020800
 80033c8:	40020c00 	.word	0x40020c00
 80033cc:	40007800 	.word	0x40007800
 80033d0:	40021000 	.word	0x40021000
 80033d4:	40004400 	.word	0x40004400
 80033d8:	40020000 	.word	0x40020000

080033dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80033e0:	bf00      	nop
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033ea:	b480      	push	{r7}
 80033ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033ee:	e7fe      	b.n	80033ee <HardFault_Handler+0x4>

080033f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033f4:	e7fe      	b.n	80033f4 <MemManage_Handler+0x4>

080033f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033f6:	b480      	push	{r7}
 80033f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033fa:	e7fe      	b.n	80033fa <BusFault_Handler+0x4>

080033fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003400:	e7fe      	b.n	8003400 <UsageFault_Handler+0x4>

08003402 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003402:	b480      	push	{r7}
 8003404:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003414:	bf00      	nop
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800341e:	b480      	push	{r7}
 8003420:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003422:	bf00      	nop
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003430:	f000 f906 	bl	8003640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003434:	bf00      	nop
 8003436:	bd80      	pop	{r7, pc}

08003438 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800343c:	4802      	ldr	r0, [pc, #8]	; (8003448 <TIM2_IRQHandler+0x10>)
 800343e:	f002 f8f9 	bl	8005634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20000448 	.word	0x20000448

0800344c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003450:	4802      	ldr	r0, [pc, #8]	; (800345c <TIM4_IRQHandler+0x10>)
 8003452:	f002 f8ef 	bl	8005634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	200003c8 	.word	0x200003c8

08003460 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003464:	4802      	ldr	r0, [pc, #8]	; (8003470 <USART2_IRQHandler+0x10>)
 8003466:	f002 fd29 	bl	8005ebc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800346a:	bf00      	nop
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20000508 	.word	0x20000508

08003474 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003478:	4802      	ldr	r0, [pc, #8]	; (8003484 <TIM5_IRQHandler+0x10>)
 800347a:	f002 f8db 	bl	8005634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20000408 	.word	0x20000408

08003488 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800348c:	4802      	ldr	r0, [pc, #8]	; (8003498 <UART5_IRQHandler+0x10>)
 800348e:	f002 fd15 	bl	8005ebc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003492:	bf00      	nop
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	200004c8 	.word	0x200004c8

0800349c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80034a0:	4802      	ldr	r0, [pc, #8]	; (80034ac <UART7_IRQHandler+0x10>)
 80034a2:	f002 fd0b 	bl	8005ebc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000488 	.word	0x20000488

080034b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034b8:	4a14      	ldr	r2, [pc, #80]	; (800350c <_sbrk+0x5c>)
 80034ba:	4b15      	ldr	r3, [pc, #84]	; (8003510 <_sbrk+0x60>)
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034c4:	4b13      	ldr	r3, [pc, #76]	; (8003514 <_sbrk+0x64>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d102      	bne.n	80034d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034cc:	4b11      	ldr	r3, [pc, #68]	; (8003514 <_sbrk+0x64>)
 80034ce:	4a12      	ldr	r2, [pc, #72]	; (8003518 <_sbrk+0x68>)
 80034d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034d2:	4b10      	ldr	r3, [pc, #64]	; (8003514 <_sbrk+0x64>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4413      	add	r3, r2
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d207      	bcs.n	80034f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034e0:	f003 faa8 	bl	8006a34 <__errno>
 80034e4:	4602      	mov	r2, r0
 80034e6:	230c      	movs	r3, #12
 80034e8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80034ea:	f04f 33ff 	mov.w	r3, #4294967295
 80034ee:	e009      	b.n	8003504 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034f0:	4b08      	ldr	r3, [pc, #32]	; (8003514 <_sbrk+0x64>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034f6:	4b07      	ldr	r3, [pc, #28]	; (8003514 <_sbrk+0x64>)
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4413      	add	r3, r2
 80034fe:	4a05      	ldr	r2, [pc, #20]	; (8003514 <_sbrk+0x64>)
 8003500:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003502:	68fb      	ldr	r3, [r7, #12]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	20030000 	.word	0x20030000
 8003510:	00000400 	.word	0x00000400
 8003514:	2000011c 	.word	0x2000011c
 8003518:	20000570 	.word	0x20000570

0800351c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003520:	4b08      	ldr	r3, [pc, #32]	; (8003544 <SystemInit+0x28>)
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003526:	4a07      	ldr	r2, [pc, #28]	; (8003544 <SystemInit+0x28>)
 8003528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800352c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003530:	4b04      	ldr	r3, [pc, #16]	; (8003544 <SystemInit+0x28>)
 8003532:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003536:	609a      	str	r2, [r3, #8]
#endif
}
 8003538:	bf00      	nop
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	e000ed00 	.word	0xe000ed00

08003548 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003548:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003580 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800354c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800354e:	e003      	b.n	8003558 <LoopCopyDataInit>

08003550 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003550:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003552:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003554:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003556:	3104      	adds	r1, #4

08003558 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003558:	480b      	ldr	r0, [pc, #44]	; (8003588 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800355a:	4b0c      	ldr	r3, [pc, #48]	; (800358c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800355c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800355e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003560:	d3f6      	bcc.n	8003550 <CopyDataInit>
  ldr  r2, =_sbss
 8003562:	4a0b      	ldr	r2, [pc, #44]	; (8003590 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003564:	e002      	b.n	800356c <LoopFillZerobss>

08003566 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003566:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003568:	f842 3b04 	str.w	r3, [r2], #4

0800356c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800356c:	4b09      	ldr	r3, [pc, #36]	; (8003594 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800356e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003570:	d3f9      	bcc.n	8003566 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003572:	f7ff ffd3 	bl	800351c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003576:	f003 fa63 	bl	8006a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800357a:	f7ff fcf5 	bl	8002f68 <main>
  bx  lr    
 800357e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003580:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003584:	0800763c 	.word	0x0800763c
  ldr  r0, =_sdata
 8003588:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800358c:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8003590:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8003594:	20000570 	.word	0x20000570

08003598 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003598:	e7fe      	b.n	8003598 <ADC_IRQHandler>
	...

0800359c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035a0:	4b0e      	ldr	r3, [pc, #56]	; (80035dc <HAL_Init+0x40>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a0d      	ldr	r2, [pc, #52]	; (80035dc <HAL_Init+0x40>)
 80035a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035ac:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <HAL_Init+0x40>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a0a      	ldr	r2, [pc, #40]	; (80035dc <HAL_Init+0x40>)
 80035b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035b8:	4b08      	ldr	r3, [pc, #32]	; (80035dc <HAL_Init+0x40>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a07      	ldr	r2, [pc, #28]	; (80035dc <HAL_Init+0x40>)
 80035be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035c4:	2003      	movs	r0, #3
 80035c6:	f000 fbbf 	bl	8003d48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035ca:	2000      	movs	r0, #0
 80035cc:	f000 f808 	bl	80035e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035d0:	f7ff fcd2 	bl	8002f78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40023c00 	.word	0x40023c00

080035e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035e8:	4b12      	ldr	r3, [pc, #72]	; (8003634 <HAL_InitTick+0x54>)
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	4b12      	ldr	r3, [pc, #72]	; (8003638 <HAL_InitTick+0x58>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	4619      	mov	r1, r3
 80035f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80035fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 fbd7 	bl	8003db2 <HAL_SYSTICK_Config>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e00e      	b.n	800362c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b0f      	cmp	r3, #15
 8003612:	d80a      	bhi.n	800362a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003614:	2200      	movs	r2, #0
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	f04f 30ff 	mov.w	r0, #4294967295
 800361c:	f000 fb9f 	bl	8003d5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003620:	4a06      	ldr	r2, [pc, #24]	; (800363c <HAL_InitTick+0x5c>)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	e000      	b.n	800362c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
}
 800362c:	4618      	mov	r0, r3
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	20000008 	.word	0x20000008
 8003638:	20000010 	.word	0x20000010
 800363c:	2000000c 	.word	0x2000000c

08003640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003644:	4b06      	ldr	r3, [pc, #24]	; (8003660 <HAL_IncTick+0x20>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	4b06      	ldr	r3, [pc, #24]	; (8003664 <HAL_IncTick+0x24>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4413      	add	r3, r2
 8003650:	4a04      	ldr	r2, [pc, #16]	; (8003664 <HAL_IncTick+0x24>)
 8003652:	6013      	str	r3, [r2, #0]
}
 8003654:	bf00      	nop
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	20000010 	.word	0x20000010
 8003664:	20000548 	.word	0x20000548

08003668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  return uwTick;
 800366c:	4b03      	ldr	r3, [pc, #12]	; (800367c <HAL_GetTick+0x14>)
 800366e:	681b      	ldr	r3, [r3, #0]
}
 8003670:	4618      	mov	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	20000548 	.word	0x20000548

08003680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003688:	f7ff ffee 	bl	8003668 <HAL_GetTick>
 800368c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003698:	d005      	beq.n	80036a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800369a:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <HAL_Delay+0x40>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	461a      	mov	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4413      	add	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036a6:	bf00      	nop
 80036a8:	f7ff ffde 	bl	8003668 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d8f7      	bhi.n	80036a8 <HAL_Delay+0x28>
  {
  }
}
 80036b8:	bf00      	nop
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	20000010 	.word	0x20000010

080036c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e033      	b.n	8003742 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d109      	bne.n	80036f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff fc70 	bl	8002fc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	f003 0310 	and.w	r3, r3, #16
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d118      	bne.n	8003734 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800370a:	f023 0302 	bic.w	r3, r3, #2
 800370e:	f043 0202 	orr.w	r2, r3, #2
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f94a 	bl	80039b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	f023 0303 	bic.w	r3, r3, #3
 800372a:	f043 0201 	orr.w	r2, r3, #1
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	641a      	str	r2, [r3, #64]	; 0x40
 8003732:	e001      	b.n	8003738 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003740:	7bfb      	ldrb	r3, [r7, #15]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003756:	2300      	movs	r3, #0
 8003758:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003760:	2b01      	cmp	r3, #1
 8003762:	d101      	bne.n	8003768 <HAL_ADC_ConfigChannel+0x1c>
 8003764:	2302      	movs	r3, #2
 8003766:	e113      	b.n	8003990 <HAL_ADC_ConfigChannel+0x244>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b09      	cmp	r3, #9
 8003776:	d925      	bls.n	80037c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68d9      	ldr	r1, [r3, #12]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	b29b      	uxth	r3, r3
 8003784:	461a      	mov	r2, r3
 8003786:	4613      	mov	r3, r2
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	4413      	add	r3, r2
 800378c:	3b1e      	subs	r3, #30
 800378e:	2207      	movs	r2, #7
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43da      	mvns	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	400a      	ands	r2, r1
 800379c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68d9      	ldr	r1, [r3, #12]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	4618      	mov	r0, r3
 80037b0:	4603      	mov	r3, r0
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	4403      	add	r3, r0
 80037b6:	3b1e      	subs	r3, #30
 80037b8:	409a      	lsls	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	60da      	str	r2, [r3, #12]
 80037c2:	e022      	b.n	800380a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6919      	ldr	r1, [r3, #16]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	461a      	mov	r2, r3
 80037d2:	4613      	mov	r3, r2
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	4413      	add	r3, r2
 80037d8:	2207      	movs	r2, #7
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43da      	mvns	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	400a      	ands	r2, r1
 80037e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6919      	ldr	r1, [r3, #16]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	689a      	ldr	r2, [r3, #8]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	4618      	mov	r0, r3
 80037fa:	4603      	mov	r3, r0
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	4403      	add	r3, r0
 8003800:	409a      	lsls	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b06      	cmp	r3, #6
 8003810:	d824      	bhi.n	800385c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	3b05      	subs	r3, #5
 8003824:	221f      	movs	r2, #31
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	43da      	mvns	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	400a      	ands	r2, r1
 8003832:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	b29b      	uxth	r3, r3
 8003840:	4618      	mov	r0, r3
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	3b05      	subs	r3, #5
 800384e:	fa00 f203 	lsl.w	r2, r0, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	635a      	str	r2, [r3, #52]	; 0x34
 800385a:	e04c      	b.n	80038f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2b0c      	cmp	r3, #12
 8003862:	d824      	bhi.n	80038ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	3b23      	subs	r3, #35	; 0x23
 8003876:	221f      	movs	r2, #31
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	43da      	mvns	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	400a      	ands	r2, r1
 8003884:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	b29b      	uxth	r3, r3
 8003892:	4618      	mov	r0, r3
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	4613      	mov	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	3b23      	subs	r3, #35	; 0x23
 80038a0:	fa00 f203 	lsl.w	r2, r0, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	631a      	str	r2, [r3, #48]	; 0x30
 80038ac:	e023      	b.n	80038f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	3b41      	subs	r3, #65	; 0x41
 80038c0:	221f      	movs	r2, #31
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	43da      	mvns	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	400a      	ands	r2, r1
 80038ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	b29b      	uxth	r3, r3
 80038dc:	4618      	mov	r0, r3
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	3b41      	subs	r3, #65	; 0x41
 80038ea:	fa00 f203 	lsl.w	r2, r0, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038f6:	4b29      	ldr	r3, [pc, #164]	; (800399c <HAL_ADC_ConfigChannel+0x250>)
 80038f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a28      	ldr	r2, [pc, #160]	; (80039a0 <HAL_ADC_ConfigChannel+0x254>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d10f      	bne.n	8003924 <HAL_ADC_ConfigChannel+0x1d8>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b12      	cmp	r3, #18
 800390a:	d10b      	bne.n	8003924 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a1d      	ldr	r2, [pc, #116]	; (80039a0 <HAL_ADC_ConfigChannel+0x254>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d12b      	bne.n	8003986 <HAL_ADC_ConfigChannel+0x23a>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a1c      	ldr	r2, [pc, #112]	; (80039a4 <HAL_ADC_ConfigChannel+0x258>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d003      	beq.n	8003940 <HAL_ADC_ConfigChannel+0x1f4>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b11      	cmp	r3, #17
 800393e:	d122      	bne.n	8003986 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a11      	ldr	r2, [pc, #68]	; (80039a4 <HAL_ADC_ConfigChannel+0x258>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d111      	bne.n	8003986 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003962:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <HAL_ADC_ConfigChannel+0x25c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a11      	ldr	r2, [pc, #68]	; (80039ac <HAL_ADC_ConfigChannel+0x260>)
 8003968:	fba2 2303 	umull	r2, r3, r2, r3
 800396c:	0c9a      	lsrs	r2, r3, #18
 800396e:	4613      	mov	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4413      	add	r3, r2
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003978:	e002      	b.n	8003980 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	3b01      	subs	r3, #1
 800397e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f9      	bne.n	800397a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	40012300 	.word	0x40012300
 80039a0:	40012000 	.word	0x40012000
 80039a4:	10000012 	.word	0x10000012
 80039a8:	20000008 	.word	0x20000008
 80039ac:	431bde83 	.word	0x431bde83

080039b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039b8:	4b79      	ldr	r3, [pc, #484]	; (8003ba0 <ADC_Init+0x1f0>)
 80039ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	431a      	orrs	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6859      	ldr	r1, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	021a      	lsls	r2, r3, #8
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6859      	ldr	r1, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6899      	ldr	r1, [r3, #8]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	4a58      	ldr	r2, [pc, #352]	; (8003ba4 <ADC_Init+0x1f4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d022      	beq.n	8003a8e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6899      	ldr	r1, [r3, #8]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6899      	ldr	r1, [r3, #8]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	609a      	str	r2, [r3, #8]
 8003a8c:	e00f      	b.n	8003aae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003aac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0202 	bic.w	r2, r2, #2
 8003abc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6899      	ldr	r1, [r3, #8]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	7e1b      	ldrb	r3, [r3, #24]
 8003ac8:	005a      	lsls	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d01b      	beq.n	8003b14 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003afa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6859      	ldr	r1, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	3b01      	subs	r3, #1
 8003b08:	035a      	lsls	r2, r3, #13
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]
 8003b12:	e007      	b.n	8003b24 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b22:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	051a      	lsls	r2, r3, #20
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6899      	ldr	r1, [r3, #8]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b66:	025a      	lsls	r2, r3, #9
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689a      	ldr	r2, [r3, #8]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6899      	ldr	r1, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	029a      	lsls	r2, r3, #10
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	609a      	str	r2, [r3, #8]
}
 8003b94:	bf00      	nop
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	40012300 	.word	0x40012300
 8003ba4:	0f000001 	.word	0x0f000001

08003ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bb8:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <__NVIC_SetPriorityGrouping+0x44>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bda:	4a04      	ldr	r2, [pc, #16]	; (8003bec <__NVIC_SetPriorityGrouping+0x44>)
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	60d3      	str	r3, [r2, #12]
}
 8003be0:	bf00      	nop
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	e000ed00 	.word	0xe000ed00

08003bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bf4:	4b04      	ldr	r3, [pc, #16]	; (8003c08 <__NVIC_GetPriorityGrouping+0x18>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	0a1b      	lsrs	r3, r3, #8
 8003bfa:	f003 0307 	and.w	r3, r3, #7
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	e000ed00 	.word	0xe000ed00

08003c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4603      	mov	r3, r0
 8003c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	db0b      	blt.n	8003c36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c1e:	79fb      	ldrb	r3, [r7, #7]
 8003c20:	f003 021f 	and.w	r2, r3, #31
 8003c24:	4907      	ldr	r1, [pc, #28]	; (8003c44 <__NVIC_EnableIRQ+0x38>)
 8003c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	2001      	movs	r0, #1
 8003c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	e000e100 	.word	0xe000e100

08003c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	4603      	mov	r3, r0
 8003c50:	6039      	str	r1, [r7, #0]
 8003c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	db0a      	blt.n	8003c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	490c      	ldr	r1, [pc, #48]	; (8003c94 <__NVIC_SetPriority+0x4c>)
 8003c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c66:	0112      	lsls	r2, r2, #4
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c70:	e00a      	b.n	8003c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	4908      	ldr	r1, [pc, #32]	; (8003c98 <__NVIC_SetPriority+0x50>)
 8003c78:	79fb      	ldrb	r3, [r7, #7]
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	3b04      	subs	r3, #4
 8003c80:	0112      	lsls	r2, r2, #4
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	440b      	add	r3, r1
 8003c86:	761a      	strb	r2, [r3, #24]
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	e000e100 	.word	0xe000e100
 8003c98:	e000ed00 	.word	0xe000ed00

08003c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b089      	sub	sp, #36	; 0x24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f1c3 0307 	rsb	r3, r3, #7
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	bf28      	it	cs
 8003cba:	2304      	movcs	r3, #4
 8003cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	2b06      	cmp	r3, #6
 8003cc4:	d902      	bls.n	8003ccc <NVIC_EncodePriority+0x30>
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	3b03      	subs	r3, #3
 8003cca:	e000      	b.n	8003cce <NVIC_EncodePriority+0x32>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	43da      	mvns	r2, r3
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	401a      	ands	r2, r3
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	fa01 f303 	lsl.w	r3, r1, r3
 8003cee:	43d9      	mvns	r1, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf4:	4313      	orrs	r3, r2
         );
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3724      	adds	r7, #36	; 0x24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
	...

08003d04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d14:	d301      	bcc.n	8003d1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d16:	2301      	movs	r3, #1
 8003d18:	e00f      	b.n	8003d3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d1a:	4a0a      	ldr	r2, [pc, #40]	; (8003d44 <SysTick_Config+0x40>)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d22:	210f      	movs	r1, #15
 8003d24:	f04f 30ff 	mov.w	r0, #4294967295
 8003d28:	f7ff ff8e 	bl	8003c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d2c:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <SysTick_Config+0x40>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d32:	4b04      	ldr	r3, [pc, #16]	; (8003d44 <SysTick_Config+0x40>)
 8003d34:	2207      	movs	r2, #7
 8003d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	e000e010 	.word	0xe000e010

08003d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7ff ff29 	bl	8003ba8 <__NVIC_SetPriorityGrouping>
}
 8003d56:	bf00      	nop
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b086      	sub	sp, #24
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	4603      	mov	r3, r0
 8003d66:	60b9      	str	r1, [r7, #8]
 8003d68:	607a      	str	r2, [r7, #4]
 8003d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d70:	f7ff ff3e 	bl	8003bf0 <__NVIC_GetPriorityGrouping>
 8003d74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	68b9      	ldr	r1, [r7, #8]
 8003d7a:	6978      	ldr	r0, [r7, #20]
 8003d7c:	f7ff ff8e 	bl	8003c9c <NVIC_EncodePriority>
 8003d80:	4602      	mov	r2, r0
 8003d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d86:	4611      	mov	r1, r2
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7ff ff5d 	bl	8003c48 <__NVIC_SetPriority>
}
 8003d8e:	bf00      	nop
 8003d90:	3718      	adds	r7, #24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b082      	sub	sp, #8
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff ff31 	bl	8003c0c <__NVIC_EnableIRQ>
}
 8003daa:	bf00      	nop
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b082      	sub	sp, #8
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7ff ffa2 	bl	8003d04 <SysTick_Config>
 8003dc0:	4603      	mov	r3, r0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d004      	beq.n	8003de8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2280      	movs	r2, #128	; 0x80
 8003de2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e00c      	b.n	8003e02 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2205      	movs	r2, #5
 8003dec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0201 	bic.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
	...

08003e10 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003e22:	4b23      	ldr	r3, [pc, #140]	; (8003eb0 <HAL_FLASH_Program+0xa0>)
 8003e24:	7e1b      	ldrb	r3, [r3, #24]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d101      	bne.n	8003e2e <HAL_FLASH_Program+0x1e>
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	e03b      	b.n	8003ea6 <HAL_FLASH_Program+0x96>
 8003e2e:	4b20      	ldr	r3, [pc, #128]	; (8003eb0 <HAL_FLASH_Program+0xa0>)
 8003e30:	2201      	movs	r2, #1
 8003e32:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e38:	f000 f870 	bl	8003f1c <FLASH_WaitForLastOperation>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003e40:	7dfb      	ldrb	r3, [r7, #23]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d12b      	bne.n	8003e9e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d105      	bne.n	8003e58 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003e4c:	783b      	ldrb	r3, [r7, #0]
 8003e4e:	4619      	mov	r1, r3
 8003e50:	68b8      	ldr	r0, [r7, #8]
 8003e52:	f000 f919 	bl	8004088 <FLASH_Program_Byte>
 8003e56:	e016      	b.n	8003e86 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d105      	bne.n	8003e6a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003e5e:	883b      	ldrh	r3, [r7, #0]
 8003e60:	4619      	mov	r1, r3
 8003e62:	68b8      	ldr	r0, [r7, #8]
 8003e64:	f000 f8ec 	bl	8004040 <FLASH_Program_HalfWord>
 8003e68:	e00d      	b.n	8003e86 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d105      	bne.n	8003e7c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	4619      	mov	r1, r3
 8003e74:	68b8      	ldr	r0, [r7, #8]
 8003e76:	f000 f8c1 	bl	8003ffc <FLASH_Program_Word>
 8003e7a:	e004      	b.n	8003e86 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003e7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e80:	68b8      	ldr	r0, [r7, #8]
 8003e82:	f000 f88b 	bl	8003f9c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e86:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e8a:	f000 f847 	bl	8003f1c <FLASH_WaitForLastOperation>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003e92:	4b08      	ldr	r3, [pc, #32]	; (8003eb4 <HAL_FLASH_Program+0xa4>)
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	4a07      	ldr	r2, [pc, #28]	; (8003eb4 <HAL_FLASH_Program+0xa4>)
 8003e98:	f023 0301 	bic.w	r3, r3, #1
 8003e9c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003e9e:	4b04      	ldr	r3, [pc, #16]	; (8003eb0 <HAL_FLASH_Program+0xa0>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3718      	adds	r7, #24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	2000054c 	.word	0x2000054c
 8003eb4:	40023c00 	.word	0x40023c00

08003eb8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003ec2:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <HAL_FLASH_Unlock+0x38>)
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	da0b      	bge.n	8003ee2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003eca:	4b09      	ldr	r3, [pc, #36]	; (8003ef0 <HAL_FLASH_Unlock+0x38>)
 8003ecc:	4a09      	ldr	r2, [pc, #36]	; (8003ef4 <HAL_FLASH_Unlock+0x3c>)
 8003ece:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003ed0:	4b07      	ldr	r3, [pc, #28]	; (8003ef0 <HAL_FLASH_Unlock+0x38>)
 8003ed2:	4a09      	ldr	r2, [pc, #36]	; (8003ef8 <HAL_FLASH_Unlock+0x40>)
 8003ed4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003ed6:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <HAL_FLASH_Unlock+0x38>)
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	da01      	bge.n	8003ee2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003ee2:	79fb      	ldrb	r3, [r7, #7]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	40023c00 	.word	0x40023c00
 8003ef4:	45670123 	.word	0x45670123
 8003ef8:	cdef89ab 	.word	0xcdef89ab

08003efc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003f00:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <HAL_FLASH_Lock+0x1c>)
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	4a04      	ldr	r2, [pc, #16]	; (8003f18 <HAL_FLASH_Lock+0x1c>)
 8003f06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f0a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	40023c00 	.word	0x40023c00

08003f1c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003f28:	4b1a      	ldr	r3, [pc, #104]	; (8003f94 <FLASH_WaitForLastOperation+0x78>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003f2e:	f7ff fb9b 	bl	8003668 <HAL_GetTick>
 8003f32:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003f34:	e010      	b.n	8003f58 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3c:	d00c      	beq.n	8003f58 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d007      	beq.n	8003f54 <FLASH_WaitForLastOperation+0x38>
 8003f44:	f7ff fb90 	bl	8003668 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d201      	bcs.n	8003f58 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e019      	b.n	8003f8c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003f58:	4b0f      	ldr	r3, [pc, #60]	; (8003f98 <FLASH_WaitForLastOperation+0x7c>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e8      	bne.n	8003f36 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003f64:	4b0c      	ldr	r3, [pc, #48]	; (8003f98 <FLASH_WaitForLastOperation+0x7c>)
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d002      	beq.n	8003f76 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003f70:	4b09      	ldr	r3, [pc, #36]	; (8003f98 <FLASH_WaitForLastOperation+0x7c>)
 8003f72:	2201      	movs	r2, #1
 8003f74:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003f76:	4b08      	ldr	r3, [pc, #32]	; (8003f98 <FLASH_WaitForLastOperation+0x7c>)
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003f82:	f000 f8a3 	bl	80040cc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
  
}  
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	2000054c 	.word	0x2000054c
 8003f98:	40023c00 	.word	0x40023c00

08003f9c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003f9c:	b490      	push	{r4, r7}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003fa8:	4b13      	ldr	r3, [pc, #76]	; (8003ff8 <FLASH_Program_DoubleWord+0x5c>)
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	4a12      	ldr	r2, [pc, #72]	; (8003ff8 <FLASH_Program_DoubleWord+0x5c>)
 8003fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003fb4:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <FLASH_Program_DoubleWord+0x5c>)
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	4a0f      	ldr	r2, [pc, #60]	; (8003ff8 <FLASH_Program_DoubleWord+0x5c>)
 8003fba:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003fbe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003fc0:	4b0d      	ldr	r3, [pc, #52]	; (8003ff8 <FLASH_Program_DoubleWord+0x5c>)
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	4a0c      	ldr	r2, [pc, #48]	; (8003ff8 <FLASH_Program_DoubleWord+0x5c>)
 8003fc6:	f043 0301 	orr.w	r3, r3, #1
 8003fca:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003fd2:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003fd6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003fda:	f04f 0300 	mov.w	r3, #0
 8003fde:	f04f 0400 	mov.w	r4, #0
 8003fe2:	0013      	movs	r3, r2
 8003fe4:	2400      	movs	r4, #0
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	3204      	adds	r2, #4
 8003fea:	6013      	str	r3, [r2, #0]
}
 8003fec:	bf00      	nop
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bc90      	pop	{r4, r7}
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40023c00 	.word	0x40023c00

08003ffc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004006:	4b0d      	ldr	r3, [pc, #52]	; (800403c <FLASH_Program_Word+0x40>)
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	4a0c      	ldr	r2, [pc, #48]	; (800403c <FLASH_Program_Word+0x40>)
 800400c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004010:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004012:	4b0a      	ldr	r3, [pc, #40]	; (800403c <FLASH_Program_Word+0x40>)
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	4a09      	ldr	r2, [pc, #36]	; (800403c <FLASH_Program_Word+0x40>)
 8004018:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800401c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800401e:	4b07      	ldr	r3, [pc, #28]	; (800403c <FLASH_Program_Word+0x40>)
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	4a06      	ldr	r2, [pc, #24]	; (800403c <FLASH_Program_Word+0x40>)
 8004024:	f043 0301 	orr.w	r3, r3, #1
 8004028:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	601a      	str	r2, [r3, #0]
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr
 800403c:	40023c00 	.word	0x40023c00

08004040 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800404c:	4b0d      	ldr	r3, [pc, #52]	; (8004084 <FLASH_Program_HalfWord+0x44>)
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	4a0c      	ldr	r2, [pc, #48]	; (8004084 <FLASH_Program_HalfWord+0x44>)
 8004052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004056:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004058:	4b0a      	ldr	r3, [pc, #40]	; (8004084 <FLASH_Program_HalfWord+0x44>)
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	4a09      	ldr	r2, [pc, #36]	; (8004084 <FLASH_Program_HalfWord+0x44>)
 800405e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004062:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004064:	4b07      	ldr	r3, [pc, #28]	; (8004084 <FLASH_Program_HalfWord+0x44>)
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	4a06      	ldr	r2, [pc, #24]	; (8004084 <FLASH_Program_HalfWord+0x44>)
 800406a:	f043 0301 	orr.w	r3, r3, #1
 800406e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	887a      	ldrh	r2, [r7, #2]
 8004074:	801a      	strh	r2, [r3, #0]
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	40023c00 	.word	0x40023c00

08004088 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004094:	4b0c      	ldr	r3, [pc, #48]	; (80040c8 <FLASH_Program_Byte+0x40>)
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	4a0b      	ldr	r2, [pc, #44]	; (80040c8 <FLASH_Program_Byte+0x40>)
 800409a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800409e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80040a0:	4b09      	ldr	r3, [pc, #36]	; (80040c8 <FLASH_Program_Byte+0x40>)
 80040a2:	4a09      	ldr	r2, [pc, #36]	; (80040c8 <FLASH_Program_Byte+0x40>)
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80040a8:	4b07      	ldr	r3, [pc, #28]	; (80040c8 <FLASH_Program_Byte+0x40>)
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	4a06      	ldr	r2, [pc, #24]	; (80040c8 <FLASH_Program_Byte+0x40>)
 80040ae:	f043 0301 	orr.w	r3, r3, #1
 80040b2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	78fa      	ldrb	r2, [r7, #3]
 80040b8:	701a      	strb	r2, [r3, #0]
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	40023c00 	.word	0x40023c00

080040cc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80040d0:	4b2f      	ldr	r3, [pc, #188]	; (8004190 <FLASH_SetErrorCode+0xc4>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f003 0310 	and.w	r3, r3, #16
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d008      	beq.n	80040ee <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80040dc:	4b2d      	ldr	r3, [pc, #180]	; (8004194 <FLASH_SetErrorCode+0xc8>)
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	f043 0310 	orr.w	r3, r3, #16
 80040e4:	4a2b      	ldr	r2, [pc, #172]	; (8004194 <FLASH_SetErrorCode+0xc8>)
 80040e6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80040e8:	4b29      	ldr	r3, [pc, #164]	; (8004190 <FLASH_SetErrorCode+0xc4>)
 80040ea:	2210      	movs	r2, #16
 80040ec:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80040ee:	4b28      	ldr	r3, [pc, #160]	; (8004190 <FLASH_SetErrorCode+0xc4>)
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d008      	beq.n	800410c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80040fa:	4b26      	ldr	r3, [pc, #152]	; (8004194 <FLASH_SetErrorCode+0xc8>)
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	f043 0308 	orr.w	r3, r3, #8
 8004102:	4a24      	ldr	r2, [pc, #144]	; (8004194 <FLASH_SetErrorCode+0xc8>)
 8004104:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004106:	4b22      	ldr	r3, [pc, #136]	; (8004190 <FLASH_SetErrorCode+0xc4>)
 8004108:	2220      	movs	r2, #32
 800410a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800410c:	4b20      	ldr	r3, [pc, #128]	; (8004190 <FLASH_SetErrorCode+0xc4>)
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004114:	2b00      	cmp	r3, #0
 8004116:	d008      	beq.n	800412a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004118:	4b1e      	ldr	r3, [pc, #120]	; (8004194 <FLASH_SetErrorCode+0xc8>)
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	f043 0304 	orr.w	r3, r3, #4
 8004120:	4a1c      	ldr	r2, [pc, #112]	; (8004194 <FLASH_SetErrorCode+0xc8>)
 8004122:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004124:	4b1a      	ldr	r3, [pc, #104]	; (8004190 <FLASH_SetErrorCode+0xc4>)
 8004126:	2240      	movs	r2, #64	; 0x40
 8004128:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800412a:	4b19      	ldr	r3, [pc, #100]	; (8004190 <FLASH_SetErrorCode+0xc4>)
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004132:	2b00      	cmp	r3, #0
 8004134:	d008      	beq.n	8004148 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004136:	4b17      	ldr	r3, [pc, #92]	; (8004194 <FLASH_SetErrorCode+0xc8>)
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	f043 0302 	orr.w	r3, r3, #2
 800413e:	4a15      	ldr	r2, [pc, #84]	; (8004194 <FLASH_SetErrorCode+0xc8>)
 8004140:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004142:	4b13      	ldr	r3, [pc, #76]	; (8004190 <FLASH_SetErrorCode+0xc4>)
 8004144:	2280      	movs	r2, #128	; 0x80
 8004146:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004148:	4b11      	ldr	r3, [pc, #68]	; (8004190 <FLASH_SetErrorCode+0xc4>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004150:	2b00      	cmp	r3, #0
 8004152:	d009      	beq.n	8004168 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004154:	4b0f      	ldr	r3, [pc, #60]	; (8004194 <FLASH_SetErrorCode+0xc8>)
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	f043 0301 	orr.w	r3, r3, #1
 800415c:	4a0d      	ldr	r2, [pc, #52]	; (8004194 <FLASH_SetErrorCode+0xc8>)
 800415e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004160:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <FLASH_SetErrorCode+0xc4>)
 8004162:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004166:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004168:	4b09      	ldr	r3, [pc, #36]	; (8004190 <FLASH_SetErrorCode+0xc4>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004174:	4b07      	ldr	r3, [pc, #28]	; (8004194 <FLASH_SetErrorCode+0xc8>)
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	f043 0320 	orr.w	r3, r3, #32
 800417c:	4a05      	ldr	r2, [pc, #20]	; (8004194 <FLASH_SetErrorCode+0xc8>)
 800417e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004180:	4b03      	ldr	r3, [pc, #12]	; (8004190 <FLASH_SetErrorCode+0xc4>)
 8004182:	2202      	movs	r2, #2
 8004184:	60da      	str	r2, [r3, #12]
  }
}
 8004186:	bf00      	nop
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	40023c00 	.word	0x40023c00
 8004194:	2000054c 	.word	0x2000054c

08004198 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	460b      	mov	r3, r1
 80041a2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80041a8:	78fb      	ldrb	r3, [r7, #3]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d102      	bne.n	80041b4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80041ae:	2300      	movs	r3, #0
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	e010      	b.n	80041d6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80041b4:	78fb      	ldrb	r3, [r7, #3]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d103      	bne.n	80041c2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80041ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	e009      	b.n	80041d6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80041c2:	78fb      	ldrb	r3, [r7, #3]
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d103      	bne.n	80041d0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80041c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	e002      	b.n	80041d6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80041d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80041d4:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b0b      	cmp	r3, #11
 80041da:	d902      	bls.n	80041e2 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3304      	adds	r3, #4
 80041e0:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80041e2:	4b13      	ldr	r3, [pc, #76]	; (8004230 <FLASH_Erase_Sector+0x98>)
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	4a12      	ldr	r2, [pc, #72]	; (8004230 <FLASH_Erase_Sector+0x98>)
 80041e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80041ee:	4b10      	ldr	r3, [pc, #64]	; (8004230 <FLASH_Erase_Sector+0x98>)
 80041f0:	691a      	ldr	r2, [r3, #16]
 80041f2:	490f      	ldr	r1, [pc, #60]	; (8004230 <FLASH_Erase_Sector+0x98>)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80041fa:	4b0d      	ldr	r3, [pc, #52]	; (8004230 <FLASH_Erase_Sector+0x98>)
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	4a0c      	ldr	r2, [pc, #48]	; (8004230 <FLASH_Erase_Sector+0x98>)
 8004200:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004204:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004206:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <FLASH_Erase_Sector+0x98>)
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	4313      	orrs	r3, r2
 8004210:	4a07      	ldr	r2, [pc, #28]	; (8004230 <FLASH_Erase_Sector+0x98>)
 8004212:	f043 0302 	orr.w	r3, r3, #2
 8004216:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004218:	4b05      	ldr	r3, [pc, #20]	; (8004230 <FLASH_Erase_Sector+0x98>)
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	4a04      	ldr	r2, [pc, #16]	; (8004230 <FLASH_Erase_Sector+0x98>)
 800421e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004222:	6113      	str	r3, [r2, #16]
}
 8004224:	bf00      	nop
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	40023c00 	.word	0x40023c00

08004234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004234:	b480      	push	{r7}
 8004236:	b089      	sub	sp, #36	; 0x24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800423e:	2300      	movs	r3, #0
 8004240:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004242:	2300      	movs	r3, #0
 8004244:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004246:	2300      	movs	r3, #0
 8004248:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800424a:	2300      	movs	r3, #0
 800424c:	61fb      	str	r3, [r7, #28]
 800424e:	e177      	b.n	8004540 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004250:	2201      	movs	r2, #1
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	fa02 f303 	lsl.w	r3, r2, r3
 8004258:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	4013      	ands	r3, r2
 8004262:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	429a      	cmp	r2, r3
 800426a:	f040 8166 	bne.w	800453a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d00b      	beq.n	800428e <HAL_GPIO_Init+0x5a>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b02      	cmp	r3, #2
 800427c:	d007      	beq.n	800428e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004282:	2b11      	cmp	r3, #17
 8004284:	d003      	beq.n	800428e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b12      	cmp	r3, #18
 800428c:	d130      	bne.n	80042f0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	2203      	movs	r2, #3
 800429a:	fa02 f303 	lsl.w	r3, r2, r3
 800429e:	43db      	mvns	r3, r3
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	4013      	ands	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	fa02 f303 	lsl.w	r3, r2, r3
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042c4:	2201      	movs	r2, #1
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	43db      	mvns	r3, r3
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	4013      	ands	r3, r2
 80042d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	091b      	lsrs	r3, r3, #4
 80042da:	f003 0201 	and.w	r2, r3, #1
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	2203      	movs	r2, #3
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	43db      	mvns	r3, r3
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	4013      	ands	r3, r2
 8004306:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	4313      	orrs	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2b02      	cmp	r3, #2
 8004326:	d003      	beq.n	8004330 <HAL_GPIO_Init+0xfc>
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	2b12      	cmp	r3, #18
 800432e:	d123      	bne.n	8004378 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	08da      	lsrs	r2, r3, #3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3208      	adds	r2, #8
 8004338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800433c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	220f      	movs	r2, #15
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	43db      	mvns	r3, r3
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	4013      	ands	r3, r2
 8004352:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	691a      	ldr	r2, [r3, #16]
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	4313      	orrs	r3, r2
 8004368:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	08da      	lsrs	r2, r3, #3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	3208      	adds	r2, #8
 8004372:	69b9      	ldr	r1, [r7, #24]
 8004374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	2203      	movs	r2, #3
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	43db      	mvns	r3, r3
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	4013      	ands	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f003 0203 	and.w	r2, r3, #3
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 80c0 	beq.w	800453a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ba:	2300      	movs	r3, #0
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	4b65      	ldr	r3, [pc, #404]	; (8004554 <HAL_GPIO_Init+0x320>)
 80043c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c2:	4a64      	ldr	r2, [pc, #400]	; (8004554 <HAL_GPIO_Init+0x320>)
 80043c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043c8:	6453      	str	r3, [r2, #68]	; 0x44
 80043ca:	4b62      	ldr	r3, [pc, #392]	; (8004554 <HAL_GPIO_Init+0x320>)
 80043cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043d2:	60fb      	str	r3, [r7, #12]
 80043d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043d6:	4a60      	ldr	r2, [pc, #384]	; (8004558 <HAL_GPIO_Init+0x324>)
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	089b      	lsrs	r3, r3, #2
 80043dc:	3302      	adds	r3, #2
 80043de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	220f      	movs	r2, #15
 80043ee:	fa02 f303 	lsl.w	r3, r2, r3
 80043f2:	43db      	mvns	r3, r3
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	4013      	ands	r3, r2
 80043f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a57      	ldr	r2, [pc, #348]	; (800455c <HAL_GPIO_Init+0x328>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d037      	beq.n	8004472 <HAL_GPIO_Init+0x23e>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a56      	ldr	r2, [pc, #344]	; (8004560 <HAL_GPIO_Init+0x32c>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d031      	beq.n	800446e <HAL_GPIO_Init+0x23a>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a55      	ldr	r2, [pc, #340]	; (8004564 <HAL_GPIO_Init+0x330>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d02b      	beq.n	800446a <HAL_GPIO_Init+0x236>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a54      	ldr	r2, [pc, #336]	; (8004568 <HAL_GPIO_Init+0x334>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d025      	beq.n	8004466 <HAL_GPIO_Init+0x232>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a53      	ldr	r2, [pc, #332]	; (800456c <HAL_GPIO_Init+0x338>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d01f      	beq.n	8004462 <HAL_GPIO_Init+0x22e>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a52      	ldr	r2, [pc, #328]	; (8004570 <HAL_GPIO_Init+0x33c>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d019      	beq.n	800445e <HAL_GPIO_Init+0x22a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a51      	ldr	r2, [pc, #324]	; (8004574 <HAL_GPIO_Init+0x340>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d013      	beq.n	800445a <HAL_GPIO_Init+0x226>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a50      	ldr	r2, [pc, #320]	; (8004578 <HAL_GPIO_Init+0x344>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d00d      	beq.n	8004456 <HAL_GPIO_Init+0x222>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a4f      	ldr	r2, [pc, #316]	; (800457c <HAL_GPIO_Init+0x348>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d007      	beq.n	8004452 <HAL_GPIO_Init+0x21e>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a4e      	ldr	r2, [pc, #312]	; (8004580 <HAL_GPIO_Init+0x34c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d101      	bne.n	800444e <HAL_GPIO_Init+0x21a>
 800444a:	2309      	movs	r3, #9
 800444c:	e012      	b.n	8004474 <HAL_GPIO_Init+0x240>
 800444e:	230a      	movs	r3, #10
 8004450:	e010      	b.n	8004474 <HAL_GPIO_Init+0x240>
 8004452:	2308      	movs	r3, #8
 8004454:	e00e      	b.n	8004474 <HAL_GPIO_Init+0x240>
 8004456:	2307      	movs	r3, #7
 8004458:	e00c      	b.n	8004474 <HAL_GPIO_Init+0x240>
 800445a:	2306      	movs	r3, #6
 800445c:	e00a      	b.n	8004474 <HAL_GPIO_Init+0x240>
 800445e:	2305      	movs	r3, #5
 8004460:	e008      	b.n	8004474 <HAL_GPIO_Init+0x240>
 8004462:	2304      	movs	r3, #4
 8004464:	e006      	b.n	8004474 <HAL_GPIO_Init+0x240>
 8004466:	2303      	movs	r3, #3
 8004468:	e004      	b.n	8004474 <HAL_GPIO_Init+0x240>
 800446a:	2302      	movs	r3, #2
 800446c:	e002      	b.n	8004474 <HAL_GPIO_Init+0x240>
 800446e:	2301      	movs	r3, #1
 8004470:	e000      	b.n	8004474 <HAL_GPIO_Init+0x240>
 8004472:	2300      	movs	r3, #0
 8004474:	69fa      	ldr	r2, [r7, #28]
 8004476:	f002 0203 	and.w	r2, r2, #3
 800447a:	0092      	lsls	r2, r2, #2
 800447c:	4093      	lsls	r3, r2
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	4313      	orrs	r3, r2
 8004482:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004484:	4934      	ldr	r1, [pc, #208]	; (8004558 <HAL_GPIO_Init+0x324>)
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	089b      	lsrs	r3, r3, #2
 800448a:	3302      	adds	r3, #2
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004492:	4b3c      	ldr	r3, [pc, #240]	; (8004584 <HAL_GPIO_Init+0x350>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	43db      	mvns	r3, r3
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	4013      	ands	r3, r2
 80044a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044b6:	4a33      	ldr	r2, [pc, #204]	; (8004584 <HAL_GPIO_Init+0x350>)
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80044bc:	4b31      	ldr	r3, [pc, #196]	; (8004584 <HAL_GPIO_Init+0x350>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	43db      	mvns	r3, r3
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	4013      	ands	r3, r2
 80044ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044e0:	4a28      	ldr	r2, [pc, #160]	; (8004584 <HAL_GPIO_Init+0x350>)
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044e6:	4b27      	ldr	r3, [pc, #156]	; (8004584 <HAL_GPIO_Init+0x350>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	43db      	mvns	r3, r3
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	4013      	ands	r3, r2
 80044f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	4313      	orrs	r3, r2
 8004508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800450a:	4a1e      	ldr	r2, [pc, #120]	; (8004584 <HAL_GPIO_Init+0x350>)
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004510:	4b1c      	ldr	r3, [pc, #112]	; (8004584 <HAL_GPIO_Init+0x350>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	43db      	mvns	r3, r3
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	4013      	ands	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	4313      	orrs	r3, r2
 8004532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004534:	4a13      	ldr	r2, [pc, #76]	; (8004584 <HAL_GPIO_Init+0x350>)
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	3301      	adds	r3, #1
 800453e:	61fb      	str	r3, [r7, #28]
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	2b0f      	cmp	r3, #15
 8004544:	f67f ae84 	bls.w	8004250 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004548:	bf00      	nop
 800454a:	3724      	adds	r7, #36	; 0x24
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	40023800 	.word	0x40023800
 8004558:	40013800 	.word	0x40013800
 800455c:	40020000 	.word	0x40020000
 8004560:	40020400 	.word	0x40020400
 8004564:	40020800 	.word	0x40020800
 8004568:	40020c00 	.word	0x40020c00
 800456c:	40021000 	.word	0x40021000
 8004570:	40021400 	.word	0x40021400
 8004574:	40021800 	.word	0x40021800
 8004578:	40021c00 	.word	0x40021c00
 800457c:	40022000 	.word	0x40022000
 8004580:	40022400 	.word	0x40022400
 8004584:	40013c00 	.word	0x40013c00

08004588 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691a      	ldr	r2, [r3, #16]
 8004598:	887b      	ldrh	r3, [r7, #2]
 800459a:	4013      	ands	r3, r2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045a0:	2301      	movs	r3, #1
 80045a2:	73fb      	strb	r3, [r7, #15]
 80045a4:	e001      	b.n	80045aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045a6:	2300      	movs	r3, #0
 80045a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	460b      	mov	r3, r1
 80045c2:	807b      	strh	r3, [r7, #2]
 80045c4:	4613      	mov	r3, r2
 80045c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045c8:	787b      	ldrb	r3, [r7, #1]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045ce:	887a      	ldrh	r2, [r7, #2]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045d4:	e003      	b.n	80045de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045d6:	887b      	ldrh	r3, [r7, #2]
 80045d8:	041a      	lsls	r2, r3, #16
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	619a      	str	r2, [r3, #24]
}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
	...

080045ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e25b      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d075      	beq.n	80046f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800460a:	4ba3      	ldr	r3, [pc, #652]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 030c 	and.w	r3, r3, #12
 8004612:	2b04      	cmp	r3, #4
 8004614:	d00c      	beq.n	8004630 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004616:	4ba0      	ldr	r3, [pc, #640]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800461e:	2b08      	cmp	r3, #8
 8004620:	d112      	bne.n	8004648 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004622:	4b9d      	ldr	r3, [pc, #628]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800462a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800462e:	d10b      	bne.n	8004648 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004630:	4b99      	ldr	r3, [pc, #612]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d05b      	beq.n	80046f4 <HAL_RCC_OscConfig+0x108>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d157      	bne.n	80046f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e236      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004650:	d106      	bne.n	8004660 <HAL_RCC_OscConfig+0x74>
 8004652:	4b91      	ldr	r3, [pc, #580]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a90      	ldr	r2, [pc, #576]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 8004658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	e01d      	b.n	800469c <HAL_RCC_OscConfig+0xb0>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004668:	d10c      	bne.n	8004684 <HAL_RCC_OscConfig+0x98>
 800466a:	4b8b      	ldr	r3, [pc, #556]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a8a      	ldr	r2, [pc, #552]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 8004670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	4b88      	ldr	r3, [pc, #544]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a87      	ldr	r2, [pc, #540]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 800467c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004680:	6013      	str	r3, [r2, #0]
 8004682:	e00b      	b.n	800469c <HAL_RCC_OscConfig+0xb0>
 8004684:	4b84      	ldr	r3, [pc, #528]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a83      	ldr	r2, [pc, #524]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 800468a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800468e:	6013      	str	r3, [r2, #0]
 8004690:	4b81      	ldr	r3, [pc, #516]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a80      	ldr	r2, [pc, #512]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 8004696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800469a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d013      	beq.n	80046cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a4:	f7fe ffe0 	bl	8003668 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046ac:	f7fe ffdc 	bl	8003668 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b64      	cmp	r3, #100	; 0x64
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e1fb      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046be:	4b76      	ldr	r3, [pc, #472]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0f0      	beq.n	80046ac <HAL_RCC_OscConfig+0xc0>
 80046ca:	e014      	b.n	80046f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046cc:	f7fe ffcc 	bl	8003668 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046d4:	f7fe ffc8 	bl	8003668 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b64      	cmp	r3, #100	; 0x64
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e1e7      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046e6:	4b6c      	ldr	r3, [pc, #432]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0xe8>
 80046f2:	e000      	b.n	80046f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d063      	beq.n	80047ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004702:	4b65      	ldr	r3, [pc, #404]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 030c 	and.w	r3, r3, #12
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00b      	beq.n	8004726 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800470e:	4b62      	ldr	r3, [pc, #392]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004716:	2b08      	cmp	r3, #8
 8004718:	d11c      	bne.n	8004754 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800471a:	4b5f      	ldr	r3, [pc, #380]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d116      	bne.n	8004754 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004726:	4b5c      	ldr	r3, [pc, #368]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d005      	beq.n	800473e <HAL_RCC_OscConfig+0x152>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d001      	beq.n	800473e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e1bb      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800473e:	4b56      	ldr	r3, [pc, #344]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	4952      	ldr	r1, [pc, #328]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 800474e:	4313      	orrs	r3, r2
 8004750:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004752:	e03a      	b.n	80047ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d020      	beq.n	800479e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800475c:	4b4f      	ldr	r3, [pc, #316]	; (800489c <HAL_RCC_OscConfig+0x2b0>)
 800475e:	2201      	movs	r2, #1
 8004760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004762:	f7fe ff81 	bl	8003668 <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800476a:	f7fe ff7d 	bl	8003668 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e19c      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800477c:	4b46      	ldr	r3, [pc, #280]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0f0      	beq.n	800476a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004788:	4b43      	ldr	r3, [pc, #268]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	4940      	ldr	r1, [pc, #256]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 8004798:	4313      	orrs	r3, r2
 800479a:	600b      	str	r3, [r1, #0]
 800479c:	e015      	b.n	80047ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800479e:	4b3f      	ldr	r3, [pc, #252]	; (800489c <HAL_RCC_OscConfig+0x2b0>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a4:	f7fe ff60 	bl	8003668 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ac:	f7fe ff5c 	bl	8003668 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e17b      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047be:	4b36      	ldr	r3, [pc, #216]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1f0      	bne.n	80047ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0308 	and.w	r3, r3, #8
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d030      	beq.n	8004838 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d016      	beq.n	800480c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047de:	4b30      	ldr	r3, [pc, #192]	; (80048a0 <HAL_RCC_OscConfig+0x2b4>)
 80047e0:	2201      	movs	r2, #1
 80047e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e4:	f7fe ff40 	bl	8003668 <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047ec:	f7fe ff3c 	bl	8003668 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e15b      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047fe:	4b26      	ldr	r3, [pc, #152]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 8004800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0f0      	beq.n	80047ec <HAL_RCC_OscConfig+0x200>
 800480a:	e015      	b.n	8004838 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800480c:	4b24      	ldr	r3, [pc, #144]	; (80048a0 <HAL_RCC_OscConfig+0x2b4>)
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004812:	f7fe ff29 	bl	8003668 <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800481a:	f7fe ff25 	bl	8003668 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e144      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800482c:	4b1a      	ldr	r3, [pc, #104]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 800482e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1f0      	bne.n	800481a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 80a0 	beq.w	8004986 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004846:	2300      	movs	r3, #0
 8004848:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800484a:	4b13      	ldr	r3, [pc, #76]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10f      	bne.n	8004876 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004856:	2300      	movs	r3, #0
 8004858:	60bb      	str	r3, [r7, #8]
 800485a:	4b0f      	ldr	r3, [pc, #60]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	4a0e      	ldr	r2, [pc, #56]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 8004860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004864:	6413      	str	r3, [r2, #64]	; 0x40
 8004866:	4b0c      	ldr	r3, [pc, #48]	; (8004898 <HAL_RCC_OscConfig+0x2ac>)
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800486e:	60bb      	str	r3, [r7, #8]
 8004870:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004872:	2301      	movs	r3, #1
 8004874:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004876:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <HAL_RCC_OscConfig+0x2b8>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487e:	2b00      	cmp	r3, #0
 8004880:	d121      	bne.n	80048c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004882:	4b08      	ldr	r3, [pc, #32]	; (80048a4 <HAL_RCC_OscConfig+0x2b8>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a07      	ldr	r2, [pc, #28]	; (80048a4 <HAL_RCC_OscConfig+0x2b8>)
 8004888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800488c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800488e:	f7fe feeb 	bl	8003668 <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004894:	e011      	b.n	80048ba <HAL_RCC_OscConfig+0x2ce>
 8004896:	bf00      	nop
 8004898:	40023800 	.word	0x40023800
 800489c:	42470000 	.word	0x42470000
 80048a0:	42470e80 	.word	0x42470e80
 80048a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048a8:	f7fe fede 	bl	8003668 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e0fd      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ba:	4b81      	ldr	r3, [pc, #516]	; (8004ac0 <HAL_RCC_OscConfig+0x4d4>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d0f0      	beq.n	80048a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d106      	bne.n	80048dc <HAL_RCC_OscConfig+0x2f0>
 80048ce:	4b7d      	ldr	r3, [pc, #500]	; (8004ac4 <HAL_RCC_OscConfig+0x4d8>)
 80048d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d2:	4a7c      	ldr	r2, [pc, #496]	; (8004ac4 <HAL_RCC_OscConfig+0x4d8>)
 80048d4:	f043 0301 	orr.w	r3, r3, #1
 80048d8:	6713      	str	r3, [r2, #112]	; 0x70
 80048da:	e01c      	b.n	8004916 <HAL_RCC_OscConfig+0x32a>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	2b05      	cmp	r3, #5
 80048e2:	d10c      	bne.n	80048fe <HAL_RCC_OscConfig+0x312>
 80048e4:	4b77      	ldr	r3, [pc, #476]	; (8004ac4 <HAL_RCC_OscConfig+0x4d8>)
 80048e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e8:	4a76      	ldr	r2, [pc, #472]	; (8004ac4 <HAL_RCC_OscConfig+0x4d8>)
 80048ea:	f043 0304 	orr.w	r3, r3, #4
 80048ee:	6713      	str	r3, [r2, #112]	; 0x70
 80048f0:	4b74      	ldr	r3, [pc, #464]	; (8004ac4 <HAL_RCC_OscConfig+0x4d8>)
 80048f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f4:	4a73      	ldr	r2, [pc, #460]	; (8004ac4 <HAL_RCC_OscConfig+0x4d8>)
 80048f6:	f043 0301 	orr.w	r3, r3, #1
 80048fa:	6713      	str	r3, [r2, #112]	; 0x70
 80048fc:	e00b      	b.n	8004916 <HAL_RCC_OscConfig+0x32a>
 80048fe:	4b71      	ldr	r3, [pc, #452]	; (8004ac4 <HAL_RCC_OscConfig+0x4d8>)
 8004900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004902:	4a70      	ldr	r2, [pc, #448]	; (8004ac4 <HAL_RCC_OscConfig+0x4d8>)
 8004904:	f023 0301 	bic.w	r3, r3, #1
 8004908:	6713      	str	r3, [r2, #112]	; 0x70
 800490a:	4b6e      	ldr	r3, [pc, #440]	; (8004ac4 <HAL_RCC_OscConfig+0x4d8>)
 800490c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490e:	4a6d      	ldr	r2, [pc, #436]	; (8004ac4 <HAL_RCC_OscConfig+0x4d8>)
 8004910:	f023 0304 	bic.w	r3, r3, #4
 8004914:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d015      	beq.n	800494a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800491e:	f7fe fea3 	bl	8003668 <HAL_GetTick>
 8004922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004924:	e00a      	b.n	800493c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004926:	f7fe fe9f 	bl	8003668 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	f241 3288 	movw	r2, #5000	; 0x1388
 8004934:	4293      	cmp	r3, r2
 8004936:	d901      	bls.n	800493c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e0bc      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800493c:	4b61      	ldr	r3, [pc, #388]	; (8004ac4 <HAL_RCC_OscConfig+0x4d8>)
 800493e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d0ee      	beq.n	8004926 <HAL_RCC_OscConfig+0x33a>
 8004948:	e014      	b.n	8004974 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800494a:	f7fe fe8d 	bl	8003668 <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004950:	e00a      	b.n	8004968 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004952:	f7fe fe89 	bl	8003668 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004960:	4293      	cmp	r3, r2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e0a6      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004968:	4b56      	ldr	r3, [pc, #344]	; (8004ac4 <HAL_RCC_OscConfig+0x4d8>)
 800496a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1ee      	bne.n	8004952 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004974:	7dfb      	ldrb	r3, [r7, #23]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d105      	bne.n	8004986 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800497a:	4b52      	ldr	r3, [pc, #328]	; (8004ac4 <HAL_RCC_OscConfig+0x4d8>)
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	4a51      	ldr	r2, [pc, #324]	; (8004ac4 <HAL_RCC_OscConfig+0x4d8>)
 8004980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004984:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 8092 	beq.w	8004ab4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004990:	4b4c      	ldr	r3, [pc, #304]	; (8004ac4 <HAL_RCC_OscConfig+0x4d8>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 030c 	and.w	r3, r3, #12
 8004998:	2b08      	cmp	r3, #8
 800499a:	d05c      	beq.n	8004a56 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d141      	bne.n	8004a28 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a4:	4b48      	ldr	r3, [pc, #288]	; (8004ac8 <HAL_RCC_OscConfig+0x4dc>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049aa:	f7fe fe5d 	bl	8003668 <HAL_GetTick>
 80049ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049b0:	e008      	b.n	80049c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049b2:	f7fe fe59 	bl	8003668 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e078      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c4:	4b3f      	ldr	r3, [pc, #252]	; (8004ac4 <HAL_RCC_OscConfig+0x4d8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1f0      	bne.n	80049b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	69da      	ldr	r2, [r3, #28]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	431a      	orrs	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	019b      	lsls	r3, r3, #6
 80049e0:	431a      	orrs	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e6:	085b      	lsrs	r3, r3, #1
 80049e8:	3b01      	subs	r3, #1
 80049ea:	041b      	lsls	r3, r3, #16
 80049ec:	431a      	orrs	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f2:	061b      	lsls	r3, r3, #24
 80049f4:	4933      	ldr	r1, [pc, #204]	; (8004ac4 <HAL_RCC_OscConfig+0x4d8>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049fa:	4b33      	ldr	r3, [pc, #204]	; (8004ac8 <HAL_RCC_OscConfig+0x4dc>)
 80049fc:	2201      	movs	r2, #1
 80049fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a00:	f7fe fe32 	bl	8003668 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a08:	f7fe fe2e 	bl	8003668 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e04d      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a1a:	4b2a      	ldr	r3, [pc, #168]	; (8004ac4 <HAL_RCC_OscConfig+0x4d8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0f0      	beq.n	8004a08 <HAL_RCC_OscConfig+0x41c>
 8004a26:	e045      	b.n	8004ab4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a28:	4b27      	ldr	r3, [pc, #156]	; (8004ac8 <HAL_RCC_OscConfig+0x4dc>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a2e:	f7fe fe1b 	bl	8003668 <HAL_GetTick>
 8004a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a34:	e008      	b.n	8004a48 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a36:	f7fe fe17 	bl	8003668 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e036      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a48:	4b1e      	ldr	r3, [pc, #120]	; (8004ac4 <HAL_RCC_OscConfig+0x4d8>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1f0      	bne.n	8004a36 <HAL_RCC_OscConfig+0x44a>
 8004a54:	e02e      	b.n	8004ab4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d101      	bne.n	8004a62 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e029      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a62:	4b18      	ldr	r3, [pc, #96]	; (8004ac4 <HAL_RCC_OscConfig+0x4d8>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d11c      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d115      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d10d      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d106      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d001      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e000      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	40007000 	.word	0x40007000
 8004ac4:	40023800 	.word	0x40023800
 8004ac8:	42470060 	.word	0x42470060

08004acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e0cc      	b.n	8004c7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ae0:	4b68      	ldr	r3, [pc, #416]	; (8004c84 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 030f 	and.w	r3, r3, #15
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d90c      	bls.n	8004b08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aee:	4b65      	ldr	r3, [pc, #404]	; (8004c84 <HAL_RCC_ClockConfig+0x1b8>)
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	b2d2      	uxtb	r2, r2
 8004af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004af6:	4b63      	ldr	r3, [pc, #396]	; (8004c84 <HAL_RCC_ClockConfig+0x1b8>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 030f 	and.w	r3, r3, #15
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d001      	beq.n	8004b08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e0b8      	b.n	8004c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d020      	beq.n	8004b56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0304 	and.w	r3, r3, #4
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d005      	beq.n	8004b2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b20:	4b59      	ldr	r3, [pc, #356]	; (8004c88 <HAL_RCC_ClockConfig+0x1bc>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	4a58      	ldr	r2, [pc, #352]	; (8004c88 <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0308 	and.w	r3, r3, #8
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d005      	beq.n	8004b44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b38:	4b53      	ldr	r3, [pc, #332]	; (8004c88 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	4a52      	ldr	r2, [pc, #328]	; (8004c88 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b44:	4b50      	ldr	r3, [pc, #320]	; (8004c88 <HAL_RCC_ClockConfig+0x1bc>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	494d      	ldr	r1, [pc, #308]	; (8004c88 <HAL_RCC_ClockConfig+0x1bc>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d044      	beq.n	8004bec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d107      	bne.n	8004b7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b6a:	4b47      	ldr	r3, [pc, #284]	; (8004c88 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d119      	bne.n	8004baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e07f      	b.n	8004c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d003      	beq.n	8004b8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b86:	2b03      	cmp	r3, #3
 8004b88:	d107      	bne.n	8004b9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b8a:	4b3f      	ldr	r3, [pc, #252]	; (8004c88 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d109      	bne.n	8004baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e06f      	b.n	8004c7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b9a:	4b3b      	ldr	r3, [pc, #236]	; (8004c88 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e067      	b.n	8004c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004baa:	4b37      	ldr	r3, [pc, #220]	; (8004c88 <HAL_RCC_ClockConfig+0x1bc>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f023 0203 	bic.w	r2, r3, #3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	4934      	ldr	r1, [pc, #208]	; (8004c88 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bbc:	f7fe fd54 	bl	8003668 <HAL_GetTick>
 8004bc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bc2:	e00a      	b.n	8004bda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bc4:	f7fe fd50 	bl	8003668 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e04f      	b.n	8004c7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bda:	4b2b      	ldr	r3, [pc, #172]	; (8004c88 <HAL_RCC_ClockConfig+0x1bc>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 020c 	and.w	r2, r3, #12
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d1eb      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bec:	4b25      	ldr	r3, [pc, #148]	; (8004c84 <HAL_RCC_ClockConfig+0x1b8>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 030f 	and.w	r3, r3, #15
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d20c      	bcs.n	8004c14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bfa:	4b22      	ldr	r3, [pc, #136]	; (8004c84 <HAL_RCC_ClockConfig+0x1b8>)
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c02:	4b20      	ldr	r3, [pc, #128]	; (8004c84 <HAL_RCC_ClockConfig+0x1b8>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d001      	beq.n	8004c14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e032      	b.n	8004c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0304 	and.w	r3, r3, #4
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d008      	beq.n	8004c32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c20:	4b19      	ldr	r3, [pc, #100]	; (8004c88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	4916      	ldr	r1, [pc, #88]	; (8004c88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0308 	and.w	r3, r3, #8
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d009      	beq.n	8004c52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c3e:	4b12      	ldr	r3, [pc, #72]	; (8004c88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	490e      	ldr	r1, [pc, #56]	; (8004c88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c52:	f000 f821 	bl	8004c98 <HAL_RCC_GetSysClockFreq>
 8004c56:	4601      	mov	r1, r0
 8004c58:	4b0b      	ldr	r3, [pc, #44]	; (8004c88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	091b      	lsrs	r3, r3, #4
 8004c5e:	f003 030f 	and.w	r3, r3, #15
 8004c62:	4a0a      	ldr	r2, [pc, #40]	; (8004c8c <HAL_RCC_ClockConfig+0x1c0>)
 8004c64:	5cd3      	ldrb	r3, [r2, r3]
 8004c66:	fa21 f303 	lsr.w	r3, r1, r3
 8004c6a:	4a09      	ldr	r2, [pc, #36]	; (8004c90 <HAL_RCC_ClockConfig+0x1c4>)
 8004c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c6e:	4b09      	ldr	r3, [pc, #36]	; (8004c94 <HAL_RCC_ClockConfig+0x1c8>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fe fcb4 	bl	80035e0 <HAL_InitTick>

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	40023c00 	.word	0x40023c00
 8004c88:	40023800 	.word	0x40023800
 8004c8c:	080075e0 	.word	0x080075e0
 8004c90:	20000008 	.word	0x20000008
 8004c94:	2000000c 	.word	0x2000000c

08004c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	607b      	str	r3, [r7, #4]
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60fb      	str	r3, [r7, #12]
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cae:	4b50      	ldr	r3, [pc, #320]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 030c 	and.w	r3, r3, #12
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	d007      	beq.n	8004cca <HAL_RCC_GetSysClockFreq+0x32>
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d008      	beq.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x38>
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f040 808d 	bne.w	8004dde <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cc4:	4b4b      	ldr	r3, [pc, #300]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004cc6:	60bb      	str	r3, [r7, #8]
       break;
 8004cc8:	e08c      	b.n	8004de4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cca:	4b4b      	ldr	r3, [pc, #300]	; (8004df8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004ccc:	60bb      	str	r3, [r7, #8]
      break;
 8004cce:	e089      	b.n	8004de4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cd0:	4b47      	ldr	r3, [pc, #284]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cd8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cda:	4b45      	ldr	r3, [pc, #276]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d023      	beq.n	8004d2e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ce6:	4b42      	ldr	r3, [pc, #264]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	099b      	lsrs	r3, r3, #6
 8004cec:	f04f 0400 	mov.w	r4, #0
 8004cf0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	ea03 0501 	and.w	r5, r3, r1
 8004cfc:	ea04 0602 	and.w	r6, r4, r2
 8004d00:	4a3d      	ldr	r2, [pc, #244]	; (8004df8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d02:	fb02 f106 	mul.w	r1, r2, r6
 8004d06:	2200      	movs	r2, #0
 8004d08:	fb02 f205 	mul.w	r2, r2, r5
 8004d0c:	440a      	add	r2, r1
 8004d0e:	493a      	ldr	r1, [pc, #232]	; (8004df8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d10:	fba5 0101 	umull	r0, r1, r5, r1
 8004d14:	1853      	adds	r3, r2, r1
 8004d16:	4619      	mov	r1, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f04f 0400 	mov.w	r4, #0
 8004d1e:	461a      	mov	r2, r3
 8004d20:	4623      	mov	r3, r4
 8004d22:	f7fb fab5 	bl	8000290 <__aeabi_uldivmod>
 8004d26:	4603      	mov	r3, r0
 8004d28:	460c      	mov	r4, r1
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	e049      	b.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d2e:	4b30      	ldr	r3, [pc, #192]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	099b      	lsrs	r3, r3, #6
 8004d34:	f04f 0400 	mov.w	r4, #0
 8004d38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d3c:	f04f 0200 	mov.w	r2, #0
 8004d40:	ea03 0501 	and.w	r5, r3, r1
 8004d44:	ea04 0602 	and.w	r6, r4, r2
 8004d48:	4629      	mov	r1, r5
 8004d4a:	4632      	mov	r2, r6
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	f04f 0400 	mov.w	r4, #0
 8004d54:	0154      	lsls	r4, r2, #5
 8004d56:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d5a:	014b      	lsls	r3, r1, #5
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4622      	mov	r2, r4
 8004d60:	1b49      	subs	r1, r1, r5
 8004d62:	eb62 0206 	sbc.w	r2, r2, r6
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	f04f 0400 	mov.w	r4, #0
 8004d6e:	0194      	lsls	r4, r2, #6
 8004d70:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004d74:	018b      	lsls	r3, r1, #6
 8004d76:	1a5b      	subs	r3, r3, r1
 8004d78:	eb64 0402 	sbc.w	r4, r4, r2
 8004d7c:	f04f 0100 	mov.w	r1, #0
 8004d80:	f04f 0200 	mov.w	r2, #0
 8004d84:	00e2      	lsls	r2, r4, #3
 8004d86:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004d8a:	00d9      	lsls	r1, r3, #3
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	4614      	mov	r4, r2
 8004d90:	195b      	adds	r3, r3, r5
 8004d92:	eb44 0406 	adc.w	r4, r4, r6
 8004d96:	f04f 0100 	mov.w	r1, #0
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	02a2      	lsls	r2, r4, #10
 8004da0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004da4:	0299      	lsls	r1, r3, #10
 8004da6:	460b      	mov	r3, r1
 8004da8:	4614      	mov	r4, r2
 8004daa:	4618      	mov	r0, r3
 8004dac:	4621      	mov	r1, r4
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f04f 0400 	mov.w	r4, #0
 8004db4:	461a      	mov	r2, r3
 8004db6:	4623      	mov	r3, r4
 8004db8:	f7fb fa6a 	bl	8000290 <__aeabi_uldivmod>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	460c      	mov	r4, r1
 8004dc0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004dc2:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	0c1b      	lsrs	r3, r3, #16
 8004dc8:	f003 0303 	and.w	r3, r3, #3
 8004dcc:	3301      	adds	r3, #1
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dda:	60bb      	str	r3, [r7, #8]
      break;
 8004ddc:	e002      	b.n	8004de4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dde:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004de0:	60bb      	str	r3, [r7, #8]
      break;
 8004de2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004de4:	68bb      	ldr	r3, [r7, #8]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dee:	bf00      	nop
 8004df0:	40023800 	.word	0x40023800
 8004df4:	00f42400 	.word	0x00f42400
 8004df8:	017d7840 	.word	0x017d7840

08004dfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e00:	4b03      	ldr	r3, [pc, #12]	; (8004e10 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e02:	681b      	ldr	r3, [r3, #0]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	20000008 	.word	0x20000008

08004e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e18:	f7ff fff0 	bl	8004dfc <HAL_RCC_GetHCLKFreq>
 8004e1c:	4601      	mov	r1, r0
 8004e1e:	4b05      	ldr	r3, [pc, #20]	; (8004e34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	0a9b      	lsrs	r3, r3, #10
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	4a03      	ldr	r2, [pc, #12]	; (8004e38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e2a:	5cd3      	ldrb	r3, [r2, r3]
 8004e2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	40023800 	.word	0x40023800
 8004e38:	080075f0 	.word	0x080075f0

08004e3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e40:	f7ff ffdc 	bl	8004dfc <HAL_RCC_GetHCLKFreq>
 8004e44:	4601      	mov	r1, r0
 8004e46:	4b05      	ldr	r3, [pc, #20]	; (8004e5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	0b5b      	lsrs	r3, r3, #13
 8004e4c:	f003 0307 	and.w	r3, r3, #7
 8004e50:	4a03      	ldr	r2, [pc, #12]	; (8004e60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e52:	5cd3      	ldrb	r3, [r2, r3]
 8004e54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	40023800 	.word	0x40023800
 8004e60:	080075f0 	.word	0x080075f0

08004e64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10b      	bne.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d105      	bne.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d075      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e98:	4bad      	ldr	r3, [pc, #692]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e9e:	f7fe fbe3 	bl	8003668 <HAL_GetTick>
 8004ea2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ea4:	e008      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ea6:	f7fe fbdf 	bl	8003668 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d901      	bls.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e18b      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004eb8:	4ba6      	ldr	r3, [pc, #664]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1f0      	bne.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d009      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	019a      	lsls	r2, r3, #6
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	071b      	lsls	r3, r3, #28
 8004edc:	499d      	ldr	r1, [pc, #628]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d01f      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ef0:	4b98      	ldr	r3, [pc, #608]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ef6:	0f1b      	lsrs	r3, r3, #28
 8004ef8:	f003 0307 	and.w	r3, r3, #7
 8004efc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	019a      	lsls	r2, r3, #6
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	061b      	lsls	r3, r3, #24
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	071b      	lsls	r3, r3, #28
 8004f10:	4990      	ldr	r1, [pc, #576]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f18:	4b8e      	ldr	r3, [pc, #568]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f1e:	f023 021f 	bic.w	r2, r3, #31
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	498a      	ldr	r1, [pc, #552]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00d      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	019a      	lsls	r2, r3, #6
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	061b      	lsls	r3, r3, #24
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	071b      	lsls	r3, r3, #28
 8004f50:	4980      	ldr	r1, [pc, #512]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f58:	4b7d      	ldr	r3, [pc, #500]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f5e:	f7fe fb83 	bl	8003668 <HAL_GetTick>
 8004f62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f64:	e008      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f66:	f7fe fb7f 	bl	8003668 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d901      	bls.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e12b      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f78:	4b76      	ldr	r3, [pc, #472]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d0f0      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d105      	bne.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d079      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004f9c:	4b6e      	ldr	r3, [pc, #440]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fa2:	f7fe fb61 	bl	8003668 <HAL_GetTick>
 8004fa6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fa8:	e008      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004faa:	f7fe fb5d 	bl	8003668 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e109      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fbc:	4b65      	ldr	r3, [pc, #404]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fc8:	d0ef      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0304 	and.w	r3, r3, #4
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d020      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004fd6:	4b5f      	ldr	r3, [pc, #380]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fdc:	0f1b      	lsrs	r3, r3, #28
 8004fde:	f003 0307 	and.w	r3, r3, #7
 8004fe2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	019a      	lsls	r2, r3, #6
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	061b      	lsls	r3, r3, #24
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	071b      	lsls	r3, r3, #28
 8004ff6:	4957      	ldr	r1, [pc, #348]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ffe:	4b55      	ldr	r3, [pc, #340]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005004:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	3b01      	subs	r3, #1
 800500e:	021b      	lsls	r3, r3, #8
 8005010:	4950      	ldr	r1, [pc, #320]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005012:	4313      	orrs	r3, r2
 8005014:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b00      	cmp	r3, #0
 8005022:	d01e      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005024:	4b4b      	ldr	r3, [pc, #300]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800502a:	0e1b      	lsrs	r3, r3, #24
 800502c:	f003 030f 	and.w	r3, r3, #15
 8005030:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	019a      	lsls	r2, r3, #6
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	061b      	lsls	r3, r3, #24
 800503c:	431a      	orrs	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	071b      	lsls	r3, r3, #28
 8005044:	4943      	ldr	r1, [pc, #268]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005046:	4313      	orrs	r3, r2
 8005048:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800504c:	4b41      	ldr	r3, [pc, #260]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800504e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005052:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	493e      	ldr	r1, [pc, #248]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800505c:	4313      	orrs	r3, r2
 800505e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005062:	4b3d      	ldr	r3, [pc, #244]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005064:	2201      	movs	r2, #1
 8005066:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005068:	f7fe fafe 	bl	8003668 <HAL_GetTick>
 800506c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800506e:	e008      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005070:	f7fe fafa 	bl	8003668 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e0a6      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005082:	4b34      	ldr	r3, [pc, #208]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800508a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800508e:	d1ef      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0320 	and.w	r3, r3, #32
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 808d 	beq.w	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800509e:	2300      	movs	r3, #0
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	4b2c      	ldr	r3, [pc, #176]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	4a2b      	ldr	r2, [pc, #172]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ac:	6413      	str	r3, [r2, #64]	; 0x40
 80050ae:	4b29      	ldr	r3, [pc, #164]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80050ba:	4b28      	ldr	r3, [pc, #160]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a27      	ldr	r2, [pc, #156]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80050c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80050c6:	f7fe facf 	bl	8003668 <HAL_GetTick>
 80050ca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050cc:	e008      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80050ce:	f7fe facb 	bl	8003668 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d901      	bls.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e077      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050e0:	4b1e      	ldr	r3, [pc, #120]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0f0      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050ec:	4b19      	ldr	r3, [pc, #100]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050f4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d039      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005100:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	429a      	cmp	r2, r3
 8005108:	d032      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800510a:	4b12      	ldr	r3, [pc, #72]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800510c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005112:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005114:	4b12      	ldr	r3, [pc, #72]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005116:	2201      	movs	r2, #1
 8005118:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800511a:	4b11      	ldr	r3, [pc, #68]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800511c:	2200      	movs	r2, #0
 800511e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005120:	4a0c      	ldr	r2, [pc, #48]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005126:	4b0b      	ldr	r3, [pc, #44]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b01      	cmp	r3, #1
 8005130:	d11e      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005132:	f7fe fa99 	bl	8003668 <HAL_GetTick>
 8005136:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005138:	e014      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800513a:	f7fe fa95 	bl	8003668 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	f241 3288 	movw	r2, #5000	; 0x1388
 8005148:	4293      	cmp	r3, r2
 800514a:	d90b      	bls.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e03f      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8005150:	42470068 	.word	0x42470068
 8005154:	40023800 	.word	0x40023800
 8005158:	42470070 	.word	0x42470070
 800515c:	40007000 	.word	0x40007000
 8005160:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005164:	4b1c      	ldr	r3, [pc, #112]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005168:	f003 0302 	and.w	r3, r3, #2
 800516c:	2b00      	cmp	r3, #0
 800516e:	d0e4      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005174:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005178:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800517c:	d10d      	bne.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800517e:	4b16      	ldr	r3, [pc, #88]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800518e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005192:	4911      	ldr	r1, [pc, #68]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005194:	4313      	orrs	r3, r2
 8005196:	608b      	str	r3, [r1, #8]
 8005198:	e005      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800519a:	4b0f      	ldr	r3, [pc, #60]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	4a0e      	ldr	r2, [pc, #56]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051a0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80051a4:	6093      	str	r3, [r2, #8]
 80051a6:	4b0c      	ldr	r3, [pc, #48]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051b2:	4909      	ldr	r1, [pc, #36]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0310 	and.w	r3, r3, #16
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d004      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80051ca:	4b04      	ldr	r3, [pc, #16]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80051cc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3718      	adds	r7, #24
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	40023800 	.word	0x40023800
 80051dc:	424711e0 	.word	0x424711e0

080051e0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e083      	b.n	80052fa <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	7f5b      	ldrb	r3, [r3, #29]
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d105      	bne.n	8005208 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7fd ff84 	bl	8003110 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	22ca      	movs	r2, #202	; 0xca
 8005214:	625a      	str	r2, [r3, #36]	; 0x24
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2253      	movs	r2, #83	; 0x53
 800521c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f944 	bl	80054ac <RTC_EnterInitMode>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d008      	beq.n	800523c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	22ff      	movs	r2, #255	; 0xff
 8005230:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2204      	movs	r2, #4
 8005236:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e05e      	b.n	80052fa <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	6812      	ldr	r2, [r2, #0]
 8005246:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800524a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800524e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6899      	ldr	r1, [r3, #8]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	431a      	orrs	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	431a      	orrs	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	68d2      	ldr	r2, [r2, #12]
 8005276:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6919      	ldr	r1, [r3, #16]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	041a      	lsls	r2, r3, #16
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68da      	ldr	r2, [r3, #12]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800529a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f003 0320 	and.w	r3, r3, #32
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10e      	bne.n	80052c8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f8d6 	bl	800545c <HAL_RTC_WaitForSynchro>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d008      	beq.n	80052c8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	22ff      	movs	r2, #255	; 0xff
 80052bc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2204      	movs	r2, #4
 80052c2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e018      	b.n	80052fa <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052d6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699a      	ldr	r2, [r3, #24]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	22ff      	movs	r2, #255	; 0xff
 80052f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80052f8:	2300      	movs	r3, #0
  }
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b086      	sub	sp, #24
 8005306:	af00      	add	r7, sp, #0
 8005308:	60f8      	str	r0, [r7, #12]
 800530a:	60b9      	str	r1, [r7, #8]
 800530c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005334:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005338:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	0c1b      	lsrs	r3, r3, #16
 800533e:	b2db      	uxtb	r3, r3
 8005340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005344:	b2da      	uxtb	r2, r3
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	0a1b      	lsrs	r3, r3, #8
 800534e:	b2db      	uxtb	r3, r3
 8005350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005354:	b2da      	uxtb	r2, r3
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005362:	b2da      	uxtb	r2, r3
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	0c1b      	lsrs	r3, r3, #16
 800536c:	b2db      	uxtb	r3, r3
 800536e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005372:	b2da      	uxtb	r2, r3
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d11a      	bne.n	80053b4 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	4618      	mov	r0, r3
 8005384:	f000 f8be 	bl	8005504 <RTC_Bcd2ToByte>
 8005388:	4603      	mov	r3, r0
 800538a:	461a      	mov	r2, r3
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	785b      	ldrb	r3, [r3, #1]
 8005394:	4618      	mov	r0, r3
 8005396:	f000 f8b5 	bl	8005504 <RTC_Bcd2ToByte>
 800539a:	4603      	mov	r3, r0
 800539c:	461a      	mov	r2, r3
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	789b      	ldrb	r3, [r3, #2]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 f8ac 	bl	8005504 <RTC_Bcd2ToByte>
 80053ac:	4603      	mov	r3, r0
 80053ae:	461a      	mov	r2, r3
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b086      	sub	sp, #24
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	60f8      	str	r0, [r7, #12]
 80053c6:	60b9      	str	r1, [r7, #8]
 80053c8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80053ca:	2300      	movs	r3, #0
 80053cc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80053d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80053dc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	0c1b      	lsrs	r3, r3, #16
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	0a1b      	lsrs	r3, r3, #8
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	f003 031f 	and.w	r3, r3, #31
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005400:	b2da      	uxtb	r2, r3
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	0b5b      	lsrs	r3, r3, #13
 800540a:	b2db      	uxtb	r3, r3
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	b2da      	uxtb	r2, r3
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d11a      	bne.n	8005452 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	78db      	ldrb	r3, [r3, #3]
 8005420:	4618      	mov	r0, r3
 8005422:	f000 f86f 	bl	8005504 <RTC_Bcd2ToByte>
 8005426:	4603      	mov	r3, r0
 8005428:	461a      	mov	r2, r3
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	785b      	ldrb	r3, [r3, #1]
 8005432:	4618      	mov	r0, r3
 8005434:	f000 f866 	bl	8005504 <RTC_Bcd2ToByte>
 8005438:	4603      	mov	r3, r0
 800543a:	461a      	mov	r2, r3
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	789b      	ldrb	r3, [r3, #2]
 8005444:	4618      	mov	r0, r3
 8005446:	f000 f85d 	bl	8005504 <RTC_Bcd2ToByte>
 800544a:	4603      	mov	r3, r0
 800544c:	461a      	mov	r2, r3
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3718      	adds	r7, #24
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68da      	ldr	r2, [r3, #12]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005476:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005478:	f7fe f8f6 	bl	8003668 <HAL_GetTick>
 800547c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800547e:	e009      	b.n	8005494 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005480:	f7fe f8f2 	bl	8003668 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800548e:	d901      	bls.n	8005494 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e007      	b.n	80054a4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f003 0320 	and.w	r3, r3, #32
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0ee      	beq.n	8005480 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d119      	bne.n	80054fa <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f04f 32ff 	mov.w	r2, #4294967295
 80054ce:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054d0:	f7fe f8ca 	bl	8003668 <HAL_GetTick>
 80054d4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80054d6:	e009      	b.n	80054ec <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80054d8:	f7fe f8c6 	bl	8003668 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054e6:	d901      	bls.n	80054ec <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e007      	b.n	80054fc <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d0ee      	beq.n	80054d8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	4603      	mov	r3, r0
 800550c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800550e:	2300      	movs	r3, #0
 8005510:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005512:	79fb      	ldrb	r3, [r7, #7]
 8005514:	091b      	lsrs	r3, r3, #4
 8005516:	b2db      	uxtb	r3, r3
 8005518:	461a      	mov	r2, r3
 800551a:	4613      	mov	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4413      	add	r3, r2
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005524:	79fb      	ldrb	r3, [r7, #7]
 8005526:	f003 030f 	and.w	r3, r3, #15
 800552a:	b2da      	uxtb	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	b2db      	uxtb	r3, r3
 8005530:	4413      	add	r3, r2
 8005532:	b2db      	uxtb	r3, r3
}
 8005534:	4618      	mov	r0, r3
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e01d      	b.n	800558e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d106      	bne.n	800556c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7fd fde8 	bl	800313c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2202      	movs	r2, #2
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	3304      	adds	r3, #4
 800557c:	4619      	mov	r1, r3
 800557e:	4610      	mov	r0, r2
 8005580:	f000 fa40 	bl	8005a04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005596:	b480      	push	{r7}
 8005598:	b085      	sub	sp, #20
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68da      	ldr	r2, [r3, #12]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f042 0201 	orr.w	r2, r2, #1
 80055ac:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f003 0307 	and.w	r3, r3, #7
 80055b8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2b06      	cmp	r3, #6
 80055be:	d007      	beq.n	80055d0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f042 0201 	orr.w	r2, r2, #1
 80055ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80055de:	b480      	push	{r7}
 80055e0:	b083      	sub	sp, #12
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0201 	bic.w	r2, r2, #1
 80055f4:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	6a1a      	ldr	r2, [r3, #32]
 80055fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8005600:	4013      	ands	r3, r2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10f      	bne.n	8005626 <HAL_TIM_Base_Stop_IT+0x48>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6a1a      	ldr	r2, [r3, #32]
 800560c:	f240 4344 	movw	r3, #1092	; 0x444
 8005610:	4013      	ands	r3, r2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d107      	bne.n	8005626 <HAL_TIM_Base_Stop_IT+0x48>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 0201 	bic.w	r2, r2, #1
 8005624:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b02      	cmp	r3, #2
 8005648:	d122      	bne.n	8005690 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b02      	cmp	r3, #2
 8005656:	d11b      	bne.n	8005690 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f06f 0202 	mvn.w	r2, #2
 8005660:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	f003 0303 	and.w	r3, r3, #3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f9a5 	bl	80059c6 <HAL_TIM_IC_CaptureCallback>
 800567c:	e005      	b.n	800568a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f997 	bl	80059b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f9a8 	bl	80059da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	f003 0304 	and.w	r3, r3, #4
 800569a:	2b04      	cmp	r3, #4
 800569c:	d122      	bne.n	80056e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	d11b      	bne.n	80056e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f06f 0204 	mvn.w	r2, #4
 80056b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2202      	movs	r2, #2
 80056ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f97b 	bl	80059c6 <HAL_TIM_IC_CaptureCallback>
 80056d0:	e005      	b.n	80056de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f96d 	bl	80059b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f97e 	bl	80059da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	f003 0308 	and.w	r3, r3, #8
 80056ee:	2b08      	cmp	r3, #8
 80056f0:	d122      	bne.n	8005738 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f003 0308 	and.w	r3, r3, #8
 80056fc:	2b08      	cmp	r3, #8
 80056fe:	d11b      	bne.n	8005738 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f06f 0208 	mvn.w	r2, #8
 8005708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2204      	movs	r2, #4
 800570e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	f003 0303 	and.w	r3, r3, #3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f951 	bl	80059c6 <HAL_TIM_IC_CaptureCallback>
 8005724:	e005      	b.n	8005732 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f943 	bl	80059b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f954 	bl	80059da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	f003 0310 	and.w	r3, r3, #16
 8005742:	2b10      	cmp	r3, #16
 8005744:	d122      	bne.n	800578c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f003 0310 	and.w	r3, r3, #16
 8005750:	2b10      	cmp	r3, #16
 8005752:	d11b      	bne.n	800578c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f06f 0210 	mvn.w	r2, #16
 800575c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2208      	movs	r2, #8
 8005762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800576e:	2b00      	cmp	r3, #0
 8005770:	d003      	beq.n	800577a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f927 	bl	80059c6 <HAL_TIM_IC_CaptureCallback>
 8005778:	e005      	b.n	8005786 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f919 	bl	80059b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 f92a 	bl	80059da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	2b01      	cmp	r3, #1
 8005798:	d10e      	bne.n	80057b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d107      	bne.n	80057b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f06f 0201 	mvn.w	r2, #1
 80057b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7fd fb0c 	bl	8002dd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c2:	2b80      	cmp	r3, #128	; 0x80
 80057c4:	d10e      	bne.n	80057e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d0:	2b80      	cmp	r3, #128	; 0x80
 80057d2:	d107      	bne.n	80057e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fad0 	bl	8005d84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ee:	2b40      	cmp	r3, #64	; 0x40
 80057f0:	d10e      	bne.n	8005810 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fc:	2b40      	cmp	r3, #64	; 0x40
 80057fe:	d107      	bne.n	8005810 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f8ef 	bl	80059ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	f003 0320 	and.w	r3, r3, #32
 800581a:	2b20      	cmp	r3, #32
 800581c:	d10e      	bne.n	800583c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	f003 0320 	and.w	r3, r3, #32
 8005828:	2b20      	cmp	r3, #32
 800582a:	d107      	bne.n	800583c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f06f 0220 	mvn.w	r2, #32
 8005834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fa9a 	bl	8005d70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800583c:	bf00      	nop
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005854:	2b01      	cmp	r3, #1
 8005856:	d101      	bne.n	800585c <HAL_TIM_ConfigClockSource+0x18>
 8005858:	2302      	movs	r3, #2
 800585a:	e0a6      	b.n	80059aa <HAL_TIM_ConfigClockSource+0x166>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800587a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005882:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2b40      	cmp	r3, #64	; 0x40
 8005892:	d067      	beq.n	8005964 <HAL_TIM_ConfigClockSource+0x120>
 8005894:	2b40      	cmp	r3, #64	; 0x40
 8005896:	d80b      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x6c>
 8005898:	2b10      	cmp	r3, #16
 800589a:	d073      	beq.n	8005984 <HAL_TIM_ConfigClockSource+0x140>
 800589c:	2b10      	cmp	r3, #16
 800589e:	d802      	bhi.n	80058a6 <HAL_TIM_ConfigClockSource+0x62>
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d06f      	beq.n	8005984 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80058a4:	e078      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80058a6:	2b20      	cmp	r3, #32
 80058a8:	d06c      	beq.n	8005984 <HAL_TIM_ConfigClockSource+0x140>
 80058aa:	2b30      	cmp	r3, #48	; 0x30
 80058ac:	d06a      	beq.n	8005984 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80058ae:	e073      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80058b0:	2b70      	cmp	r3, #112	; 0x70
 80058b2:	d00d      	beq.n	80058d0 <HAL_TIM_ConfigClockSource+0x8c>
 80058b4:	2b70      	cmp	r3, #112	; 0x70
 80058b6:	d804      	bhi.n	80058c2 <HAL_TIM_ConfigClockSource+0x7e>
 80058b8:	2b50      	cmp	r3, #80	; 0x50
 80058ba:	d033      	beq.n	8005924 <HAL_TIM_ConfigClockSource+0xe0>
 80058bc:	2b60      	cmp	r3, #96	; 0x60
 80058be:	d041      	beq.n	8005944 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80058c0:	e06a      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80058c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c6:	d066      	beq.n	8005996 <HAL_TIM_ConfigClockSource+0x152>
 80058c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058cc:	d017      	beq.n	80058fe <HAL_TIM_ConfigClockSource+0xba>
      break;
 80058ce:	e063      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6818      	ldr	r0, [r3, #0]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	6899      	ldr	r1, [r3, #8]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f000 f9aa 	bl	8005c38 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058f2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	609a      	str	r2, [r3, #8]
      break;
 80058fc:	e04c      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6818      	ldr	r0, [r3, #0]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	6899      	ldr	r1, [r3, #8]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f000 f993 	bl	8005c38 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689a      	ldr	r2, [r3, #8]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005920:	609a      	str	r2, [r3, #8]
      break;
 8005922:	e039      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6818      	ldr	r0, [r3, #0]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	6859      	ldr	r1, [r3, #4]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	461a      	mov	r2, r3
 8005932:	f000 f907 	bl	8005b44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2150      	movs	r1, #80	; 0x50
 800593c:	4618      	mov	r0, r3
 800593e:	f000 f960 	bl	8005c02 <TIM_ITRx_SetConfig>
      break;
 8005942:	e029      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6818      	ldr	r0, [r3, #0]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	6859      	ldr	r1, [r3, #4]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	461a      	mov	r2, r3
 8005952:	f000 f926 	bl	8005ba2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2160      	movs	r1, #96	; 0x60
 800595c:	4618      	mov	r0, r3
 800595e:	f000 f950 	bl	8005c02 <TIM_ITRx_SetConfig>
      break;
 8005962:	e019      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6818      	ldr	r0, [r3, #0]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	6859      	ldr	r1, [r3, #4]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	461a      	mov	r2, r3
 8005972:	f000 f8e7 	bl	8005b44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2140      	movs	r1, #64	; 0x40
 800597c:	4618      	mov	r0, r3
 800597e:	f000 f940 	bl	8005c02 <TIM_ITRx_SetConfig>
      break;
 8005982:	e009      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4619      	mov	r1, r3
 800598e:	4610      	mov	r0, r2
 8005990:	f000 f937 	bl	8005c02 <TIM_ITRx_SetConfig>
      break;
 8005994:	e000      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005996:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059e2:	bf00      	nop
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b083      	sub	sp, #12
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059f6:	bf00      	nop
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
	...

08005a04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a40      	ldr	r2, [pc, #256]	; (8005b18 <TIM_Base_SetConfig+0x114>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d013      	beq.n	8005a44 <TIM_Base_SetConfig+0x40>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a22:	d00f      	beq.n	8005a44 <TIM_Base_SetConfig+0x40>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a3d      	ldr	r2, [pc, #244]	; (8005b1c <TIM_Base_SetConfig+0x118>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d00b      	beq.n	8005a44 <TIM_Base_SetConfig+0x40>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a3c      	ldr	r2, [pc, #240]	; (8005b20 <TIM_Base_SetConfig+0x11c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d007      	beq.n	8005a44 <TIM_Base_SetConfig+0x40>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a3b      	ldr	r2, [pc, #236]	; (8005b24 <TIM_Base_SetConfig+0x120>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d003      	beq.n	8005a44 <TIM_Base_SetConfig+0x40>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a3a      	ldr	r2, [pc, #232]	; (8005b28 <TIM_Base_SetConfig+0x124>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d108      	bne.n	8005a56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a2f      	ldr	r2, [pc, #188]	; (8005b18 <TIM_Base_SetConfig+0x114>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d02b      	beq.n	8005ab6 <TIM_Base_SetConfig+0xb2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a64:	d027      	beq.n	8005ab6 <TIM_Base_SetConfig+0xb2>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a2c      	ldr	r2, [pc, #176]	; (8005b1c <TIM_Base_SetConfig+0x118>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d023      	beq.n	8005ab6 <TIM_Base_SetConfig+0xb2>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a2b      	ldr	r2, [pc, #172]	; (8005b20 <TIM_Base_SetConfig+0x11c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d01f      	beq.n	8005ab6 <TIM_Base_SetConfig+0xb2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a2a      	ldr	r2, [pc, #168]	; (8005b24 <TIM_Base_SetConfig+0x120>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d01b      	beq.n	8005ab6 <TIM_Base_SetConfig+0xb2>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a29      	ldr	r2, [pc, #164]	; (8005b28 <TIM_Base_SetConfig+0x124>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d017      	beq.n	8005ab6 <TIM_Base_SetConfig+0xb2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a28      	ldr	r2, [pc, #160]	; (8005b2c <TIM_Base_SetConfig+0x128>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d013      	beq.n	8005ab6 <TIM_Base_SetConfig+0xb2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a27      	ldr	r2, [pc, #156]	; (8005b30 <TIM_Base_SetConfig+0x12c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d00f      	beq.n	8005ab6 <TIM_Base_SetConfig+0xb2>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a26      	ldr	r2, [pc, #152]	; (8005b34 <TIM_Base_SetConfig+0x130>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d00b      	beq.n	8005ab6 <TIM_Base_SetConfig+0xb2>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a25      	ldr	r2, [pc, #148]	; (8005b38 <TIM_Base_SetConfig+0x134>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d007      	beq.n	8005ab6 <TIM_Base_SetConfig+0xb2>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a24      	ldr	r2, [pc, #144]	; (8005b3c <TIM_Base_SetConfig+0x138>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d003      	beq.n	8005ab6 <TIM_Base_SetConfig+0xb2>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a23      	ldr	r2, [pc, #140]	; (8005b40 <TIM_Base_SetConfig+0x13c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d108      	bne.n	8005ac8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005abc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	689a      	ldr	r2, [r3, #8]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a0a      	ldr	r2, [pc, #40]	; (8005b18 <TIM_Base_SetConfig+0x114>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d003      	beq.n	8005afc <TIM_Base_SetConfig+0xf8>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a0c      	ldr	r2, [pc, #48]	; (8005b28 <TIM_Base_SetConfig+0x124>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d103      	bne.n	8005b04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	691a      	ldr	r2, [r3, #16]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	615a      	str	r2, [r3, #20]
}
 8005b0a:	bf00      	nop
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	40010000 	.word	0x40010000
 8005b1c:	40000400 	.word	0x40000400
 8005b20:	40000800 	.word	0x40000800
 8005b24:	40000c00 	.word	0x40000c00
 8005b28:	40010400 	.word	0x40010400
 8005b2c:	40014000 	.word	0x40014000
 8005b30:	40014400 	.word	0x40014400
 8005b34:	40014800 	.word	0x40014800
 8005b38:	40001800 	.word	0x40001800
 8005b3c:	40001c00 	.word	0x40001c00
 8005b40:	40002000 	.word	0x40002000

08005b44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6a1b      	ldr	r3, [r3, #32]
 8005b54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	f023 0201 	bic.w	r2, r3, #1
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	011b      	lsls	r3, r3, #4
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f023 030a 	bic.w	r3, r3, #10
 8005b80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	621a      	str	r2, [r3, #32]
}
 8005b96:	bf00      	nop
 8005b98:	371c      	adds	r7, #28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b087      	sub	sp, #28
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	60b9      	str	r1, [r7, #8]
 8005bac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	f023 0210 	bic.w	r2, r3, #16
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	031b      	lsls	r3, r3, #12
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	011b      	lsls	r3, r3, #4
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	621a      	str	r2, [r3, #32]
}
 8005bf6:	bf00      	nop
 8005bf8:	371c      	adds	r7, #28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b085      	sub	sp, #20
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	f043 0307 	orr.w	r3, r3, #7
 8005c24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	609a      	str	r2, [r3, #8]
}
 8005c2c:	bf00      	nop
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b087      	sub	sp, #28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
 8005c44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	021a      	lsls	r2, r3, #8
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	609a      	str	r2, [r3, #8]
}
 8005c6c:	bf00      	nop
 8005c6e:	371c      	adds	r7, #28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d101      	bne.n	8005c90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	e05a      	b.n	8005d46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a21      	ldr	r2, [pc, #132]	; (8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d022      	beq.n	8005d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cdc:	d01d      	beq.n	8005d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a1d      	ldr	r2, [pc, #116]	; (8005d58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d018      	beq.n	8005d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a1b      	ldr	r2, [pc, #108]	; (8005d5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d013      	beq.n	8005d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a1a      	ldr	r2, [pc, #104]	; (8005d60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d00e      	beq.n	8005d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a18      	ldr	r2, [pc, #96]	; (8005d64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d009      	beq.n	8005d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a17      	ldr	r2, [pc, #92]	; (8005d68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d004      	beq.n	8005d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a15      	ldr	r2, [pc, #84]	; (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d10c      	bne.n	8005d34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	40010000 	.word	0x40010000
 8005d58:	40000400 	.word	0x40000400
 8005d5c:	40000800 	.word	0x40000800
 8005d60:	40000c00 	.word	0x40000c00
 8005d64:	40010400 	.word	0x40010400
 8005d68:	40014000 	.word	0x40014000
 8005d6c:	40001800 	.word	0x40001800

08005d70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e03f      	b.n	8005e2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d106      	bne.n	8005dc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f7fd fa1e 	bl	8003200 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2224      	movs	r2, #36	; 0x24
 8005dc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68da      	ldr	r2, [r3, #12]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 faad 	bl	800633c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	691a      	ldr	r2, [r3, #16]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005df0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	695a      	ldr	r2, [r3, #20]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68da      	ldr	r2, [r3, #12]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2220      	movs	r2, #32
 8005e24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e32:	b480      	push	{r7}
 8005e34:	b085      	sub	sp, #20
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	60f8      	str	r0, [r7, #12]
 8005e3a:	60b9      	str	r1, [r7, #8]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b20      	cmp	r3, #32
 8005e4a:	d130      	bne.n	8005eae <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <HAL_UART_Transmit_IT+0x26>
 8005e52:	88fb      	ldrh	r3, [r7, #6]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e029      	b.n	8005eb0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d101      	bne.n	8005e6a <HAL_UART_Transmit_IT+0x38>
 8005e66:	2302      	movs	r3, #2
 8005e68:	e022      	b.n	8005eb0 <HAL_UART_Transmit_IT+0x7e>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	88fa      	ldrh	r2, [r7, #6]
 8005e7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	88fa      	ldrh	r2, [r7, #6]
 8005e82:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2221      	movs	r2, #33	; 0x21
 8005e8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ea8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	e000      	b.n	8005eb0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005eae:	2302      	movs	r3, #2
  }
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b088      	sub	sp, #32
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005edc:	2300      	movs	r3, #0
 8005ede:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	f003 030f 	and.w	r3, r3, #15
 8005eea:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10d      	bne.n	8005f0e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	f003 0320 	and.w	r3, r3, #32
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d008      	beq.n	8005f0e <HAL_UART_IRQHandler+0x52>
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	f003 0320 	and.w	r3, r3, #32
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f996 	bl	8006238 <UART_Receive_IT>
      return;
 8005f0c:	e0d1      	b.n	80060b2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f000 80b0 	beq.w	8006076 <HAL_UART_IRQHandler+0x1ba>
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d105      	bne.n	8005f2c <HAL_UART_IRQHandler+0x70>
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 80a5 	beq.w	8006076 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00a      	beq.n	8005f4c <HAL_UART_IRQHandler+0x90>
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d005      	beq.n	8005f4c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f44:	f043 0201 	orr.w	r2, r3, #1
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	f003 0304 	and.w	r3, r3, #4
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00a      	beq.n	8005f6c <HAL_UART_IRQHandler+0xb0>
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d005      	beq.n	8005f6c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f64:	f043 0202 	orr.w	r2, r3, #2
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00a      	beq.n	8005f8c <HAL_UART_IRQHandler+0xd0>
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d005      	beq.n	8005f8c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f84:	f043 0204 	orr.w	r2, r3, #4
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	f003 0308 	and.w	r3, r3, #8
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00f      	beq.n	8005fb6 <HAL_UART_IRQHandler+0xfa>
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	f003 0320 	and.w	r3, r3, #32
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d104      	bne.n	8005faa <HAL_UART_IRQHandler+0xee>
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d005      	beq.n	8005fb6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fae:	f043 0208 	orr.w	r2, r3, #8
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d078      	beq.n	80060b0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	f003 0320 	and.w	r3, r3, #32
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d007      	beq.n	8005fd8 <HAL_UART_IRQHandler+0x11c>
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	f003 0320 	and.w	r3, r3, #32
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d002      	beq.n	8005fd8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f930 	bl	8006238 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe2:	2b40      	cmp	r3, #64	; 0x40
 8005fe4:	bf0c      	ite	eq
 8005fe6:	2301      	moveq	r3, #1
 8005fe8:	2300      	movne	r3, #0
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff2:	f003 0308 	and.w	r3, r3, #8
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d102      	bne.n	8006000 <HAL_UART_IRQHandler+0x144>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d031      	beq.n	8006064 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 f879 	bl	80060f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006010:	2b40      	cmp	r3, #64	; 0x40
 8006012:	d123      	bne.n	800605c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	695a      	ldr	r2, [r3, #20]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006022:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006028:	2b00      	cmp	r3, #0
 800602a:	d013      	beq.n	8006054 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006030:	4a21      	ldr	r2, [pc, #132]	; (80060b8 <HAL_UART_IRQHandler+0x1fc>)
 8006032:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006038:	4618      	mov	r0, r3
 800603a:	f7fd fec6 	bl	8003dca <HAL_DMA_Abort_IT>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d016      	beq.n	8006072 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800604e:	4610      	mov	r0, r2
 8006050:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006052:	e00e      	b.n	8006072 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 f845 	bl	80060e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800605a:	e00a      	b.n	8006072 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f841 	bl	80060e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006062:	e006      	b.n	8006072 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 f83d 	bl	80060e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006070:	e01e      	b.n	80060b0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006072:	bf00      	nop
    return;
 8006074:	e01c      	b.n	80060b0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800607c:	2b00      	cmp	r3, #0
 800607e:	d008      	beq.n	8006092 <HAL_UART_IRQHandler+0x1d6>
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006086:	2b00      	cmp	r3, #0
 8006088:	d003      	beq.n	8006092 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f866 	bl	800615c <UART_Transmit_IT>
    return;
 8006090:	e00f      	b.n	80060b2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00a      	beq.n	80060b2 <HAL_UART_IRQHandler+0x1f6>
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d005      	beq.n	80060b2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f8ae 	bl	8006208 <UART_EndTransmit_IT>
    return;
 80060ac:	bf00      	nop
 80060ae:	e000      	b.n	80060b2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80060b0:	bf00      	nop
  }
}
 80060b2:	3720      	adds	r7, #32
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	08006135 	.word	0x08006135

080060bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68da      	ldr	r2, [r3, #12]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800610e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	695a      	ldr	r2, [r3, #20]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f022 0201 	bic.w	r2, r2, #1
 800611e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2220      	movs	r2, #32
 8006124:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006140:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f7ff ffc8 	bl	80060e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006154:	bf00      	nop
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800616a:	b2db      	uxtb	r3, r3
 800616c:	2b21      	cmp	r3, #33	; 0x21
 800616e:	d144      	bne.n	80061fa <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006178:	d11a      	bne.n	80061b0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	461a      	mov	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800618e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d105      	bne.n	80061a4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	1c9a      	adds	r2, r3, #2
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	621a      	str	r2, [r3, #32]
 80061a2:	e00e      	b.n	80061c2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	1c5a      	adds	r2, r3, #1
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	621a      	str	r2, [r3, #32]
 80061ae:	e008      	b.n	80061c2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a1b      	ldr	r3, [r3, #32]
 80061b4:	1c59      	adds	r1, r3, #1
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6211      	str	r1, [r2, #32]
 80061ba:	781a      	ldrb	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	3b01      	subs	r3, #1
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	4619      	mov	r1, r3
 80061d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10f      	bne.n	80061f6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68da      	ldr	r2, [r3, #12]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68da      	ldr	r2, [r3, #12]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80061f6:	2300      	movs	r3, #0
 80061f8:	e000      	b.n	80061fc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80061fa:	2302      	movs	r3, #2
  }
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68da      	ldr	r2, [r3, #12]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800621e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2220      	movs	r2, #32
 8006224:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f7ff ff47 	bl	80060bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3708      	adds	r7, #8
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006246:	b2db      	uxtb	r3, r3
 8006248:	2b22      	cmp	r3, #34	; 0x22
 800624a:	d171      	bne.n	8006330 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006254:	d123      	bne.n	800629e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10e      	bne.n	8006282 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	b29b      	uxth	r3, r3
 800626c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006270:	b29a      	uxth	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627a:	1c9a      	adds	r2, r3, #2
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	629a      	str	r2, [r3, #40]	; 0x28
 8006280:	e029      	b.n	80062d6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	b29b      	uxth	r3, r3
 800628a:	b2db      	uxtb	r3, r3
 800628c:	b29a      	uxth	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006296:	1c5a      	adds	r2, r3, #1
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	629a      	str	r2, [r3, #40]	; 0x28
 800629c:	e01b      	b.n	80062d6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10a      	bne.n	80062bc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6858      	ldr	r0, [r3, #4]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b0:	1c59      	adds	r1, r3, #1
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	6291      	str	r1, [r2, #40]	; 0x28
 80062b6:	b2c2      	uxtb	r2, r0
 80062b8:	701a      	strb	r2, [r3, #0]
 80062ba:	e00c      	b.n	80062d6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c8:	1c58      	adds	r0, r3, #1
 80062ca:	6879      	ldr	r1, [r7, #4]
 80062cc:	6288      	str	r0, [r1, #40]	; 0x28
 80062ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80062d2:	b2d2      	uxtb	r2, r2
 80062d4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062da:	b29b      	uxth	r3, r3
 80062dc:	3b01      	subs	r3, #1
 80062de:	b29b      	uxth	r3, r3
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	4619      	mov	r1, r3
 80062e4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d120      	bne.n	800632c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68da      	ldr	r2, [r3, #12]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f022 0220 	bic.w	r2, r2, #32
 80062f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68da      	ldr	r2, [r3, #12]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006308:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	695a      	ldr	r2, [r3, #20]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 0201 	bic.w	r2, r2, #1
 8006318:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2220      	movs	r2, #32
 800631e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7ff fed4 	bl	80060d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006328:	2300      	movs	r3, #0
 800632a:	e002      	b.n	8006332 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800632c:	2300      	movs	r3, #0
 800632e:	e000      	b.n	8006332 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006330:	2302      	movs	r3, #2
  }
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
	...

0800633c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800633c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006340:	b085      	sub	sp, #20
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68da      	ldr	r2, [r3, #12]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	430a      	orrs	r2, r1
 800635a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689a      	ldr	r2, [r3, #8]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	431a      	orrs	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	431a      	orrs	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	4313      	orrs	r3, r2
 8006372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800637e:	f023 030c 	bic.w	r3, r3, #12
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	6812      	ldr	r2, [r2, #0]
 8006386:	68f9      	ldr	r1, [r7, #12]
 8006388:	430b      	orrs	r3, r1
 800638a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	699a      	ldr	r2, [r3, #24]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	69db      	ldr	r3, [r3, #28]
 80063a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063aa:	f040 818b 	bne.w	80066c4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4ac1      	ldr	r2, [pc, #772]	; (80066b8 <UART_SetConfig+0x37c>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d005      	beq.n	80063c4 <UART_SetConfig+0x88>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4abf      	ldr	r2, [pc, #764]	; (80066bc <UART_SetConfig+0x380>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	f040 80bd 	bne.w	800653e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063c4:	f7fe fd3a 	bl	8004e3c <HAL_RCC_GetPCLK2Freq>
 80063c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	461d      	mov	r5, r3
 80063ce:	f04f 0600 	mov.w	r6, #0
 80063d2:	46a8      	mov	r8, r5
 80063d4:	46b1      	mov	r9, r6
 80063d6:	eb18 0308 	adds.w	r3, r8, r8
 80063da:	eb49 0409 	adc.w	r4, r9, r9
 80063de:	4698      	mov	r8, r3
 80063e0:	46a1      	mov	r9, r4
 80063e2:	eb18 0805 	adds.w	r8, r8, r5
 80063e6:	eb49 0906 	adc.w	r9, r9, r6
 80063ea:	f04f 0100 	mov.w	r1, #0
 80063ee:	f04f 0200 	mov.w	r2, #0
 80063f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80063f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80063fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80063fe:	4688      	mov	r8, r1
 8006400:	4691      	mov	r9, r2
 8006402:	eb18 0005 	adds.w	r0, r8, r5
 8006406:	eb49 0106 	adc.w	r1, r9, r6
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	461d      	mov	r5, r3
 8006410:	f04f 0600 	mov.w	r6, #0
 8006414:	196b      	adds	r3, r5, r5
 8006416:	eb46 0406 	adc.w	r4, r6, r6
 800641a:	461a      	mov	r2, r3
 800641c:	4623      	mov	r3, r4
 800641e:	f7f9 ff37 	bl	8000290 <__aeabi_uldivmod>
 8006422:	4603      	mov	r3, r0
 8006424:	460c      	mov	r4, r1
 8006426:	461a      	mov	r2, r3
 8006428:	4ba5      	ldr	r3, [pc, #660]	; (80066c0 <UART_SetConfig+0x384>)
 800642a:	fba3 2302 	umull	r2, r3, r3, r2
 800642e:	095b      	lsrs	r3, r3, #5
 8006430:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	461d      	mov	r5, r3
 8006438:	f04f 0600 	mov.w	r6, #0
 800643c:	46a9      	mov	r9, r5
 800643e:	46b2      	mov	sl, r6
 8006440:	eb19 0309 	adds.w	r3, r9, r9
 8006444:	eb4a 040a 	adc.w	r4, sl, sl
 8006448:	4699      	mov	r9, r3
 800644a:	46a2      	mov	sl, r4
 800644c:	eb19 0905 	adds.w	r9, r9, r5
 8006450:	eb4a 0a06 	adc.w	sl, sl, r6
 8006454:	f04f 0100 	mov.w	r1, #0
 8006458:	f04f 0200 	mov.w	r2, #0
 800645c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006460:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006464:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006468:	4689      	mov	r9, r1
 800646a:	4692      	mov	sl, r2
 800646c:	eb19 0005 	adds.w	r0, r9, r5
 8006470:	eb4a 0106 	adc.w	r1, sl, r6
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	461d      	mov	r5, r3
 800647a:	f04f 0600 	mov.w	r6, #0
 800647e:	196b      	adds	r3, r5, r5
 8006480:	eb46 0406 	adc.w	r4, r6, r6
 8006484:	461a      	mov	r2, r3
 8006486:	4623      	mov	r3, r4
 8006488:	f7f9 ff02 	bl	8000290 <__aeabi_uldivmod>
 800648c:	4603      	mov	r3, r0
 800648e:	460c      	mov	r4, r1
 8006490:	461a      	mov	r2, r3
 8006492:	4b8b      	ldr	r3, [pc, #556]	; (80066c0 <UART_SetConfig+0x384>)
 8006494:	fba3 1302 	umull	r1, r3, r3, r2
 8006498:	095b      	lsrs	r3, r3, #5
 800649a:	2164      	movs	r1, #100	; 0x64
 800649c:	fb01 f303 	mul.w	r3, r1, r3
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	3332      	adds	r3, #50	; 0x32
 80064a6:	4a86      	ldr	r2, [pc, #536]	; (80066c0 <UART_SetConfig+0x384>)
 80064a8:	fba2 2303 	umull	r2, r3, r2, r3
 80064ac:	095b      	lsrs	r3, r3, #5
 80064ae:	005b      	lsls	r3, r3, #1
 80064b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064b4:	4498      	add	r8, r3
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	461d      	mov	r5, r3
 80064ba:	f04f 0600 	mov.w	r6, #0
 80064be:	46a9      	mov	r9, r5
 80064c0:	46b2      	mov	sl, r6
 80064c2:	eb19 0309 	adds.w	r3, r9, r9
 80064c6:	eb4a 040a 	adc.w	r4, sl, sl
 80064ca:	4699      	mov	r9, r3
 80064cc:	46a2      	mov	sl, r4
 80064ce:	eb19 0905 	adds.w	r9, r9, r5
 80064d2:	eb4a 0a06 	adc.w	sl, sl, r6
 80064d6:	f04f 0100 	mov.w	r1, #0
 80064da:	f04f 0200 	mov.w	r2, #0
 80064de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064ea:	4689      	mov	r9, r1
 80064ec:	4692      	mov	sl, r2
 80064ee:	eb19 0005 	adds.w	r0, r9, r5
 80064f2:	eb4a 0106 	adc.w	r1, sl, r6
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	461d      	mov	r5, r3
 80064fc:	f04f 0600 	mov.w	r6, #0
 8006500:	196b      	adds	r3, r5, r5
 8006502:	eb46 0406 	adc.w	r4, r6, r6
 8006506:	461a      	mov	r2, r3
 8006508:	4623      	mov	r3, r4
 800650a:	f7f9 fec1 	bl	8000290 <__aeabi_uldivmod>
 800650e:	4603      	mov	r3, r0
 8006510:	460c      	mov	r4, r1
 8006512:	461a      	mov	r2, r3
 8006514:	4b6a      	ldr	r3, [pc, #424]	; (80066c0 <UART_SetConfig+0x384>)
 8006516:	fba3 1302 	umull	r1, r3, r3, r2
 800651a:	095b      	lsrs	r3, r3, #5
 800651c:	2164      	movs	r1, #100	; 0x64
 800651e:	fb01 f303 	mul.w	r3, r1, r3
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	00db      	lsls	r3, r3, #3
 8006526:	3332      	adds	r3, #50	; 0x32
 8006528:	4a65      	ldr	r2, [pc, #404]	; (80066c0 <UART_SetConfig+0x384>)
 800652a:	fba2 2303 	umull	r2, r3, r2, r3
 800652e:	095b      	lsrs	r3, r3, #5
 8006530:	f003 0207 	and.w	r2, r3, #7
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4442      	add	r2, r8
 800653a:	609a      	str	r2, [r3, #8]
 800653c:	e26f      	b.n	8006a1e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800653e:	f7fe fc69 	bl	8004e14 <HAL_RCC_GetPCLK1Freq>
 8006542:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	461d      	mov	r5, r3
 8006548:	f04f 0600 	mov.w	r6, #0
 800654c:	46a8      	mov	r8, r5
 800654e:	46b1      	mov	r9, r6
 8006550:	eb18 0308 	adds.w	r3, r8, r8
 8006554:	eb49 0409 	adc.w	r4, r9, r9
 8006558:	4698      	mov	r8, r3
 800655a:	46a1      	mov	r9, r4
 800655c:	eb18 0805 	adds.w	r8, r8, r5
 8006560:	eb49 0906 	adc.w	r9, r9, r6
 8006564:	f04f 0100 	mov.w	r1, #0
 8006568:	f04f 0200 	mov.w	r2, #0
 800656c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006570:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006574:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006578:	4688      	mov	r8, r1
 800657a:	4691      	mov	r9, r2
 800657c:	eb18 0005 	adds.w	r0, r8, r5
 8006580:	eb49 0106 	adc.w	r1, r9, r6
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	461d      	mov	r5, r3
 800658a:	f04f 0600 	mov.w	r6, #0
 800658e:	196b      	adds	r3, r5, r5
 8006590:	eb46 0406 	adc.w	r4, r6, r6
 8006594:	461a      	mov	r2, r3
 8006596:	4623      	mov	r3, r4
 8006598:	f7f9 fe7a 	bl	8000290 <__aeabi_uldivmod>
 800659c:	4603      	mov	r3, r0
 800659e:	460c      	mov	r4, r1
 80065a0:	461a      	mov	r2, r3
 80065a2:	4b47      	ldr	r3, [pc, #284]	; (80066c0 <UART_SetConfig+0x384>)
 80065a4:	fba3 2302 	umull	r2, r3, r3, r2
 80065a8:	095b      	lsrs	r3, r3, #5
 80065aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	461d      	mov	r5, r3
 80065b2:	f04f 0600 	mov.w	r6, #0
 80065b6:	46a9      	mov	r9, r5
 80065b8:	46b2      	mov	sl, r6
 80065ba:	eb19 0309 	adds.w	r3, r9, r9
 80065be:	eb4a 040a 	adc.w	r4, sl, sl
 80065c2:	4699      	mov	r9, r3
 80065c4:	46a2      	mov	sl, r4
 80065c6:	eb19 0905 	adds.w	r9, r9, r5
 80065ca:	eb4a 0a06 	adc.w	sl, sl, r6
 80065ce:	f04f 0100 	mov.w	r1, #0
 80065d2:	f04f 0200 	mov.w	r2, #0
 80065d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80065de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80065e2:	4689      	mov	r9, r1
 80065e4:	4692      	mov	sl, r2
 80065e6:	eb19 0005 	adds.w	r0, r9, r5
 80065ea:	eb4a 0106 	adc.w	r1, sl, r6
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	461d      	mov	r5, r3
 80065f4:	f04f 0600 	mov.w	r6, #0
 80065f8:	196b      	adds	r3, r5, r5
 80065fa:	eb46 0406 	adc.w	r4, r6, r6
 80065fe:	461a      	mov	r2, r3
 8006600:	4623      	mov	r3, r4
 8006602:	f7f9 fe45 	bl	8000290 <__aeabi_uldivmod>
 8006606:	4603      	mov	r3, r0
 8006608:	460c      	mov	r4, r1
 800660a:	461a      	mov	r2, r3
 800660c:	4b2c      	ldr	r3, [pc, #176]	; (80066c0 <UART_SetConfig+0x384>)
 800660e:	fba3 1302 	umull	r1, r3, r3, r2
 8006612:	095b      	lsrs	r3, r3, #5
 8006614:	2164      	movs	r1, #100	; 0x64
 8006616:	fb01 f303 	mul.w	r3, r1, r3
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	00db      	lsls	r3, r3, #3
 800661e:	3332      	adds	r3, #50	; 0x32
 8006620:	4a27      	ldr	r2, [pc, #156]	; (80066c0 <UART_SetConfig+0x384>)
 8006622:	fba2 2303 	umull	r2, r3, r2, r3
 8006626:	095b      	lsrs	r3, r3, #5
 8006628:	005b      	lsls	r3, r3, #1
 800662a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800662e:	4498      	add	r8, r3
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	461d      	mov	r5, r3
 8006634:	f04f 0600 	mov.w	r6, #0
 8006638:	46a9      	mov	r9, r5
 800663a:	46b2      	mov	sl, r6
 800663c:	eb19 0309 	adds.w	r3, r9, r9
 8006640:	eb4a 040a 	adc.w	r4, sl, sl
 8006644:	4699      	mov	r9, r3
 8006646:	46a2      	mov	sl, r4
 8006648:	eb19 0905 	adds.w	r9, r9, r5
 800664c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006650:	f04f 0100 	mov.w	r1, #0
 8006654:	f04f 0200 	mov.w	r2, #0
 8006658:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800665c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006660:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006664:	4689      	mov	r9, r1
 8006666:	4692      	mov	sl, r2
 8006668:	eb19 0005 	adds.w	r0, r9, r5
 800666c:	eb4a 0106 	adc.w	r1, sl, r6
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	461d      	mov	r5, r3
 8006676:	f04f 0600 	mov.w	r6, #0
 800667a:	196b      	adds	r3, r5, r5
 800667c:	eb46 0406 	adc.w	r4, r6, r6
 8006680:	461a      	mov	r2, r3
 8006682:	4623      	mov	r3, r4
 8006684:	f7f9 fe04 	bl	8000290 <__aeabi_uldivmod>
 8006688:	4603      	mov	r3, r0
 800668a:	460c      	mov	r4, r1
 800668c:	461a      	mov	r2, r3
 800668e:	4b0c      	ldr	r3, [pc, #48]	; (80066c0 <UART_SetConfig+0x384>)
 8006690:	fba3 1302 	umull	r1, r3, r3, r2
 8006694:	095b      	lsrs	r3, r3, #5
 8006696:	2164      	movs	r1, #100	; 0x64
 8006698:	fb01 f303 	mul.w	r3, r1, r3
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	00db      	lsls	r3, r3, #3
 80066a0:	3332      	adds	r3, #50	; 0x32
 80066a2:	4a07      	ldr	r2, [pc, #28]	; (80066c0 <UART_SetConfig+0x384>)
 80066a4:	fba2 2303 	umull	r2, r3, r2, r3
 80066a8:	095b      	lsrs	r3, r3, #5
 80066aa:	f003 0207 	and.w	r2, r3, #7
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4442      	add	r2, r8
 80066b4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80066b6:	e1b2      	b.n	8006a1e <UART_SetConfig+0x6e2>
 80066b8:	40011000 	.word	0x40011000
 80066bc:	40011400 	.word	0x40011400
 80066c0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4ad7      	ldr	r2, [pc, #860]	; (8006a28 <UART_SetConfig+0x6ec>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d005      	beq.n	80066da <UART_SetConfig+0x39e>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4ad6      	ldr	r2, [pc, #856]	; (8006a2c <UART_SetConfig+0x6f0>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	f040 80d1 	bne.w	800687c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80066da:	f7fe fbaf 	bl	8004e3c <HAL_RCC_GetPCLK2Freq>
 80066de:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	469a      	mov	sl, r3
 80066e4:	f04f 0b00 	mov.w	fp, #0
 80066e8:	46d0      	mov	r8, sl
 80066ea:	46d9      	mov	r9, fp
 80066ec:	eb18 0308 	adds.w	r3, r8, r8
 80066f0:	eb49 0409 	adc.w	r4, r9, r9
 80066f4:	4698      	mov	r8, r3
 80066f6:	46a1      	mov	r9, r4
 80066f8:	eb18 080a 	adds.w	r8, r8, sl
 80066fc:	eb49 090b 	adc.w	r9, r9, fp
 8006700:	f04f 0100 	mov.w	r1, #0
 8006704:	f04f 0200 	mov.w	r2, #0
 8006708:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800670c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006710:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006714:	4688      	mov	r8, r1
 8006716:	4691      	mov	r9, r2
 8006718:	eb1a 0508 	adds.w	r5, sl, r8
 800671c:	eb4b 0609 	adc.w	r6, fp, r9
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	4619      	mov	r1, r3
 8006726:	f04f 0200 	mov.w	r2, #0
 800672a:	f04f 0300 	mov.w	r3, #0
 800672e:	f04f 0400 	mov.w	r4, #0
 8006732:	0094      	lsls	r4, r2, #2
 8006734:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006738:	008b      	lsls	r3, r1, #2
 800673a:	461a      	mov	r2, r3
 800673c:	4623      	mov	r3, r4
 800673e:	4628      	mov	r0, r5
 8006740:	4631      	mov	r1, r6
 8006742:	f7f9 fda5 	bl	8000290 <__aeabi_uldivmod>
 8006746:	4603      	mov	r3, r0
 8006748:	460c      	mov	r4, r1
 800674a:	461a      	mov	r2, r3
 800674c:	4bb8      	ldr	r3, [pc, #736]	; (8006a30 <UART_SetConfig+0x6f4>)
 800674e:	fba3 2302 	umull	r2, r3, r3, r2
 8006752:	095b      	lsrs	r3, r3, #5
 8006754:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	469b      	mov	fp, r3
 800675c:	f04f 0c00 	mov.w	ip, #0
 8006760:	46d9      	mov	r9, fp
 8006762:	46e2      	mov	sl, ip
 8006764:	eb19 0309 	adds.w	r3, r9, r9
 8006768:	eb4a 040a 	adc.w	r4, sl, sl
 800676c:	4699      	mov	r9, r3
 800676e:	46a2      	mov	sl, r4
 8006770:	eb19 090b 	adds.w	r9, r9, fp
 8006774:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006778:	f04f 0100 	mov.w	r1, #0
 800677c:	f04f 0200 	mov.w	r2, #0
 8006780:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006784:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006788:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800678c:	4689      	mov	r9, r1
 800678e:	4692      	mov	sl, r2
 8006790:	eb1b 0509 	adds.w	r5, fp, r9
 8006794:	eb4c 060a 	adc.w	r6, ip, sl
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	4619      	mov	r1, r3
 800679e:	f04f 0200 	mov.w	r2, #0
 80067a2:	f04f 0300 	mov.w	r3, #0
 80067a6:	f04f 0400 	mov.w	r4, #0
 80067aa:	0094      	lsls	r4, r2, #2
 80067ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80067b0:	008b      	lsls	r3, r1, #2
 80067b2:	461a      	mov	r2, r3
 80067b4:	4623      	mov	r3, r4
 80067b6:	4628      	mov	r0, r5
 80067b8:	4631      	mov	r1, r6
 80067ba:	f7f9 fd69 	bl	8000290 <__aeabi_uldivmod>
 80067be:	4603      	mov	r3, r0
 80067c0:	460c      	mov	r4, r1
 80067c2:	461a      	mov	r2, r3
 80067c4:	4b9a      	ldr	r3, [pc, #616]	; (8006a30 <UART_SetConfig+0x6f4>)
 80067c6:	fba3 1302 	umull	r1, r3, r3, r2
 80067ca:	095b      	lsrs	r3, r3, #5
 80067cc:	2164      	movs	r1, #100	; 0x64
 80067ce:	fb01 f303 	mul.w	r3, r1, r3
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	011b      	lsls	r3, r3, #4
 80067d6:	3332      	adds	r3, #50	; 0x32
 80067d8:	4a95      	ldr	r2, [pc, #596]	; (8006a30 <UART_SetConfig+0x6f4>)
 80067da:	fba2 2303 	umull	r2, r3, r2, r3
 80067de:	095b      	lsrs	r3, r3, #5
 80067e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067e4:	4498      	add	r8, r3
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	469b      	mov	fp, r3
 80067ea:	f04f 0c00 	mov.w	ip, #0
 80067ee:	46d9      	mov	r9, fp
 80067f0:	46e2      	mov	sl, ip
 80067f2:	eb19 0309 	adds.w	r3, r9, r9
 80067f6:	eb4a 040a 	adc.w	r4, sl, sl
 80067fa:	4699      	mov	r9, r3
 80067fc:	46a2      	mov	sl, r4
 80067fe:	eb19 090b 	adds.w	r9, r9, fp
 8006802:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006806:	f04f 0100 	mov.w	r1, #0
 800680a:	f04f 0200 	mov.w	r2, #0
 800680e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006812:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006816:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800681a:	4689      	mov	r9, r1
 800681c:	4692      	mov	sl, r2
 800681e:	eb1b 0509 	adds.w	r5, fp, r9
 8006822:	eb4c 060a 	adc.w	r6, ip, sl
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	4619      	mov	r1, r3
 800682c:	f04f 0200 	mov.w	r2, #0
 8006830:	f04f 0300 	mov.w	r3, #0
 8006834:	f04f 0400 	mov.w	r4, #0
 8006838:	0094      	lsls	r4, r2, #2
 800683a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800683e:	008b      	lsls	r3, r1, #2
 8006840:	461a      	mov	r2, r3
 8006842:	4623      	mov	r3, r4
 8006844:	4628      	mov	r0, r5
 8006846:	4631      	mov	r1, r6
 8006848:	f7f9 fd22 	bl	8000290 <__aeabi_uldivmod>
 800684c:	4603      	mov	r3, r0
 800684e:	460c      	mov	r4, r1
 8006850:	461a      	mov	r2, r3
 8006852:	4b77      	ldr	r3, [pc, #476]	; (8006a30 <UART_SetConfig+0x6f4>)
 8006854:	fba3 1302 	umull	r1, r3, r3, r2
 8006858:	095b      	lsrs	r3, r3, #5
 800685a:	2164      	movs	r1, #100	; 0x64
 800685c:	fb01 f303 	mul.w	r3, r1, r3
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	011b      	lsls	r3, r3, #4
 8006864:	3332      	adds	r3, #50	; 0x32
 8006866:	4a72      	ldr	r2, [pc, #456]	; (8006a30 <UART_SetConfig+0x6f4>)
 8006868:	fba2 2303 	umull	r2, r3, r2, r3
 800686c:	095b      	lsrs	r3, r3, #5
 800686e:	f003 020f 	and.w	r2, r3, #15
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4442      	add	r2, r8
 8006878:	609a      	str	r2, [r3, #8]
 800687a:	e0d0      	b.n	8006a1e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800687c:	f7fe faca 	bl	8004e14 <HAL_RCC_GetPCLK1Freq>
 8006880:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	469a      	mov	sl, r3
 8006886:	f04f 0b00 	mov.w	fp, #0
 800688a:	46d0      	mov	r8, sl
 800688c:	46d9      	mov	r9, fp
 800688e:	eb18 0308 	adds.w	r3, r8, r8
 8006892:	eb49 0409 	adc.w	r4, r9, r9
 8006896:	4698      	mov	r8, r3
 8006898:	46a1      	mov	r9, r4
 800689a:	eb18 080a 	adds.w	r8, r8, sl
 800689e:	eb49 090b 	adc.w	r9, r9, fp
 80068a2:	f04f 0100 	mov.w	r1, #0
 80068a6:	f04f 0200 	mov.w	r2, #0
 80068aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80068ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80068b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80068b6:	4688      	mov	r8, r1
 80068b8:	4691      	mov	r9, r2
 80068ba:	eb1a 0508 	adds.w	r5, sl, r8
 80068be:	eb4b 0609 	adc.w	r6, fp, r9
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	4619      	mov	r1, r3
 80068c8:	f04f 0200 	mov.w	r2, #0
 80068cc:	f04f 0300 	mov.w	r3, #0
 80068d0:	f04f 0400 	mov.w	r4, #0
 80068d4:	0094      	lsls	r4, r2, #2
 80068d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80068da:	008b      	lsls	r3, r1, #2
 80068dc:	461a      	mov	r2, r3
 80068de:	4623      	mov	r3, r4
 80068e0:	4628      	mov	r0, r5
 80068e2:	4631      	mov	r1, r6
 80068e4:	f7f9 fcd4 	bl	8000290 <__aeabi_uldivmod>
 80068e8:	4603      	mov	r3, r0
 80068ea:	460c      	mov	r4, r1
 80068ec:	461a      	mov	r2, r3
 80068ee:	4b50      	ldr	r3, [pc, #320]	; (8006a30 <UART_SetConfig+0x6f4>)
 80068f0:	fba3 2302 	umull	r2, r3, r3, r2
 80068f4:	095b      	lsrs	r3, r3, #5
 80068f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	469b      	mov	fp, r3
 80068fe:	f04f 0c00 	mov.w	ip, #0
 8006902:	46d9      	mov	r9, fp
 8006904:	46e2      	mov	sl, ip
 8006906:	eb19 0309 	adds.w	r3, r9, r9
 800690a:	eb4a 040a 	adc.w	r4, sl, sl
 800690e:	4699      	mov	r9, r3
 8006910:	46a2      	mov	sl, r4
 8006912:	eb19 090b 	adds.w	r9, r9, fp
 8006916:	eb4a 0a0c 	adc.w	sl, sl, ip
 800691a:	f04f 0100 	mov.w	r1, #0
 800691e:	f04f 0200 	mov.w	r2, #0
 8006922:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006926:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800692a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800692e:	4689      	mov	r9, r1
 8006930:	4692      	mov	sl, r2
 8006932:	eb1b 0509 	adds.w	r5, fp, r9
 8006936:	eb4c 060a 	adc.w	r6, ip, sl
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	4619      	mov	r1, r3
 8006940:	f04f 0200 	mov.w	r2, #0
 8006944:	f04f 0300 	mov.w	r3, #0
 8006948:	f04f 0400 	mov.w	r4, #0
 800694c:	0094      	lsls	r4, r2, #2
 800694e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006952:	008b      	lsls	r3, r1, #2
 8006954:	461a      	mov	r2, r3
 8006956:	4623      	mov	r3, r4
 8006958:	4628      	mov	r0, r5
 800695a:	4631      	mov	r1, r6
 800695c:	f7f9 fc98 	bl	8000290 <__aeabi_uldivmod>
 8006960:	4603      	mov	r3, r0
 8006962:	460c      	mov	r4, r1
 8006964:	461a      	mov	r2, r3
 8006966:	4b32      	ldr	r3, [pc, #200]	; (8006a30 <UART_SetConfig+0x6f4>)
 8006968:	fba3 1302 	umull	r1, r3, r3, r2
 800696c:	095b      	lsrs	r3, r3, #5
 800696e:	2164      	movs	r1, #100	; 0x64
 8006970:	fb01 f303 	mul.w	r3, r1, r3
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	011b      	lsls	r3, r3, #4
 8006978:	3332      	adds	r3, #50	; 0x32
 800697a:	4a2d      	ldr	r2, [pc, #180]	; (8006a30 <UART_SetConfig+0x6f4>)
 800697c:	fba2 2303 	umull	r2, r3, r2, r3
 8006980:	095b      	lsrs	r3, r3, #5
 8006982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006986:	4498      	add	r8, r3
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	469b      	mov	fp, r3
 800698c:	f04f 0c00 	mov.w	ip, #0
 8006990:	46d9      	mov	r9, fp
 8006992:	46e2      	mov	sl, ip
 8006994:	eb19 0309 	adds.w	r3, r9, r9
 8006998:	eb4a 040a 	adc.w	r4, sl, sl
 800699c:	4699      	mov	r9, r3
 800699e:	46a2      	mov	sl, r4
 80069a0:	eb19 090b 	adds.w	r9, r9, fp
 80069a4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80069a8:	f04f 0100 	mov.w	r1, #0
 80069ac:	f04f 0200 	mov.w	r2, #0
 80069b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80069b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80069bc:	4689      	mov	r9, r1
 80069be:	4692      	mov	sl, r2
 80069c0:	eb1b 0509 	adds.w	r5, fp, r9
 80069c4:	eb4c 060a 	adc.w	r6, ip, sl
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	4619      	mov	r1, r3
 80069ce:	f04f 0200 	mov.w	r2, #0
 80069d2:	f04f 0300 	mov.w	r3, #0
 80069d6:	f04f 0400 	mov.w	r4, #0
 80069da:	0094      	lsls	r4, r2, #2
 80069dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80069e0:	008b      	lsls	r3, r1, #2
 80069e2:	461a      	mov	r2, r3
 80069e4:	4623      	mov	r3, r4
 80069e6:	4628      	mov	r0, r5
 80069e8:	4631      	mov	r1, r6
 80069ea:	f7f9 fc51 	bl	8000290 <__aeabi_uldivmod>
 80069ee:	4603      	mov	r3, r0
 80069f0:	460c      	mov	r4, r1
 80069f2:	461a      	mov	r2, r3
 80069f4:	4b0e      	ldr	r3, [pc, #56]	; (8006a30 <UART_SetConfig+0x6f4>)
 80069f6:	fba3 1302 	umull	r1, r3, r3, r2
 80069fa:	095b      	lsrs	r3, r3, #5
 80069fc:	2164      	movs	r1, #100	; 0x64
 80069fe:	fb01 f303 	mul.w	r3, r1, r3
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	011b      	lsls	r3, r3, #4
 8006a06:	3332      	adds	r3, #50	; 0x32
 8006a08:	4a09      	ldr	r2, [pc, #36]	; (8006a30 <UART_SetConfig+0x6f4>)
 8006a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0e:	095b      	lsrs	r3, r3, #5
 8006a10:	f003 020f 	and.w	r2, r3, #15
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4442      	add	r2, r8
 8006a1a:	609a      	str	r2, [r3, #8]
}
 8006a1c:	e7ff      	b.n	8006a1e <UART_SetConfig+0x6e2>
 8006a1e:	bf00      	nop
 8006a20:	3714      	adds	r7, #20
 8006a22:	46bd      	mov	sp, r7
 8006a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a28:	40011000 	.word	0x40011000
 8006a2c:	40011400 	.word	0x40011400
 8006a30:	51eb851f 	.word	0x51eb851f

08006a34 <__errno>:
 8006a34:	4b01      	ldr	r3, [pc, #4]	; (8006a3c <__errno+0x8>)
 8006a36:	6818      	ldr	r0, [r3, #0]
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	20000014 	.word	0x20000014

08006a40 <__libc_init_array>:
 8006a40:	b570      	push	{r4, r5, r6, lr}
 8006a42:	4e0d      	ldr	r6, [pc, #52]	; (8006a78 <__libc_init_array+0x38>)
 8006a44:	4c0d      	ldr	r4, [pc, #52]	; (8006a7c <__libc_init_array+0x3c>)
 8006a46:	1ba4      	subs	r4, r4, r6
 8006a48:	10a4      	asrs	r4, r4, #2
 8006a4a:	2500      	movs	r5, #0
 8006a4c:	42a5      	cmp	r5, r4
 8006a4e:	d109      	bne.n	8006a64 <__libc_init_array+0x24>
 8006a50:	4e0b      	ldr	r6, [pc, #44]	; (8006a80 <__libc_init_array+0x40>)
 8006a52:	4c0c      	ldr	r4, [pc, #48]	; (8006a84 <__libc_init_array+0x44>)
 8006a54:	f000 fc5a 	bl	800730c <_init>
 8006a58:	1ba4      	subs	r4, r4, r6
 8006a5a:	10a4      	asrs	r4, r4, #2
 8006a5c:	2500      	movs	r5, #0
 8006a5e:	42a5      	cmp	r5, r4
 8006a60:	d105      	bne.n	8006a6e <__libc_init_array+0x2e>
 8006a62:	bd70      	pop	{r4, r5, r6, pc}
 8006a64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a68:	4798      	blx	r3
 8006a6a:	3501      	adds	r5, #1
 8006a6c:	e7ee      	b.n	8006a4c <__libc_init_array+0xc>
 8006a6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a72:	4798      	blx	r3
 8006a74:	3501      	adds	r5, #1
 8006a76:	e7f2      	b.n	8006a5e <__libc_init_array+0x1e>
 8006a78:	08007634 	.word	0x08007634
 8006a7c:	08007634 	.word	0x08007634
 8006a80:	08007634 	.word	0x08007634
 8006a84:	08007638 	.word	0x08007638

08006a88 <memset>:
 8006a88:	4402      	add	r2, r0
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d100      	bne.n	8006a92 <memset+0xa>
 8006a90:	4770      	bx	lr
 8006a92:	f803 1b01 	strb.w	r1, [r3], #1
 8006a96:	e7f9      	b.n	8006a8c <memset+0x4>

08006a98 <sniprintf>:
 8006a98:	b40c      	push	{r2, r3}
 8006a9a:	b530      	push	{r4, r5, lr}
 8006a9c:	4b17      	ldr	r3, [pc, #92]	; (8006afc <sniprintf+0x64>)
 8006a9e:	1e0c      	subs	r4, r1, #0
 8006aa0:	b09d      	sub	sp, #116	; 0x74
 8006aa2:	681d      	ldr	r5, [r3, #0]
 8006aa4:	da08      	bge.n	8006ab8 <sniprintf+0x20>
 8006aa6:	238b      	movs	r3, #139	; 0x8b
 8006aa8:	602b      	str	r3, [r5, #0]
 8006aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8006aae:	b01d      	add	sp, #116	; 0x74
 8006ab0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ab4:	b002      	add	sp, #8
 8006ab6:	4770      	bx	lr
 8006ab8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006abc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006ac0:	bf14      	ite	ne
 8006ac2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006ac6:	4623      	moveq	r3, r4
 8006ac8:	9304      	str	r3, [sp, #16]
 8006aca:	9307      	str	r3, [sp, #28]
 8006acc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ad0:	9002      	str	r0, [sp, #8]
 8006ad2:	9006      	str	r0, [sp, #24]
 8006ad4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006ad8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006ada:	ab21      	add	r3, sp, #132	; 0x84
 8006adc:	a902      	add	r1, sp, #8
 8006ade:	4628      	mov	r0, r5
 8006ae0:	9301      	str	r3, [sp, #4]
 8006ae2:	f000 f887 	bl	8006bf4 <_svfiprintf_r>
 8006ae6:	1c43      	adds	r3, r0, #1
 8006ae8:	bfbc      	itt	lt
 8006aea:	238b      	movlt	r3, #139	; 0x8b
 8006aec:	602b      	strlt	r3, [r5, #0]
 8006aee:	2c00      	cmp	r4, #0
 8006af0:	d0dd      	beq.n	8006aae <sniprintf+0x16>
 8006af2:	9b02      	ldr	r3, [sp, #8]
 8006af4:	2200      	movs	r2, #0
 8006af6:	701a      	strb	r2, [r3, #0]
 8006af8:	e7d9      	b.n	8006aae <sniprintf+0x16>
 8006afa:	bf00      	nop
 8006afc:	20000014 	.word	0x20000014

08006b00 <siprintf>:
 8006b00:	b40e      	push	{r1, r2, r3}
 8006b02:	b500      	push	{lr}
 8006b04:	b09c      	sub	sp, #112	; 0x70
 8006b06:	ab1d      	add	r3, sp, #116	; 0x74
 8006b08:	9002      	str	r0, [sp, #8]
 8006b0a:	9006      	str	r0, [sp, #24]
 8006b0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b10:	4809      	ldr	r0, [pc, #36]	; (8006b38 <siprintf+0x38>)
 8006b12:	9107      	str	r1, [sp, #28]
 8006b14:	9104      	str	r1, [sp, #16]
 8006b16:	4909      	ldr	r1, [pc, #36]	; (8006b3c <siprintf+0x3c>)
 8006b18:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b1c:	9105      	str	r1, [sp, #20]
 8006b1e:	6800      	ldr	r0, [r0, #0]
 8006b20:	9301      	str	r3, [sp, #4]
 8006b22:	a902      	add	r1, sp, #8
 8006b24:	f000 f866 	bl	8006bf4 <_svfiprintf_r>
 8006b28:	9b02      	ldr	r3, [sp, #8]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	701a      	strb	r2, [r3, #0]
 8006b2e:	b01c      	add	sp, #112	; 0x70
 8006b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b34:	b003      	add	sp, #12
 8006b36:	4770      	bx	lr
 8006b38:	20000014 	.word	0x20000014
 8006b3c:	ffff0208 	.word	0xffff0208

08006b40 <__ssputs_r>:
 8006b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b44:	688e      	ldr	r6, [r1, #8]
 8006b46:	429e      	cmp	r6, r3
 8006b48:	4682      	mov	sl, r0
 8006b4a:	460c      	mov	r4, r1
 8006b4c:	4690      	mov	r8, r2
 8006b4e:	4699      	mov	r9, r3
 8006b50:	d837      	bhi.n	8006bc2 <__ssputs_r+0x82>
 8006b52:	898a      	ldrh	r2, [r1, #12]
 8006b54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b58:	d031      	beq.n	8006bbe <__ssputs_r+0x7e>
 8006b5a:	6825      	ldr	r5, [r4, #0]
 8006b5c:	6909      	ldr	r1, [r1, #16]
 8006b5e:	1a6f      	subs	r7, r5, r1
 8006b60:	6965      	ldr	r5, [r4, #20]
 8006b62:	2302      	movs	r3, #2
 8006b64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b68:	fb95 f5f3 	sdiv	r5, r5, r3
 8006b6c:	f109 0301 	add.w	r3, r9, #1
 8006b70:	443b      	add	r3, r7
 8006b72:	429d      	cmp	r5, r3
 8006b74:	bf38      	it	cc
 8006b76:	461d      	movcc	r5, r3
 8006b78:	0553      	lsls	r3, r2, #21
 8006b7a:	d530      	bpl.n	8006bde <__ssputs_r+0x9e>
 8006b7c:	4629      	mov	r1, r5
 8006b7e:	f000 fb2b 	bl	80071d8 <_malloc_r>
 8006b82:	4606      	mov	r6, r0
 8006b84:	b950      	cbnz	r0, 8006b9c <__ssputs_r+0x5c>
 8006b86:	230c      	movs	r3, #12
 8006b88:	f8ca 3000 	str.w	r3, [sl]
 8006b8c:	89a3      	ldrh	r3, [r4, #12]
 8006b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b92:	81a3      	strh	r3, [r4, #12]
 8006b94:	f04f 30ff 	mov.w	r0, #4294967295
 8006b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b9c:	463a      	mov	r2, r7
 8006b9e:	6921      	ldr	r1, [r4, #16]
 8006ba0:	f000 faa8 	bl	80070f4 <memcpy>
 8006ba4:	89a3      	ldrh	r3, [r4, #12]
 8006ba6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bae:	81a3      	strh	r3, [r4, #12]
 8006bb0:	6126      	str	r6, [r4, #16]
 8006bb2:	6165      	str	r5, [r4, #20]
 8006bb4:	443e      	add	r6, r7
 8006bb6:	1bed      	subs	r5, r5, r7
 8006bb8:	6026      	str	r6, [r4, #0]
 8006bba:	60a5      	str	r5, [r4, #8]
 8006bbc:	464e      	mov	r6, r9
 8006bbe:	454e      	cmp	r6, r9
 8006bc0:	d900      	bls.n	8006bc4 <__ssputs_r+0x84>
 8006bc2:	464e      	mov	r6, r9
 8006bc4:	4632      	mov	r2, r6
 8006bc6:	4641      	mov	r1, r8
 8006bc8:	6820      	ldr	r0, [r4, #0]
 8006bca:	f000 fa9e 	bl	800710a <memmove>
 8006bce:	68a3      	ldr	r3, [r4, #8]
 8006bd0:	1b9b      	subs	r3, r3, r6
 8006bd2:	60a3      	str	r3, [r4, #8]
 8006bd4:	6823      	ldr	r3, [r4, #0]
 8006bd6:	441e      	add	r6, r3
 8006bd8:	6026      	str	r6, [r4, #0]
 8006bda:	2000      	movs	r0, #0
 8006bdc:	e7dc      	b.n	8006b98 <__ssputs_r+0x58>
 8006bde:	462a      	mov	r2, r5
 8006be0:	f000 fb54 	bl	800728c <_realloc_r>
 8006be4:	4606      	mov	r6, r0
 8006be6:	2800      	cmp	r0, #0
 8006be8:	d1e2      	bne.n	8006bb0 <__ssputs_r+0x70>
 8006bea:	6921      	ldr	r1, [r4, #16]
 8006bec:	4650      	mov	r0, sl
 8006bee:	f000 faa5 	bl	800713c <_free_r>
 8006bf2:	e7c8      	b.n	8006b86 <__ssputs_r+0x46>

08006bf4 <_svfiprintf_r>:
 8006bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf8:	461d      	mov	r5, r3
 8006bfa:	898b      	ldrh	r3, [r1, #12]
 8006bfc:	061f      	lsls	r7, r3, #24
 8006bfe:	b09d      	sub	sp, #116	; 0x74
 8006c00:	4680      	mov	r8, r0
 8006c02:	460c      	mov	r4, r1
 8006c04:	4616      	mov	r6, r2
 8006c06:	d50f      	bpl.n	8006c28 <_svfiprintf_r+0x34>
 8006c08:	690b      	ldr	r3, [r1, #16]
 8006c0a:	b96b      	cbnz	r3, 8006c28 <_svfiprintf_r+0x34>
 8006c0c:	2140      	movs	r1, #64	; 0x40
 8006c0e:	f000 fae3 	bl	80071d8 <_malloc_r>
 8006c12:	6020      	str	r0, [r4, #0]
 8006c14:	6120      	str	r0, [r4, #16]
 8006c16:	b928      	cbnz	r0, 8006c24 <_svfiprintf_r+0x30>
 8006c18:	230c      	movs	r3, #12
 8006c1a:	f8c8 3000 	str.w	r3, [r8]
 8006c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c22:	e0c8      	b.n	8006db6 <_svfiprintf_r+0x1c2>
 8006c24:	2340      	movs	r3, #64	; 0x40
 8006c26:	6163      	str	r3, [r4, #20]
 8006c28:	2300      	movs	r3, #0
 8006c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c2c:	2320      	movs	r3, #32
 8006c2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c32:	2330      	movs	r3, #48	; 0x30
 8006c34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c38:	9503      	str	r5, [sp, #12]
 8006c3a:	f04f 0b01 	mov.w	fp, #1
 8006c3e:	4637      	mov	r7, r6
 8006c40:	463d      	mov	r5, r7
 8006c42:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006c46:	b10b      	cbz	r3, 8006c4c <_svfiprintf_r+0x58>
 8006c48:	2b25      	cmp	r3, #37	; 0x25
 8006c4a:	d13e      	bne.n	8006cca <_svfiprintf_r+0xd6>
 8006c4c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006c50:	d00b      	beq.n	8006c6a <_svfiprintf_r+0x76>
 8006c52:	4653      	mov	r3, sl
 8006c54:	4632      	mov	r2, r6
 8006c56:	4621      	mov	r1, r4
 8006c58:	4640      	mov	r0, r8
 8006c5a:	f7ff ff71 	bl	8006b40 <__ssputs_r>
 8006c5e:	3001      	adds	r0, #1
 8006c60:	f000 80a4 	beq.w	8006dac <_svfiprintf_r+0x1b8>
 8006c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c66:	4453      	add	r3, sl
 8006c68:	9309      	str	r3, [sp, #36]	; 0x24
 8006c6a:	783b      	ldrb	r3, [r7, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f000 809d 	beq.w	8006dac <_svfiprintf_r+0x1b8>
 8006c72:	2300      	movs	r3, #0
 8006c74:	f04f 32ff 	mov.w	r2, #4294967295
 8006c78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c7c:	9304      	str	r3, [sp, #16]
 8006c7e:	9307      	str	r3, [sp, #28]
 8006c80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c84:	931a      	str	r3, [sp, #104]	; 0x68
 8006c86:	462f      	mov	r7, r5
 8006c88:	2205      	movs	r2, #5
 8006c8a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006c8e:	4850      	ldr	r0, [pc, #320]	; (8006dd0 <_svfiprintf_r+0x1dc>)
 8006c90:	f7f9 faae 	bl	80001f0 <memchr>
 8006c94:	9b04      	ldr	r3, [sp, #16]
 8006c96:	b9d0      	cbnz	r0, 8006cce <_svfiprintf_r+0xda>
 8006c98:	06d9      	lsls	r1, r3, #27
 8006c9a:	bf44      	itt	mi
 8006c9c:	2220      	movmi	r2, #32
 8006c9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006ca2:	071a      	lsls	r2, r3, #28
 8006ca4:	bf44      	itt	mi
 8006ca6:	222b      	movmi	r2, #43	; 0x2b
 8006ca8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006cac:	782a      	ldrb	r2, [r5, #0]
 8006cae:	2a2a      	cmp	r2, #42	; 0x2a
 8006cb0:	d015      	beq.n	8006cde <_svfiprintf_r+0xea>
 8006cb2:	9a07      	ldr	r2, [sp, #28]
 8006cb4:	462f      	mov	r7, r5
 8006cb6:	2000      	movs	r0, #0
 8006cb8:	250a      	movs	r5, #10
 8006cba:	4639      	mov	r1, r7
 8006cbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cc0:	3b30      	subs	r3, #48	; 0x30
 8006cc2:	2b09      	cmp	r3, #9
 8006cc4:	d94d      	bls.n	8006d62 <_svfiprintf_r+0x16e>
 8006cc6:	b1b8      	cbz	r0, 8006cf8 <_svfiprintf_r+0x104>
 8006cc8:	e00f      	b.n	8006cea <_svfiprintf_r+0xf6>
 8006cca:	462f      	mov	r7, r5
 8006ccc:	e7b8      	b.n	8006c40 <_svfiprintf_r+0x4c>
 8006cce:	4a40      	ldr	r2, [pc, #256]	; (8006dd0 <_svfiprintf_r+0x1dc>)
 8006cd0:	1a80      	subs	r0, r0, r2
 8006cd2:	fa0b f000 	lsl.w	r0, fp, r0
 8006cd6:	4318      	orrs	r0, r3
 8006cd8:	9004      	str	r0, [sp, #16]
 8006cda:	463d      	mov	r5, r7
 8006cdc:	e7d3      	b.n	8006c86 <_svfiprintf_r+0x92>
 8006cde:	9a03      	ldr	r2, [sp, #12]
 8006ce0:	1d11      	adds	r1, r2, #4
 8006ce2:	6812      	ldr	r2, [r2, #0]
 8006ce4:	9103      	str	r1, [sp, #12]
 8006ce6:	2a00      	cmp	r2, #0
 8006ce8:	db01      	blt.n	8006cee <_svfiprintf_r+0xfa>
 8006cea:	9207      	str	r2, [sp, #28]
 8006cec:	e004      	b.n	8006cf8 <_svfiprintf_r+0x104>
 8006cee:	4252      	negs	r2, r2
 8006cf0:	f043 0302 	orr.w	r3, r3, #2
 8006cf4:	9207      	str	r2, [sp, #28]
 8006cf6:	9304      	str	r3, [sp, #16]
 8006cf8:	783b      	ldrb	r3, [r7, #0]
 8006cfa:	2b2e      	cmp	r3, #46	; 0x2e
 8006cfc:	d10c      	bne.n	8006d18 <_svfiprintf_r+0x124>
 8006cfe:	787b      	ldrb	r3, [r7, #1]
 8006d00:	2b2a      	cmp	r3, #42	; 0x2a
 8006d02:	d133      	bne.n	8006d6c <_svfiprintf_r+0x178>
 8006d04:	9b03      	ldr	r3, [sp, #12]
 8006d06:	1d1a      	adds	r2, r3, #4
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	9203      	str	r2, [sp, #12]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	bfb8      	it	lt
 8006d10:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d14:	3702      	adds	r7, #2
 8006d16:	9305      	str	r3, [sp, #20]
 8006d18:	4d2e      	ldr	r5, [pc, #184]	; (8006dd4 <_svfiprintf_r+0x1e0>)
 8006d1a:	7839      	ldrb	r1, [r7, #0]
 8006d1c:	2203      	movs	r2, #3
 8006d1e:	4628      	mov	r0, r5
 8006d20:	f7f9 fa66 	bl	80001f0 <memchr>
 8006d24:	b138      	cbz	r0, 8006d36 <_svfiprintf_r+0x142>
 8006d26:	2340      	movs	r3, #64	; 0x40
 8006d28:	1b40      	subs	r0, r0, r5
 8006d2a:	fa03 f000 	lsl.w	r0, r3, r0
 8006d2e:	9b04      	ldr	r3, [sp, #16]
 8006d30:	4303      	orrs	r3, r0
 8006d32:	3701      	adds	r7, #1
 8006d34:	9304      	str	r3, [sp, #16]
 8006d36:	7839      	ldrb	r1, [r7, #0]
 8006d38:	4827      	ldr	r0, [pc, #156]	; (8006dd8 <_svfiprintf_r+0x1e4>)
 8006d3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d3e:	2206      	movs	r2, #6
 8006d40:	1c7e      	adds	r6, r7, #1
 8006d42:	f7f9 fa55 	bl	80001f0 <memchr>
 8006d46:	2800      	cmp	r0, #0
 8006d48:	d038      	beq.n	8006dbc <_svfiprintf_r+0x1c8>
 8006d4a:	4b24      	ldr	r3, [pc, #144]	; (8006ddc <_svfiprintf_r+0x1e8>)
 8006d4c:	bb13      	cbnz	r3, 8006d94 <_svfiprintf_r+0x1a0>
 8006d4e:	9b03      	ldr	r3, [sp, #12]
 8006d50:	3307      	adds	r3, #7
 8006d52:	f023 0307 	bic.w	r3, r3, #7
 8006d56:	3308      	adds	r3, #8
 8006d58:	9303      	str	r3, [sp, #12]
 8006d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d5c:	444b      	add	r3, r9
 8006d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d60:	e76d      	b.n	8006c3e <_svfiprintf_r+0x4a>
 8006d62:	fb05 3202 	mla	r2, r5, r2, r3
 8006d66:	2001      	movs	r0, #1
 8006d68:	460f      	mov	r7, r1
 8006d6a:	e7a6      	b.n	8006cba <_svfiprintf_r+0xc6>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	3701      	adds	r7, #1
 8006d70:	9305      	str	r3, [sp, #20]
 8006d72:	4619      	mov	r1, r3
 8006d74:	250a      	movs	r5, #10
 8006d76:	4638      	mov	r0, r7
 8006d78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d7c:	3a30      	subs	r2, #48	; 0x30
 8006d7e:	2a09      	cmp	r2, #9
 8006d80:	d903      	bls.n	8006d8a <_svfiprintf_r+0x196>
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d0c8      	beq.n	8006d18 <_svfiprintf_r+0x124>
 8006d86:	9105      	str	r1, [sp, #20]
 8006d88:	e7c6      	b.n	8006d18 <_svfiprintf_r+0x124>
 8006d8a:	fb05 2101 	mla	r1, r5, r1, r2
 8006d8e:	2301      	movs	r3, #1
 8006d90:	4607      	mov	r7, r0
 8006d92:	e7f0      	b.n	8006d76 <_svfiprintf_r+0x182>
 8006d94:	ab03      	add	r3, sp, #12
 8006d96:	9300      	str	r3, [sp, #0]
 8006d98:	4622      	mov	r2, r4
 8006d9a:	4b11      	ldr	r3, [pc, #68]	; (8006de0 <_svfiprintf_r+0x1ec>)
 8006d9c:	a904      	add	r1, sp, #16
 8006d9e:	4640      	mov	r0, r8
 8006da0:	f3af 8000 	nop.w
 8006da4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006da8:	4681      	mov	r9, r0
 8006daa:	d1d6      	bne.n	8006d5a <_svfiprintf_r+0x166>
 8006dac:	89a3      	ldrh	r3, [r4, #12]
 8006dae:	065b      	lsls	r3, r3, #25
 8006db0:	f53f af35 	bmi.w	8006c1e <_svfiprintf_r+0x2a>
 8006db4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006db6:	b01d      	add	sp, #116	; 0x74
 8006db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dbc:	ab03      	add	r3, sp, #12
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	4622      	mov	r2, r4
 8006dc2:	4b07      	ldr	r3, [pc, #28]	; (8006de0 <_svfiprintf_r+0x1ec>)
 8006dc4:	a904      	add	r1, sp, #16
 8006dc6:	4640      	mov	r0, r8
 8006dc8:	f000 f882 	bl	8006ed0 <_printf_i>
 8006dcc:	e7ea      	b.n	8006da4 <_svfiprintf_r+0x1b0>
 8006dce:	bf00      	nop
 8006dd0:	080075f8 	.word	0x080075f8
 8006dd4:	080075fe 	.word	0x080075fe
 8006dd8:	08007602 	.word	0x08007602
 8006ddc:	00000000 	.word	0x00000000
 8006de0:	08006b41 	.word	0x08006b41

08006de4 <_printf_common>:
 8006de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006de8:	4691      	mov	r9, r2
 8006dea:	461f      	mov	r7, r3
 8006dec:	688a      	ldr	r2, [r1, #8]
 8006dee:	690b      	ldr	r3, [r1, #16]
 8006df0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006df4:	4293      	cmp	r3, r2
 8006df6:	bfb8      	it	lt
 8006df8:	4613      	movlt	r3, r2
 8006dfa:	f8c9 3000 	str.w	r3, [r9]
 8006dfe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e02:	4606      	mov	r6, r0
 8006e04:	460c      	mov	r4, r1
 8006e06:	b112      	cbz	r2, 8006e0e <_printf_common+0x2a>
 8006e08:	3301      	adds	r3, #1
 8006e0a:	f8c9 3000 	str.w	r3, [r9]
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	0699      	lsls	r1, r3, #26
 8006e12:	bf42      	ittt	mi
 8006e14:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006e18:	3302      	addmi	r3, #2
 8006e1a:	f8c9 3000 	strmi.w	r3, [r9]
 8006e1e:	6825      	ldr	r5, [r4, #0]
 8006e20:	f015 0506 	ands.w	r5, r5, #6
 8006e24:	d107      	bne.n	8006e36 <_printf_common+0x52>
 8006e26:	f104 0a19 	add.w	sl, r4, #25
 8006e2a:	68e3      	ldr	r3, [r4, #12]
 8006e2c:	f8d9 2000 	ldr.w	r2, [r9]
 8006e30:	1a9b      	subs	r3, r3, r2
 8006e32:	42ab      	cmp	r3, r5
 8006e34:	dc28      	bgt.n	8006e88 <_printf_common+0xa4>
 8006e36:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006e3a:	6822      	ldr	r2, [r4, #0]
 8006e3c:	3300      	adds	r3, #0
 8006e3e:	bf18      	it	ne
 8006e40:	2301      	movne	r3, #1
 8006e42:	0692      	lsls	r2, r2, #26
 8006e44:	d42d      	bmi.n	8006ea2 <_printf_common+0xbe>
 8006e46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e4a:	4639      	mov	r1, r7
 8006e4c:	4630      	mov	r0, r6
 8006e4e:	47c0      	blx	r8
 8006e50:	3001      	adds	r0, #1
 8006e52:	d020      	beq.n	8006e96 <_printf_common+0xb2>
 8006e54:	6823      	ldr	r3, [r4, #0]
 8006e56:	68e5      	ldr	r5, [r4, #12]
 8006e58:	f8d9 2000 	ldr.w	r2, [r9]
 8006e5c:	f003 0306 	and.w	r3, r3, #6
 8006e60:	2b04      	cmp	r3, #4
 8006e62:	bf08      	it	eq
 8006e64:	1aad      	subeq	r5, r5, r2
 8006e66:	68a3      	ldr	r3, [r4, #8]
 8006e68:	6922      	ldr	r2, [r4, #16]
 8006e6a:	bf0c      	ite	eq
 8006e6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e70:	2500      	movne	r5, #0
 8006e72:	4293      	cmp	r3, r2
 8006e74:	bfc4      	itt	gt
 8006e76:	1a9b      	subgt	r3, r3, r2
 8006e78:	18ed      	addgt	r5, r5, r3
 8006e7a:	f04f 0900 	mov.w	r9, #0
 8006e7e:	341a      	adds	r4, #26
 8006e80:	454d      	cmp	r5, r9
 8006e82:	d11a      	bne.n	8006eba <_printf_common+0xd6>
 8006e84:	2000      	movs	r0, #0
 8006e86:	e008      	b.n	8006e9a <_printf_common+0xb6>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	4652      	mov	r2, sl
 8006e8c:	4639      	mov	r1, r7
 8006e8e:	4630      	mov	r0, r6
 8006e90:	47c0      	blx	r8
 8006e92:	3001      	adds	r0, #1
 8006e94:	d103      	bne.n	8006e9e <_printf_common+0xba>
 8006e96:	f04f 30ff 	mov.w	r0, #4294967295
 8006e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e9e:	3501      	adds	r5, #1
 8006ea0:	e7c3      	b.n	8006e2a <_printf_common+0x46>
 8006ea2:	18e1      	adds	r1, r4, r3
 8006ea4:	1c5a      	adds	r2, r3, #1
 8006ea6:	2030      	movs	r0, #48	; 0x30
 8006ea8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006eac:	4422      	add	r2, r4
 8006eae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006eb2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006eb6:	3302      	adds	r3, #2
 8006eb8:	e7c5      	b.n	8006e46 <_printf_common+0x62>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	4622      	mov	r2, r4
 8006ebe:	4639      	mov	r1, r7
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	47c0      	blx	r8
 8006ec4:	3001      	adds	r0, #1
 8006ec6:	d0e6      	beq.n	8006e96 <_printf_common+0xb2>
 8006ec8:	f109 0901 	add.w	r9, r9, #1
 8006ecc:	e7d8      	b.n	8006e80 <_printf_common+0x9c>
	...

08006ed0 <_printf_i>:
 8006ed0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ed4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006ed8:	460c      	mov	r4, r1
 8006eda:	7e09      	ldrb	r1, [r1, #24]
 8006edc:	b085      	sub	sp, #20
 8006ede:	296e      	cmp	r1, #110	; 0x6e
 8006ee0:	4617      	mov	r7, r2
 8006ee2:	4606      	mov	r6, r0
 8006ee4:	4698      	mov	r8, r3
 8006ee6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ee8:	f000 80b3 	beq.w	8007052 <_printf_i+0x182>
 8006eec:	d822      	bhi.n	8006f34 <_printf_i+0x64>
 8006eee:	2963      	cmp	r1, #99	; 0x63
 8006ef0:	d036      	beq.n	8006f60 <_printf_i+0x90>
 8006ef2:	d80a      	bhi.n	8006f0a <_printf_i+0x3a>
 8006ef4:	2900      	cmp	r1, #0
 8006ef6:	f000 80b9 	beq.w	800706c <_printf_i+0x19c>
 8006efa:	2958      	cmp	r1, #88	; 0x58
 8006efc:	f000 8083 	beq.w	8007006 <_printf_i+0x136>
 8006f00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f04:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006f08:	e032      	b.n	8006f70 <_printf_i+0xa0>
 8006f0a:	2964      	cmp	r1, #100	; 0x64
 8006f0c:	d001      	beq.n	8006f12 <_printf_i+0x42>
 8006f0e:	2969      	cmp	r1, #105	; 0x69
 8006f10:	d1f6      	bne.n	8006f00 <_printf_i+0x30>
 8006f12:	6820      	ldr	r0, [r4, #0]
 8006f14:	6813      	ldr	r3, [r2, #0]
 8006f16:	0605      	lsls	r5, r0, #24
 8006f18:	f103 0104 	add.w	r1, r3, #4
 8006f1c:	d52a      	bpl.n	8006f74 <_printf_i+0xa4>
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	6011      	str	r1, [r2, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	da03      	bge.n	8006f2e <_printf_i+0x5e>
 8006f26:	222d      	movs	r2, #45	; 0x2d
 8006f28:	425b      	negs	r3, r3
 8006f2a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006f2e:	486f      	ldr	r0, [pc, #444]	; (80070ec <_printf_i+0x21c>)
 8006f30:	220a      	movs	r2, #10
 8006f32:	e039      	b.n	8006fa8 <_printf_i+0xd8>
 8006f34:	2973      	cmp	r1, #115	; 0x73
 8006f36:	f000 809d 	beq.w	8007074 <_printf_i+0x1a4>
 8006f3a:	d808      	bhi.n	8006f4e <_printf_i+0x7e>
 8006f3c:	296f      	cmp	r1, #111	; 0x6f
 8006f3e:	d020      	beq.n	8006f82 <_printf_i+0xb2>
 8006f40:	2970      	cmp	r1, #112	; 0x70
 8006f42:	d1dd      	bne.n	8006f00 <_printf_i+0x30>
 8006f44:	6823      	ldr	r3, [r4, #0]
 8006f46:	f043 0320 	orr.w	r3, r3, #32
 8006f4a:	6023      	str	r3, [r4, #0]
 8006f4c:	e003      	b.n	8006f56 <_printf_i+0x86>
 8006f4e:	2975      	cmp	r1, #117	; 0x75
 8006f50:	d017      	beq.n	8006f82 <_printf_i+0xb2>
 8006f52:	2978      	cmp	r1, #120	; 0x78
 8006f54:	d1d4      	bne.n	8006f00 <_printf_i+0x30>
 8006f56:	2378      	movs	r3, #120	; 0x78
 8006f58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f5c:	4864      	ldr	r0, [pc, #400]	; (80070f0 <_printf_i+0x220>)
 8006f5e:	e055      	b.n	800700c <_printf_i+0x13c>
 8006f60:	6813      	ldr	r3, [r2, #0]
 8006f62:	1d19      	adds	r1, r3, #4
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6011      	str	r1, [r2, #0]
 8006f68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f70:	2301      	movs	r3, #1
 8006f72:	e08c      	b.n	800708e <_printf_i+0x1be>
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	6011      	str	r1, [r2, #0]
 8006f78:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f7c:	bf18      	it	ne
 8006f7e:	b21b      	sxthne	r3, r3
 8006f80:	e7cf      	b.n	8006f22 <_printf_i+0x52>
 8006f82:	6813      	ldr	r3, [r2, #0]
 8006f84:	6825      	ldr	r5, [r4, #0]
 8006f86:	1d18      	adds	r0, r3, #4
 8006f88:	6010      	str	r0, [r2, #0]
 8006f8a:	0628      	lsls	r0, r5, #24
 8006f8c:	d501      	bpl.n	8006f92 <_printf_i+0xc2>
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	e002      	b.n	8006f98 <_printf_i+0xc8>
 8006f92:	0668      	lsls	r0, r5, #25
 8006f94:	d5fb      	bpl.n	8006f8e <_printf_i+0xbe>
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	4854      	ldr	r0, [pc, #336]	; (80070ec <_printf_i+0x21c>)
 8006f9a:	296f      	cmp	r1, #111	; 0x6f
 8006f9c:	bf14      	ite	ne
 8006f9e:	220a      	movne	r2, #10
 8006fa0:	2208      	moveq	r2, #8
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fa8:	6865      	ldr	r5, [r4, #4]
 8006faa:	60a5      	str	r5, [r4, #8]
 8006fac:	2d00      	cmp	r5, #0
 8006fae:	f2c0 8095 	blt.w	80070dc <_printf_i+0x20c>
 8006fb2:	6821      	ldr	r1, [r4, #0]
 8006fb4:	f021 0104 	bic.w	r1, r1, #4
 8006fb8:	6021      	str	r1, [r4, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d13d      	bne.n	800703a <_printf_i+0x16a>
 8006fbe:	2d00      	cmp	r5, #0
 8006fc0:	f040 808e 	bne.w	80070e0 <_printf_i+0x210>
 8006fc4:	4665      	mov	r5, ip
 8006fc6:	2a08      	cmp	r2, #8
 8006fc8:	d10b      	bne.n	8006fe2 <_printf_i+0x112>
 8006fca:	6823      	ldr	r3, [r4, #0]
 8006fcc:	07db      	lsls	r3, r3, #31
 8006fce:	d508      	bpl.n	8006fe2 <_printf_i+0x112>
 8006fd0:	6923      	ldr	r3, [r4, #16]
 8006fd2:	6862      	ldr	r2, [r4, #4]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	bfde      	ittt	le
 8006fd8:	2330      	movle	r3, #48	; 0x30
 8006fda:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006fde:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006fe2:	ebac 0305 	sub.w	r3, ip, r5
 8006fe6:	6123      	str	r3, [r4, #16]
 8006fe8:	f8cd 8000 	str.w	r8, [sp]
 8006fec:	463b      	mov	r3, r7
 8006fee:	aa03      	add	r2, sp, #12
 8006ff0:	4621      	mov	r1, r4
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	f7ff fef6 	bl	8006de4 <_printf_common>
 8006ff8:	3001      	adds	r0, #1
 8006ffa:	d14d      	bne.n	8007098 <_printf_i+0x1c8>
 8006ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8007000:	b005      	add	sp, #20
 8007002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007006:	4839      	ldr	r0, [pc, #228]	; (80070ec <_printf_i+0x21c>)
 8007008:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800700c:	6813      	ldr	r3, [r2, #0]
 800700e:	6821      	ldr	r1, [r4, #0]
 8007010:	1d1d      	adds	r5, r3, #4
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	6015      	str	r5, [r2, #0]
 8007016:	060a      	lsls	r2, r1, #24
 8007018:	d50b      	bpl.n	8007032 <_printf_i+0x162>
 800701a:	07ca      	lsls	r2, r1, #31
 800701c:	bf44      	itt	mi
 800701e:	f041 0120 	orrmi.w	r1, r1, #32
 8007022:	6021      	strmi	r1, [r4, #0]
 8007024:	b91b      	cbnz	r3, 800702e <_printf_i+0x15e>
 8007026:	6822      	ldr	r2, [r4, #0]
 8007028:	f022 0220 	bic.w	r2, r2, #32
 800702c:	6022      	str	r2, [r4, #0]
 800702e:	2210      	movs	r2, #16
 8007030:	e7b7      	b.n	8006fa2 <_printf_i+0xd2>
 8007032:	064d      	lsls	r5, r1, #25
 8007034:	bf48      	it	mi
 8007036:	b29b      	uxthmi	r3, r3
 8007038:	e7ef      	b.n	800701a <_printf_i+0x14a>
 800703a:	4665      	mov	r5, ip
 800703c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007040:	fb02 3311 	mls	r3, r2, r1, r3
 8007044:	5cc3      	ldrb	r3, [r0, r3]
 8007046:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800704a:	460b      	mov	r3, r1
 800704c:	2900      	cmp	r1, #0
 800704e:	d1f5      	bne.n	800703c <_printf_i+0x16c>
 8007050:	e7b9      	b.n	8006fc6 <_printf_i+0xf6>
 8007052:	6813      	ldr	r3, [r2, #0]
 8007054:	6825      	ldr	r5, [r4, #0]
 8007056:	6961      	ldr	r1, [r4, #20]
 8007058:	1d18      	adds	r0, r3, #4
 800705a:	6010      	str	r0, [r2, #0]
 800705c:	0628      	lsls	r0, r5, #24
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	d501      	bpl.n	8007066 <_printf_i+0x196>
 8007062:	6019      	str	r1, [r3, #0]
 8007064:	e002      	b.n	800706c <_printf_i+0x19c>
 8007066:	066a      	lsls	r2, r5, #25
 8007068:	d5fb      	bpl.n	8007062 <_printf_i+0x192>
 800706a:	8019      	strh	r1, [r3, #0]
 800706c:	2300      	movs	r3, #0
 800706e:	6123      	str	r3, [r4, #16]
 8007070:	4665      	mov	r5, ip
 8007072:	e7b9      	b.n	8006fe8 <_printf_i+0x118>
 8007074:	6813      	ldr	r3, [r2, #0]
 8007076:	1d19      	adds	r1, r3, #4
 8007078:	6011      	str	r1, [r2, #0]
 800707a:	681d      	ldr	r5, [r3, #0]
 800707c:	6862      	ldr	r2, [r4, #4]
 800707e:	2100      	movs	r1, #0
 8007080:	4628      	mov	r0, r5
 8007082:	f7f9 f8b5 	bl	80001f0 <memchr>
 8007086:	b108      	cbz	r0, 800708c <_printf_i+0x1bc>
 8007088:	1b40      	subs	r0, r0, r5
 800708a:	6060      	str	r0, [r4, #4]
 800708c:	6863      	ldr	r3, [r4, #4]
 800708e:	6123      	str	r3, [r4, #16]
 8007090:	2300      	movs	r3, #0
 8007092:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007096:	e7a7      	b.n	8006fe8 <_printf_i+0x118>
 8007098:	6923      	ldr	r3, [r4, #16]
 800709a:	462a      	mov	r2, r5
 800709c:	4639      	mov	r1, r7
 800709e:	4630      	mov	r0, r6
 80070a0:	47c0      	blx	r8
 80070a2:	3001      	adds	r0, #1
 80070a4:	d0aa      	beq.n	8006ffc <_printf_i+0x12c>
 80070a6:	6823      	ldr	r3, [r4, #0]
 80070a8:	079b      	lsls	r3, r3, #30
 80070aa:	d413      	bmi.n	80070d4 <_printf_i+0x204>
 80070ac:	68e0      	ldr	r0, [r4, #12]
 80070ae:	9b03      	ldr	r3, [sp, #12]
 80070b0:	4298      	cmp	r0, r3
 80070b2:	bfb8      	it	lt
 80070b4:	4618      	movlt	r0, r3
 80070b6:	e7a3      	b.n	8007000 <_printf_i+0x130>
 80070b8:	2301      	movs	r3, #1
 80070ba:	464a      	mov	r2, r9
 80070bc:	4639      	mov	r1, r7
 80070be:	4630      	mov	r0, r6
 80070c0:	47c0      	blx	r8
 80070c2:	3001      	adds	r0, #1
 80070c4:	d09a      	beq.n	8006ffc <_printf_i+0x12c>
 80070c6:	3501      	adds	r5, #1
 80070c8:	68e3      	ldr	r3, [r4, #12]
 80070ca:	9a03      	ldr	r2, [sp, #12]
 80070cc:	1a9b      	subs	r3, r3, r2
 80070ce:	42ab      	cmp	r3, r5
 80070d0:	dcf2      	bgt.n	80070b8 <_printf_i+0x1e8>
 80070d2:	e7eb      	b.n	80070ac <_printf_i+0x1dc>
 80070d4:	2500      	movs	r5, #0
 80070d6:	f104 0919 	add.w	r9, r4, #25
 80070da:	e7f5      	b.n	80070c8 <_printf_i+0x1f8>
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1ac      	bne.n	800703a <_printf_i+0x16a>
 80070e0:	7803      	ldrb	r3, [r0, #0]
 80070e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070ea:	e76c      	b.n	8006fc6 <_printf_i+0xf6>
 80070ec:	08007609 	.word	0x08007609
 80070f0:	0800761a 	.word	0x0800761a

080070f4 <memcpy>:
 80070f4:	b510      	push	{r4, lr}
 80070f6:	1e43      	subs	r3, r0, #1
 80070f8:	440a      	add	r2, r1
 80070fa:	4291      	cmp	r1, r2
 80070fc:	d100      	bne.n	8007100 <memcpy+0xc>
 80070fe:	bd10      	pop	{r4, pc}
 8007100:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007104:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007108:	e7f7      	b.n	80070fa <memcpy+0x6>

0800710a <memmove>:
 800710a:	4288      	cmp	r0, r1
 800710c:	b510      	push	{r4, lr}
 800710e:	eb01 0302 	add.w	r3, r1, r2
 8007112:	d807      	bhi.n	8007124 <memmove+0x1a>
 8007114:	1e42      	subs	r2, r0, #1
 8007116:	4299      	cmp	r1, r3
 8007118:	d00a      	beq.n	8007130 <memmove+0x26>
 800711a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800711e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007122:	e7f8      	b.n	8007116 <memmove+0xc>
 8007124:	4283      	cmp	r3, r0
 8007126:	d9f5      	bls.n	8007114 <memmove+0xa>
 8007128:	1881      	adds	r1, r0, r2
 800712a:	1ad2      	subs	r2, r2, r3
 800712c:	42d3      	cmn	r3, r2
 800712e:	d100      	bne.n	8007132 <memmove+0x28>
 8007130:	bd10      	pop	{r4, pc}
 8007132:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007136:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800713a:	e7f7      	b.n	800712c <memmove+0x22>

0800713c <_free_r>:
 800713c:	b538      	push	{r3, r4, r5, lr}
 800713e:	4605      	mov	r5, r0
 8007140:	2900      	cmp	r1, #0
 8007142:	d045      	beq.n	80071d0 <_free_r+0x94>
 8007144:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007148:	1f0c      	subs	r4, r1, #4
 800714a:	2b00      	cmp	r3, #0
 800714c:	bfb8      	it	lt
 800714e:	18e4      	addlt	r4, r4, r3
 8007150:	f000 f8d2 	bl	80072f8 <__malloc_lock>
 8007154:	4a1f      	ldr	r2, [pc, #124]	; (80071d4 <_free_r+0x98>)
 8007156:	6813      	ldr	r3, [r2, #0]
 8007158:	4610      	mov	r0, r2
 800715a:	b933      	cbnz	r3, 800716a <_free_r+0x2e>
 800715c:	6063      	str	r3, [r4, #4]
 800715e:	6014      	str	r4, [r2, #0]
 8007160:	4628      	mov	r0, r5
 8007162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007166:	f000 b8c8 	b.w	80072fa <__malloc_unlock>
 800716a:	42a3      	cmp	r3, r4
 800716c:	d90c      	bls.n	8007188 <_free_r+0x4c>
 800716e:	6821      	ldr	r1, [r4, #0]
 8007170:	1862      	adds	r2, r4, r1
 8007172:	4293      	cmp	r3, r2
 8007174:	bf04      	itt	eq
 8007176:	681a      	ldreq	r2, [r3, #0]
 8007178:	685b      	ldreq	r3, [r3, #4]
 800717a:	6063      	str	r3, [r4, #4]
 800717c:	bf04      	itt	eq
 800717e:	1852      	addeq	r2, r2, r1
 8007180:	6022      	streq	r2, [r4, #0]
 8007182:	6004      	str	r4, [r0, #0]
 8007184:	e7ec      	b.n	8007160 <_free_r+0x24>
 8007186:	4613      	mov	r3, r2
 8007188:	685a      	ldr	r2, [r3, #4]
 800718a:	b10a      	cbz	r2, 8007190 <_free_r+0x54>
 800718c:	42a2      	cmp	r2, r4
 800718e:	d9fa      	bls.n	8007186 <_free_r+0x4a>
 8007190:	6819      	ldr	r1, [r3, #0]
 8007192:	1858      	adds	r0, r3, r1
 8007194:	42a0      	cmp	r0, r4
 8007196:	d10b      	bne.n	80071b0 <_free_r+0x74>
 8007198:	6820      	ldr	r0, [r4, #0]
 800719a:	4401      	add	r1, r0
 800719c:	1858      	adds	r0, r3, r1
 800719e:	4282      	cmp	r2, r0
 80071a0:	6019      	str	r1, [r3, #0]
 80071a2:	d1dd      	bne.n	8007160 <_free_r+0x24>
 80071a4:	6810      	ldr	r0, [r2, #0]
 80071a6:	6852      	ldr	r2, [r2, #4]
 80071a8:	605a      	str	r2, [r3, #4]
 80071aa:	4401      	add	r1, r0
 80071ac:	6019      	str	r1, [r3, #0]
 80071ae:	e7d7      	b.n	8007160 <_free_r+0x24>
 80071b0:	d902      	bls.n	80071b8 <_free_r+0x7c>
 80071b2:	230c      	movs	r3, #12
 80071b4:	602b      	str	r3, [r5, #0]
 80071b6:	e7d3      	b.n	8007160 <_free_r+0x24>
 80071b8:	6820      	ldr	r0, [r4, #0]
 80071ba:	1821      	adds	r1, r4, r0
 80071bc:	428a      	cmp	r2, r1
 80071be:	bf04      	itt	eq
 80071c0:	6811      	ldreq	r1, [r2, #0]
 80071c2:	6852      	ldreq	r2, [r2, #4]
 80071c4:	6062      	str	r2, [r4, #4]
 80071c6:	bf04      	itt	eq
 80071c8:	1809      	addeq	r1, r1, r0
 80071ca:	6021      	streq	r1, [r4, #0]
 80071cc:	605c      	str	r4, [r3, #4]
 80071ce:	e7c7      	b.n	8007160 <_free_r+0x24>
 80071d0:	bd38      	pop	{r3, r4, r5, pc}
 80071d2:	bf00      	nop
 80071d4:	20000120 	.word	0x20000120

080071d8 <_malloc_r>:
 80071d8:	b570      	push	{r4, r5, r6, lr}
 80071da:	1ccd      	adds	r5, r1, #3
 80071dc:	f025 0503 	bic.w	r5, r5, #3
 80071e0:	3508      	adds	r5, #8
 80071e2:	2d0c      	cmp	r5, #12
 80071e4:	bf38      	it	cc
 80071e6:	250c      	movcc	r5, #12
 80071e8:	2d00      	cmp	r5, #0
 80071ea:	4606      	mov	r6, r0
 80071ec:	db01      	blt.n	80071f2 <_malloc_r+0x1a>
 80071ee:	42a9      	cmp	r1, r5
 80071f0:	d903      	bls.n	80071fa <_malloc_r+0x22>
 80071f2:	230c      	movs	r3, #12
 80071f4:	6033      	str	r3, [r6, #0]
 80071f6:	2000      	movs	r0, #0
 80071f8:	bd70      	pop	{r4, r5, r6, pc}
 80071fa:	f000 f87d 	bl	80072f8 <__malloc_lock>
 80071fe:	4a21      	ldr	r2, [pc, #132]	; (8007284 <_malloc_r+0xac>)
 8007200:	6814      	ldr	r4, [r2, #0]
 8007202:	4621      	mov	r1, r4
 8007204:	b991      	cbnz	r1, 800722c <_malloc_r+0x54>
 8007206:	4c20      	ldr	r4, [pc, #128]	; (8007288 <_malloc_r+0xb0>)
 8007208:	6823      	ldr	r3, [r4, #0]
 800720a:	b91b      	cbnz	r3, 8007214 <_malloc_r+0x3c>
 800720c:	4630      	mov	r0, r6
 800720e:	f000 f863 	bl	80072d8 <_sbrk_r>
 8007212:	6020      	str	r0, [r4, #0]
 8007214:	4629      	mov	r1, r5
 8007216:	4630      	mov	r0, r6
 8007218:	f000 f85e 	bl	80072d8 <_sbrk_r>
 800721c:	1c43      	adds	r3, r0, #1
 800721e:	d124      	bne.n	800726a <_malloc_r+0x92>
 8007220:	230c      	movs	r3, #12
 8007222:	6033      	str	r3, [r6, #0]
 8007224:	4630      	mov	r0, r6
 8007226:	f000 f868 	bl	80072fa <__malloc_unlock>
 800722a:	e7e4      	b.n	80071f6 <_malloc_r+0x1e>
 800722c:	680b      	ldr	r3, [r1, #0]
 800722e:	1b5b      	subs	r3, r3, r5
 8007230:	d418      	bmi.n	8007264 <_malloc_r+0x8c>
 8007232:	2b0b      	cmp	r3, #11
 8007234:	d90f      	bls.n	8007256 <_malloc_r+0x7e>
 8007236:	600b      	str	r3, [r1, #0]
 8007238:	50cd      	str	r5, [r1, r3]
 800723a:	18cc      	adds	r4, r1, r3
 800723c:	4630      	mov	r0, r6
 800723e:	f000 f85c 	bl	80072fa <__malloc_unlock>
 8007242:	f104 000b 	add.w	r0, r4, #11
 8007246:	1d23      	adds	r3, r4, #4
 8007248:	f020 0007 	bic.w	r0, r0, #7
 800724c:	1ac3      	subs	r3, r0, r3
 800724e:	d0d3      	beq.n	80071f8 <_malloc_r+0x20>
 8007250:	425a      	negs	r2, r3
 8007252:	50e2      	str	r2, [r4, r3]
 8007254:	e7d0      	b.n	80071f8 <_malloc_r+0x20>
 8007256:	428c      	cmp	r4, r1
 8007258:	684b      	ldr	r3, [r1, #4]
 800725a:	bf16      	itet	ne
 800725c:	6063      	strne	r3, [r4, #4]
 800725e:	6013      	streq	r3, [r2, #0]
 8007260:	460c      	movne	r4, r1
 8007262:	e7eb      	b.n	800723c <_malloc_r+0x64>
 8007264:	460c      	mov	r4, r1
 8007266:	6849      	ldr	r1, [r1, #4]
 8007268:	e7cc      	b.n	8007204 <_malloc_r+0x2c>
 800726a:	1cc4      	adds	r4, r0, #3
 800726c:	f024 0403 	bic.w	r4, r4, #3
 8007270:	42a0      	cmp	r0, r4
 8007272:	d005      	beq.n	8007280 <_malloc_r+0xa8>
 8007274:	1a21      	subs	r1, r4, r0
 8007276:	4630      	mov	r0, r6
 8007278:	f000 f82e 	bl	80072d8 <_sbrk_r>
 800727c:	3001      	adds	r0, #1
 800727e:	d0cf      	beq.n	8007220 <_malloc_r+0x48>
 8007280:	6025      	str	r5, [r4, #0]
 8007282:	e7db      	b.n	800723c <_malloc_r+0x64>
 8007284:	20000120 	.word	0x20000120
 8007288:	20000124 	.word	0x20000124

0800728c <_realloc_r>:
 800728c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800728e:	4607      	mov	r7, r0
 8007290:	4614      	mov	r4, r2
 8007292:	460e      	mov	r6, r1
 8007294:	b921      	cbnz	r1, 80072a0 <_realloc_r+0x14>
 8007296:	4611      	mov	r1, r2
 8007298:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800729c:	f7ff bf9c 	b.w	80071d8 <_malloc_r>
 80072a0:	b922      	cbnz	r2, 80072ac <_realloc_r+0x20>
 80072a2:	f7ff ff4b 	bl	800713c <_free_r>
 80072a6:	4625      	mov	r5, r4
 80072a8:	4628      	mov	r0, r5
 80072aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072ac:	f000 f826 	bl	80072fc <_malloc_usable_size_r>
 80072b0:	42a0      	cmp	r0, r4
 80072b2:	d20f      	bcs.n	80072d4 <_realloc_r+0x48>
 80072b4:	4621      	mov	r1, r4
 80072b6:	4638      	mov	r0, r7
 80072b8:	f7ff ff8e 	bl	80071d8 <_malloc_r>
 80072bc:	4605      	mov	r5, r0
 80072be:	2800      	cmp	r0, #0
 80072c0:	d0f2      	beq.n	80072a8 <_realloc_r+0x1c>
 80072c2:	4631      	mov	r1, r6
 80072c4:	4622      	mov	r2, r4
 80072c6:	f7ff ff15 	bl	80070f4 <memcpy>
 80072ca:	4631      	mov	r1, r6
 80072cc:	4638      	mov	r0, r7
 80072ce:	f7ff ff35 	bl	800713c <_free_r>
 80072d2:	e7e9      	b.n	80072a8 <_realloc_r+0x1c>
 80072d4:	4635      	mov	r5, r6
 80072d6:	e7e7      	b.n	80072a8 <_realloc_r+0x1c>

080072d8 <_sbrk_r>:
 80072d8:	b538      	push	{r3, r4, r5, lr}
 80072da:	4c06      	ldr	r4, [pc, #24]	; (80072f4 <_sbrk_r+0x1c>)
 80072dc:	2300      	movs	r3, #0
 80072de:	4605      	mov	r5, r0
 80072e0:	4608      	mov	r0, r1
 80072e2:	6023      	str	r3, [r4, #0]
 80072e4:	f7fc f8e4 	bl	80034b0 <_sbrk>
 80072e8:	1c43      	adds	r3, r0, #1
 80072ea:	d102      	bne.n	80072f2 <_sbrk_r+0x1a>
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	b103      	cbz	r3, 80072f2 <_sbrk_r+0x1a>
 80072f0:	602b      	str	r3, [r5, #0]
 80072f2:	bd38      	pop	{r3, r4, r5, pc}
 80072f4:	2000056c 	.word	0x2000056c

080072f8 <__malloc_lock>:
 80072f8:	4770      	bx	lr

080072fa <__malloc_unlock>:
 80072fa:	4770      	bx	lr

080072fc <_malloc_usable_size_r>:
 80072fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007300:	1f18      	subs	r0, r3, #4
 8007302:	2b00      	cmp	r3, #0
 8007304:	bfbc      	itt	lt
 8007306:	580b      	ldrlt	r3, [r1, r0]
 8007308:	18c0      	addlt	r0, r0, r3
 800730a:	4770      	bx	lr

0800730c <_init>:
 800730c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730e:	bf00      	nop
 8007310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007312:	bc08      	pop	{r3}
 8007314:	469e      	mov	lr, r3
 8007316:	4770      	bx	lr

08007318 <_fini>:
 8007318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800731a:	bf00      	nop
 800731c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800731e:	bc08      	pop	{r3}
 8007320:	469e      	mov	lr, r3
 8007322:	4770      	bx	lr
