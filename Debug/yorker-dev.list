
yorker-dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006068  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08006218  08006218  00016218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006394  08006394  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006394  08006394  00016394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800639c  0800639c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800639c  0800639c  0001639c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063a0  080063a0  000163a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080063a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a4  20000078  0800641c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  0800641c  0002051c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d3f  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003083  00000000  00000000  00033de7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001068  00000000  00000000  00036e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ea0  00000000  00000000  00037ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026b0b  00000000  00000000  00038d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001115c  00000000  00000000  0005f883  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e44f2  00000000  00000000  000709df  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00154ed1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000443c  00000000  00000000  00154f4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006200 	.word	0x08006200

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08006200 	.word	0x08006200

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <display_screens>:

unsigned char end_char[4] = {0xff,0xff,0xff,'\0'};
char disp_cmd[100];
int disp_cmd_len = 0;

void display_screens(){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0

	switch (current_screen_state){
 8000594:	4b6c      	ldr	r3, [pc, #432]	; (8000748 <display_screens+0x1b8>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b03      	cmp	r3, #3
 800059a:	f200 80d3 	bhi.w	8000744 <display_screens+0x1b4>
 800059e:	a201      	add	r2, pc, #4	; (adr r2, 80005a4 <display_screens+0x14>)
 80005a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a4:	080005b5 	.word	0x080005b5
 80005a8:	080005d9 	.word	0x080005d9
 80005ac:	0800064d 	.word	0x0800064d
 80005b0:	080006cf 	.word	0x080006cf

	case GOTO_HOME_SCREEN:
		disp_cmd_len = sprintf(disp_cmd,"page 0%s",end_char);
 80005b4:	4a65      	ldr	r2, [pc, #404]	; (800074c <display_screens+0x1bc>)
 80005b6:	4966      	ldr	r1, [pc, #408]	; (8000750 <display_screens+0x1c0>)
 80005b8:	4866      	ldr	r0, [pc, #408]	; (8000754 <display_screens+0x1c4>)
 80005ba:	f005 fa1b 	bl	80059f4 <siprintf>
 80005be:	4602      	mov	r2, r0
 80005c0:	4b65      	ldr	r3, [pc, #404]	; (8000758 <display_screens+0x1c8>)
 80005c2:	601a      	str	r2, [r3, #0]
		lcd_send_cmd(disp_cmd,disp_cmd_len);
 80005c4:	4b64      	ldr	r3, [pc, #400]	; (8000758 <display_screens+0x1c8>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4619      	mov	r1, r3
 80005ca:	4862      	ldr	r0, [pc, #392]	; (8000754 <display_screens+0x1c4>)
 80005cc:	f001 fdba 	bl	8002144 <lcd_send_cmd>
		current_screen_state = UPDATE_HOME_SCREEN;
 80005d0:	4b5d      	ldr	r3, [pc, #372]	; (8000748 <display_screens+0x1b8>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	601a      	str	r2, [r3, #0]
		break;
 80005d6:	e0b5      	b.n	8000744 <display_screens+0x1b4>


	case UPDATE_HOME_SCREEN:
		if(key_pressed == NONE_KEY_PRESSED)
 80005d8:	4b60      	ldr	r3, [pc, #384]	; (800075c <display_screens+0x1cc>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d102      	bne.n	80005e6 <display_screens+0x56>
		{
			homescreen_update();
 80005e0:	f000 fae0 	bl	8000ba4 <homescreen_update>
			disp_cmd_len = sprintf(disp_cmd,"page 2%s",end_char);
			lcd_send_cmd(disp_cmd,disp_cmd_len);
			key_pressed = NONE_KEY_PRESSED;
			current_screen_state = ALARMS_SCREEN;
		}
		break;
 80005e4:	e0a9      	b.n	800073a <display_screens+0x1aa>
		else if(key_pressed == RIGHT_KEY_PRESSED)
 80005e6:	4b5d      	ldr	r3, [pc, #372]	; (800075c <display_screens+0x1cc>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b02      	cmp	r3, #2
 80005ec:	d114      	bne.n	8000618 <display_screens+0x88>
			disp_cmd_len = sprintf(disp_cmd,"page 1%s",end_char);
 80005ee:	4a57      	ldr	r2, [pc, #348]	; (800074c <display_screens+0x1bc>)
 80005f0:	495b      	ldr	r1, [pc, #364]	; (8000760 <display_screens+0x1d0>)
 80005f2:	4858      	ldr	r0, [pc, #352]	; (8000754 <display_screens+0x1c4>)
 80005f4:	f005 f9fe 	bl	80059f4 <siprintf>
 80005f8:	4602      	mov	r2, r0
 80005fa:	4b57      	ldr	r3, [pc, #348]	; (8000758 <display_screens+0x1c8>)
 80005fc:	601a      	str	r2, [r3, #0]
			lcd_send_cmd(disp_cmd,disp_cmd_len);
 80005fe:	4b56      	ldr	r3, [pc, #344]	; (8000758 <display_screens+0x1c8>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4619      	mov	r1, r3
 8000604:	4853      	ldr	r0, [pc, #332]	; (8000754 <display_screens+0x1c4>)
 8000606:	f001 fd9d 	bl	8002144 <lcd_send_cmd>
			key_pressed = NONE_KEY_PRESSED;
 800060a:	4b54      	ldr	r3, [pc, #336]	; (800075c <display_screens+0x1cc>)
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
			current_screen_state = SETTINGS_SCREEN;
 8000610:	4b4d      	ldr	r3, [pc, #308]	; (8000748 <display_screens+0x1b8>)
 8000612:	2202      	movs	r2, #2
 8000614:	601a      	str	r2, [r3, #0]
		break;
 8000616:	e090      	b.n	800073a <display_screens+0x1aa>
		else if(key_pressed == LEFT_KEY_PRESSED)
 8000618:	4b50      	ldr	r3, [pc, #320]	; (800075c <display_screens+0x1cc>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b01      	cmp	r3, #1
 800061e:	f040 808c 	bne.w	800073a <display_screens+0x1aa>
			disp_cmd_len = sprintf(disp_cmd,"page 2%s",end_char);
 8000622:	4a4a      	ldr	r2, [pc, #296]	; (800074c <display_screens+0x1bc>)
 8000624:	494f      	ldr	r1, [pc, #316]	; (8000764 <display_screens+0x1d4>)
 8000626:	484b      	ldr	r0, [pc, #300]	; (8000754 <display_screens+0x1c4>)
 8000628:	f005 f9e4 	bl	80059f4 <siprintf>
 800062c:	4602      	mov	r2, r0
 800062e:	4b4a      	ldr	r3, [pc, #296]	; (8000758 <display_screens+0x1c8>)
 8000630:	601a      	str	r2, [r3, #0]
			lcd_send_cmd(disp_cmd,disp_cmd_len);
 8000632:	4b49      	ldr	r3, [pc, #292]	; (8000758 <display_screens+0x1c8>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4619      	mov	r1, r3
 8000638:	4846      	ldr	r0, [pc, #280]	; (8000754 <display_screens+0x1c4>)
 800063a:	f001 fd83 	bl	8002144 <lcd_send_cmd>
			key_pressed = NONE_KEY_PRESSED;
 800063e:	4b47      	ldr	r3, [pc, #284]	; (800075c <display_screens+0x1cc>)
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
			current_screen_state = ALARMS_SCREEN;
 8000644:	4b40      	ldr	r3, [pc, #256]	; (8000748 <display_screens+0x1b8>)
 8000646:	2203      	movs	r2, #3
 8000648:	601a      	str	r2, [r3, #0]
		break;
 800064a:	e076      	b.n	800073a <display_screens+0x1aa>

	case SETTINGS_SCREEN:
		if(key_pressed == NONE_KEY_PRESSED)
 800064c:	4b43      	ldr	r3, [pc, #268]	; (800075c <display_screens+0x1cc>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d074      	beq.n	800073e <display_screens+0x1ae>
		{

		}
		else if(key_pressed == RIGHT_KEY_PRESSED)
 8000654:	4b41      	ldr	r3, [pc, #260]	; (800075c <display_screens+0x1cc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b02      	cmp	r3, #2
 800065a:	d114      	bne.n	8000686 <display_screens+0xf6>
		{
			disp_cmd_len = sprintf(disp_cmd,"page 2%s",end_char);
 800065c:	4a3b      	ldr	r2, [pc, #236]	; (800074c <display_screens+0x1bc>)
 800065e:	4941      	ldr	r1, [pc, #260]	; (8000764 <display_screens+0x1d4>)
 8000660:	483c      	ldr	r0, [pc, #240]	; (8000754 <display_screens+0x1c4>)
 8000662:	f005 f9c7 	bl	80059f4 <siprintf>
 8000666:	4602      	mov	r2, r0
 8000668:	4b3b      	ldr	r3, [pc, #236]	; (8000758 <display_screens+0x1c8>)
 800066a:	601a      	str	r2, [r3, #0]
			lcd_send_cmd(disp_cmd,disp_cmd_len);
 800066c:	4b3a      	ldr	r3, [pc, #232]	; (8000758 <display_screens+0x1c8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	4838      	ldr	r0, [pc, #224]	; (8000754 <display_screens+0x1c4>)
 8000674:	f001 fd66 	bl	8002144 <lcd_send_cmd>
			key_pressed = NONE_KEY_PRESSED;
 8000678:	4b38      	ldr	r3, [pc, #224]	; (800075c <display_screens+0x1cc>)
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
			current_screen_state = ALARMS_SCREEN;
 800067e:	4b32      	ldr	r3, [pc, #200]	; (8000748 <display_screens+0x1b8>)
 8000680:	2203      	movs	r2, #3
 8000682:	601a      	str	r2, [r3, #0]
		else if(key_pressed == ENTER_KEY_PRESSED)
		{
			DisplayActions = display_edit_settings;
			key_pressed = NONE_KEY_PRESSED;
		}
		break;
 8000684:	e05b      	b.n	800073e <display_screens+0x1ae>
		else if(key_pressed == LEFT_KEY_PRESSED)
 8000686:	4b35      	ldr	r3, [pc, #212]	; (800075c <display_screens+0x1cc>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d114      	bne.n	80006b8 <display_screens+0x128>
			disp_cmd_len = sprintf(disp_cmd,"page 0%s",end_char);
 800068e:	4a2f      	ldr	r2, [pc, #188]	; (800074c <display_screens+0x1bc>)
 8000690:	492f      	ldr	r1, [pc, #188]	; (8000750 <display_screens+0x1c0>)
 8000692:	4830      	ldr	r0, [pc, #192]	; (8000754 <display_screens+0x1c4>)
 8000694:	f005 f9ae 	bl	80059f4 <siprintf>
 8000698:	4602      	mov	r2, r0
 800069a:	4b2f      	ldr	r3, [pc, #188]	; (8000758 <display_screens+0x1c8>)
 800069c:	601a      	str	r2, [r3, #0]
			lcd_send_cmd(disp_cmd,disp_cmd_len);
 800069e:	4b2e      	ldr	r3, [pc, #184]	; (8000758 <display_screens+0x1c8>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4619      	mov	r1, r3
 80006a4:	482b      	ldr	r0, [pc, #172]	; (8000754 <display_screens+0x1c4>)
 80006a6:	f001 fd4d 	bl	8002144 <lcd_send_cmd>
			key_pressed = NONE_KEY_PRESSED;
 80006aa:	4b2c      	ldr	r3, [pc, #176]	; (800075c <display_screens+0x1cc>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
			current_screen_state = UPDATE_HOME_SCREEN;
 80006b0:	4b25      	ldr	r3, [pc, #148]	; (8000748 <display_screens+0x1b8>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	601a      	str	r2, [r3, #0]
		break;
 80006b6:	e042      	b.n	800073e <display_screens+0x1ae>
		else if(key_pressed == ENTER_KEY_PRESSED)
 80006b8:	4b28      	ldr	r3, [pc, #160]	; (800075c <display_screens+0x1cc>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b03      	cmp	r3, #3
 80006be:	d13e      	bne.n	800073e <display_screens+0x1ae>
			DisplayActions = display_edit_settings;
 80006c0:	4b29      	ldr	r3, [pc, #164]	; (8000768 <display_screens+0x1d8>)
 80006c2:	4a2a      	ldr	r2, [pc, #168]	; (800076c <display_screens+0x1dc>)
 80006c4:	601a      	str	r2, [r3, #0]
			key_pressed = NONE_KEY_PRESSED;
 80006c6:	4b25      	ldr	r3, [pc, #148]	; (800075c <display_screens+0x1cc>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
		break;
 80006cc:	e037      	b.n	800073e <display_screens+0x1ae>

	case ALARMS_SCREEN:
		if(key_pressed == NONE_KEY_PRESSED)
 80006ce:	4b23      	ldr	r3, [pc, #140]	; (800075c <display_screens+0x1cc>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d035      	beq.n	8000742 <display_screens+0x1b2>
		{

		}
		else if(key_pressed == RIGHT_KEY_PRESSED)
 80006d6:	4b21      	ldr	r3, [pc, #132]	; (800075c <display_screens+0x1cc>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2b02      	cmp	r3, #2
 80006dc:	d114      	bne.n	8000708 <display_screens+0x178>
		{
			disp_cmd_len = sprintf(disp_cmd,"page 0%s",end_char);
 80006de:	4a1b      	ldr	r2, [pc, #108]	; (800074c <display_screens+0x1bc>)
 80006e0:	491b      	ldr	r1, [pc, #108]	; (8000750 <display_screens+0x1c0>)
 80006e2:	481c      	ldr	r0, [pc, #112]	; (8000754 <display_screens+0x1c4>)
 80006e4:	f005 f986 	bl	80059f4 <siprintf>
 80006e8:	4602      	mov	r2, r0
 80006ea:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <display_screens+0x1c8>)
 80006ec:	601a      	str	r2, [r3, #0]
			lcd_send_cmd(disp_cmd,disp_cmd_len);
 80006ee:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <display_screens+0x1c8>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4619      	mov	r1, r3
 80006f4:	4817      	ldr	r0, [pc, #92]	; (8000754 <display_screens+0x1c4>)
 80006f6:	f001 fd25 	bl	8002144 <lcd_send_cmd>
			key_pressed = NONE_KEY_PRESSED;
 80006fa:	4b18      	ldr	r3, [pc, #96]	; (800075c <display_screens+0x1cc>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
			current_screen_state = UPDATE_HOME_SCREEN;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <display_screens+0x1b8>)
 8000702:	2201      	movs	r2, #1
 8000704:	601a      	str	r2, [r3, #0]
			disp_cmd_len = sprintf(disp_cmd,"page 1%s",end_char);
			lcd_send_cmd(disp_cmd,disp_cmd_len);
			key_pressed = NONE_KEY_PRESSED;
			current_screen_state = SETTINGS_SCREEN;
		}
		break;
 8000706:	e01c      	b.n	8000742 <display_screens+0x1b2>
		else if(key_pressed == LEFT_KEY_PRESSED)
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <display_screens+0x1cc>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d118      	bne.n	8000742 <display_screens+0x1b2>
			disp_cmd_len = sprintf(disp_cmd,"page 1%s",end_char);
 8000710:	4a0e      	ldr	r2, [pc, #56]	; (800074c <display_screens+0x1bc>)
 8000712:	4913      	ldr	r1, [pc, #76]	; (8000760 <display_screens+0x1d0>)
 8000714:	480f      	ldr	r0, [pc, #60]	; (8000754 <display_screens+0x1c4>)
 8000716:	f005 f96d 	bl	80059f4 <siprintf>
 800071a:	4602      	mov	r2, r0
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <display_screens+0x1c8>)
 800071e:	601a      	str	r2, [r3, #0]
			lcd_send_cmd(disp_cmd,disp_cmd_len);
 8000720:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <display_screens+0x1c8>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4619      	mov	r1, r3
 8000726:	480b      	ldr	r0, [pc, #44]	; (8000754 <display_screens+0x1c4>)
 8000728:	f001 fd0c 	bl	8002144 <lcd_send_cmd>
			key_pressed = NONE_KEY_PRESSED;
 800072c:	4b0b      	ldr	r3, [pc, #44]	; (800075c <display_screens+0x1cc>)
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
			current_screen_state = SETTINGS_SCREEN;
 8000732:	4b05      	ldr	r3, [pc, #20]	; (8000748 <display_screens+0x1b8>)
 8000734:	2202      	movs	r2, #2
 8000736:	601a      	str	r2, [r3, #0]
		break;
 8000738:	e003      	b.n	8000742 <display_screens+0x1b2>
		break;
 800073a:	bf00      	nop
 800073c:	e002      	b.n	8000744 <display_screens+0x1b4>
		break;
 800073e:	bf00      	nop
 8000740:	e000      	b.n	8000744 <display_screens+0x1b4>
		break;
 8000742:	bf00      	nop

	}

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000094 	.word	0x20000094
 800074c:	20000000 	.word	0x20000000
 8000750:	08006218 	.word	0x08006218
 8000754:	20000108 	.word	0x20000108
 8000758:	20000098 	.word	0x20000098
 800075c:	2000009c 	.word	0x2000009c
 8000760:	08006224 	.word	0x08006224
 8000764:	08006230 	.word	0x08006230
 8000768:	20000104 	.word	0x20000104
 800076c:	08001321 	.word	0x08001321

08000770 <__update_makeup_water_added>:

/*******************************************************************************
 *  PRIVATE
 ******************************************************************************/
void __update_makeup_water_added(char *disp_mwa_cmd, int *disp_mwa_cmd_len)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af02      	add	r7, sp, #8
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
	uint8_t n[6];
	int temp = makeup_water_added;
 800077a:	4b24      	ldr	r3, [pc, #144]	; (800080c <__update_makeup_water_added+0x9c>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 6; i++)
 8000780:	2300      	movs	r3, #0
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	e03a      	b.n	80007fc <__update_makeup_water_added+0x8c>
	{
		n[i] = temp % 10;
 8000786:	697a      	ldr	r2, [r7, #20]
 8000788:	4b21      	ldr	r3, [pc, #132]	; (8000810 <__update_makeup_water_added+0xa0>)
 800078a:	fb83 1302 	smull	r1, r3, r3, r2
 800078e:	1099      	asrs	r1, r3, #2
 8000790:	17d3      	asrs	r3, r2, #31
 8000792:	1ac9      	subs	r1, r1, r3
 8000794:	460b      	mov	r3, r1
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	440b      	add	r3, r1
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	1ad1      	subs	r1, r2, r3
 800079e:	b2c9      	uxtb	r1, r1
 80007a0:	f107 0208 	add.w	r2, r7, #8
 80007a4:	693b      	ldr	r3, [r7, #16]
 80007a6:	4413      	add	r3, r2
 80007a8:	460a      	mov	r2, r1
 80007aa:	701a      	strb	r2, [r3, #0]
		temp = temp / 10;
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	4a18      	ldr	r2, [pc, #96]	; (8000810 <__update_makeup_water_added+0xa0>)
 80007b0:	fb82 1203 	smull	r1, r2, r2, r3
 80007b4:	1092      	asrs	r2, r2, #2
 80007b6:	17db      	asrs	r3, r3, #31
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	617b      	str	r3, [r7, #20]
		*disp_mwa_cmd_len += snprintf (disp_mwa_cmd+(*disp_mwa_cmd_len),1024-(*disp_mwa_cmd_len),"n%d.val=%d%s",i,n[i],end_char);
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	461a      	mov	r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	1898      	adds	r0, r3, r2
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80007ce:	4619      	mov	r1, r3
 80007d0:	f107 0208 	add.w	r2, r7, #8
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	4413      	add	r3, r2
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	461a      	mov	r2, r3
 80007dc:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <__update_makeup_water_added+0xa4>)
 80007de:	9301      	str	r3, [sp, #4]
 80007e0:	9200      	str	r2, [sp, #0]
 80007e2:	693b      	ldr	r3, [r7, #16]
 80007e4:	4a0c      	ldr	r2, [pc, #48]	; (8000818 <__update_makeup_water_added+0xa8>)
 80007e6:	f005 f8d1 	bl	800598c <sniprintf>
 80007ea:	4602      	mov	r2, r0
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	441a      	add	r2, r3
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 6; i++)
 80007f6:	693b      	ldr	r3, [r7, #16]
 80007f8:	3301      	adds	r3, #1
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	2b05      	cmp	r3, #5
 8000800:	ddc1      	ble.n	8000786 <__update_makeup_water_added+0x16>
	}
}
 8000802:	bf00      	nop
 8000804:	3718      	adds	r7, #24
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200000b8 	.word	0x200000b8
 8000810:	66666667 	.word	0x66666667
 8000814:	20000000 	.word	0x20000000
 8000818:	0800623c 	.word	0x0800623c

0800081c <__update_blowdown_water>:

void __update_blowdown_water(char *disp_bd_cmd,int *disp_bd_cmd_len)
{
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b089      	sub	sp, #36	; 0x24
 8000820:	af02      	add	r7, sp, #8
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
	uint8_t n[6];
	int temp = blowdown_water;
 8000826:	4b25      	ldr	r3, [pc, #148]	; (80008bc <__update_blowdown_water+0xa0>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 6; i++)
 800082c:	2300      	movs	r3, #0
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	e03d      	b.n	80008ae <__update_blowdown_water+0x92>
	{
		n[i] = temp % 10;
 8000832:	697a      	ldr	r2, [r7, #20]
 8000834:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <__update_blowdown_water+0xa4>)
 8000836:	fb83 1302 	smull	r1, r3, r3, r2
 800083a:	1099      	asrs	r1, r3, #2
 800083c:	17d3      	asrs	r3, r2, #31
 800083e:	1ac9      	subs	r1, r1, r3
 8000840:	460b      	mov	r3, r1
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	440b      	add	r3, r1
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	1ad1      	subs	r1, r2, r3
 800084a:	b2c9      	uxtb	r1, r1
 800084c:	f107 0208 	add.w	r2, r7, #8
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	4413      	add	r3, r2
 8000854:	460a      	mov	r2, r1
 8000856:	701a      	strb	r2, [r3, #0]
		temp = temp / 10;
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	4a19      	ldr	r2, [pc, #100]	; (80008c0 <__update_blowdown_water+0xa4>)
 800085c:	fb82 1203 	smull	r1, r2, r2, r3
 8000860:	1092      	asrs	r2, r2, #2
 8000862:	17db      	asrs	r3, r3, #31
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	617b      	str	r3, [r7, #20]
		*disp_bd_cmd_len += snprintf (disp_bd_cmd+(*disp_bd_cmd_len),1024-(*disp_bd_cmd_len),"n%d.val=%d%s",i+6,n[i],end_char);
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	461a      	mov	r2, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	1898      	adds	r0, r3, r2
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800087a:	461c      	mov	r4, r3
 800087c:	693b      	ldr	r3, [r7, #16]
 800087e:	1d99      	adds	r1, r3, #6
 8000880:	f107 0208 	add.w	r2, r7, #8
 8000884:	693b      	ldr	r3, [r7, #16]
 8000886:	4413      	add	r3, r2
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	461a      	mov	r2, r3
 800088c:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <__update_blowdown_water+0xa8>)
 800088e:	9301      	str	r3, [sp, #4]
 8000890:	9200      	str	r2, [sp, #0]
 8000892:	460b      	mov	r3, r1
 8000894:	4a0c      	ldr	r2, [pc, #48]	; (80008c8 <__update_blowdown_water+0xac>)
 8000896:	4621      	mov	r1, r4
 8000898:	f005 f878 	bl	800598c <sniprintf>
 800089c:	4602      	mov	r2, r0
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	441a      	add	r2, r3
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 6; i++)
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	3301      	adds	r3, #1
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	693b      	ldr	r3, [r7, #16]
 80008b0:	2b05      	cmp	r3, #5
 80008b2:	ddbe      	ble.n	8000832 <__update_blowdown_water+0x16>
	}
}
 80008b4:	bf00      	nop
 80008b6:	371c      	adds	r7, #28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd90      	pop	{r4, r7, pc}
 80008bc:	200000bc 	.word	0x200000bc
 80008c0:	66666667 	.word	0x66666667
 80008c4:	20000000 	.word	0x20000000
 80008c8:	0800623c 	.word	0x0800623c

080008cc <__update_chemical1>:

void __update_chemical1(char *disp_che1_cmd,int *disp_che1_cmd_len)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af02      	add	r7, sp, #8
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
	*disp_che1_cmd_len += snprintf (disp_che1_cmd+(*disp_che1_cmd_len),1024-(*disp_che1_cmd_len),"n12.val=%d%s",chemical1,end_char); //n12 block on display
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	461a      	mov	r2, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	1898      	adds	r0, r3, r2
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80008e8:	4619      	mov	r1, r3
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <__update_chemical1+0x44>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <__update_chemical1+0x48>)
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	4613      	mov	r3, r2
 80008f4:	4a08      	ldr	r2, [pc, #32]	; (8000918 <__update_chemical1+0x4c>)
 80008f6:	f005 f849 	bl	800598c <sniprintf>
 80008fa:	4602      	mov	r2, r0
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	441a      	add	r2, r3
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	601a      	str	r2, [r3, #0]
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200000c0 	.word	0x200000c0
 8000914:	20000000 	.word	0x20000000
 8000918:	0800624c 	.word	0x0800624c

0800091c <__update_chemical2>:

void __update_chemical2(char *disp_che2_cmd,int *disp_che2_cmd_len)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af02      	add	r7, sp, #8
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
	*disp_che2_cmd_len += snprintf (disp_che2_cmd+(*disp_che2_cmd_len),1024-(*disp_che2_cmd_len),"n13.val=%d%s",chemical2,end_char); //n13 block on display
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	461a      	mov	r2, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	1898      	adds	r0, r3, r2
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000938:	4619      	mov	r1, r3
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <__update_chemical2+0x44>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <__update_chemical2+0x48>)
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	4613      	mov	r3, r2
 8000944:	4a08      	ldr	r2, [pc, #32]	; (8000968 <__update_chemical2+0x4c>)
 8000946:	f005 f821 	bl	800598c <sniprintf>
 800094a:	4602      	mov	r2, r0
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	441a      	add	r2, r3
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	601a      	str	r2, [r3, #0]
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200000c4 	.word	0x200000c4
 8000964:	20000000 	.word	0x20000000
 8000968:	0800625c 	.word	0x0800625c

0800096c <__update_ph_inlet_water>:

void __update_ph_inlet_water(char *disp_ph_inlet_cmd,int *disp_ph_inlet_cmd_len)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af02      	add	r7, sp, #8
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
	*disp_ph_inlet_cmd_len += snprintf (disp_ph_inlet_cmd+(*disp_ph_inlet_cmd_len),1024-(*disp_ph_inlet_cmd_len),"x0.val=%d%s",ph_inlet_water,end_char); //x0 block on display
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	461a      	mov	r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	1898      	adds	r0, r3, r2
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000988:	4619      	mov	r1, r3
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <__update_ph_inlet_water+0x44>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	461a      	mov	r2, r3
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <__update_ph_inlet_water+0x48>)
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	4613      	mov	r3, r2
 8000996:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <__update_ph_inlet_water+0x4c>)
 8000998:	f004 fff8 	bl	800598c <sniprintf>
 800099c:	4602      	mov	r2, r0
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	441a      	add	r2, r3
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	601a      	str	r2, [r3, #0]
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200000c8 	.word	0x200000c8
 80009b4:	20000000 	.word	0x20000000
 80009b8:	0800626c 	.word	0x0800626c

080009bc <__update_ph_plant_water>:

void __update_ph_plant_water(char *disp_ph_plant_cmd,int *disp_ph_plant_cmd_len)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af02      	add	r7, sp, #8
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
	*disp_ph_plant_cmd_len += snprintf (disp_ph_plant_cmd+(*disp_ph_plant_cmd_len),1024-(*disp_ph_plant_cmd_len),"x1.val=%d%s",ph_plant_water,end_char); //x1 block on display
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	461a      	mov	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	1898      	adds	r0, r3, r2
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80009d8:	4619      	mov	r1, r3
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <__update_ph_plant_water+0x44>)
 80009dc:	881b      	ldrh	r3, [r3, #0]
 80009de:	461a      	mov	r2, r3
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <__update_ph_plant_water+0x48>)
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	4613      	mov	r3, r2
 80009e6:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <__update_ph_plant_water+0x4c>)
 80009e8:	f004 ffd0 	bl	800598c <sniprintf>
 80009ec:	4602      	mov	r2, r0
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	441a      	add	r2, r3
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	601a      	str	r2, [r3, #0]
}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200000ca 	.word	0x200000ca
 8000a04:	20000000 	.word	0x20000000
 8000a08:	08006278 	.word	0x08006278

08000a0c <__update_tds_inlet_water>:

void __update_tds_inlet_water(char *disp_tds_inlet_cmd,int *disp_tds_inlet_cmd_len)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af02      	add	r7, sp, #8
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
	*disp_tds_inlet_cmd_len += snprintf (disp_tds_inlet_cmd+(*disp_tds_inlet_cmd_len),1024-(*disp_tds_inlet_cmd_len),"n14.val=%d%s",tds_inlet_water,end_char); //n14 block on display
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	1898      	adds	r0, r3, r2
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <__update_tds_inlet_water+0x44>)
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <__update_tds_inlet_water+0x48>)
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	4613      	mov	r3, r2
 8000a36:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <__update_tds_inlet_water+0x4c>)
 8000a38:	f004 ffa8 	bl	800598c <sniprintf>
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	441a      	add	r2, r3
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	601a      	str	r2, [r3, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	200000cc 	.word	0x200000cc
 8000a54:	20000000 	.word	0x20000000
 8000a58:	08006284 	.word	0x08006284

08000a5c <__update_tds_plant_water>:

void __update_tds_plant_water(char *disp_tds_plant_cmd,int *disp_tds_plant_cmd_len)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af02      	add	r7, sp, #8
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
	*disp_tds_plant_cmd_len += snprintf (disp_tds_plant_cmd+(*disp_tds_plant_cmd_len),1024-(*disp_tds_plant_cmd_len),"n15.val=%d%s",tds_plant_water,end_char); //n15 block on display
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	1898      	adds	r0, r3, r2
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <__update_tds_plant_water+0x44>)
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <__update_tds_plant_water+0x48>)
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	4613      	mov	r3, r2
 8000a86:	4a08      	ldr	r2, [pc, #32]	; (8000aa8 <__update_tds_plant_water+0x4c>)
 8000a88:	f004 ff80 	bl	800598c <sniprintf>
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	441a      	add	r2, r3
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	601a      	str	r2, [r3, #0]
}
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200000ce 	.word	0x200000ce
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	08006294 	.word	0x08006294

08000aac <__update_pump1_status>:

void __update_pump1_status(char *disp_pump1_status_cmd,int *disp_pump1_status_cmd_len)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
	if(pump1_state) //ON State
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <__update_pump1_status+0x6c>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d014      	beq.n	8000ae8 <__update_pump1_status+0x3c>
	{
		*disp_pump1_status_cmd_len += snprintf (disp_pump1_status_cmd+(*disp_pump1_status_cmd_len),1024-(*disp_pump1_status_cmd_len),"p3.pic=3%s",end_char); //p3 block on display
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	1898      	adds	r0, r3, r2
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <__update_pump1_status+0x70>)
 8000ad4:	4a12      	ldr	r2, [pc, #72]	; (8000b20 <__update_pump1_status+0x74>)
 8000ad6:	f004 ff59 	bl	800598c <sniprintf>
 8000ada:	4602      	mov	r2, r0
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	441a      	add	r2, r3
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	601a      	str	r2, [r3, #0]
	else //OFF State
	{
		*disp_pump1_status_cmd_len += snprintf (disp_pump1_status_cmd+(*disp_pump1_status_cmd_len),1024-(*disp_pump1_status_cmd_len),"p3.pic=2%s",end_char); //p3 block on display
	}

}
 8000ae6:	e013      	b.n	8000b10 <__update_pump1_status+0x64>
		*disp_pump1_status_cmd_len += snprintf (disp_pump1_status_cmd+(*disp_pump1_status_cmd_len),1024-(*disp_pump1_status_cmd_len),"p3.pic=2%s",end_char); //p3 block on display
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	461a      	mov	r2, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	1898      	adds	r0, r3, r2
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000afa:	4619      	mov	r1, r3
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <__update_pump1_status+0x70>)
 8000afe:	4a09      	ldr	r2, [pc, #36]	; (8000b24 <__update_pump1_status+0x78>)
 8000b00:	f004 ff44 	bl	800598c <sniprintf>
 8000b04:	4602      	mov	r2, r0
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	441a      	add	r2, r3
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	601a      	str	r2, [r3, #0]
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	200000d0 	.word	0x200000d0
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	080062a4 	.word	0x080062a4
 8000b24:	080062b0 	.word	0x080062b0

08000b28 <__update_pump2_status>:

void __update_pump2_status(char *disp_pump2_status_cmd,int *disp_pump2_status_cmd_len)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
	if(pump2_state) //ON State
 8000b32:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <__update_pump2_status+0x6c>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d014      	beq.n	8000b64 <__update_pump2_status+0x3c>
	{
		*disp_pump2_status_cmd_len += snprintf (disp_pump2_status_cmd+(*disp_pump2_status_cmd_len),1024-(*disp_pump2_status_cmd_len),"p2.pic=3%s",end_char); //p2 block on display
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	1898      	adds	r0, r3, r2
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <__update_pump2_status+0x70>)
 8000b50:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <__update_pump2_status+0x74>)
 8000b52:	f004 ff1b 	bl	800598c <sniprintf>
 8000b56:	4602      	mov	r2, r0
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	441a      	add	r2, r3
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	601a      	str	r2, [r3, #0]
	else //OFF State
	{
		*disp_pump2_status_cmd_len += snprintf (disp_pump2_status_cmd+(*disp_pump2_status_cmd_len),1024-(*disp_pump2_status_cmd_len),"p2.pic=2%s",end_char); //p2 block on display
	}

}
 8000b62:	e013      	b.n	8000b8c <__update_pump2_status+0x64>
		*disp_pump2_status_cmd_len += snprintf (disp_pump2_status_cmd+(*disp_pump2_status_cmd_len),1024-(*disp_pump2_status_cmd_len),"p2.pic=2%s",end_char); //p2 block on display
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	1898      	adds	r0, r3, r2
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000b76:	4619      	mov	r1, r3
 8000b78:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <__update_pump2_status+0x70>)
 8000b7a:	4a09      	ldr	r2, [pc, #36]	; (8000ba0 <__update_pump2_status+0x78>)
 8000b7c:	f004 ff06 	bl	800598c <sniprintf>
 8000b80:	4602      	mov	r2, r0
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	441a      	add	r2, r3
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	601a      	str	r2, [r3, #0]
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000004 	.word	0x20000004
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	080062bc 	.word	0x080062bc
 8000ba0:	080062c8 	.word	0x080062c8

08000ba4 <homescreen_update>:

/*******************************************************************************
 *  PUBLIC
 ******************************************************************************/
void homescreen_update()
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8000baa:	af00      	add	r7, sp, #0
	char homescreen_cmd[1024] = {0};
 8000bac:	f107 0308 	add.w	r3, r7, #8
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	2100      	movs	r1, #0
 8000bba:	f004 fedf 	bl	800597c <memset>
	int homescreen_cmd_len = 0;
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]

	__update_makeup_water_added(homescreen_cmd,&homescreen_cmd_len);
 8000bc4:	1d3a      	adds	r2, r7, #4
 8000bc6:	f107 0308 	add.w	r3, r7, #8
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fdcf 	bl	8000770 <__update_makeup_water_added>
	__update_blowdown_water(homescreen_cmd,&homescreen_cmd_len);
 8000bd2:	1d3a      	adds	r2, r7, #4
 8000bd4:	f107 0308 	add.w	r3, r7, #8
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fe1e 	bl	800081c <__update_blowdown_water>
	__update_chemical1(homescreen_cmd,&homescreen_cmd_len);
 8000be0:	1d3a      	adds	r2, r7, #4
 8000be2:	f107 0308 	add.w	r3, r7, #8
 8000be6:	4611      	mov	r1, r2
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fe6f 	bl	80008cc <__update_chemical1>
	__update_chemical2(homescreen_cmd,&homescreen_cmd_len);
 8000bee:	1d3a      	adds	r2, r7, #4
 8000bf0:	f107 0308 	add.w	r3, r7, #8
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fe90 	bl	800091c <__update_chemical2>
	__update_ph_inlet_water(homescreen_cmd,&homescreen_cmd_len);
 8000bfc:	1d3a      	adds	r2, r7, #4
 8000bfe:	f107 0308 	add.w	r3, r7, #8
 8000c02:	4611      	mov	r1, r2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff feb1 	bl	800096c <__update_ph_inlet_water>
	__update_ph_plant_water(homescreen_cmd,&homescreen_cmd_len);
 8000c0a:	1d3a      	adds	r2, r7, #4
 8000c0c:	f107 0308 	add.w	r3, r7, #8
 8000c10:	4611      	mov	r1, r2
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fed2 	bl	80009bc <__update_ph_plant_water>
	__update_tds_inlet_water(homescreen_cmd,&homescreen_cmd_len);
 8000c18:	1d3a      	adds	r2, r7, #4
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fef3 	bl	8000a0c <__update_tds_inlet_water>
	__update_tds_plant_water(homescreen_cmd,&homescreen_cmd_len);
 8000c26:	1d3a      	adds	r2, r7, #4
 8000c28:	f107 0308 	add.w	r3, r7, #8
 8000c2c:	4611      	mov	r1, r2
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff ff14 	bl	8000a5c <__update_tds_plant_water>
	__update_pump1_status(homescreen_cmd,&homescreen_cmd_len);
 8000c34:	1d3a      	adds	r2, r7, #4
 8000c36:	f107 0308 	add.w	r3, r7, #8
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff35 	bl	8000aac <__update_pump1_status>
	__update_pump2_status(homescreen_cmd,&homescreen_cmd_len);
 8000c42:	1d3a      	adds	r2, r7, #4
 8000c44:	f107 0308 	add.w	r3, r7, #8
 8000c48:	4611      	mov	r1, r2
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ff6c 	bl	8000b28 <__update_pump2_status>

	lcd_send_cmd(homescreen_cmd,homescreen_cmd_len);
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	f107 0308 	add.w	r3, r7, #8
 8000c58:	4611      	mov	r1, r2
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 fa72 	bl	8002144 <lcd_send_cmd>

}
 8000c60:	bf00      	nop
 8000c62:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <keys_action>:
#include "stm32f4xx_hal.h"

int key_pressed_flag;
int key_pressed = NONE_KEY_PRESSED;

void keys_action(){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0

	if(HAL_GPIO_ReadPin(LEFT_KEY_GPIO_Port,LEFT_KEY_Pin) == 1 && key_pressed_flag == NONE_KEY_PRESSED )
 8000c70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c74:	4845      	ldr	r0, [pc, #276]	; (8000d8c <keys_action+0x120>)
 8000c76:	f002 fb75 	bl	8003364 <HAL_GPIO_ReadPin>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d107      	bne.n	8000c90 <keys_action+0x24>
 8000c80:	4b43      	ldr	r3, [pc, #268]	; (8000d90 <keys_action+0x124>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d103      	bne.n	8000c90 <keys_action+0x24>
	{
		key_pressed_flag = LEFT_KEY_PRESSED;
 8000c88:	4b41      	ldr	r3, [pc, #260]	; (8000d90 <keys_action+0x124>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	e07b      	b.n	8000d88 <keys_action+0x11c>
	}
	else if(HAL_GPIO_ReadPin(LEFT_KEY_GPIO_Port,LEFT_KEY_Pin) == 0 && key_pressed_flag == LEFT_KEY_PRESSED)
 8000c90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c94:	483d      	ldr	r0, [pc, #244]	; (8000d8c <keys_action+0x120>)
 8000c96:	f002 fb65 	bl	8003364 <HAL_GPIO_ReadPin>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d10a      	bne.n	8000cb6 <keys_action+0x4a>
 8000ca0:	4b3b      	ldr	r3, [pc, #236]	; (8000d90 <keys_action+0x124>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d106      	bne.n	8000cb6 <keys_action+0x4a>
	{

		key_pressed = LEFT_KEY_PRESSED;
 8000ca8:	4b3a      	ldr	r3, [pc, #232]	; (8000d94 <keys_action+0x128>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	601a      	str	r2, [r3, #0]
		key_pressed_flag = NONE_KEY_PRESSED;
 8000cae:	4b38      	ldr	r3, [pc, #224]	; (8000d90 <keys_action+0x124>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	e068      	b.n	8000d88 <keys_action+0x11c>
	}
	else if(HAL_GPIO_ReadPin(RIGHT_KEY_GPIO_Port,RIGHT_KEY_Pin) == 1 && key_pressed_flag == NONE_KEY_PRESSED )
 8000cb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cba:	4834      	ldr	r0, [pc, #208]	; (8000d8c <keys_action+0x120>)
 8000cbc:	f002 fb52 	bl	8003364 <HAL_GPIO_ReadPin>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d107      	bne.n	8000cd6 <keys_action+0x6a>
 8000cc6:	4b32      	ldr	r3, [pc, #200]	; (8000d90 <keys_action+0x124>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d103      	bne.n	8000cd6 <keys_action+0x6a>
	{
		key_pressed_flag = RIGHT_KEY_PRESSED;
 8000cce:	4b30      	ldr	r3, [pc, #192]	; (8000d90 <keys_action+0x124>)
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	e058      	b.n	8000d88 <keys_action+0x11c>
	}
	else if(HAL_GPIO_ReadPin(RIGHT_KEY_GPIO_Port,RIGHT_KEY_Pin) == 0 && key_pressed_flag == RIGHT_KEY_PRESSED)
 8000cd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cda:	482c      	ldr	r0, [pc, #176]	; (8000d8c <keys_action+0x120>)
 8000cdc:	f002 fb42 	bl	8003364 <HAL_GPIO_ReadPin>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d10a      	bne.n	8000cfc <keys_action+0x90>
 8000ce6:	4b2a      	ldr	r3, [pc, #168]	; (8000d90 <keys_action+0x124>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d106      	bne.n	8000cfc <keys_action+0x90>
	{
		key_pressed = RIGHT_KEY_PRESSED;
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <keys_action+0x128>)
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	601a      	str	r2, [r3, #0]
		key_pressed_flag = NONE_KEY_PRESSED;
 8000cf4:	4b26      	ldr	r3, [pc, #152]	; (8000d90 <keys_action+0x124>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	e045      	b.n	8000d88 <keys_action+0x11c>
	}
	else if(HAL_GPIO_ReadPin(ENTER_KEY_GPIO_Port,ENTER_KEY_Pin) == 1 && key_pressed_flag == NONE_KEY_PRESSED )
 8000cfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d00:	4822      	ldr	r0, [pc, #136]	; (8000d8c <keys_action+0x120>)
 8000d02:	f002 fb2f 	bl	8003364 <HAL_GPIO_ReadPin>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d107      	bne.n	8000d1c <keys_action+0xb0>
 8000d0c:	4b20      	ldr	r3, [pc, #128]	; (8000d90 <keys_action+0x124>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d103      	bne.n	8000d1c <keys_action+0xb0>
	{
		key_pressed_flag = ENTER_KEY_PRESSED;
 8000d14:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <keys_action+0x124>)
 8000d16:	2203      	movs	r2, #3
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	e035      	b.n	8000d88 <keys_action+0x11c>
	}
	else if(HAL_GPIO_ReadPin(ENTER_KEY_GPIO_Port,ENTER_KEY_Pin) == 0 && key_pressed_flag == ENTER_KEY_PRESSED)
 8000d1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d20:	481a      	ldr	r0, [pc, #104]	; (8000d8c <keys_action+0x120>)
 8000d22:	f002 fb1f 	bl	8003364 <HAL_GPIO_ReadPin>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d10a      	bne.n	8000d42 <keys_action+0xd6>
 8000d2c:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <keys_action+0x124>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b03      	cmp	r3, #3
 8000d32:	d106      	bne.n	8000d42 <keys_action+0xd6>
	{
		key_pressed = ENTER_KEY_PRESSED;
 8000d34:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <keys_action+0x128>)
 8000d36:	2203      	movs	r2, #3
 8000d38:	601a      	str	r2, [r3, #0]
		key_pressed_flag = NONE_KEY_PRESSED;
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <keys_action+0x124>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	e022      	b.n	8000d88 <keys_action+0x11c>
	}
	else if(HAL_GPIO_ReadPin(ESC_KEY_GPIO_Port,ESC_KEY_Pin) == 1 && key_pressed_flag == NONE_KEY_PRESSED )
 8000d42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d46:	4814      	ldr	r0, [pc, #80]	; (8000d98 <keys_action+0x12c>)
 8000d48:	f002 fb0c 	bl	8003364 <HAL_GPIO_ReadPin>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d107      	bne.n	8000d62 <keys_action+0xf6>
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <keys_action+0x124>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d103      	bne.n	8000d62 <keys_action+0xf6>
	{
		key_pressed_flag = ESC_KEY_PRESSED;
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <keys_action+0x124>)
 8000d5c:	2204      	movs	r2, #4
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	e012      	b.n	8000d88 <keys_action+0x11c>
	}
	else if(HAL_GPIO_ReadPin(ESC_KEY_GPIO_Port,ESC_KEY_Pin) == 0 && key_pressed_flag == ESC_KEY_PRESSED)
 8000d62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d66:	480c      	ldr	r0, [pc, #48]	; (8000d98 <keys_action+0x12c>)
 8000d68:	f002 fafc 	bl	8003364 <HAL_GPIO_ReadPin>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d10a      	bne.n	8000d88 <keys_action+0x11c>
 8000d72:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <keys_action+0x124>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	d106      	bne.n	8000d88 <keys_action+0x11c>
	{
		key_pressed = ESC_KEY_PRESSED;
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <keys_action+0x128>)
 8000d7c:	2204      	movs	r2, #4
 8000d7e:	601a      	str	r2, [r3, #0]
		key_pressed_flag = NONE_KEY_PRESSED;
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <keys_action+0x124>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
	}

}
 8000d86:	e7ff      	b.n	8000d88 <keys_action+0x11c>
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40020c00 	.word	0x40020c00
 8000d90:	2000016c 	.word	0x2000016c
 8000d94:	2000009c 	.word	0x2000009c
 8000d98:	40020400 	.word	0x40020400

08000d9c <__settings_selection>:
/*******************************************************************************
 *  PRIVATE
 ******************************************************************************/
void
__settings_selection(uint8_t src, uint8_t dest)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af02      	add	r7, sp, #8
 8000da2:	4603      	mov	r3, r0
 8000da4:	460a      	mov	r2, r1
 8000da6:	71fb      	strb	r3, [r7, #7]
 8000da8:	4613      	mov	r3, r2
 8000daa:	71bb      	strb	r3, [r7, #6]
	edit_settings_cmd_len = sprintf(edit_settings_cmd,"t%d.pco=65535%st%d.pco=63488%s",src,end_char,dest,end_char);
 8000dac:	79f9      	ldrb	r1, [r7, #7]
 8000dae:	79bb      	ldrb	r3, [r7, #6]
 8000db0:	4a0c      	ldr	r2, [pc, #48]	; (8000de4 <__settings_selection+0x48>)
 8000db2:	9201      	str	r2, [sp, #4]
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <__settings_selection+0x48>)
 8000db8:	460a      	mov	r2, r1
 8000dba:	490b      	ldr	r1, [pc, #44]	; (8000de8 <__settings_selection+0x4c>)
 8000dbc:	480b      	ldr	r0, [pc, #44]	; (8000dec <__settings_selection+0x50>)
 8000dbe:	f004 fe19 	bl	80059f4 <siprintf>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <__settings_selection+0x54>)
 8000dc6:	601a      	str	r2, [r3, #0]
	lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8000dc8:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <__settings_selection+0x54>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4807      	ldr	r0, [pc, #28]	; (8000dec <__settings_selection+0x50>)
 8000dd0:	f001 f9b8 	bl	8002144 <lcd_send_cmd>
	key_pressed = NONE_KEY_PRESSED;
 8000dd4:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <__settings_selection+0x58>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000000 	.word	0x20000000
 8000de8:	080062d4 	.word	0x080062d4
 8000dec:	20000170 	.word	0x20000170
 8000df0:	200000a4 	.word	0x200000a4
 8000df4:	2000009c 	.word	0x2000009c

08000df8 <__esc_settings_selection>:

void
__esc_settings_selection(uint8_t src)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
	edit_settings_cmd_len = sprintf(edit_settings_cmd,"t%d.pco=65535%s",src,end_char);
 8000e02:	79fa      	ldrb	r2, [r7, #7]
 8000e04:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <__esc_settings_selection+0x44>)
 8000e06:	490e      	ldr	r1, [pc, #56]	; (8000e40 <__esc_settings_selection+0x48>)
 8000e08:	480e      	ldr	r0, [pc, #56]	; (8000e44 <__esc_settings_selection+0x4c>)
 8000e0a:	f004 fdf3 	bl	80059f4 <siprintf>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <__esc_settings_selection+0x50>)
 8000e12:	601a      	str	r2, [r3, #0]
	lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <__esc_settings_selection+0x50>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	480a      	ldr	r0, [pc, #40]	; (8000e44 <__esc_settings_selection+0x4c>)
 8000e1c:	f001 f992 	bl	8002144 <lcd_send_cmd>
	DisplayActions = display_screens;
 8000e20:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <__esc_settings_selection+0x54>)
 8000e22:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <__esc_settings_selection+0x58>)
 8000e24:	601a      	str	r2, [r3, #0]
	key_pressed = NONE_KEY_PRESSED;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <__esc_settings_selection+0x5c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
	current_edit_settings_state = GOTO_OFFSET_MAKE_UP_WATER;
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <__esc_settings_selection+0x60>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	080062f4 	.word	0x080062f4
 8000e44:	20000170 	.word	0x20000170
 8000e48:	200000a4 	.word	0x200000a4
 8000e4c:	20000104 	.word	0x20000104
 8000e50:	08000591 	.word	0x08000591
 8000e54:	2000009c 	.word	0x2000009c
 8000e58:	200000a0 	.word	0x200000a0

08000e5c <__select_six_digits>:

void
__select_six_digits(uint8_t src)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b0a0      	sub	sp, #128	; 0x80
 8000e60:	af02      	add	r7, sp, #8
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
	char select_six_digits_cmd[100] = {0};
 8000e66:	f107 030c 	add.w	r3, r7, #12
 8000e6a:	2264      	movs	r2, #100	; 0x64
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f004 fd84 	bl	800597c <memset>
	int select_six_digits_cmd_len = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	677b      	str	r3, [r7, #116]	; 0x74
	for(int i = src; i < (src + 6); i++)
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	673b      	str	r3, [r7, #112]	; 0x70
 8000e7c:	e014      	b.n	8000ea8 <__select_six_digits+0x4c>
	{
		select_six_digits_cmd_len += snprintf (select_six_digits_cmd+select_six_digits_cmd_len,100-select_six_digits_cmd_len,"n%d.pco=63488%s",i,end_char);
 8000e7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e80:	f107 020c 	add.w	r2, r7, #12
 8000e84:	18d0      	adds	r0, r2, r3
 8000e86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e88:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <__select_six_digits+0x88>)
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <__select_six_digits+0x8c>)
 8000e96:	f004 fd79 	bl	800598c <sniprintf>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e9e:	4413      	add	r3, r2
 8000ea0:	677b      	str	r3, [r7, #116]	; 0x74
	for(int i = src; i < (src + 6); i++)
 8000ea2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	673b      	str	r3, [r7, #112]	; 0x70
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	3306      	adds	r3, #6
 8000eac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	dbe5      	blt.n	8000e7e <__select_six_digits+0x22>
	}
	edit_settings_cmd_len = sprintf(edit_settings_cmd,select_six_digits_cmd);
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480c      	ldr	r0, [pc, #48]	; (8000eec <__select_six_digits+0x90>)
 8000eba:	f004 fd9b 	bl	80059f4 <siprintf>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <__select_six_digits+0x94>)
 8000ec2:	601a      	str	r2, [r3, #0]
	lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <__select_six_digits+0x94>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4808      	ldr	r0, [pc, #32]	; (8000eec <__select_six_digits+0x90>)
 8000ecc:	f001 f93a 	bl	8002144 <lcd_send_cmd>
	DisplayActions = display_edit_digits;
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <__select_six_digits+0x98>)
 8000ed2:	4a09      	ldr	r2, [pc, #36]	; (8000ef8 <__select_six_digits+0x9c>)
 8000ed4:	601a      	str	r2, [r3, #0]
	key_pressed = NONE_KEY_PRESSED;
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <__select_six_digits+0xa0>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
}
 8000edc:	bf00      	nop
 8000ede:	3778      	adds	r7, #120	; 0x78
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	08006304 	.word	0x08006304
 8000eec:	20000170 	.word	0x20000170
 8000ef0:	200000a4 	.word	0x200000a4
 8000ef4:	20000104 	.word	0x20000104
 8000ef8:	08001665 	.word	0x08001665
 8000efc:	2000009c 	.word	0x2000009c

08000f00 <__store_six_digits>:

void
__store_six_digits(int *set_val, uint8_t onscreen_digit_loc)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b0bc      	sub	sp, #240	; 0xf0
 8000f04:	af02      	add	r7, sp, #8
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	70fb      	strb	r3, [r7, #3]
	onscreen_digit_loc += current_digit_loc;
 8000f0c:	4ba1      	ldr	r3, [pc, #644]	; (8001194 <__store_six_digits+0x294>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	78fb      	ldrb	r3, [r7, #3]
 8000f14:	4413      	add	r3, r2
 8000f16:	70fb      	strb	r3, [r7, #3]
	if(key_pressed == RIGHT_KEY_PRESSED)
 8000f18:	4b9f      	ldr	r3, [pc, #636]	; (8001198 <__store_six_digits+0x298>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d12e      	bne.n	8000f7e <__store_six_digits+0x7e>
	{
		if(new_digits[current_digit_loc] == 0)
 8000f20:	4b9c      	ldr	r3, [pc, #624]	; (8001194 <__store_six_digits+0x294>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a9d      	ldr	r2, [pc, #628]	; (800119c <__store_six_digits+0x29c>)
 8000f26:	5cd3      	ldrb	r3, [r2, r3]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d105      	bne.n	8000f38 <__store_six_digits+0x38>
		{
			new_digits[current_digit_loc] = 9;
 8000f2c:	4b99      	ldr	r3, [pc, #612]	; (8001194 <__store_six_digits+0x294>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a9a      	ldr	r2, [pc, #616]	; (800119c <__store_six_digits+0x29c>)
 8000f32:	2109      	movs	r1, #9
 8000f34:	54d1      	strb	r1, [r2, r3]
 8000f36:	e007      	b.n	8000f48 <__store_six_digits+0x48>
		}
		else
		{
			new_digits[current_digit_loc]--;
 8000f38:	4b96      	ldr	r3, [pc, #600]	; (8001194 <__store_six_digits+0x294>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a97      	ldr	r2, [pc, #604]	; (800119c <__store_six_digits+0x29c>)
 8000f3e:	5cd2      	ldrb	r2, [r2, r3]
 8000f40:	3a01      	subs	r2, #1
 8000f42:	b2d1      	uxtb	r1, r2
 8000f44:	4a95      	ldr	r2, [pc, #596]	; (800119c <__store_six_digits+0x29c>)
 8000f46:	54d1      	strb	r1, [r2, r3]
		}
		edit_settings_cmd_len = sprintf(edit_settings_cmd,"n%d.val=%d%s",onscreen_digit_loc,new_digits[current_digit_loc],end_char);
 8000f48:	78f9      	ldrb	r1, [r7, #3]
 8000f4a:	4b92      	ldr	r3, [pc, #584]	; (8001194 <__store_six_digits+0x294>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a93      	ldr	r2, [pc, #588]	; (800119c <__store_six_digits+0x29c>)
 8000f50:	5cd3      	ldrb	r3, [r2, r3]
 8000f52:	461a      	mov	r2, r3
 8000f54:	4b92      	ldr	r3, [pc, #584]	; (80011a0 <__store_six_digits+0x2a0>)
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	460a      	mov	r2, r1
 8000f5c:	4991      	ldr	r1, [pc, #580]	; (80011a4 <__store_six_digits+0x2a4>)
 8000f5e:	4892      	ldr	r0, [pc, #584]	; (80011a8 <__store_six_digits+0x2a8>)
 8000f60:	f004 fd48 	bl	80059f4 <siprintf>
 8000f64:	4602      	mov	r2, r0
 8000f66:	4b91      	ldr	r3, [pc, #580]	; (80011ac <__store_six_digits+0x2ac>)
 8000f68:	601a      	str	r2, [r3, #0]
		lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8000f6a:	4b90      	ldr	r3, [pc, #576]	; (80011ac <__store_six_digits+0x2ac>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4619      	mov	r1, r3
 8000f70:	488d      	ldr	r0, [pc, #564]	; (80011a8 <__store_six_digits+0x2a8>)
 8000f72:	f001 f8e7 	bl	8002144 <lcd_send_cmd>
		key_pressed = NONE_KEY_PRESSED;
 8000f76:	4b88      	ldr	r3, [pc, #544]	; (8001198 <__store_six_digits+0x298>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	e106      	b.n	800118c <__store_six_digits+0x28c>
	}
	else if(key_pressed == LEFT_KEY_PRESSED)
 8000f7e:	4b86      	ldr	r3, [pc, #536]	; (8001198 <__store_six_digits+0x298>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d12e      	bne.n	8000fe4 <__store_six_digits+0xe4>
	{
		if(new_digits[current_digit_loc] == 9)
 8000f86:	4b83      	ldr	r3, [pc, #524]	; (8001194 <__store_six_digits+0x294>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a84      	ldr	r2, [pc, #528]	; (800119c <__store_six_digits+0x29c>)
 8000f8c:	5cd3      	ldrb	r3, [r2, r3]
 8000f8e:	2b09      	cmp	r3, #9
 8000f90:	d105      	bne.n	8000f9e <__store_six_digits+0x9e>
		{
			new_digits[current_digit_loc] = 0;
 8000f92:	4b80      	ldr	r3, [pc, #512]	; (8001194 <__store_six_digits+0x294>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a81      	ldr	r2, [pc, #516]	; (800119c <__store_six_digits+0x29c>)
 8000f98:	2100      	movs	r1, #0
 8000f9a:	54d1      	strb	r1, [r2, r3]
 8000f9c:	e007      	b.n	8000fae <__store_six_digits+0xae>
		}
		else
		{
			new_digits[current_digit_loc]++;
 8000f9e:	4b7d      	ldr	r3, [pc, #500]	; (8001194 <__store_six_digits+0x294>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a7e      	ldr	r2, [pc, #504]	; (800119c <__store_six_digits+0x29c>)
 8000fa4:	5cd2      	ldrb	r2, [r2, r3]
 8000fa6:	3201      	adds	r2, #1
 8000fa8:	b2d1      	uxtb	r1, r2
 8000faa:	4a7c      	ldr	r2, [pc, #496]	; (800119c <__store_six_digits+0x29c>)
 8000fac:	54d1      	strb	r1, [r2, r3]
		}
		edit_settings_cmd_len = sprintf(edit_settings_cmd,"n%d.val=%d%s",onscreen_digit_loc,new_digits[current_digit_loc],end_char);
 8000fae:	78f9      	ldrb	r1, [r7, #3]
 8000fb0:	4b78      	ldr	r3, [pc, #480]	; (8001194 <__store_six_digits+0x294>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a79      	ldr	r2, [pc, #484]	; (800119c <__store_six_digits+0x29c>)
 8000fb6:	5cd3      	ldrb	r3, [r2, r3]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b79      	ldr	r3, [pc, #484]	; (80011a0 <__store_six_digits+0x2a0>)
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	460a      	mov	r2, r1
 8000fc2:	4978      	ldr	r1, [pc, #480]	; (80011a4 <__store_six_digits+0x2a4>)
 8000fc4:	4878      	ldr	r0, [pc, #480]	; (80011a8 <__store_six_digits+0x2a8>)
 8000fc6:	f004 fd15 	bl	80059f4 <siprintf>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	4b77      	ldr	r3, [pc, #476]	; (80011ac <__store_six_digits+0x2ac>)
 8000fce:	601a      	str	r2, [r3, #0]
		lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8000fd0:	4b76      	ldr	r3, [pc, #472]	; (80011ac <__store_six_digits+0x2ac>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4874      	ldr	r0, [pc, #464]	; (80011a8 <__store_six_digits+0x2a8>)
 8000fd8:	f001 f8b4 	bl	8002144 <lcd_send_cmd>
		key_pressed = NONE_KEY_PRESSED;
 8000fdc:	4b6e      	ldr	r3, [pc, #440]	; (8001198 <__store_six_digits+0x298>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	e0d3      	b.n	800118c <__store_six_digits+0x28c>
	}
	else if(key_pressed == ENTER_KEY_PRESSED)
 8000fe4:	4b6c      	ldr	r3, [pc, #432]	; (8001198 <__store_six_digits+0x298>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	d120      	bne.n	800102e <__store_six_digits+0x12e>
	{
		edit_settings_cmd_len = sprintf(edit_settings_cmd,"n%d.pco=0%s",onscreen_digit_loc,end_char);
 8000fec:	78fa      	ldrb	r2, [r7, #3]
 8000fee:	4b6c      	ldr	r3, [pc, #432]	; (80011a0 <__store_six_digits+0x2a0>)
 8000ff0:	496f      	ldr	r1, [pc, #444]	; (80011b0 <__store_six_digits+0x2b0>)
 8000ff2:	486d      	ldr	r0, [pc, #436]	; (80011a8 <__store_six_digits+0x2a8>)
 8000ff4:	f004 fcfe 	bl	80059f4 <siprintf>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	4b6c      	ldr	r3, [pc, #432]	; (80011ac <__store_six_digits+0x2ac>)
 8000ffc:	601a      	str	r2, [r3, #0]
		lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8000ffe:	4b6b      	ldr	r3, [pc, #428]	; (80011ac <__store_six_digits+0x2ac>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4619      	mov	r1, r3
 8001004:	4868      	ldr	r0, [pc, #416]	; (80011a8 <__store_six_digits+0x2a8>)
 8001006:	f001 f89d 	bl	8002144 <lcd_send_cmd>
		key_pressed = NONE_KEY_PRESSED;
 800100a:	4b63      	ldr	r3, [pc, #396]	; (8001198 <__store_six_digits+0x298>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
		current_digit_loc = (current_digit_loc == SIXTH_DIGIT) ? FIRST_DIGIT : current_digit_loc+1;
 8001010:	4b60      	ldr	r3, [pc, #384]	; (8001194 <__store_six_digits+0x294>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b05      	cmp	r3, #5
 8001016:	d003      	beq.n	8001020 <__store_six_digits+0x120>
 8001018:	4b5e      	ldr	r3, [pc, #376]	; (8001194 <__store_six_digits+0x294>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	3301      	adds	r3, #1
 800101e:	e000      	b.n	8001022 <__store_six_digits+0x122>
 8001020:	2300      	movs	r3, #0
 8001022:	4a5c      	ldr	r2, [pc, #368]	; (8001194 <__store_six_digits+0x294>)
 8001024:	6013      	str	r3, [r2, #0]
		settings_semaphore = 2;
 8001026:	4b63      	ldr	r3, [pc, #396]	; (80011b4 <__store_six_digits+0x2b4>)
 8001028:	2202      	movs	r2, #2
 800102a:	601a      	str	r2, [r3, #0]
		return;
 800102c:	e0ae      	b.n	800118c <__store_six_digits+0x28c>
	}
	else if(key_pressed == ESC_KEY_PRESSED)
 800102e:	4b5a      	ldr	r3, [pc, #360]	; (8001198 <__store_six_digits+0x298>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b04      	cmp	r3, #4
 8001034:	f040 80aa 	bne.w	800118c <__store_six_digits+0x28c>
	{
		char digit_color_cmd[100] = {0};
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	2264      	movs	r2, #100	; 0x64
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f004 fc9b 	bl	800597c <memset>
		int digit_color_cmd_len = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		for(int i = onscreen_digit_loc; i < (onscreen_digit_loc - current_digit_loc + 6); i++)
 800104c:	78fb      	ldrb	r3, [r7, #3]
 800104e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001052:	e01b      	b.n	800108c <__store_six_digits+0x18c>
		{
			digit_color_cmd_len += snprintf (digit_color_cmd+digit_color_cmd_len,100-digit_color_cmd_len,"n%d.pco=0%s",i,end_char);
 8001054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001058:	f107 0208 	add.w	r2, r7, #8
 800105c:	18d0      	adds	r0, r2, r3
 800105e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001062:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001066:	4619      	mov	r1, r3
 8001068:	4b4d      	ldr	r3, [pc, #308]	; (80011a0 <__store_six_digits+0x2a0>)
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001070:	4a4f      	ldr	r2, [pc, #316]	; (80011b0 <__store_six_digits+0x2b0>)
 8001072:	f004 fc8b 	bl	800598c <sniprintf>
 8001076:	4602      	mov	r2, r0
 8001078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800107c:	4413      	add	r3, r2
 800107e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		for(int i = onscreen_digit_loc; i < (onscreen_digit_loc - current_digit_loc + 6); i++)
 8001082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001086:	3301      	adds	r3, #1
 8001088:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800108c:	78fa      	ldrb	r2, [r7, #3]
 800108e:	4b41      	ldr	r3, [pc, #260]	; (8001194 <__store_six_digits+0x294>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	3306      	adds	r3, #6
 8001096:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800109a:	429a      	cmp	r2, r3
 800109c:	dbda      	blt.n	8001054 <__store_six_digits+0x154>
		}
		char digit_val_cmd[100] = {0};
 800109e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010a2:	2264      	movs	r2, #100	; 0x64
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f004 fc68 	bl	800597c <memset>
		int digit_val_cmd_len = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		int temp = *set_val;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		int digit = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		for(int i = onscreen_digit_loc-current_digit_loc; i < (onscreen_digit_loc - current_digit_loc + 6); i++)
 80010c0:	78fa      	ldrb	r2, [r7, #3]
 80010c2:	4b34      	ldr	r3, [pc, #208]	; (8001194 <__store_six_digits+0x294>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80010cc:	e037      	b.n	800113e <__store_six_digits+0x23e>
		{
			digit = temp % 10;
 80010ce:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80010d2:	4b39      	ldr	r3, [pc, #228]	; (80011b8 <__store_six_digits+0x2b8>)
 80010d4:	fb83 1302 	smull	r1, r3, r3, r2
 80010d8:	1099      	asrs	r1, r3, #2
 80010da:	17d3      	asrs	r3, r2, #31
 80010dc:	1ac9      	subs	r1, r1, r3
 80010de:	460b      	mov	r3, r1
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	440b      	add	r3, r1
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			temp = temp / 10;
 80010ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80010f0:	4a31      	ldr	r2, [pc, #196]	; (80011b8 <__store_six_digits+0x2b8>)
 80010f2:	fb82 1203 	smull	r1, r2, r2, r3
 80010f6:	1092      	asrs	r2, r2, #2
 80010f8:	17db      	asrs	r3, r3, #31
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			digit_val_cmd_len += snprintf (digit_val_cmd+digit_val_cmd_len,100-digit_val_cmd_len,"n%d.val=%d%s",i,digit,end_char);
 8001100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001104:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001108:	18d0      	adds	r0, r2, r3
 800110a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800110e:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001112:	4619      	mov	r1, r3
 8001114:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <__store_six_digits+0x2a0>)
 8001116:	9301      	str	r3, [sp, #4]
 8001118:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001122:	4a20      	ldr	r2, [pc, #128]	; (80011a4 <__store_six_digits+0x2a4>)
 8001124:	f004 fc32 	bl	800598c <sniprintf>
 8001128:	4602      	mov	r2, r0
 800112a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800112e:	4413      	add	r3, r2
 8001130:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		for(int i = onscreen_digit_loc-current_digit_loc; i < (onscreen_digit_loc - current_digit_loc + 6); i++)
 8001134:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001138:	3301      	adds	r3, #1
 800113a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800113e:	78fa      	ldrb	r2, [r7, #3]
 8001140:	4b14      	ldr	r3, [pc, #80]	; (8001194 <__store_six_digits+0x294>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	3306      	adds	r3, #6
 8001148:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800114c:	429a      	cmp	r2, r3
 800114e:	dbbe      	blt.n	80010ce <__store_six_digits+0x1ce>
		}
		edit_settings_cmd_len = sprintf(edit_settings_cmd,"%s%s",digit_color_cmd,digit_val_cmd);
 8001150:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001154:	f107 0208 	add.w	r2, r7, #8
 8001158:	4918      	ldr	r1, [pc, #96]	; (80011bc <__store_six_digits+0x2bc>)
 800115a:	4813      	ldr	r0, [pc, #76]	; (80011a8 <__store_six_digits+0x2a8>)
 800115c:	f004 fc4a 	bl	80059f4 <siprintf>
 8001160:	4602      	mov	r2, r0
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <__store_six_digits+0x2ac>)
 8001164:	601a      	str	r2, [r3, #0]
		lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <__store_six_digits+0x2ac>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4619      	mov	r1, r3
 800116c:	480e      	ldr	r0, [pc, #56]	; (80011a8 <__store_six_digits+0x2a8>)
 800116e:	f000 ffe9 	bl	8002144 <lcd_send_cmd>
		settings_semaphore = 0;
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <__store_six_digits+0x2b4>)
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
		current_digit_loc = FIRST_DIGIT;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <__store_six_digits+0x294>)
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
		key_pressed = NONE_KEY_PRESSED;
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <__store_six_digits+0x298>)
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
		DisplayActions = display_edit_settings;
 8001184:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <__store_six_digits+0x2c0>)
 8001186:	4a0f      	ldr	r2, [pc, #60]	; (80011c4 <__store_six_digits+0x2c4>)
 8001188:	601a      	str	r2, [r3, #0]
		return;
 800118a:	bf00      	nop
	}
}
 800118c:	37e8      	adds	r7, #232	; 0xe8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200000ac 	.word	0x200000ac
 8001198:	2000009c 	.word	0x2000009c
 800119c:	200000b0 	.word	0x200000b0
 80011a0:	20000000 	.word	0x20000000
 80011a4:	08006314 	.word	0x08006314
 80011a8:	20000170 	.word	0x20000170
 80011ac:	200000a4 	.word	0x200000a4
 80011b0:	08006324 	.word	0x08006324
 80011b4:	200000a8 	.word	0x200000a8
 80011b8:	66666667 	.word	0x66666667
 80011bc:	08006330 	.word	0x08006330
 80011c0:	20000104 	.word	0x20000104
 80011c4:	08001321 	.word	0x08001321

080011c8 <__edit_six_digits>:

void
__edit_six_digits(int *settings_val, uint8_t src)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	70fb      	strb	r3, [r7, #3]
	if(settings_semaphore == 0)
 80011d4:	4b4c      	ldr	r3, [pc, #304]	; (8001308 <__edit_six_digits+0x140>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d129      	bne.n	8001230 <__edit_six_digits+0x68>
	{
		settings_semaphore = 1;
 80011dc:	4b4a      	ldr	r3, [pc, #296]	; (8001308 <__edit_six_digits+0x140>)
 80011de:	2201      	movs	r2, #1
 80011e0:	601a      	str	r2, [r3, #0]
		int temp = *settings_val;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	617b      	str	r3, [r7, #20]
		for(int i = 0; i < 6; i++)
 80011e8:	2300      	movs	r3, #0
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	e01c      	b.n	8001228 <__edit_six_digits+0x60>
		{
			new_digits[i] = temp % 10;
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	4b46      	ldr	r3, [pc, #280]	; (800130c <__edit_six_digits+0x144>)
 80011f2:	fb83 1302 	smull	r1, r3, r3, r2
 80011f6:	1099      	asrs	r1, r3, #2
 80011f8:	17d3      	asrs	r3, r2, #31
 80011fa:	1ac9      	subs	r1, r1, r3
 80011fc:	460b      	mov	r3, r1
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	1ad1      	subs	r1, r2, r3
 8001206:	b2c9      	uxtb	r1, r1
 8001208:	4a41      	ldr	r2, [pc, #260]	; (8001310 <__edit_six_digits+0x148>)
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	4413      	add	r3, r2
 800120e:	460a      	mov	r2, r1
 8001210:	701a      	strb	r2, [r3, #0]
			temp = temp / 10;
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	4a3d      	ldr	r2, [pc, #244]	; (800130c <__edit_six_digits+0x144>)
 8001216:	fb82 1203 	smull	r1, r2, r2, r3
 800121a:	1092      	asrs	r2, r2, #2
 800121c:	17db      	asrs	r3, r3, #31
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	617b      	str	r3, [r7, #20]
		for(int i = 0; i < 6; i++)
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	3301      	adds	r3, #1
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	2b05      	cmp	r3, #5
 800122c:	dddf      	ble.n	80011ee <__edit_six_digits+0x26>
					}
				}
				break;
		}
	}
}
 800122e:	e066      	b.n	80012fe <__edit_six_digits+0x136>
		switch(current_digit_loc)
 8001230:	4b38      	ldr	r3, [pc, #224]	; (8001314 <__edit_six_digits+0x14c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b05      	cmp	r3, #5
 8001236:	d862      	bhi.n	80012fe <__edit_six_digits+0x136>
 8001238:	a201      	add	r2, pc, #4	; (adr r2, 8001240 <__edit_six_digits+0x78>)
 800123a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123e:	bf00      	nop
 8001240:	08001259 	.word	0x08001259
 8001244:	08001265 	.word	0x08001265
 8001248:	08001271 	.word	0x08001271
 800124c:	0800127d 	.word	0x0800127d
 8001250:	08001289 	.word	0x08001289
 8001254:	08001295 	.word	0x08001295
				__store_six_digits(settings_val,src);
 8001258:	78fb      	ldrb	r3, [r7, #3]
 800125a:	4619      	mov	r1, r3
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff fe4f 	bl	8000f00 <__store_six_digits>
				break;
 8001262:	e04c      	b.n	80012fe <__edit_six_digits+0x136>
				__store_six_digits(settings_val,src);
 8001264:	78fb      	ldrb	r3, [r7, #3]
 8001266:	4619      	mov	r1, r3
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff fe49 	bl	8000f00 <__store_six_digits>
				break;
 800126e:	e046      	b.n	80012fe <__edit_six_digits+0x136>
				__store_six_digits(settings_val,src);
 8001270:	78fb      	ldrb	r3, [r7, #3]
 8001272:	4619      	mov	r1, r3
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff fe43 	bl	8000f00 <__store_six_digits>
				break;
 800127a:	e040      	b.n	80012fe <__edit_six_digits+0x136>
				__store_six_digits(settings_val,src);
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	4619      	mov	r1, r3
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff fe3d 	bl	8000f00 <__store_six_digits>
				break;
 8001286:	e03a      	b.n	80012fe <__edit_six_digits+0x136>
				__store_six_digits(settings_val,src);
 8001288:	78fb      	ldrb	r3, [r7, #3]
 800128a:	4619      	mov	r1, r3
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff fe37 	bl	8000f00 <__store_six_digits>
				break;
 8001292:	e034      	b.n	80012fe <__edit_six_digits+0x136>
				__store_six_digits(settings_val,src);
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	4619      	mov	r1, r3
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff fe31 	bl	8000f00 <__store_six_digits>
				if(current_digit_loc == FIRST_DIGIT && settings_semaphore == 2)
 800129e:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <__edit_six_digits+0x14c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d12a      	bne.n	80012fc <__edit_six_digits+0x134>
 80012a6:	4b18      	ldr	r3, [pc, #96]	; (8001308 <__edit_six_digits+0x140>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d126      	bne.n	80012fc <__edit_six_digits+0x134>
					DisplayActions = display_edit_settings;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <__edit_six_digits+0x150>)
 80012b0:	4a1a      	ldr	r2, [pc, #104]	; (800131c <__edit_six_digits+0x154>)
 80012b2:	601a      	str	r2, [r3, #0]
					settings_semaphore = 0;
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <__edit_six_digits+0x140>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
					*settings_val = 0;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
					int place_val = 1;
 80012c0:	2301      	movs	r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
					for(int i = 0 ; i < 6; i++)
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	e015      	b.n	80012f6 <__edit_six_digits+0x12e>
						*settings_val += new_digits[i] * place_val;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4910      	ldr	r1, [pc, #64]	; (8001310 <__edit_six_digits+0x148>)
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	440b      	add	r3, r1
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	4619      	mov	r1, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	fb03 f301 	mul.w	r3, r3, r1
 80012de:	441a      	add	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	601a      	str	r2, [r3, #0]
						place_val *= 10;
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
					for(int i = 0 ; i < 6; i++)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	3301      	adds	r3, #1
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	2b05      	cmp	r3, #5
 80012fa:	dde6      	ble.n	80012ca <__edit_six_digits+0x102>
				break;
 80012fc:	bf00      	nop
}
 80012fe:	bf00      	nop
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200000a8 	.word	0x200000a8
 800130c:	66666667 	.word	0x66666667
 8001310:	200000b0 	.word	0x200000b0
 8001314:	200000ac 	.word	0x200000ac
 8001318:	20000104 	.word	0x20000104
 800131c:	08001321 	.word	0x08001321

08001320 <display_edit_settings>:
/*******************************************************************************
 *  PUBLIC
 ******************************************************************************/
void display_edit_settings()
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	switch(current_edit_settings_state)
 8001324:	4ba9      	ldr	r3, [pc, #676]	; (80015cc <display_edit_settings+0x2ac>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b09      	cmp	r3, #9
 800132a:	f200 8194 	bhi.w	8001656 <display_edit_settings+0x336>
 800132e:	a201      	add	r2, pc, #4	; (adr r2, 8001334 <display_edit_settings+0x14>)
 8001330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001334:	0800135d 	.word	0x0800135d
 8001338:	08001381 	.word	0x08001381
 800133c:	080013d3 	.word	0x080013d3
 8001340:	08001425 	.word	0x08001425
 8001344:	08001477 	.word	0x08001477
 8001348:	080014c9 	.word	0x080014c9
 800134c:	0800150b 	.word	0x0800150b
 8001350:	0800154d 	.word	0x0800154d
 8001354:	0800158d 	.word	0x0800158d
 8001358:	080015e5 	.word	0x080015e5
	{
		case GOTO_OFFSET_MAKE_UP_WATER:
			edit_settings_cmd_len = sprintf(edit_settings_cmd,"t7.pco=63488%s",end_char);
 800135c:	4a9c      	ldr	r2, [pc, #624]	; (80015d0 <display_edit_settings+0x2b0>)
 800135e:	499d      	ldr	r1, [pc, #628]	; (80015d4 <display_edit_settings+0x2b4>)
 8001360:	489d      	ldr	r0, [pc, #628]	; (80015d8 <display_edit_settings+0x2b8>)
 8001362:	f004 fb47 	bl	80059f4 <siprintf>
 8001366:	4602      	mov	r2, r0
 8001368:	4b9c      	ldr	r3, [pc, #624]	; (80015dc <display_edit_settings+0x2bc>)
 800136a:	601a      	str	r2, [r3, #0]
			lcd_send_cmd(edit_settings_cmd,edit_settings_cmd_len);
 800136c:	4b9b      	ldr	r3, [pc, #620]	; (80015dc <display_edit_settings+0x2bc>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4619      	mov	r1, r3
 8001372:	4899      	ldr	r0, [pc, #612]	; (80015d8 <display_edit_settings+0x2b8>)
 8001374:	f000 fee6 	bl	8002144 <lcd_send_cmd>
			current_edit_settings_state = OFFSET_MAKE_UP_WATER;
 8001378:	4b94      	ldr	r3, [pc, #592]	; (80015cc <display_edit_settings+0x2ac>)
 800137a:	2201      	movs	r2, #1
 800137c:	601a      	str	r2, [r3, #0]
			break;
 800137e:	e16a      	b.n	8001656 <display_edit_settings+0x336>

		case OFFSET_MAKE_UP_WATER:
			if(key_pressed == RIGHT_KEY_PRESSED)
 8001380:	4b97      	ldr	r3, [pc, #604]	; (80015e0 <display_edit_settings+0x2c0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b02      	cmp	r3, #2
 8001386:	d107      	bne.n	8001398 <display_edit_settings+0x78>
			{
				__settings_selection(7,9);
 8001388:	2109      	movs	r1, #9
 800138a:	2007      	movs	r0, #7
 800138c:	f7ff fd06 	bl	8000d9c <__settings_selection>
				current_edit_settings_state = OFFSET_BLOWDOWN;
 8001390:	4b8e      	ldr	r3, [pc, #568]	; (80015cc <display_edit_settings+0x2ac>)
 8001392:	2202      	movs	r2, #2
 8001394:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_six_digits(0);
			}
			break;
 8001396:	e14d      	b.n	8001634 <display_edit_settings+0x314>
			else if(key_pressed == LEFT_KEY_PRESSED)
 8001398:	4b91      	ldr	r3, [pc, #580]	; (80015e0 <display_edit_settings+0x2c0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d107      	bne.n	80013b0 <display_edit_settings+0x90>
				__settings_selection(7,18);
 80013a0:	2112      	movs	r1, #18
 80013a2:	2007      	movs	r0, #7
 80013a4:	f7ff fcfa 	bl	8000d9c <__settings_selection>
				current_edit_settings_state = SET_BLOWDOWN_IN_M3;
 80013a8:	4b88      	ldr	r3, [pc, #544]	; (80015cc <display_edit_settings+0x2ac>)
 80013aa:	2209      	movs	r2, #9
 80013ac:	601a      	str	r2, [r3, #0]
			break;
 80013ae:	e141      	b.n	8001634 <display_edit_settings+0x314>
			else if(key_pressed == ESC_KEY_PRESSED)
 80013b0:	4b8b      	ldr	r3, [pc, #556]	; (80015e0 <display_edit_settings+0x2c0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	d103      	bne.n	80013c0 <display_edit_settings+0xa0>
				__esc_settings_selection(7);
 80013b8:	2007      	movs	r0, #7
 80013ba:	f7ff fd1d 	bl	8000df8 <__esc_settings_selection>
			break;
 80013be:	e139      	b.n	8001634 <display_edit_settings+0x314>
			else if(key_pressed == ENTER_KEY_PRESSED)
 80013c0:	4b87      	ldr	r3, [pc, #540]	; (80015e0 <display_edit_settings+0x2c0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	f040 8135 	bne.w	8001634 <display_edit_settings+0x314>
				__select_six_digits(0);
 80013ca:	2000      	movs	r0, #0
 80013cc:	f7ff fd46 	bl	8000e5c <__select_six_digits>
			break;
 80013d0:	e130      	b.n	8001634 <display_edit_settings+0x314>
		case OFFSET_BLOWDOWN:
			if(key_pressed == RIGHT_KEY_PRESSED)
 80013d2:	4b83      	ldr	r3, [pc, #524]	; (80015e0 <display_edit_settings+0x2c0>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d107      	bne.n	80013ea <display_edit_settings+0xca>
			{
				__settings_selection(9,19);
 80013da:	2113      	movs	r1, #19
 80013dc:	2009      	movs	r0, #9
 80013de:	f7ff fcdd 	bl	8000d9c <__settings_selection>
				current_edit_settings_state = PUMP1_LTS_PER_PULSE;
 80013e2:	4b7a      	ldr	r3, [pc, #488]	; (80015cc <display_edit_settings+0x2ac>)
 80013e4:	2203      	movs	r2, #3
 80013e6:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_six_digits(6);
			}
			break;
 80013e8:	e126      	b.n	8001638 <display_edit_settings+0x318>
			else if(key_pressed == LEFT_KEY_PRESSED)
 80013ea:	4b7d      	ldr	r3, [pc, #500]	; (80015e0 <display_edit_settings+0x2c0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d107      	bne.n	8001402 <display_edit_settings+0xe2>
				__settings_selection(9,7);
 80013f2:	2107      	movs	r1, #7
 80013f4:	2009      	movs	r0, #9
 80013f6:	f7ff fcd1 	bl	8000d9c <__settings_selection>
				current_edit_settings_state = OFFSET_MAKE_UP_WATER;
 80013fa:	4b74      	ldr	r3, [pc, #464]	; (80015cc <display_edit_settings+0x2ac>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	601a      	str	r2, [r3, #0]
			break;
 8001400:	e11a      	b.n	8001638 <display_edit_settings+0x318>
			else if(key_pressed == ESC_KEY_PRESSED)
 8001402:	4b77      	ldr	r3, [pc, #476]	; (80015e0 <display_edit_settings+0x2c0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2b04      	cmp	r3, #4
 8001408:	d103      	bne.n	8001412 <display_edit_settings+0xf2>
				__esc_settings_selection(9);
 800140a:	2009      	movs	r0, #9
 800140c:	f7ff fcf4 	bl	8000df8 <__esc_settings_selection>
			break;
 8001410:	e112      	b.n	8001638 <display_edit_settings+0x318>
			else if(key_pressed == ENTER_KEY_PRESSED)
 8001412:	4b73      	ldr	r3, [pc, #460]	; (80015e0 <display_edit_settings+0x2c0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b03      	cmp	r3, #3
 8001418:	f040 810e 	bne.w	8001638 <display_edit_settings+0x318>
				__select_six_digits(6);
 800141c:	2006      	movs	r0, #6
 800141e:	f7ff fd1d 	bl	8000e5c <__select_six_digits>
			break;
 8001422:	e109      	b.n	8001638 <display_edit_settings+0x318>
		case PUMP1_LTS_PER_PULSE:
			if(key_pressed == RIGHT_KEY_PRESSED)
 8001424:	4b6e      	ldr	r3, [pc, #440]	; (80015e0 <display_edit_settings+0x2c0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b02      	cmp	r3, #2
 800142a:	d107      	bne.n	800143c <display_edit_settings+0x11c>
			{
				__settings_selection(19,21);
 800142c:	2115      	movs	r1, #21
 800142e:	2013      	movs	r0, #19
 8001430:	f7ff fcb4 	bl	8000d9c <__settings_selection>
				current_edit_settings_state = PUMP2_LTS_PER_PULSE;
 8001434:	4b65      	ldr	r3, [pc, #404]	; (80015cc <display_edit_settings+0x2ac>)
 8001436:	2204      	movs	r2, #4
 8001438:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_six_digits(12);
			}
			break;
 800143a:	e0ff      	b.n	800163c <display_edit_settings+0x31c>
			else if(key_pressed == LEFT_KEY_PRESSED)
 800143c:	4b68      	ldr	r3, [pc, #416]	; (80015e0 <display_edit_settings+0x2c0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d107      	bne.n	8001454 <display_edit_settings+0x134>
				__settings_selection(19,9);
 8001444:	2109      	movs	r1, #9
 8001446:	2013      	movs	r0, #19
 8001448:	f7ff fca8 	bl	8000d9c <__settings_selection>
				current_edit_settings_state = OFFSET_BLOWDOWN;
 800144c:	4b5f      	ldr	r3, [pc, #380]	; (80015cc <display_edit_settings+0x2ac>)
 800144e:	2202      	movs	r2, #2
 8001450:	601a      	str	r2, [r3, #0]
			break;
 8001452:	e0f3      	b.n	800163c <display_edit_settings+0x31c>
			else if(key_pressed == ESC_KEY_PRESSED)
 8001454:	4b62      	ldr	r3, [pc, #392]	; (80015e0 <display_edit_settings+0x2c0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b04      	cmp	r3, #4
 800145a:	d103      	bne.n	8001464 <display_edit_settings+0x144>
				__esc_settings_selection(19);
 800145c:	2013      	movs	r0, #19
 800145e:	f7ff fccb 	bl	8000df8 <__esc_settings_selection>
			break;
 8001462:	e0eb      	b.n	800163c <display_edit_settings+0x31c>
			else if(key_pressed == ENTER_KEY_PRESSED)
 8001464:	4b5e      	ldr	r3, [pc, #376]	; (80015e0 <display_edit_settings+0x2c0>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b03      	cmp	r3, #3
 800146a:	f040 80e7 	bne.w	800163c <display_edit_settings+0x31c>
				__select_six_digits(12);
 800146e:	200c      	movs	r0, #12
 8001470:	f7ff fcf4 	bl	8000e5c <__select_six_digits>
			break;
 8001474:	e0e2      	b.n	800163c <display_edit_settings+0x31c>
		case PUMP2_LTS_PER_PULSE:
			if(key_pressed == RIGHT_KEY_PRESSED)
 8001476:	4b5a      	ldr	r3, [pc, #360]	; (80015e0 <display_edit_settings+0x2c0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d107      	bne.n	800148e <display_edit_settings+0x16e>
			{
				__settings_selection(21,13);
 800147e:	210d      	movs	r1, #13
 8001480:	2015      	movs	r0, #21
 8001482:	f7ff fc8b 	bl	8000d9c <__settings_selection>
				current_edit_settings_state = RATIO_1;
 8001486:	4b51      	ldr	r3, [pc, #324]	; (80015cc <display_edit_settings+0x2ac>)
 8001488:	2205      	movs	r2, #5
 800148a:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_six_digits(18);
			}
			break;
 800148c:	e0d8      	b.n	8001640 <display_edit_settings+0x320>
			else if(key_pressed == LEFT_KEY_PRESSED)
 800148e:	4b54      	ldr	r3, [pc, #336]	; (80015e0 <display_edit_settings+0x2c0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d107      	bne.n	80014a6 <display_edit_settings+0x186>
				__settings_selection(21,19);
 8001496:	2113      	movs	r1, #19
 8001498:	2015      	movs	r0, #21
 800149a:	f7ff fc7f 	bl	8000d9c <__settings_selection>
				current_edit_settings_state = PUMP1_LTS_PER_PULSE;
 800149e:	4b4b      	ldr	r3, [pc, #300]	; (80015cc <display_edit_settings+0x2ac>)
 80014a0:	2203      	movs	r2, #3
 80014a2:	601a      	str	r2, [r3, #0]
			break;
 80014a4:	e0cc      	b.n	8001640 <display_edit_settings+0x320>
			else if(key_pressed == ESC_KEY_PRESSED)
 80014a6:	4b4e      	ldr	r3, [pc, #312]	; (80015e0 <display_edit_settings+0x2c0>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	d103      	bne.n	80014b6 <display_edit_settings+0x196>
				__esc_settings_selection(21);
 80014ae:	2015      	movs	r0, #21
 80014b0:	f7ff fca2 	bl	8000df8 <__esc_settings_selection>
			break;
 80014b4:	e0c4      	b.n	8001640 <display_edit_settings+0x320>
			else if(key_pressed == ENTER_KEY_PRESSED)
 80014b6:	4b4a      	ldr	r3, [pc, #296]	; (80015e0 <display_edit_settings+0x2c0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	f040 80c0 	bne.w	8001640 <display_edit_settings+0x320>
				__select_six_digits(18);
 80014c0:	2012      	movs	r0, #18
 80014c2:	f7ff fccb 	bl	8000e5c <__select_six_digits>
			break;
 80014c6:	e0bb      	b.n	8001640 <display_edit_settings+0x320>
		case RATIO_1:
			if(key_pressed == RIGHT_KEY_PRESSED)
 80014c8:	4b45      	ldr	r3, [pc, #276]	; (80015e0 <display_edit_settings+0x2c0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d107      	bne.n	80014e0 <display_edit_settings+0x1c0>
			{
				__settings_selection(13,29);
 80014d0:	211d      	movs	r1, #29
 80014d2:	200d      	movs	r0, #13
 80014d4:	f7ff fc62 	bl	8000d9c <__settings_selection>
				current_edit_settings_state = RATIO_2;
 80014d8:	4b3c      	ldr	r3, [pc, #240]	; (80015cc <display_edit_settings+0x2ac>)
 80014da:	2206      	movs	r2, #6
 80014dc:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ESC_KEY_PRESSED)
			{
				__esc_settings_selection(13);
			}
			break;
 80014de:	e0b1      	b.n	8001644 <display_edit_settings+0x324>
			else if(key_pressed == LEFT_KEY_PRESSED)
 80014e0:	4b3f      	ldr	r3, [pc, #252]	; (80015e0 <display_edit_settings+0x2c0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d107      	bne.n	80014f8 <display_edit_settings+0x1d8>
				__settings_selection(13,21);
 80014e8:	2115      	movs	r1, #21
 80014ea:	200d      	movs	r0, #13
 80014ec:	f7ff fc56 	bl	8000d9c <__settings_selection>
				current_edit_settings_state = PUMP2_LTS_PER_PULSE;
 80014f0:	4b36      	ldr	r3, [pc, #216]	; (80015cc <display_edit_settings+0x2ac>)
 80014f2:	2204      	movs	r2, #4
 80014f4:	601a      	str	r2, [r3, #0]
			break;
 80014f6:	e0a5      	b.n	8001644 <display_edit_settings+0x324>
			else if(key_pressed == ESC_KEY_PRESSED)
 80014f8:	4b39      	ldr	r3, [pc, #228]	; (80015e0 <display_edit_settings+0x2c0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	f040 80a1 	bne.w	8001644 <display_edit_settings+0x324>
				__esc_settings_selection(13);
 8001502:	200d      	movs	r0, #13
 8001504:	f7ff fc78 	bl	8000df8 <__esc_settings_selection>
			break;
 8001508:	e09c      	b.n	8001644 <display_edit_settings+0x324>
		case RATIO_2:
			if(key_pressed == RIGHT_KEY_PRESSED)
 800150a:	4b35      	ldr	r3, [pc, #212]	; (80015e0 <display_edit_settings+0x2c0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d107      	bne.n	8001522 <display_edit_settings+0x202>
			{
				__settings_selection(29,24);
 8001512:	2118      	movs	r1, #24
 8001514:	201d      	movs	r0, #29
 8001516:	f7ff fc41 	bl	8000d9c <__settings_selection>
				current_edit_settings_state = AUTO_BLOWDOWN;
 800151a:	4b2c      	ldr	r3, [pc, #176]	; (80015cc <display_edit_settings+0x2ac>)
 800151c:	2207      	movs	r2, #7
 800151e:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ESC_KEY_PRESSED)
			{
				__esc_settings_selection(29);
			}
			break;
 8001520:	e092      	b.n	8001648 <display_edit_settings+0x328>
			else if(key_pressed == LEFT_KEY_PRESSED)
 8001522:	4b2f      	ldr	r3, [pc, #188]	; (80015e0 <display_edit_settings+0x2c0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d107      	bne.n	800153a <display_edit_settings+0x21a>
				__settings_selection(29,13);
 800152a:	210d      	movs	r1, #13
 800152c:	201d      	movs	r0, #29
 800152e:	f7ff fc35 	bl	8000d9c <__settings_selection>
				current_edit_settings_state = RATIO_1;
 8001532:	4b26      	ldr	r3, [pc, #152]	; (80015cc <display_edit_settings+0x2ac>)
 8001534:	2205      	movs	r2, #5
 8001536:	601a      	str	r2, [r3, #0]
			break;
 8001538:	e086      	b.n	8001648 <display_edit_settings+0x328>
			else if(key_pressed == ESC_KEY_PRESSED)
 800153a:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <display_edit_settings+0x2c0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b04      	cmp	r3, #4
 8001540:	f040 8082 	bne.w	8001648 <display_edit_settings+0x328>
				__esc_settings_selection(29);
 8001544:	201d      	movs	r0, #29
 8001546:	f7ff fc57 	bl	8000df8 <__esc_settings_selection>
			break;
 800154a:	e07d      	b.n	8001648 <display_edit_settings+0x328>
		case AUTO_BLOWDOWN:
			if(key_pressed == RIGHT_KEY_PRESSED)
 800154c:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <display_edit_settings+0x2c0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d107      	bne.n	8001564 <display_edit_settings+0x244>
			{
				__settings_selection(24,14);
 8001554:	210e      	movs	r1, #14
 8001556:	2018      	movs	r0, #24
 8001558:	f7ff fc20 	bl	8000d9c <__settings_selection>
				current_edit_settings_state = SET_BLOWDOWN_TDS;
 800155c:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <display_edit_settings+0x2ac>)
 800155e:	2208      	movs	r2, #8
 8001560:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ESC_KEY_PRESSED)
			{
				__esc_settings_selection(24);
			}
			break;
 8001562:	e073      	b.n	800164c <display_edit_settings+0x32c>
			else if(key_pressed == LEFT_KEY_PRESSED)
 8001564:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <display_edit_settings+0x2c0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d107      	bne.n	800157c <display_edit_settings+0x25c>
				__settings_selection(24,29);
 800156c:	211d      	movs	r1, #29
 800156e:	2018      	movs	r0, #24
 8001570:	f7ff fc14 	bl	8000d9c <__settings_selection>
				current_edit_settings_state = RATIO_2;
 8001574:	4b15      	ldr	r3, [pc, #84]	; (80015cc <display_edit_settings+0x2ac>)
 8001576:	2206      	movs	r2, #6
 8001578:	601a      	str	r2, [r3, #0]
			break;
 800157a:	e067      	b.n	800164c <display_edit_settings+0x32c>
			else if(key_pressed == ESC_KEY_PRESSED)
 800157c:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <display_edit_settings+0x2c0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b04      	cmp	r3, #4
 8001582:	d163      	bne.n	800164c <display_edit_settings+0x32c>
				__esc_settings_selection(24);
 8001584:	2018      	movs	r0, #24
 8001586:	f7ff fc37 	bl	8000df8 <__esc_settings_selection>
			break;
 800158a:	e05f      	b.n	800164c <display_edit_settings+0x32c>
		case SET_BLOWDOWN_TDS:
			if(key_pressed == RIGHT_KEY_PRESSED)
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <display_edit_settings+0x2c0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b02      	cmp	r3, #2
 8001592:	d107      	bne.n	80015a4 <display_edit_settings+0x284>
			{
				__settings_selection(14,18);
 8001594:	2112      	movs	r1, #18
 8001596:	200e      	movs	r0, #14
 8001598:	f7ff fc00 	bl	8000d9c <__settings_selection>
				current_edit_settings_state = SET_BLOWDOWN_IN_M3;
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <display_edit_settings+0x2ac>)
 800159e:	2209      	movs	r2, #9
 80015a0:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ESC_KEY_PRESSED)
			{
				__esc_settings_selection(14);
			}
			break;
 80015a2:	e055      	b.n	8001650 <display_edit_settings+0x330>
			else if(key_pressed == LEFT_KEY_PRESSED)
 80015a4:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <display_edit_settings+0x2c0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d107      	bne.n	80015bc <display_edit_settings+0x29c>
				__settings_selection(14,24);
 80015ac:	2118      	movs	r1, #24
 80015ae:	200e      	movs	r0, #14
 80015b0:	f7ff fbf4 	bl	8000d9c <__settings_selection>
				current_edit_settings_state = AUTO_BLOWDOWN;
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <display_edit_settings+0x2ac>)
 80015b6:	2207      	movs	r2, #7
 80015b8:	601a      	str	r2, [r3, #0]
			break;
 80015ba:	e049      	b.n	8001650 <display_edit_settings+0x330>
			else if(key_pressed == ESC_KEY_PRESSED)
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <display_edit_settings+0x2c0>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	d145      	bne.n	8001650 <display_edit_settings+0x330>
				__esc_settings_selection(14);
 80015c4:	200e      	movs	r0, #14
 80015c6:	f7ff fc17 	bl	8000df8 <__esc_settings_selection>
			break;
 80015ca:	e041      	b.n	8001650 <display_edit_settings+0x330>
 80015cc:	200000a0 	.word	0x200000a0
 80015d0:	20000000 	.word	0x20000000
 80015d4:	08006338 	.word	0x08006338
 80015d8:	20000170 	.word	0x20000170
 80015dc:	200000a4 	.word	0x200000a4
 80015e0:	2000009c 	.word	0x2000009c
		case SET_BLOWDOWN_IN_M3:
			if(key_pressed == RIGHT_KEY_PRESSED)
 80015e4:	4b1d      	ldr	r3, [pc, #116]	; (800165c <display_edit_settings+0x33c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d107      	bne.n	80015fc <display_edit_settings+0x2dc>
			{
				__settings_selection(18,7);
 80015ec:	2107      	movs	r1, #7
 80015ee:	2012      	movs	r0, #18
 80015f0:	f7ff fbd4 	bl	8000d9c <__settings_selection>
				current_edit_settings_state = OFFSET_MAKE_UP_WATER;
 80015f4:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <display_edit_settings+0x340>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	601a      	str	r2, [r3, #0]
			}
			else if(key_pressed == ENTER_KEY_PRESSED)
			{
				__select_six_digits(27);
			}
			break;
 80015fa:	e02b      	b.n	8001654 <display_edit_settings+0x334>
			else if(key_pressed == LEFT_KEY_PRESSED)
 80015fc:	4b17      	ldr	r3, [pc, #92]	; (800165c <display_edit_settings+0x33c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d107      	bne.n	8001614 <display_edit_settings+0x2f4>
				__settings_selection(18,14);
 8001604:	210e      	movs	r1, #14
 8001606:	2012      	movs	r0, #18
 8001608:	f7ff fbc8 	bl	8000d9c <__settings_selection>
				current_edit_settings_state = SET_BLOWDOWN_TDS;
 800160c:	4b14      	ldr	r3, [pc, #80]	; (8001660 <display_edit_settings+0x340>)
 800160e:	2208      	movs	r2, #8
 8001610:	601a      	str	r2, [r3, #0]
			break;
 8001612:	e01f      	b.n	8001654 <display_edit_settings+0x334>
			else if(key_pressed == ESC_KEY_PRESSED)
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <display_edit_settings+0x33c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b04      	cmp	r3, #4
 800161a:	d103      	bne.n	8001624 <display_edit_settings+0x304>
				__esc_settings_selection(18);
 800161c:	2012      	movs	r0, #18
 800161e:	f7ff fbeb 	bl	8000df8 <__esc_settings_selection>
			break;
 8001622:	e017      	b.n	8001654 <display_edit_settings+0x334>
			else if(key_pressed == ENTER_KEY_PRESSED)
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <display_edit_settings+0x33c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b03      	cmp	r3, #3
 800162a:	d113      	bne.n	8001654 <display_edit_settings+0x334>
				__select_six_digits(27);
 800162c:	201b      	movs	r0, #27
 800162e:	f7ff fc15 	bl	8000e5c <__select_six_digits>
			break;
 8001632:	e00f      	b.n	8001654 <display_edit_settings+0x334>
			break;
 8001634:	bf00      	nop
 8001636:	e00e      	b.n	8001656 <display_edit_settings+0x336>
			break;
 8001638:	bf00      	nop
 800163a:	e00c      	b.n	8001656 <display_edit_settings+0x336>
			break;
 800163c:	bf00      	nop
 800163e:	e00a      	b.n	8001656 <display_edit_settings+0x336>
			break;
 8001640:	bf00      	nop
 8001642:	e008      	b.n	8001656 <display_edit_settings+0x336>
			break;
 8001644:	bf00      	nop
 8001646:	e006      	b.n	8001656 <display_edit_settings+0x336>
			break;
 8001648:	bf00      	nop
 800164a:	e004      	b.n	8001656 <display_edit_settings+0x336>
			break;
 800164c:	bf00      	nop
 800164e:	e002      	b.n	8001656 <display_edit_settings+0x336>
			break;
 8001650:	bf00      	nop
 8001652:	e000      	b.n	8001656 <display_edit_settings+0x336>
			break;
 8001654:	bf00      	nop
	}
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000009c 	.word	0x2000009c
 8001660:	200000a0 	.word	0x200000a0

08001664 <display_edit_digits>:

void display_edit_digits()
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
	switch(current_edit_settings_state)
 8001668:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <display_edit_digits+0x70>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	3b01      	subs	r3, #1
 800166e:	2b08      	cmp	r3, #8
 8001670:	d82e      	bhi.n	80016d0 <display_edit_digits+0x6c>
 8001672:	a201      	add	r2, pc, #4	; (adr r2, 8001678 <display_edit_digits+0x14>)
 8001674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001678:	0800169d 	.word	0x0800169d
 800167c:	080016a7 	.word	0x080016a7
 8001680:	080016b1 	.word	0x080016b1
 8001684:	080016bb 	.word	0x080016bb
 8001688:	080016cf 	.word	0x080016cf
 800168c:	080016cf 	.word	0x080016cf
 8001690:	080016cf 	.word	0x080016cf
 8001694:	080016cf 	.word	0x080016cf
 8001698:	080016c5 	.word	0x080016c5
	{
		case OFFSET_MAKE_UP_WATER:
			__edit_six_digits(&yorker_settings.offset_mkupwater,0);
 800169c:	2100      	movs	r1, #0
 800169e:	480e      	ldr	r0, [pc, #56]	; (80016d8 <display_edit_digits+0x74>)
 80016a0:	f7ff fd92 	bl	80011c8 <__edit_six_digits>
			break;
 80016a4:	e014      	b.n	80016d0 <display_edit_digits+0x6c>
		case OFFSET_BLOWDOWN:
			__edit_six_digits(&yorker_settings.offset_blowdown,6);
 80016a6:	2106      	movs	r1, #6
 80016a8:	480c      	ldr	r0, [pc, #48]	; (80016dc <display_edit_digits+0x78>)
 80016aa:	f7ff fd8d 	bl	80011c8 <__edit_six_digits>
			break;
 80016ae:	e00f      	b.n	80016d0 <display_edit_digits+0x6c>
		case PUMP1_LTS_PER_PULSE:
			__edit_six_digits(&yorker_settings.pump1_lts_per_pulse,12);
 80016b0:	210c      	movs	r1, #12
 80016b2:	480b      	ldr	r0, [pc, #44]	; (80016e0 <display_edit_digits+0x7c>)
 80016b4:	f7ff fd88 	bl	80011c8 <__edit_six_digits>
			break;
 80016b8:	e00a      	b.n	80016d0 <display_edit_digits+0x6c>
		case PUMP2_LTS_PER_PULSE:
			__edit_six_digits(&yorker_settings.pump2_lts_per_pulse,18);
 80016ba:	2112      	movs	r1, #18
 80016bc:	4809      	ldr	r0, [pc, #36]	; (80016e4 <display_edit_digits+0x80>)
 80016be:	f7ff fd83 	bl	80011c8 <__edit_six_digits>
			break;
 80016c2:	e005      	b.n	80016d0 <display_edit_digits+0x6c>
			break;
		case SET_BLOWDOWN_TDS:

			break;
		case SET_BLOWDOWN_IN_M3:
			__edit_six_digits(&yorker_settings.set_blowdown_in_m3,27);
 80016c4:	211b      	movs	r1, #27
 80016c6:	4808      	ldr	r0, [pc, #32]	; (80016e8 <display_edit_digits+0x84>)
 80016c8:	f7ff fd7e 	bl	80011c8 <__edit_six_digits>
			break;
 80016cc:	e000      	b.n	80016d0 <display_edit_digits+0x6c>
			break;
 80016ce:	bf00      	nop
	}
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200000a0 	.word	0x200000a0
 80016d8:	200000d4 	.word	0x200000d4
 80016dc:	200000d8 	.word	0x200000d8
 80016e0:	200000dc 	.word	0x200000dc
 80016e4:	200000e0 	.word	0x200000e0
 80016e8:	200000f4 	.word	0x200000f4

080016ec <platform_start_yorker>:

settings yorker_settings = {0};


void platform_start_yorker()
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
	 HAL_Init();
 80016f0:	f001 f854 	bl	800279c <HAL_Init>
	 platform_sysclk_cfg();
 80016f4:	f000 fb04 	bl	8001d00 <platform_sysclk_cfg>
	 platform_gpio_init();
 80016f8:	f000 fa84 	bl	8001c04 <platform_gpio_init>
	 platform_adc_init();
 80016fc:	f000 f96c 	bl	80019d8 <platform_adc_init>
	 platform_uart_init();
 8001700:	f000 fd16 	bl	8002130 <platform_uart_init>
	 platform_display_init();
 8001704:	f000 f972 	bl	80019ec <platform_display_init>
	 platform_rtc_init();
 8001708:	f000 fb5a 	bl	8001dc0 <platform_rtc_init>
	 platform_timer_init();
 800170c:	f000 fc48 	bl	8001fa0 <platform_timer_init>

	 platform_timer_start();
 8001710:	f000 fc50 	bl	8001fb4 <platform_timer_start>

	 while (1)
	   {
	     /* USER CODE END WHILE */
		 HAL_Delay(500);
 8001714:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001718:	f001 f8b2 	bl	8002880 <HAL_Delay>
		 makeup_water_added++;
 800171c:	4b25      	ldr	r3, [pc, #148]	; (80017b4 <platform_start_yorker+0xc8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	3301      	adds	r3, #1
 8001722:	4a24      	ldr	r2, [pc, #144]	; (80017b4 <platform_start_yorker+0xc8>)
 8001724:	6013      	str	r3, [r2, #0]
		 blowdown_water++;
 8001726:	4b24      	ldr	r3, [pc, #144]	; (80017b8 <platform_start_yorker+0xcc>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	3301      	adds	r3, #1
 800172c:	4a22      	ldr	r2, [pc, #136]	; (80017b8 <platform_start_yorker+0xcc>)
 800172e:	6013      	str	r3, [r2, #0]
		 chemical1++;
 8001730:	4b22      	ldr	r3, [pc, #136]	; (80017bc <platform_start_yorker+0xd0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	3301      	adds	r3, #1
 8001736:	4a21      	ldr	r2, [pc, #132]	; (80017bc <platform_start_yorker+0xd0>)
 8001738:	6013      	str	r3, [r2, #0]
		 chemical2++;
 800173a:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <platform_start_yorker+0xd4>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	3301      	adds	r3, #1
 8001740:	4a1f      	ldr	r2, [pc, #124]	; (80017c0 <platform_start_yorker+0xd4>)
 8001742:	6013      	str	r3, [r2, #0]
		 ph_inlet_water++;
 8001744:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <platform_start_yorker+0xd8>)
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	3301      	adds	r3, #1
 800174a:	b29a      	uxth	r2, r3
 800174c:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <platform_start_yorker+0xd8>)
 800174e:	801a      	strh	r2, [r3, #0]
		 ph_plant_water++;
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <platform_start_yorker+0xdc>)
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	3301      	adds	r3, #1
 8001756:	b29a      	uxth	r2, r3
 8001758:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <platform_start_yorker+0xdc>)
 800175a:	801a      	strh	r2, [r3, #0]
		 tds_inlet_water++;
 800175c:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <platform_start_yorker+0xe0>)
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	3301      	adds	r3, #1
 8001762:	b29a      	uxth	r2, r3
 8001764:	4b19      	ldr	r3, [pc, #100]	; (80017cc <platform_start_yorker+0xe0>)
 8001766:	801a      	strh	r2, [r3, #0]
		 tds_plant_water++;
 8001768:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <platform_start_yorker+0xe4>)
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	3301      	adds	r3, #1
 800176e:	b29a      	uxth	r2, r3
 8001770:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <platform_start_yorker+0xe4>)
 8001772:	801a      	strh	r2, [r3, #0]
		 pump1_state = !pump1_state;
 8001774:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <platform_start_yorker+0xe8>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	bf14      	ite	ne
 800177c:	2301      	movne	r3, #1
 800177e:	2300      	moveq	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	f083 0301 	eor.w	r3, r3, #1
 8001786:	b2db      	uxtb	r3, r3
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <platform_start_yorker+0xe8>)
 8001790:	701a      	strb	r2, [r3, #0]
		 pump2_state = !pump2_state;
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <platform_start_yorker+0xec>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	bf14      	ite	ne
 800179a:	2301      	movne	r3, #1
 800179c:	2300      	moveq	r3, #0
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f083 0301 	eor.w	r3, r3, #1
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <platform_start_yorker+0xec>)
 80017ae:	701a      	strb	r2, [r3, #0]
		 HAL_Delay(500);
 80017b0:	e7b0      	b.n	8001714 <platform_start_yorker+0x28>
 80017b2:	bf00      	nop
 80017b4:	200000b8 	.word	0x200000b8
 80017b8:	200000bc 	.word	0x200000bc
 80017bc:	200000c0 	.word	0x200000c0
 80017c0:	200000c4 	.word	0x200000c4
 80017c4:	200000c8 	.word	0x200000c8
 80017c8:	200000ca 	.word	0x200000ca
 80017cc:	200000cc 	.word	0x200000cc
 80017d0:	200000ce 	.word	0x200000ce
 80017d4:	200000d0 	.word	0x200000d0
 80017d8:	20000004 	.word	0x20000004

080017dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <__MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void __MX_ADC1_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017f2:	463b      	mov	r3, r7
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017fe:	4b21      	ldr	r3, [pc, #132]	; (8001884 <__MX_ADC1_Init+0x98>)
 8001800:	4a21      	ldr	r2, [pc, #132]	; (8001888 <__MX_ADC1_Init+0x9c>)
 8001802:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001804:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <__MX_ADC1_Init+0x98>)
 8001806:	2200      	movs	r2, #0
 8001808:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800180a:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <__MX_ADC1_Init+0x98>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001810:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <__MX_ADC1_Init+0x98>)
 8001812:	2200      	movs	r2, #0
 8001814:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001816:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <__MX_ADC1_Init+0x98>)
 8001818:	2200      	movs	r2, #0
 800181a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800181c:	4b19      	ldr	r3, [pc, #100]	; (8001884 <__MX_ADC1_Init+0x98>)
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001824:	4b17      	ldr	r3, [pc, #92]	; (8001884 <__MX_ADC1_Init+0x98>)
 8001826:	2200      	movs	r2, #0
 8001828:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800182a:	4b16      	ldr	r3, [pc, #88]	; (8001884 <__MX_ADC1_Init+0x98>)
 800182c:	4a17      	ldr	r2, [pc, #92]	; (800188c <__MX_ADC1_Init+0xa0>)
 800182e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001830:	4b14      	ldr	r3, [pc, #80]	; (8001884 <__MX_ADC1_Init+0x98>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001836:	4b13      	ldr	r3, [pc, #76]	; (8001884 <__MX_ADC1_Init+0x98>)
 8001838:	2201      	movs	r2, #1
 800183a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800183c:	4b11      	ldr	r3, [pc, #68]	; (8001884 <__MX_ADC1_Init+0x98>)
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001844:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <__MX_ADC1_Init+0x98>)
 8001846:	2201      	movs	r2, #1
 8001848:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800184a:	480e      	ldr	r0, [pc, #56]	; (8001884 <__MX_ADC1_Init+0x98>)
 800184c:	f001 f83a 	bl	80028c4 <HAL_ADC_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <__MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001856:	f7ff ffc1 	bl	80017dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800185a:	230a      	movs	r3, #10
 800185c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800185e:	2301      	movs	r3, #1
 8001860:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001866:	463b      	mov	r3, r7
 8001868:	4619      	mov	r1, r3
 800186a:	4806      	ldr	r0, [pc, #24]	; (8001884 <__MX_ADC1_Init+0x98>)
 800186c:	f001 f86e 	bl	800294c <HAL_ADC_ConfigChannel>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <__MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001876:	f7ff ffb1 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200002e4 	.word	0x200002e4
 8001888:	40012000 	.word	0x40012000
 800188c:	0f000001 	.word	0x0f000001

08001890 <__MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
void __MX_ADC2_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001896:	463b      	mov	r3, r7
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80018a2:	4b21      	ldr	r3, [pc, #132]	; (8001928 <__MX_ADC2_Init+0x98>)
 80018a4:	4a21      	ldr	r2, [pc, #132]	; (800192c <__MX_ADC2_Init+0x9c>)
 80018a6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80018a8:	4b1f      	ldr	r3, [pc, #124]	; (8001928 <__MX_ADC2_Init+0x98>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80018ae:	4b1e      	ldr	r3, [pc, #120]	; (8001928 <__MX_ADC2_Init+0x98>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80018b4:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <__MX_ADC2_Init+0x98>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80018ba:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <__MX_ADC2_Init+0x98>)
 80018bc:	2200      	movs	r2, #0
 80018be:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80018c0:	4b19      	ldr	r3, [pc, #100]	; (8001928 <__MX_ADC2_Init+0x98>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018c8:	4b17      	ldr	r3, [pc, #92]	; (8001928 <__MX_ADC2_Init+0x98>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018ce:	4b16      	ldr	r3, [pc, #88]	; (8001928 <__MX_ADC2_Init+0x98>)
 80018d0:	4a17      	ldr	r2, [pc, #92]	; (8001930 <__MX_ADC2_Init+0xa0>)
 80018d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018d4:	4b14      	ldr	r3, [pc, #80]	; (8001928 <__MX_ADC2_Init+0x98>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80018da:	4b13      	ldr	r3, [pc, #76]	; (8001928 <__MX_ADC2_Init+0x98>)
 80018dc:	2201      	movs	r2, #1
 80018de:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <__MX_ADC2_Init+0x98>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018e8:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <__MX_ADC2_Init+0x98>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80018ee:	480e      	ldr	r0, [pc, #56]	; (8001928 <__MX_ADC2_Init+0x98>)
 80018f0:	f000 ffe8 	bl	80028c4 <HAL_ADC_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <__MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80018fa:	f7ff ff6f 	bl	80017dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80018fe:	230b      	movs	r3, #11
 8001900:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001902:	2301      	movs	r3, #1
 8001904:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800190a:	463b      	mov	r3, r7
 800190c:	4619      	mov	r1, r3
 800190e:	4806      	ldr	r0, [pc, #24]	; (8001928 <__MX_ADC2_Init+0x98>)
 8001910:	f001 f81c 	bl	800294c <HAL_ADC_ConfigChannel>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <__MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800191a:	f7ff ff5f 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	2000029c 	.word	0x2000029c
 800192c:	40012100 	.word	0x40012100
 8001930:	0f000001 	.word	0x0f000001

08001934 <__MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
void __MX_ADC3_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800193a:	463b      	mov	r3, r7
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001946:	4b21      	ldr	r3, [pc, #132]	; (80019cc <__MX_ADC3_Init+0x98>)
 8001948:	4a21      	ldr	r2, [pc, #132]	; (80019d0 <__MX_ADC3_Init+0x9c>)
 800194a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800194c:	4b1f      	ldr	r3, [pc, #124]	; (80019cc <__MX_ADC3_Init+0x98>)
 800194e:	2200      	movs	r2, #0
 8001950:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001952:	4b1e      	ldr	r3, [pc, #120]	; (80019cc <__MX_ADC3_Init+0x98>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001958:	4b1c      	ldr	r3, [pc, #112]	; (80019cc <__MX_ADC3_Init+0x98>)
 800195a:	2200      	movs	r2, #0
 800195c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800195e:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <__MX_ADC3_Init+0x98>)
 8001960:	2200      	movs	r2, #0
 8001962:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001964:	4b19      	ldr	r3, [pc, #100]	; (80019cc <__MX_ADC3_Init+0x98>)
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800196c:	4b17      	ldr	r3, [pc, #92]	; (80019cc <__MX_ADC3_Init+0x98>)
 800196e:	2200      	movs	r2, #0
 8001970:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001972:	4b16      	ldr	r3, [pc, #88]	; (80019cc <__MX_ADC3_Init+0x98>)
 8001974:	4a17      	ldr	r2, [pc, #92]	; (80019d4 <__MX_ADC3_Init+0xa0>)
 8001976:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001978:	4b14      	ldr	r3, [pc, #80]	; (80019cc <__MX_ADC3_Init+0x98>)
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800197e:	4b13      	ldr	r3, [pc, #76]	; (80019cc <__MX_ADC3_Init+0x98>)
 8001980:	2201      	movs	r2, #1
 8001982:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <__MX_ADC3_Init+0x98>)
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800198c:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <__MX_ADC3_Init+0x98>)
 800198e:	2201      	movs	r2, #1
 8001990:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001992:	480e      	ldr	r0, [pc, #56]	; (80019cc <__MX_ADC3_Init+0x98>)
 8001994:	f000 ff96 	bl	80028c4 <HAL_ADC_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <__MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800199e:	f7ff ff1d 	bl	80017dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80019a2:	230c      	movs	r3, #12
 80019a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019a6:	2301      	movs	r3, #1
 80019a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80019ae:	463b      	mov	r3, r7
 80019b0:	4619      	mov	r1, r3
 80019b2:	4806      	ldr	r0, [pc, #24]	; (80019cc <__MX_ADC3_Init+0x98>)
 80019b4:	f000 ffca 	bl	800294c <HAL_ADC_ConfigChannel>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <__MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 80019be:	f7ff ff0d 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	2000032c 	.word	0x2000032c
 80019d0:	40012200 	.word	0x40012200
 80019d4:	0f000001 	.word	0x0f000001

080019d8 <platform_adc_init>:
/*******************************************************************************
 *  PUBLIC
 ******************************************************************************/

void platform_adc_init()
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
	__MX_ADC1_Init();
 80019dc:	f7ff ff06 	bl	80017ec <__MX_ADC1_Init>
	__MX_ADC2_Init();
 80019e0:	f7ff ff56 	bl	8001890 <__MX_ADC2_Init>
	__MX_ADC3_Init();
 80019e4:	f7ff ffa6 	bl	8001934 <__MX_ADC3_Init>
}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}

080019ec <platform_display_init>:
/*******************************************************************************
 *  PUBLIC
 ******************************************************************************/

void platform_display_init()
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
	DisplayActions = display_screens;
 80019f0:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <platform_display_init+0x14>)
 80019f2:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <platform_display_init+0x18>)
 80019f4:	601a      	str	r2, [r3, #0]
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	20000104 	.word	0x20000104
 8001a04:	08000591 	.word	0x08000591

08001a08 <__MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void __MX_GPIO_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08c      	sub	sp, #48	; 0x30
 8001a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
 8001a1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61bb      	str	r3, [r7, #24]
 8001a22:	4b72      	ldr	r3, [pc, #456]	; (8001bec <__MX_GPIO_Init+0x1e4>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4a71      	ldr	r2, [pc, #452]	; (8001bec <__MX_GPIO_Init+0x1e4>)
 8001a28:	f043 0310 	orr.w	r3, r3, #16
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4b6f      	ldr	r3, [pc, #444]	; (8001bec <__MX_GPIO_Init+0x1e4>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0310 	and.w	r3, r3, #16
 8001a36:	61bb      	str	r3, [r7, #24]
 8001a38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	4b6b      	ldr	r3, [pc, #428]	; (8001bec <__MX_GPIO_Init+0x1e4>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a6a      	ldr	r2, [pc, #424]	; (8001bec <__MX_GPIO_Init+0x1e4>)
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b68      	ldr	r3, [pc, #416]	; (8001bec <__MX_GPIO_Init+0x1e4>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	4b64      	ldr	r3, [pc, #400]	; (8001bec <__MX_GPIO_Init+0x1e4>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a63      	ldr	r2, [pc, #396]	; (8001bec <__MX_GPIO_Init+0x1e4>)
 8001a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b61      	ldr	r3, [pc, #388]	; (8001bec <__MX_GPIO_Init+0x1e4>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	4b5d      	ldr	r3, [pc, #372]	; (8001bec <__MX_GPIO_Init+0x1e4>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a5c      	ldr	r2, [pc, #368]	; (8001bec <__MX_GPIO_Init+0x1e4>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b5a      	ldr	r3, [pc, #360]	; (8001bec <__MX_GPIO_Init+0x1e4>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	4b56      	ldr	r3, [pc, #344]	; (8001bec <__MX_GPIO_Init+0x1e4>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a55      	ldr	r2, [pc, #340]	; (8001bec <__MX_GPIO_Init+0x1e4>)
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b53      	ldr	r3, [pc, #332]	; (8001bec <__MX_GPIO_Init+0x1e4>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	4b4f      	ldr	r3, [pc, #316]	; (8001bec <__MX_GPIO_Init+0x1e4>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a4e      	ldr	r2, [pc, #312]	; (8001bec <__MX_GPIO_Init+0x1e4>)
 8001ab4:	f043 0308 	orr.w	r3, r3, #8
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b4c      	ldr	r3, [pc, #304]	; (8001bec <__MX_GPIO_Init+0x1e4>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BUZZER_PIN_Pin|RELAY_1_Pin|RELAY_2_Pin|RELAY_3_Pin, GPIO_PIN_RESET);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f24e 0140 	movw	r1, #57408	; 0xe040
 8001acc:	4848      	ldr	r0, [pc, #288]	; (8001bf0 <__MX_GPIO_Init+0x1e8>)
 8001ace:	f001 fc61 	bl	8003394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY_4_Pin|RELAY_5_Pin, GPIO_PIN_RESET);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001ad8:	4846      	ldr	r0, [pc, #280]	; (8001bf4 <__MX_GPIO_Init+0x1ec>)
 8001ada:	f001 fc5b 	bl	8003394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEARTBEAT_LED_GPIO_Port, HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ae4:	4844      	ldr	r0, [pc, #272]	; (8001bf8 <__MX_GPIO_Init+0x1f0>)
 8001ae6:	f001 fc55 	bl	8003394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_ENABLE_GPIO_Port, RS485_ENABLE_Pin, GPIO_PIN_RESET);
 8001aea:	2200      	movs	r2, #0
 8001aec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001af0:	4842      	ldr	r0, [pc, #264]	; (8001bfc <__MX_GPIO_Init+0x1f4>)
 8001af2:	f001 fc4f 	bl	8003394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RELAY_6_Pin|RELAY_7_Pin|RELAY_8_Pin, GPIO_PIN_RESET);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2138      	movs	r1, #56	; 0x38
 8001afa:	4841      	ldr	r0, [pc, #260]	; (8001c00 <__MX_GPIO_Init+0x1f8>)
 8001afc:	f001 fc4a 	bl	8003394 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUZZER_PIN_Pin RELAY_1_Pin RELAY_2_Pin RELAY_3_Pin */
  GPIO_InitStruct.Pin = BUZZER_PIN_Pin|RELAY_1_Pin|RELAY_2_Pin|RELAY_3_Pin;
 8001b00:	f24e 0340 	movw	r3, #57408	; 0xe040
 8001b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b06:	2301      	movs	r3, #1
 8001b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b12:	f107 031c 	add.w	r3, r7, #28
 8001b16:	4619      	mov	r1, r3
 8001b18:	4835      	ldr	r0, [pc, #212]	; (8001bf0 <__MX_GPIO_Init+0x1e8>)
 8001b1a:	f001 fa79 	bl	8003010 <HAL_GPIO_Init>

  /*Configure GPIO pins : POWER_MAINS_Pin LEVEL_SENS_5_Pin LEVEL_SENS_6_Pin */
  GPIO_InitStruct.Pin = POWER_MAINS_Pin|LEVEL_SENS_5_Pin|LEVEL_SENS_6_Pin;
 8001b1e:	f44f 5303 	mov.w	r3, #8384	; 0x20c0
 8001b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b24:	2300      	movs	r3, #0
 8001b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2c:	f107 031c 	add.w	r3, r7, #28
 8001b30:	4619      	mov	r1, r3
 8001b32:	4832      	ldr	r0, [pc, #200]	; (8001bfc <__MX_GPIO_Init+0x1f4>)
 8001b34:	f001 fa6c 	bl	8003010 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_4_Pin RELAY_5_Pin */
  GPIO_InitStruct.Pin = RELAY_4_Pin|RELAY_5_Pin;
 8001b38:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b42:	2302      	movs	r3, #2
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b46:	2300      	movs	r3, #0
 8001b48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4a:	f107 031c 	add.w	r3, r7, #28
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4828      	ldr	r0, [pc, #160]	; (8001bf4 <__MX_GPIO_Init+0x1ec>)
 8001b52:	f001 fa5d 	bl	8003010 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_5_Pin LEVEL_SENS_4_Pin ESC_KEY_Pin LEVEL_SENS_3_Pin */
  GPIO_InitStruct.Pin = KEY_5_Pin|LEVEL_SENS_4_Pin|ESC_KEY_Pin|LEVEL_SENS_3_Pin;
 8001b56:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b64:	f107 031c 	add.w	r3, r7, #28
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4822      	ldr	r0, [pc, #136]	; (8001bf4 <__MX_GPIO_Init+0x1ec>)
 8001b6c:	f001 fa50 	bl	8003010 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENTER_KEY_Pin LEVEL_SENS_2_Pin RIGHT_KEY_Pin LEVEL_SENS_1_Pin
                           LEFT_KEY_Pin PULSE_SENS_2_Pin PULSE_SENS_1_Pin */
  GPIO_InitStruct.Pin = ENTER_KEY_Pin|LEVEL_SENS_2_Pin|RIGHT_KEY_Pin|LEVEL_SENS_1_Pin
 8001b70:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 8001b74:	61fb      	str	r3, [r7, #28]
                          |LEFT_KEY_Pin|PULSE_SENS_2_Pin|PULSE_SENS_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b76:	2300      	movs	r3, #0
 8001b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b7e:	f107 031c 	add.w	r3, r7, #28
 8001b82:	4619      	mov	r1, r3
 8001b84:	481e      	ldr	r0, [pc, #120]	; (8001c00 <__MX_GPIO_Init+0x1f8>)
 8001b86:	f001 fa43 	bl	8003010 <HAL_GPIO_Init>

  /*Configure GPIO pin : HEARTBEAT_LED_Pin */
  GPIO_InitStruct.Pin = HEARTBEAT_LED_Pin;
 8001b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b90:	2301      	movs	r3, #1
 8001b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b94:	2302      	movs	r3, #2
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 8001b9c:	f107 031c 	add.w	r3, r7, #28
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4815      	ldr	r0, [pc, #84]	; (8001bf8 <__MX_GPIO_Init+0x1f0>)
 8001ba4:	f001 fa34 	bl	8003010 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_ENABLE_Pin */
  GPIO_InitStruct.Pin = RS485_ENABLE_Pin;
 8001ba8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RS485_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001bba:	f107 031c 	add.w	r3, r7, #28
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	480e      	ldr	r0, [pc, #56]	; (8001bfc <__MX_GPIO_Init+0x1f4>)
 8001bc2:	f001 fa25 	bl	8003010 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_6_Pin RELAY_7_Pin RELAY_8_Pin */
  GPIO_InitStruct.Pin = RELAY_6_Pin|RELAY_7_Pin|RELAY_8_Pin;
 8001bc6:	2338      	movs	r3, #56	; 0x38
 8001bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bd6:	f107 031c 	add.w	r3, r7, #28
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4808      	ldr	r0, [pc, #32]	; (8001c00 <__MX_GPIO_Init+0x1f8>)
 8001bde:	f001 fa17 	bl	8003010 <HAL_GPIO_Init>

}
 8001be2:	bf00      	nop
 8001be4:	3730      	adds	r7, #48	; 0x30
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40020400 	.word	0x40020400
 8001bf8:	40020000 	.word	0x40020000
 8001bfc:	40020800 	.word	0x40020800
 8001c00:	40020c00 	.word	0x40020c00

08001c04 <platform_gpio_init>:
  * @brief Platform GPIO Initialization Function
  * @param None
  * @retval None
  */
void platform_gpio_init()
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
	__MX_GPIO_Init();
 8001c08:	f7ff fefe 	bl	8001a08 <__MX_GPIO_Init>
}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <__SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void __SystemClock_Config(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b0a0      	sub	sp, #128	; 0x80
 8001c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c1a:	2230      	movs	r2, #48	; 0x30
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f003 feac 	bl	800597c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c24:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c34:	f107 030c 	add.w	r3, r7, #12
 8001c38:	2230      	movs	r2, #48	; 0x30
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f003 fe9d 	bl	800597c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	4b2c      	ldr	r3, [pc, #176]	; (8001cf8 <__SystemClock_Config+0xe8>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	4a2b      	ldr	r2, [pc, #172]	; (8001cf8 <__SystemClock_Config+0xe8>)
 8001c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c50:	6413      	str	r3, [r2, #64]	; 0x40
 8001c52:	4b29      	ldr	r3, [pc, #164]	; (8001cf8 <__SystemClock_Config+0xe8>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	4b26      	ldr	r3, [pc, #152]	; (8001cfc <__SystemClock_Config+0xec>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c6a:	4a24      	ldr	r2, [pc, #144]	; (8001cfc <__SystemClock_Config+0xec>)
 8001c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	4b22      	ldr	r3, [pc, #136]	; (8001cfc <__SystemClock_Config+0xec>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c7a:	607b      	str	r3, [r7, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001c7e:	230a      	movs	r3, #10
 8001c80:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c82:	2301      	movs	r3, #1
 8001c84:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c86:	2310      	movs	r3, #16
 8001c88:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c92:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c96:	4618      	mov	r0, r3
 8001c98:	f001 fb96 	bl	80033c8 <HAL_RCC_OscConfig>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <__SystemClock_Config+0x96>
  {
    Error_Handler();
 8001ca2:	f7ff fd9b 	bl	80017dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ca6:	230f      	movs	r3, #15
 8001ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001caa:	2300      	movs	r3, #0
 8001cac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001cba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f001 fdf1 	bl	80038a8 <HAL_RCC_ClockConfig>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <__SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001ccc:	f7ff fd86 	bl	80017dc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001cd0:	2320      	movs	r3, #32
 8001cd2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001cd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cd8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cda:	f107 030c 	add.w	r3, r7, #12
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f001 ffae 	bl	8003c40 <HAL_RCCEx_PeriphCLKConfig>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <__SystemClock_Config+0xde>
  {
    Error_Handler();
 8001cea:	f7ff fd77 	bl	80017dc <Error_Handler>
  }
}
 8001cee:	bf00      	nop
 8001cf0:	3780      	adds	r7, #128	; 0x80
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40007000 	.word	0x40007000

08001d00 <platform_sysclk_cfg>:
/*******************************************************************************
 *  PUBLIC
 ******************************************************************************/

void platform_sysclk_cfg()
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
	__SystemClock_Config();
 8001d04:	f7ff ff84 	bl	8001c10 <__SystemClock_Config>
}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <__MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void __MX_RTC_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001d20:	2300      	movs	r3, #0
 8001d22:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d24:	4b24      	ldr	r3, [pc, #144]	; (8001db8 <__MX_RTC_Init+0xac>)
 8001d26:	4a25      	ldr	r2, [pc, #148]	; (8001dbc <__MX_RTC_Init+0xb0>)
 8001d28:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001d2a:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <__MX_RTC_Init+0xac>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001d30:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <__MX_RTC_Init+0xac>)
 8001d32:	227f      	movs	r2, #127	; 0x7f
 8001d34:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001d36:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <__MX_RTC_Init+0xac>)
 8001d38:	22ff      	movs	r2, #255	; 0xff
 8001d3a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d3c:	4b1e      	ldr	r3, [pc, #120]	; (8001db8 <__MX_RTC_Init+0xac>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d42:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <__MX_RTC_Init+0xac>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d48:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <__MX_RTC_Init+0xac>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d4e:	481a      	ldr	r0, [pc, #104]	; (8001db8 <__MX_RTC_Init+0xac>)
 8001d50:	f002 f934 	bl	8003fbc <HAL_RTC_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <__MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001d5a:	f7ff fd3f 	bl	80017dc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d72:	1d3b      	adds	r3, r7, #4
 8001d74:	2201      	movs	r2, #1
 8001d76:	4619      	mov	r1, r3
 8001d78:	480f      	ldr	r0, [pc, #60]	; (8001db8 <__MX_RTC_Init+0xac>)
 8001d7a:	f002 f9b0 	bl	80040de <HAL_RTC_SetTime>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <__MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001d84:	f7ff fd2a 	bl	80017dc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001d90:	2301      	movs	r3, #1
 8001d92:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d98:	463b      	mov	r3, r7
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4806      	ldr	r0, [pc, #24]	; (8001db8 <__MX_RTC_Init+0xac>)
 8001da0:	f002 fa5a 	bl	8004258 <HAL_RTC_SetDate>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <__MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001daa:	f7ff fd17 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001dae:	bf00      	nop
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000374 	.word	0x20000374
 8001dbc:	40002800 	.word	0x40002800

08001dc0 <platform_rtc_init>:

/*******************************************************************************
 *  PUBLIC
 ******************************************************************************/
void platform_rtc_init()
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
	__MX_RTC_Init();
 8001dc4:	f7ff ffa2 	bl	8001d0c <__MX_RTC_Init>
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <__MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void __MX_TIM2_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dd2:	f107 0308 	add.w	r3, r7, #8
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de0:	463b      	mov	r3, r7
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001de8:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <__MX_TIM2_Init+0x98>)
 8001dea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1600-1;
 8001df0:	4b1c      	ldr	r3, [pc, #112]	; (8001e64 <__MX_TIM2_Init+0x98>)
 8001df2:	f240 623f 	movw	r2, #1599	; 0x63f
 8001df6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df8:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <__MX_TIM2_Init+0x98>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8001dfe:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <__MX_TIM2_Init+0x98>)
 8001e00:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001e04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e06:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <__MX_TIM2_Init+0x98>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e0c:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <__MX_TIM2_Init+0x98>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e12:	4814      	ldr	r0, [pc, #80]	; (8001e64 <__MX_TIM2_Init+0x98>)
 8001e14:	f002 fb39 	bl	800448a <HAL_TIM_Base_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <__MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001e1e:	f7ff fcdd 	bl	80017dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e28:	f107 0308 	add.w	r3, r7, #8
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	480d      	ldr	r0, [pc, #52]	; (8001e64 <__MX_TIM2_Init+0x98>)
 8001e30:	f002 fc82 	bl	8004738 <HAL_TIM_ConfigClockSource>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <__MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001e3a:	f7ff fccf 	bl	80017dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e46:	463b      	mov	r3, r7
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4806      	ldr	r0, [pc, #24]	; (8001e64 <__MX_TIM2_Init+0x98>)
 8001e4c:	f002 fe8e 	bl	8004b6c <HAL_TIMEx_MasterConfigSynchronization>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <__MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001e56:	f7ff fcc1 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e5a:	bf00      	nop
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000414 	.word	0x20000414

08001e68 <__MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void __MX_TIM4_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e6e:	f107 0308 	add.w	r3, r7, #8
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	605a      	str	r2, [r3, #4]
 8001e78:	609a      	str	r2, [r3, #8]
 8001e7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e7c:	463b      	mov	r3, r7
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e84:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <__MX_TIM4_Init+0x94>)
 8001e86:	4a1e      	ldr	r2, [pc, #120]	; (8001f00 <__MX_TIM4_Init+0x98>)
 8001e88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1600-1;
 8001e8a:	4b1c      	ldr	r3, [pc, #112]	; (8001efc <__MX_TIM4_Init+0x94>)
 8001e8c:	f240 623f 	movw	r2, #1599	; 0x63f
 8001e90:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e92:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <__MX_TIM4_Init+0x94>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000-1;
 8001e98:	4b18      	ldr	r3, [pc, #96]	; (8001efc <__MX_TIM4_Init+0x94>)
 8001e9a:	f241 3287 	movw	r2, #4999	; 0x1387
 8001e9e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea0:	4b16      	ldr	r3, [pc, #88]	; (8001efc <__MX_TIM4_Init+0x94>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea6:	4b15      	ldr	r3, [pc, #84]	; (8001efc <__MX_TIM4_Init+0x94>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001eac:	4813      	ldr	r0, [pc, #76]	; (8001efc <__MX_TIM4_Init+0x94>)
 8001eae:	f002 faec 	bl	800448a <HAL_TIM_Base_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <__MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001eb8:	f7ff fc90 	bl	80017dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ec2:	f107 0308 	add.w	r3, r7, #8
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	480c      	ldr	r0, [pc, #48]	; (8001efc <__MX_TIM4_Init+0x94>)
 8001eca:	f002 fc35 	bl	8004738 <HAL_TIM_ConfigClockSource>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <__MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001ed4:	f7ff fc82 	bl	80017dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ee0:	463b      	mov	r3, r7
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4805      	ldr	r0, [pc, #20]	; (8001efc <__MX_TIM4_Init+0x94>)
 8001ee6:	f002 fe41 	bl	8004b6c <HAL_TIMEx_MasterConfigSynchronization>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <__MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001ef0:	f7ff fc74 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ef4:	bf00      	nop
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000394 	.word	0x20000394
 8001f00:	40000800 	.word	0x40000800

08001f04 <__MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
void __MX_TIM5_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f0a:	f107 0308 	add.w	r3, r7, #8
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f18:	463b      	mov	r3, r7
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f20:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <__MX_TIM5_Init+0x94>)
 8001f22:	4a1e      	ldr	r2, [pc, #120]	; (8001f9c <__MX_TIM5_Init+0x98>)
 8001f24:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1600-1;
 8001f26:	4b1c      	ldr	r3, [pc, #112]	; (8001f98 <__MX_TIM5_Init+0x94>)
 8001f28:	f240 623f 	movw	r2, #1599	; 0x63f
 8001f2c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2e:	4b1a      	ldr	r3, [pc, #104]	; (8001f98 <__MX_TIM5_Init+0x94>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 5000-1;
 8001f34:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <__MX_TIM5_Init+0x94>)
 8001f36:	f241 3287 	movw	r2, #4999	; 0x1387
 8001f3a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f3c:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <__MX_TIM5_Init+0x94>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <__MX_TIM5_Init+0x94>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001f48:	4813      	ldr	r0, [pc, #76]	; (8001f98 <__MX_TIM5_Init+0x94>)
 8001f4a:	f002 fa9e 	bl	800448a <HAL_TIM_Base_Init>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <__MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001f54:	f7ff fc42 	bl	80017dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001f5e:	f107 0308 	add.w	r3, r7, #8
 8001f62:	4619      	mov	r1, r3
 8001f64:	480c      	ldr	r0, [pc, #48]	; (8001f98 <__MX_TIM5_Init+0x94>)
 8001f66:	f002 fbe7 	bl	8004738 <HAL_TIM_ConfigClockSource>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <__MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001f70:	f7ff fc34 	bl	80017dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f74:	2300      	movs	r3, #0
 8001f76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f7c:	463b      	mov	r3, r7
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4805      	ldr	r0, [pc, #20]	; (8001f98 <__MX_TIM5_Init+0x94>)
 8001f82:	f002 fdf3 	bl	8004b6c <HAL_TIMEx_MasterConfigSynchronization>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <__MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001f8c:	f7ff fc26 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001f90:	bf00      	nop
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	200003d4 	.word	0x200003d4
 8001f9c:	40000c00 	.word	0x40000c00

08001fa0 <platform_timer_init>:
/*******************************************************************************
 *  PUBLIC
 ******************************************************************************/

void platform_timer_init()
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
	__MX_TIM2_Init();
 8001fa4:	f7ff ff12 	bl	8001dcc <__MX_TIM2_Init>
	__MX_TIM4_Init();
 8001fa8:	f7ff ff5e 	bl	8001e68 <__MX_TIM4_Init>
	__MX_TIM5_Init();
 8001fac:	f7ff ffaa 	bl	8001f04 <__MX_TIM5_Init>
}
 8001fb0:	bf00      	nop
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <platform_timer_start>:

void platform_timer_start()
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001fb8:	4803      	ldr	r0, [pc, #12]	; (8001fc8 <platform_timer_start+0x14>)
 8001fba:	f002 fa91 	bl	80044e0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8001fbe:	4803      	ldr	r0, [pc, #12]	; (8001fcc <platform_timer_start+0x18>)
 8001fc0:	f002 fa8e 	bl	80044e0 <HAL_TIM_Base_Start_IT>
}
 8001fc4:	bf00      	nop
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20000414 	.word	0x20000414
 8001fcc:	20000394 	.word	0x20000394

08001fd0 <HAL_TIM_PeriodElapsedCallback>:
	HAL_TIM_Base_Stop_IT(&htim2);
	HAL_TIM_Base_Stop_IT(&htim4);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == htim2.Instance)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4b09      	ldr	r3, [pc, #36]	; (8002004 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d101      	bne.n	8001fe8 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
    	keys_action();
 8001fe4:	f7fe fe42 	bl	8000c6c <keys_action>
    	//pulse_counter();
    }
    if (htim->Instance == htim4.Instance)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d102      	bne.n	8001ffa <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
    	//keypad_status = 0;
    	DisplayActions();
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4798      	blx	r3
    else if (htim->Instance == htim5.Instance)
	{
    	//keypad_action();
    	//keypad_status = 1;
	}
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000414 	.word	0x20000414
 8002008:	20000394 	.word	0x20000394
 800200c:	20000104 	.word	0x20000104

08002010 <__MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
void __MX_UART5_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <__MX_UART5_Init+0x4c>)
 8002016:	4a12      	ldr	r2, [pc, #72]	; (8002060 <__MX_UART5_Init+0x50>)
 8002018:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <__MX_UART5_Init+0x4c>)
 800201c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002020:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <__MX_UART5_Init+0x4c>)
 8002024:	2200      	movs	r2, #0
 8002026:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <__MX_UART5_Init+0x4c>)
 800202a:	2200      	movs	r2, #0
 800202c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <__MX_UART5_Init+0x4c>)
 8002030:	2200      	movs	r2, #0
 8002032:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002034:	4b09      	ldr	r3, [pc, #36]	; (800205c <__MX_UART5_Init+0x4c>)
 8002036:	220c      	movs	r2, #12
 8002038:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800203a:	4b08      	ldr	r3, [pc, #32]	; (800205c <__MX_UART5_Init+0x4c>)
 800203c:	2200      	movs	r2, #0
 800203e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <__MX_UART5_Init+0x4c>)
 8002042:	2200      	movs	r2, #0
 8002044:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002046:	4805      	ldr	r0, [pc, #20]	; (800205c <__MX_UART5_Init+0x4c>)
 8002048:	f002 fe20 	bl	8004c8c <HAL_UART_Init>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <__MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002052:	f7ff fbc3 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000494 	.word	0x20000494
 8002060:	40005000 	.word	0x40005000

08002064 <__MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
void __MX_UART7_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002068:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <__MX_UART7_Init+0x4c>)
 800206a:	4a12      	ldr	r2, [pc, #72]	; (80020b4 <__MX_UART7_Init+0x50>)
 800206c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 800206e:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <__MX_UART7_Init+0x4c>)
 8002070:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002074:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002076:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <__MX_UART7_Init+0x4c>)
 8002078:	2200      	movs	r2, #0
 800207a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800207c:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <__MX_UART7_Init+0x4c>)
 800207e:	2200      	movs	r2, #0
 8002080:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002082:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <__MX_UART7_Init+0x4c>)
 8002084:	2200      	movs	r2, #0
 8002086:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002088:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <__MX_UART7_Init+0x4c>)
 800208a:	220c      	movs	r2, #12
 800208c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800208e:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <__MX_UART7_Init+0x4c>)
 8002090:	2200      	movs	r2, #0
 8002092:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002094:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <__MX_UART7_Init+0x4c>)
 8002096:	2200      	movs	r2, #0
 8002098:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800209a:	4805      	ldr	r0, [pc, #20]	; (80020b0 <__MX_UART7_Init+0x4c>)
 800209c:	f002 fdf6 	bl	8004c8c <HAL_UART_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <__MX_UART7_Init+0x46>
  {
    Error_Handler();
 80020a6:	f7ff fb99 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000454 	.word	0x20000454
 80020b4:	40007800 	.word	0x40007800

080020b8 <__MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void __MX_USART2_UART_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020bc:	4b11      	ldr	r3, [pc, #68]	; (8002104 <__MX_USART2_UART_Init+0x4c>)
 80020be:	4a12      	ldr	r2, [pc, #72]	; (8002108 <__MX_USART2_UART_Init+0x50>)
 80020c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <__MX_USART2_UART_Init+0x4c>)
 80020c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020ca:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <__MX_USART2_UART_Init+0x4c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <__MX_USART2_UART_Init+0x4c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020d6:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <__MX_USART2_UART_Init+0x4c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <__MX_USART2_UART_Init+0x4c>)
 80020de:	220c      	movs	r2, #12
 80020e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020e2:	4b08      	ldr	r3, [pc, #32]	; (8002104 <__MX_USART2_UART_Init+0x4c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <__MX_USART2_UART_Init+0x4c>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020ee:	4805      	ldr	r0, [pc, #20]	; (8002104 <__MX_USART2_UART_Init+0x4c>)
 80020f0:	f002 fdcc 	bl	8004c8c <HAL_UART_Init>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <__MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020fa:	f7ff fb6f 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200004d4 	.word	0x200004d4
 8002108:	40004400 	.word	0x40004400

0800210c <__wifi_uart_init>:

void __wifi_uart_init()
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
	__MX_USART2_UART_Init();
 8002110:	f7ff ffd2 	bl	80020b8 <__MX_USART2_UART_Init>
}
 8002114:	bf00      	nop
 8002116:	bd80      	pop	{r7, pc}

08002118 <__lcd_uart_init>:

void __lcd_uart_init()
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
	__MX_UART7_Init();
 800211c:	f7ff ffa2 	bl	8002064 <__MX_UART7_Init>
}
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}

08002124 <__rs485_uart_init>:

void __rs485_uart_init()
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
	__MX_UART5_Init();
 8002128:	f7ff ff72 	bl	8002010 <__MX_UART5_Init>
}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}

08002130 <platform_uart_init>:
/*******************************************************************************
 *  PUBLIC
 ******************************************************************************/

void platform_uart_init()
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
	__wifi_uart_init();
 8002134:	f7ff ffea 	bl	800210c <__wifi_uart_init>
	__lcd_uart_init();
 8002138:	f7ff ffee 	bl	8002118 <__lcd_uart_init>
	__rs485_uart_init();
 800213c:	f7ff fff2 	bl	8002124 <__rs485_uart_init>
}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}

08002144 <lcd_send_cmd>:

void lcd_send_cmd(char *pData, int Size)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_IT(&huart7,pData,Size);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	b29b      	uxth	r3, r3
 8002152:	461a      	mov	r2, r3
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	4803      	ldr	r0, [pc, #12]	; (8002164 <lcd_send_cmd+0x20>)
 8002158:	f002 fde5 	bl	8004d26 <HAL_UART_Transmit_IT>
}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20000454 	.word	0x20000454

08002168 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
	platform_start_yorker();
 800216c:	f7ff fabe 	bl	80016ec <platform_start_yorker>
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	607b      	str	r3, [r7, #4]
 8002182:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <HAL_MspInit+0x4c>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	4a0f      	ldr	r2, [pc, #60]	; (80021c4 <HAL_MspInit+0x4c>)
 8002188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800218c:	6453      	str	r3, [r2, #68]	; 0x44
 800218e:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <HAL_MspInit+0x4c>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002196:	607b      	str	r3, [r7, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	603b      	str	r3, [r7, #0]
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <HAL_MspInit+0x4c>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	4a08      	ldr	r2, [pc, #32]	; (80021c4 <HAL_MspInit+0x4c>)
 80021a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a8:	6413      	str	r3, [r2, #64]	; 0x40
 80021aa:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_MspInit+0x4c>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b2:	603b      	str	r3, [r7, #0]
 80021b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800

080021c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08e      	sub	sp, #56	; 0x38
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a45      	ldr	r2, [pc, #276]	; (80022fc <HAL_ADC_MspInit+0x134>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d128      	bne.n	800223c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	623b      	str	r3, [r7, #32]
 80021ee:	4b44      	ldr	r3, [pc, #272]	; (8002300 <HAL_ADC_MspInit+0x138>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	4a43      	ldr	r2, [pc, #268]	; (8002300 <HAL_ADC_MspInit+0x138>)
 80021f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f8:	6453      	str	r3, [r2, #68]	; 0x44
 80021fa:	4b41      	ldr	r3, [pc, #260]	; (8002300 <HAL_ADC_MspInit+0x138>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002202:	623b      	str	r3, [r7, #32]
 8002204:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	4b3d      	ldr	r3, [pc, #244]	; (8002300 <HAL_ADC_MspInit+0x138>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a3c      	ldr	r2, [pc, #240]	; (8002300 <HAL_ADC_MspInit+0x138>)
 8002210:	f043 0304 	orr.w	r3, r3, #4
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b3a      	ldr	r3, [pc, #232]	; (8002300 <HAL_ADC_MspInit+0x138>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0304 	and.w	r3, r3, #4
 800221e:	61fb      	str	r3, [r7, #28]
 8002220:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8002222:	2309      	movs	r3, #9
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002226:	2303      	movs	r3, #3
 8002228:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800222e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002232:	4619      	mov	r1, r3
 8002234:	4833      	ldr	r0, [pc, #204]	; (8002304 <HAL_ADC_MspInit+0x13c>)
 8002236:	f000 feeb 	bl	8003010 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800223a:	e05a      	b.n	80022f2 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a31      	ldr	r2, [pc, #196]	; (8002308 <HAL_ADC_MspInit+0x140>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d128      	bne.n	8002298 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	61bb      	str	r3, [r7, #24]
 800224a:	4b2d      	ldr	r3, [pc, #180]	; (8002300 <HAL_ADC_MspInit+0x138>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	4a2c      	ldr	r2, [pc, #176]	; (8002300 <HAL_ADC_MspInit+0x138>)
 8002250:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002254:	6453      	str	r3, [r2, #68]	; 0x44
 8002256:	4b2a      	ldr	r3, [pc, #168]	; (8002300 <HAL_ADC_MspInit+0x138>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800225e:	61bb      	str	r3, [r7, #24]
 8002260:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	4b26      	ldr	r3, [pc, #152]	; (8002300 <HAL_ADC_MspInit+0x138>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	4a25      	ldr	r2, [pc, #148]	; (8002300 <HAL_ADC_MspInit+0x138>)
 800226c:	f043 0304 	orr.w	r3, r3, #4
 8002270:	6313      	str	r3, [r2, #48]	; 0x30
 8002272:	4b23      	ldr	r3, [pc, #140]	; (8002300 <HAL_ADC_MspInit+0x138>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800227e:	2302      	movs	r3, #2
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002282:	2303      	movs	r3, #3
 8002284:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800228a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800228e:	4619      	mov	r1, r3
 8002290:	481c      	ldr	r0, [pc, #112]	; (8002304 <HAL_ADC_MspInit+0x13c>)
 8002292:	f000 febd 	bl	8003010 <HAL_GPIO_Init>
}
 8002296:	e02c      	b.n	80022f2 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a1b      	ldr	r2, [pc, #108]	; (800230c <HAL_ADC_MspInit+0x144>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d127      	bne.n	80022f2 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	4b16      	ldr	r3, [pc, #88]	; (8002300 <HAL_ADC_MspInit+0x138>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	4a15      	ldr	r2, [pc, #84]	; (8002300 <HAL_ADC_MspInit+0x138>)
 80022ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022b0:	6453      	str	r3, [r2, #68]	; 0x44
 80022b2:	4b13      	ldr	r3, [pc, #76]	; (8002300 <HAL_ADC_MspInit+0x138>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <HAL_ADC_MspInit+0x138>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	4a0e      	ldr	r2, [pc, #56]	; (8002300 <HAL_ADC_MspInit+0x138>)
 80022c8:	f043 0304 	orr.w	r3, r3, #4
 80022cc:	6313      	str	r3, [r2, #48]	; 0x30
 80022ce:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <HAL_ADC_MspInit+0x138>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f003 0304 	and.w	r3, r3, #4
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022da:	2304      	movs	r3, #4
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022de:	2303      	movs	r3, #3
 80022e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ea:	4619      	mov	r1, r3
 80022ec:	4805      	ldr	r0, [pc, #20]	; (8002304 <HAL_ADC_MspInit+0x13c>)
 80022ee:	f000 fe8f 	bl	8003010 <HAL_GPIO_Init>
}
 80022f2:	bf00      	nop
 80022f4:	3738      	adds	r7, #56	; 0x38
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40012000 	.word	0x40012000
 8002300:	40023800 	.word	0x40023800
 8002304:	40020800 	.word	0x40020800
 8002308:	40012100 	.word	0x40012100
 800230c:	40012200 	.word	0x40012200

08002310 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a05      	ldr	r2, [pc, #20]	; (8002334 <HAL_RTC_MspInit+0x24>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d102      	bne.n	8002328 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002322:	4b05      	ldr	r3, [pc, #20]	; (8002338 <HAL_RTC_MspInit+0x28>)
 8002324:	2201      	movs	r2, #1
 8002326:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	40002800 	.word	0x40002800
 8002338:	42470e3c 	.word	0x42470e3c

0800233c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800234c:	d116      	bne.n	800237c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	4b28      	ldr	r3, [pc, #160]	; (80023f4 <HAL_TIM_Base_MspInit+0xb8>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	4a27      	ldr	r2, [pc, #156]	; (80023f4 <HAL_TIM_Base_MspInit+0xb8>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	6413      	str	r3, [r2, #64]	; 0x40
 800235e:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <HAL_TIM_Base_MspInit+0xb8>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800236a:	2200      	movs	r2, #0
 800236c:	2100      	movs	r1, #0
 800236e:	201c      	movs	r0, #28
 8002370:	f000 fdf5 	bl	8002f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002374:	201c      	movs	r0, #28
 8002376:	f000 fe0e 	bl	8002f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800237a:	e036      	b.n	80023ea <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a1d      	ldr	r2, [pc, #116]	; (80023f8 <HAL_TIM_Base_MspInit+0xbc>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d116      	bne.n	80023b4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	4b1a      	ldr	r3, [pc, #104]	; (80023f4 <HAL_TIM_Base_MspInit+0xb8>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	4a19      	ldr	r2, [pc, #100]	; (80023f4 <HAL_TIM_Base_MspInit+0xb8>)
 8002390:	f043 0304 	orr.w	r3, r3, #4
 8002394:	6413      	str	r3, [r2, #64]	; 0x40
 8002396:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <HAL_TIM_Base_MspInit+0xb8>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80023a2:	2200      	movs	r2, #0
 80023a4:	2100      	movs	r1, #0
 80023a6:	201e      	movs	r0, #30
 80023a8:	f000 fdd9 	bl	8002f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80023ac:	201e      	movs	r0, #30
 80023ae:	f000 fdf2 	bl	8002f96 <HAL_NVIC_EnableIRQ>
}
 80023b2:	e01a      	b.n	80023ea <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM5)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a10      	ldr	r2, [pc, #64]	; (80023fc <HAL_TIM_Base_MspInit+0xc0>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d115      	bne.n	80023ea <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <HAL_TIM_Base_MspInit+0xb8>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	4a0b      	ldr	r2, [pc, #44]	; (80023f4 <HAL_TIM_Base_MspInit+0xb8>)
 80023c8:	f043 0308 	orr.w	r3, r3, #8
 80023cc:	6413      	str	r3, [r2, #64]	; 0x40
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <HAL_TIM_Base_MspInit+0xb8>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80023da:	2200      	movs	r2, #0
 80023dc:	2100      	movs	r1, #0
 80023de:	2032      	movs	r0, #50	; 0x32
 80023e0:	f000 fdbd 	bl	8002f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80023e4:	2032      	movs	r0, #50	; 0x32
 80023e6:	f000 fdd6 	bl	8002f96 <HAL_NVIC_EnableIRQ>
}
 80023ea:	bf00      	nop
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40000800 	.word	0x40000800
 80023fc:	40000c00 	.word	0x40000c00

08002400 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08e      	sub	sp, #56	; 0x38
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a67      	ldr	r2, [pc, #412]	; (80025bc <HAL_UART_MspInit+0x1bc>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d153      	bne.n	80024ca <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	623b      	str	r3, [r7, #32]
 8002426:	4b66      	ldr	r3, [pc, #408]	; (80025c0 <HAL_UART_MspInit+0x1c0>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	4a65      	ldr	r2, [pc, #404]	; (80025c0 <HAL_UART_MspInit+0x1c0>)
 800242c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002430:	6413      	str	r3, [r2, #64]	; 0x40
 8002432:	4b63      	ldr	r3, [pc, #396]	; (80025c0 <HAL_UART_MspInit+0x1c0>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800243a:	623b      	str	r3, [r7, #32]
 800243c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	61fb      	str	r3, [r7, #28]
 8002442:	4b5f      	ldr	r3, [pc, #380]	; (80025c0 <HAL_UART_MspInit+0x1c0>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	4a5e      	ldr	r2, [pc, #376]	; (80025c0 <HAL_UART_MspInit+0x1c0>)
 8002448:	f043 0304 	orr.w	r3, r3, #4
 800244c:	6313      	str	r3, [r2, #48]	; 0x30
 800244e:	4b5c      	ldr	r3, [pc, #368]	; (80025c0 <HAL_UART_MspInit+0x1c0>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	61fb      	str	r3, [r7, #28]
 8002458:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	61bb      	str	r3, [r7, #24]
 800245e:	4b58      	ldr	r3, [pc, #352]	; (80025c0 <HAL_UART_MspInit+0x1c0>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	4a57      	ldr	r2, [pc, #348]	; (80025c0 <HAL_UART_MspInit+0x1c0>)
 8002464:	f043 0308 	orr.w	r3, r3, #8
 8002468:	6313      	str	r3, [r2, #48]	; 0x30
 800246a:	4b55      	ldr	r3, [pc, #340]	; (80025c0 <HAL_UART_MspInit+0x1c0>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	61bb      	str	r3, [r7, #24]
 8002474:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = RS485_TX_Pin;
 8002476:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800247a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002480:	2301      	movs	r3, #1
 8002482:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002484:	2303      	movs	r3, #3
 8002486:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002488:	2308      	movs	r3, #8
 800248a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 800248c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002490:	4619      	mov	r1, r3
 8002492:	484c      	ldr	r0, [pc, #304]	; (80025c4 <HAL_UART_MspInit+0x1c4>)
 8002494:	f000 fdbc 	bl	8003010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RS485_RX_Pin;
 8002498:	2304      	movs	r3, #4
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249c:	2302      	movs	r3, #2
 800249e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024a0:	2301      	movs	r3, #1
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a4:	2303      	movs	r3, #3
 80024a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80024a8:	2308      	movs	r3, #8
 80024aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 80024ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b0:	4619      	mov	r1, r3
 80024b2:	4845      	ldr	r0, [pc, #276]	; (80025c8 <HAL_UART_MspInit+0x1c8>)
 80024b4:	f000 fdac 	bl	8003010 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80024b8:	2200      	movs	r2, #0
 80024ba:	2100      	movs	r1, #0
 80024bc:	2035      	movs	r0, #53	; 0x35
 80024be:	f000 fd4e 	bl	8002f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80024c2:	2035      	movs	r0, #53	; 0x35
 80024c4:	f000 fd67 	bl	8002f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024c8:	e073      	b.n	80025b2 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==UART7)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a3f      	ldr	r2, [pc, #252]	; (80025cc <HAL_UART_MspInit+0x1cc>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d135      	bne.n	8002540 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART7_CLK_ENABLE();
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	4b39      	ldr	r3, [pc, #228]	; (80025c0 <HAL_UART_MspInit+0x1c0>)
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	4a38      	ldr	r2, [pc, #224]	; (80025c0 <HAL_UART_MspInit+0x1c0>)
 80024de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80024e2:	6413      	str	r3, [r2, #64]	; 0x40
 80024e4:	4b36      	ldr	r3, [pc, #216]	; (80025c0 <HAL_UART_MspInit+0x1c0>)
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024f0:	2300      	movs	r3, #0
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	4b32      	ldr	r3, [pc, #200]	; (80025c0 <HAL_UART_MspInit+0x1c0>)
 80024f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f8:	4a31      	ldr	r2, [pc, #196]	; (80025c0 <HAL_UART_MspInit+0x1c0>)
 80024fa:	f043 0310 	orr.w	r3, r3, #16
 80024fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002500:	4b2f      	ldr	r3, [pc, #188]	; (80025c0 <HAL_UART_MspInit+0x1c0>)
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	f003 0310 	and.w	r3, r3, #16
 8002508:	613b      	str	r3, [r7, #16]
 800250a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_UART_RX_Pin|LCD_UART_TX_Pin;
 800250c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002512:	2302      	movs	r3, #2
 8002514:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002516:	2301      	movs	r3, #1
 8002518:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251a:	2303      	movs	r3, #3
 800251c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800251e:	2308      	movs	r3, #8
 8002520:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002526:	4619      	mov	r1, r3
 8002528:	4829      	ldr	r0, [pc, #164]	; (80025d0 <HAL_UART_MspInit+0x1d0>)
 800252a:	f000 fd71 	bl	8003010 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800252e:	2200      	movs	r2, #0
 8002530:	2100      	movs	r1, #0
 8002532:	2052      	movs	r0, #82	; 0x52
 8002534:	f000 fd13 	bl	8002f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002538:	2052      	movs	r0, #82	; 0x52
 800253a:	f000 fd2c 	bl	8002f96 <HAL_NVIC_EnableIRQ>
}
 800253e:	e038      	b.n	80025b2 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a23      	ldr	r2, [pc, #140]	; (80025d4 <HAL_UART_MspInit+0x1d4>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d133      	bne.n	80025b2 <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	4b1c      	ldr	r3, [pc, #112]	; (80025c0 <HAL_UART_MspInit+0x1c0>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	4a1b      	ldr	r2, [pc, #108]	; (80025c0 <HAL_UART_MspInit+0x1c0>)
 8002554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002558:	6413      	str	r3, [r2, #64]	; 0x40
 800255a:	4b19      	ldr	r3, [pc, #100]	; (80025c0 <HAL_UART_MspInit+0x1c0>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <HAL_UART_MspInit+0x1c0>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	4a14      	ldr	r2, [pc, #80]	; (80025c0 <HAL_UART_MspInit+0x1c0>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	6313      	str	r3, [r2, #48]	; 0x30
 8002576:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <HAL_UART_MspInit+0x1c0>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	60bb      	str	r3, [r7, #8]
 8002580:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = WIFI_UART_TX_Pin|WIFI_UART_RX_Pin;
 8002582:	230c      	movs	r3, #12
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002586:	2302      	movs	r3, #2
 8002588:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258e:	2303      	movs	r3, #3
 8002590:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002592:	2307      	movs	r3, #7
 8002594:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800259a:	4619      	mov	r1, r3
 800259c:	480e      	ldr	r0, [pc, #56]	; (80025d8 <HAL_UART_MspInit+0x1d8>)
 800259e:	f000 fd37 	bl	8003010 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80025a2:	2200      	movs	r2, #0
 80025a4:	2100      	movs	r1, #0
 80025a6:	2026      	movs	r0, #38	; 0x26
 80025a8:	f000 fcd9 	bl	8002f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025ac:	2026      	movs	r0, #38	; 0x26
 80025ae:	f000 fcf2 	bl	8002f96 <HAL_NVIC_EnableIRQ>
}
 80025b2:	bf00      	nop
 80025b4:	3738      	adds	r7, #56	; 0x38
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40005000 	.word	0x40005000
 80025c0:	40023800 	.word	0x40023800
 80025c4:	40020800 	.word	0x40020800
 80025c8:	40020c00 	.word	0x40020c00
 80025cc:	40007800 	.word	0x40007800
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40004400 	.word	0x40004400
 80025d8:	40020000 	.word	0x40020000

080025dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ee:	e7fe      	b.n	80025ee <HardFault_Handler+0x4>

080025f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025f4:	e7fe      	b.n	80025f4 <MemManage_Handler+0x4>

080025f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025fa:	e7fe      	b.n	80025fa <BusFault_Handler+0x4>

080025fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002600:	e7fe      	b.n	8002600 <UsageFault_Handler+0x4>

08002602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002630:	f000 f906 	bl	8002840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002634:	bf00      	nop
 8002636:	bd80      	pop	{r7, pc}

08002638 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800263c:	4802      	ldr	r0, [pc, #8]	; (8002648 <TIM2_IRQHandler+0x10>)
 800263e:	f001 ff73 	bl	8004528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000414 	.word	0x20000414

0800264c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002650:	4802      	ldr	r0, [pc, #8]	; (800265c <TIM4_IRQHandler+0x10>)
 8002652:	f001 ff69 	bl	8004528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000394 	.word	0x20000394

08002660 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002664:	4802      	ldr	r0, [pc, #8]	; (8002670 <USART2_IRQHandler+0x10>)
 8002666:	f002 fba3 	bl	8004db0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	200004d4 	.word	0x200004d4

08002674 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002678:	4802      	ldr	r0, [pc, #8]	; (8002684 <TIM5_IRQHandler+0x10>)
 800267a:	f001 ff55 	bl	8004528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	200003d4 	.word	0x200003d4

08002688 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800268c:	4802      	ldr	r0, [pc, #8]	; (8002698 <UART5_IRQHandler+0x10>)
 800268e:	f002 fb8f 	bl	8004db0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000494 	.word	0x20000494

0800269c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80026a0:	4802      	ldr	r0, [pc, #8]	; (80026ac <UART7_IRQHandler+0x10>)
 80026a2:	f002 fb85 	bl	8004db0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000454 	.word	0x20000454

080026b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026b8:	4a14      	ldr	r2, [pc, #80]	; (800270c <_sbrk+0x5c>)
 80026ba:	4b15      	ldr	r3, [pc, #84]	; (8002710 <_sbrk+0x60>)
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026c4:	4b13      	ldr	r3, [pc, #76]	; (8002714 <_sbrk+0x64>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d102      	bne.n	80026d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026cc:	4b11      	ldr	r3, [pc, #68]	; (8002714 <_sbrk+0x64>)
 80026ce:	4a12      	ldr	r2, [pc, #72]	; (8002718 <_sbrk+0x68>)
 80026d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026d2:	4b10      	ldr	r3, [pc, #64]	; (8002714 <_sbrk+0x64>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d207      	bcs.n	80026f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026e0:	f003 f922 	bl	8005928 <__errno>
 80026e4:	4602      	mov	r2, r0
 80026e6:	230c      	movs	r3, #12
 80026e8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80026ea:	f04f 33ff 	mov.w	r3, #4294967295
 80026ee:	e009      	b.n	8002704 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026f0:	4b08      	ldr	r3, [pc, #32]	; (8002714 <_sbrk+0x64>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026f6:	4b07      	ldr	r3, [pc, #28]	; (8002714 <_sbrk+0x64>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4413      	add	r3, r2
 80026fe:	4a05      	ldr	r2, [pc, #20]	; (8002714 <_sbrk+0x64>)
 8002700:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002702:	68fb      	ldr	r3, [r7, #12]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	20030000 	.word	0x20030000
 8002710:	00000400 	.word	0x00000400
 8002714:	200000f8 	.word	0x200000f8
 8002718:	20000520 	.word	0x20000520

0800271c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002720:	4b08      	ldr	r3, [pc, #32]	; (8002744 <SystemInit+0x28>)
 8002722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002726:	4a07      	ldr	r2, [pc, #28]	; (8002744 <SystemInit+0x28>)
 8002728:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800272c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002730:	4b04      	ldr	r3, [pc, #16]	; (8002744 <SystemInit+0x28>)
 8002732:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002736:	609a      	str	r2, [r3, #8]
#endif
}
 8002738:	bf00      	nop
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002780 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800274c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800274e:	e003      	b.n	8002758 <LoopCopyDataInit>

08002750 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002750:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002752:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002754:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002756:	3104      	adds	r1, #4

08002758 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002758:	480b      	ldr	r0, [pc, #44]	; (8002788 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800275a:	4b0c      	ldr	r3, [pc, #48]	; (800278c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800275c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800275e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002760:	d3f6      	bcc.n	8002750 <CopyDataInit>
  ldr  r2, =_sbss
 8002762:	4a0b      	ldr	r2, [pc, #44]	; (8002790 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002764:	e002      	b.n	800276c <LoopFillZerobss>

08002766 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002766:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002768:	f842 3b04 	str.w	r3, [r2], #4

0800276c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800276c:	4b09      	ldr	r3, [pc, #36]	; (8002794 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800276e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002770:	d3f9      	bcc.n	8002766 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002772:	f7ff ffd3 	bl	800271c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002776:	f003 f8dd 	bl	8005934 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800277a:	f7ff fcf5 	bl	8002168 <main>
  bx  lr    
 800277e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002780:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002784:	080063a4 	.word	0x080063a4
  ldr  r0, =_sdata
 8002788:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800278c:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8002790:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002794:	2000051c 	.word	0x2000051c

08002798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002798:	e7fe      	b.n	8002798 <ADC_IRQHandler>
	...

0800279c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027a0:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <HAL_Init+0x40>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a0d      	ldr	r2, [pc, #52]	; (80027dc <HAL_Init+0x40>)
 80027a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_Init+0x40>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <HAL_Init+0x40>)
 80027b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027b8:	4b08      	ldr	r3, [pc, #32]	; (80027dc <HAL_Init+0x40>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a07      	ldr	r2, [pc, #28]	; (80027dc <HAL_Init+0x40>)
 80027be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027c4:	2003      	movs	r0, #3
 80027c6:	f000 fbbf 	bl	8002f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027ca:	2000      	movs	r0, #0
 80027cc:	f000 f808 	bl	80027e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027d0:	f7ff fcd2 	bl	8002178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40023c00 	.word	0x40023c00

080027e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027e8:	4b12      	ldr	r3, [pc, #72]	; (8002834 <HAL_InitTick+0x54>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	4b12      	ldr	r3, [pc, #72]	; (8002838 <HAL_InitTick+0x58>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	4619      	mov	r1, r3
 80027f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 fbd7 	bl	8002fb2 <HAL_SYSTICK_Config>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e00e      	b.n	800282c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b0f      	cmp	r3, #15
 8002812:	d80a      	bhi.n	800282a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002814:	2200      	movs	r2, #0
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	f04f 30ff 	mov.w	r0, #4294967295
 800281c:	f000 fb9f 	bl	8002f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002820:	4a06      	ldr	r2, [pc, #24]	; (800283c <HAL_InitTick+0x5c>)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	e000      	b.n	800282c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
}
 800282c:	4618      	mov	r0, r3
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	20000008 	.word	0x20000008
 8002838:	20000010 	.word	0x20000010
 800283c:	2000000c 	.word	0x2000000c

08002840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <HAL_IncTick+0x20>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	461a      	mov	r2, r3
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <HAL_IncTick+0x24>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4413      	add	r3, r2
 8002850:	4a04      	ldr	r2, [pc, #16]	; (8002864 <HAL_IncTick+0x24>)
 8002852:	6013      	str	r3, [r2, #0]
}
 8002854:	bf00      	nop
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	20000010 	.word	0x20000010
 8002864:	20000514 	.word	0x20000514

08002868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return uwTick;
 800286c:	4b03      	ldr	r3, [pc, #12]	; (800287c <HAL_GetTick+0x14>)
 800286e:	681b      	ldr	r3, [r3, #0]
}
 8002870:	4618      	mov	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	20000514 	.word	0x20000514

08002880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002888:	f7ff ffee 	bl	8002868 <HAL_GetTick>
 800288c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002898:	d005      	beq.n	80028a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800289a:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <HAL_Delay+0x40>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4413      	add	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028a6:	bf00      	nop
 80028a8:	f7ff ffde 	bl	8002868 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d8f7      	bhi.n	80028a8 <HAL_Delay+0x28>
  {
  }
}
 80028b8:	bf00      	nop
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	20000010 	.word	0x20000010

080028c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e033      	b.n	8002942 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d109      	bne.n	80028f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff fc70 	bl	80021c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d118      	bne.n	8002934 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800290a:	f023 0302 	bic.w	r3, r3, #2
 800290e:	f043 0202 	orr.w	r2, r3, #2
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f94a 	bl	8002bb0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f023 0303 	bic.w	r3, r3, #3
 800292a:	f043 0201 	orr.w	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	641a      	str	r2, [r3, #64]	; 0x40
 8002932:	e001      	b.n	8002938 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002940:	7bfb      	ldrb	r3, [r7, #15]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
	...

0800294c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002956:	2300      	movs	r3, #0
 8002958:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x1c>
 8002964:	2302      	movs	r3, #2
 8002966:	e113      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x244>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b09      	cmp	r3, #9
 8002976:	d925      	bls.n	80029c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68d9      	ldr	r1, [r3, #12]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	b29b      	uxth	r3, r3
 8002984:	461a      	mov	r2, r3
 8002986:	4613      	mov	r3, r2
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	4413      	add	r3, r2
 800298c:	3b1e      	subs	r3, #30
 800298e:	2207      	movs	r2, #7
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43da      	mvns	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	400a      	ands	r2, r1
 800299c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68d9      	ldr	r1, [r3, #12]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	4618      	mov	r0, r3
 80029b0:	4603      	mov	r3, r0
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	4403      	add	r3, r0
 80029b6:	3b1e      	subs	r3, #30
 80029b8:	409a      	lsls	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	e022      	b.n	8002a0a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6919      	ldr	r1, [r3, #16]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	461a      	mov	r2, r3
 80029d2:	4613      	mov	r3, r2
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	4413      	add	r3, r2
 80029d8:	2207      	movs	r2, #7
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43da      	mvns	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	400a      	ands	r2, r1
 80029e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6919      	ldr	r1, [r3, #16]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	4618      	mov	r0, r3
 80029fa:	4603      	mov	r3, r0
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	4403      	add	r3, r0
 8002a00:	409a      	lsls	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b06      	cmp	r3, #6
 8002a10:	d824      	bhi.n	8002a5c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	3b05      	subs	r3, #5
 8002a24:	221f      	movs	r2, #31
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43da      	mvns	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	400a      	ands	r2, r1
 8002a32:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	4618      	mov	r0, r3
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3b05      	subs	r3, #5
 8002a4e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	635a      	str	r2, [r3, #52]	; 0x34
 8002a5a:	e04c      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b0c      	cmp	r3, #12
 8002a62:	d824      	bhi.n	8002aae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	3b23      	subs	r3, #35	; 0x23
 8002a76:	221f      	movs	r2, #31
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43da      	mvns	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	400a      	ands	r2, r1
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	4618      	mov	r0, r3
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3b23      	subs	r3, #35	; 0x23
 8002aa0:	fa00 f203 	lsl.w	r2, r0, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	631a      	str	r2, [r3, #48]	; 0x30
 8002aac:	e023      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	3b41      	subs	r3, #65	; 0x41
 8002ac0:	221f      	movs	r2, #31
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43da      	mvns	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	400a      	ands	r2, r1
 8002ace:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	4618      	mov	r0, r3
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3b41      	subs	r3, #65	; 0x41
 8002aea:	fa00 f203 	lsl.w	r2, r0, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002af6:	4b29      	ldr	r3, [pc, #164]	; (8002b9c <HAL_ADC_ConfigChannel+0x250>)
 8002af8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a28      	ldr	r2, [pc, #160]	; (8002ba0 <HAL_ADC_ConfigChannel+0x254>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d10f      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x1d8>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b12      	cmp	r3, #18
 8002b0a:	d10b      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a1d      	ldr	r2, [pc, #116]	; (8002ba0 <HAL_ADC_ConfigChannel+0x254>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d12b      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x23a>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a1c      	ldr	r2, [pc, #112]	; (8002ba4 <HAL_ADC_ConfigChannel+0x258>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d003      	beq.n	8002b40 <HAL_ADC_ConfigChannel+0x1f4>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b11      	cmp	r3, #17
 8002b3e:	d122      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a11      	ldr	r2, [pc, #68]	; (8002ba4 <HAL_ADC_ConfigChannel+0x258>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d111      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b62:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <HAL_ADC_ConfigChannel+0x25c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a11      	ldr	r2, [pc, #68]	; (8002bac <HAL_ADC_ConfigChannel+0x260>)
 8002b68:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6c:	0c9a      	lsrs	r2, r3, #18
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b78:	e002      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f9      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	40012300 	.word	0x40012300
 8002ba0:	40012000 	.word	0x40012000
 8002ba4:	10000012 	.word	0x10000012
 8002ba8:	20000008 	.word	0x20000008
 8002bac:	431bde83 	.word	0x431bde83

08002bb0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bb8:	4b79      	ldr	r3, [pc, #484]	; (8002da0 <ADC_Init+0x1f0>)
 8002bba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002be4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6859      	ldr	r1, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	021a      	lsls	r2, r3, #8
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6859      	ldr	r1, [r3, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6899      	ldr	r1, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c42:	4a58      	ldr	r2, [pc, #352]	; (8002da4 <ADC_Init+0x1f4>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d022      	beq.n	8002c8e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6899      	ldr	r1, [r3, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6899      	ldr	r1, [r3, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	e00f      	b.n	8002cae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0202 	bic.w	r2, r2, #2
 8002cbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6899      	ldr	r1, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	7e1b      	ldrb	r3, [r3, #24]
 8002cc8:	005a      	lsls	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d01b      	beq.n	8002d14 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002cfa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6859      	ldr	r1, [r3, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	3b01      	subs	r3, #1
 8002d08:	035a      	lsls	r2, r3, #13
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	e007      	b.n	8002d24 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d22:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	051a      	lsls	r2, r3, #20
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6899      	ldr	r1, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d66:	025a      	lsls	r2, r3, #9
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6899      	ldr	r1, [r3, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	029a      	lsls	r2, r3, #10
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	609a      	str	r2, [r3, #8]
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	40012300 	.word	0x40012300
 8002da4:	0f000001 	.word	0x0f000001

08002da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002db8:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <__NVIC_SetPriorityGrouping+0x44>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dda:	4a04      	ldr	r2, [pc, #16]	; (8002dec <__NVIC_SetPriorityGrouping+0x44>)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	60d3      	str	r3, [r2, #12]
}
 8002de0:	bf00      	nop
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002df4:	4b04      	ldr	r3, [pc, #16]	; (8002e08 <__NVIC_GetPriorityGrouping+0x18>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	0a1b      	lsrs	r3, r3, #8
 8002dfa:	f003 0307 	and.w	r3, r3, #7
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	e000ed00 	.word	0xe000ed00

08002e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	db0b      	blt.n	8002e36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	f003 021f 	and.w	r2, r3, #31
 8002e24:	4907      	ldr	r1, [pc, #28]	; (8002e44 <__NVIC_EnableIRQ+0x38>)
 8002e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2a:	095b      	lsrs	r3, r3, #5
 8002e2c:	2001      	movs	r0, #1
 8002e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	e000e100 	.word	0xe000e100

08002e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	6039      	str	r1, [r7, #0]
 8002e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	db0a      	blt.n	8002e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	490c      	ldr	r1, [pc, #48]	; (8002e94 <__NVIC_SetPriority+0x4c>)
 8002e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e66:	0112      	lsls	r2, r2, #4
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e70:	e00a      	b.n	8002e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	4908      	ldr	r1, [pc, #32]	; (8002e98 <__NVIC_SetPriority+0x50>)
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	3b04      	subs	r3, #4
 8002e80:	0112      	lsls	r2, r2, #4
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	440b      	add	r3, r1
 8002e86:	761a      	strb	r2, [r3, #24]
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	e000e100 	.word	0xe000e100
 8002e98:	e000ed00 	.word	0xe000ed00

08002e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b089      	sub	sp, #36	; 0x24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f1c3 0307 	rsb	r3, r3, #7
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	bf28      	it	cs
 8002eba:	2304      	movcs	r3, #4
 8002ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	2b06      	cmp	r3, #6
 8002ec4:	d902      	bls.n	8002ecc <NVIC_EncodePriority+0x30>
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	3b03      	subs	r3, #3
 8002eca:	e000      	b.n	8002ece <NVIC_EncodePriority+0x32>
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43da      	mvns	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	401a      	ands	r2, r3
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	fa01 f303 	lsl.w	r3, r1, r3
 8002eee:	43d9      	mvns	r1, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef4:	4313      	orrs	r3, r2
         );
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3724      	adds	r7, #36	; 0x24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
	...

08002f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f14:	d301      	bcc.n	8002f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f16:	2301      	movs	r3, #1
 8002f18:	e00f      	b.n	8002f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f1a:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <SysTick_Config+0x40>)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f22:	210f      	movs	r1, #15
 8002f24:	f04f 30ff 	mov.w	r0, #4294967295
 8002f28:	f7ff ff8e 	bl	8002e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f2c:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <SysTick_Config+0x40>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f32:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <SysTick_Config+0x40>)
 8002f34:	2207      	movs	r2, #7
 8002f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	e000e010 	.word	0xe000e010

08002f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7ff ff29 	bl	8002da8 <__NVIC_SetPriorityGrouping>
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b086      	sub	sp, #24
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	4603      	mov	r3, r0
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
 8002f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f70:	f7ff ff3e 	bl	8002df0 <__NVIC_GetPriorityGrouping>
 8002f74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	68b9      	ldr	r1, [r7, #8]
 8002f7a:	6978      	ldr	r0, [r7, #20]
 8002f7c:	f7ff ff8e 	bl	8002e9c <NVIC_EncodePriority>
 8002f80:	4602      	mov	r2, r0
 8002f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f86:	4611      	mov	r1, r2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ff5d 	bl	8002e48 <__NVIC_SetPriority>
}
 8002f8e:	bf00      	nop
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff ff31 	bl	8002e0c <__NVIC_EnableIRQ>
}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7ff ffa2 	bl	8002f04 <SysTick_Config>
 8002fc0:	4603      	mov	r3, r0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d004      	beq.n	8002fe8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2280      	movs	r2, #128	; 0x80
 8002fe2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e00c      	b.n	8003002 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2205      	movs	r2, #5
 8002fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0201 	bic.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
	...

08003010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003010:	b480      	push	{r7}
 8003012:	b089      	sub	sp, #36	; 0x24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800301a:	2300      	movs	r3, #0
 800301c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800301e:	2300      	movs	r3, #0
 8003020:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003022:	2300      	movs	r3, #0
 8003024:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003026:	2300      	movs	r3, #0
 8003028:	61fb      	str	r3, [r7, #28]
 800302a:	e177      	b.n	800331c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800302c:	2201      	movs	r2, #1
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	4013      	ands	r3, r2
 800303e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	429a      	cmp	r2, r3
 8003046:	f040 8166 	bne.w	8003316 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d00b      	beq.n	800306a <HAL_GPIO_Init+0x5a>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d007      	beq.n	800306a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800305e:	2b11      	cmp	r3, #17
 8003060:	d003      	beq.n	800306a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b12      	cmp	r3, #18
 8003068:	d130      	bne.n	80030cc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	2203      	movs	r2, #3
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	43db      	mvns	r3, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4013      	ands	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4313      	orrs	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030a0:	2201      	movs	r2, #1
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4013      	ands	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	f003 0201 	and.w	r2, r3, #1
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	2203      	movs	r2, #3
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b02      	cmp	r3, #2
 8003102:	d003      	beq.n	800310c <HAL_GPIO_Init+0xfc>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2b12      	cmp	r3, #18
 800310a:	d123      	bne.n	8003154 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	08da      	lsrs	r2, r3, #3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3208      	adds	r2, #8
 8003114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003118:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	220f      	movs	r2, #15
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	4013      	ands	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	691a      	ldr	r2, [r3, #16]
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4313      	orrs	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	08da      	lsrs	r2, r3, #3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	3208      	adds	r2, #8
 800314e:	69b9      	ldr	r1, [r7, #24]
 8003150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	2203      	movs	r2, #3
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4013      	ands	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 0203 	and.w	r2, r3, #3
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 80c0 	beq.w	8003316 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	4b65      	ldr	r3, [pc, #404]	; (8003330 <HAL_GPIO_Init+0x320>)
 800319c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319e:	4a64      	ldr	r2, [pc, #400]	; (8003330 <HAL_GPIO_Init+0x320>)
 80031a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031a4:	6453      	str	r3, [r2, #68]	; 0x44
 80031a6:	4b62      	ldr	r3, [pc, #392]	; (8003330 <HAL_GPIO_Init+0x320>)
 80031a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031b2:	4a60      	ldr	r2, [pc, #384]	; (8003334 <HAL_GPIO_Init+0x324>)
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	089b      	lsrs	r3, r3, #2
 80031b8:	3302      	adds	r3, #2
 80031ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	220f      	movs	r2, #15
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	43db      	mvns	r3, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4013      	ands	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a57      	ldr	r2, [pc, #348]	; (8003338 <HAL_GPIO_Init+0x328>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d037      	beq.n	800324e <HAL_GPIO_Init+0x23e>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a56      	ldr	r2, [pc, #344]	; (800333c <HAL_GPIO_Init+0x32c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d031      	beq.n	800324a <HAL_GPIO_Init+0x23a>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a55      	ldr	r2, [pc, #340]	; (8003340 <HAL_GPIO_Init+0x330>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d02b      	beq.n	8003246 <HAL_GPIO_Init+0x236>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a54      	ldr	r2, [pc, #336]	; (8003344 <HAL_GPIO_Init+0x334>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d025      	beq.n	8003242 <HAL_GPIO_Init+0x232>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a53      	ldr	r2, [pc, #332]	; (8003348 <HAL_GPIO_Init+0x338>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d01f      	beq.n	800323e <HAL_GPIO_Init+0x22e>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a52      	ldr	r2, [pc, #328]	; (800334c <HAL_GPIO_Init+0x33c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d019      	beq.n	800323a <HAL_GPIO_Init+0x22a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a51      	ldr	r2, [pc, #324]	; (8003350 <HAL_GPIO_Init+0x340>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d013      	beq.n	8003236 <HAL_GPIO_Init+0x226>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a50      	ldr	r2, [pc, #320]	; (8003354 <HAL_GPIO_Init+0x344>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d00d      	beq.n	8003232 <HAL_GPIO_Init+0x222>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a4f      	ldr	r2, [pc, #316]	; (8003358 <HAL_GPIO_Init+0x348>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d007      	beq.n	800322e <HAL_GPIO_Init+0x21e>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a4e      	ldr	r2, [pc, #312]	; (800335c <HAL_GPIO_Init+0x34c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d101      	bne.n	800322a <HAL_GPIO_Init+0x21a>
 8003226:	2309      	movs	r3, #9
 8003228:	e012      	b.n	8003250 <HAL_GPIO_Init+0x240>
 800322a:	230a      	movs	r3, #10
 800322c:	e010      	b.n	8003250 <HAL_GPIO_Init+0x240>
 800322e:	2308      	movs	r3, #8
 8003230:	e00e      	b.n	8003250 <HAL_GPIO_Init+0x240>
 8003232:	2307      	movs	r3, #7
 8003234:	e00c      	b.n	8003250 <HAL_GPIO_Init+0x240>
 8003236:	2306      	movs	r3, #6
 8003238:	e00a      	b.n	8003250 <HAL_GPIO_Init+0x240>
 800323a:	2305      	movs	r3, #5
 800323c:	e008      	b.n	8003250 <HAL_GPIO_Init+0x240>
 800323e:	2304      	movs	r3, #4
 8003240:	e006      	b.n	8003250 <HAL_GPIO_Init+0x240>
 8003242:	2303      	movs	r3, #3
 8003244:	e004      	b.n	8003250 <HAL_GPIO_Init+0x240>
 8003246:	2302      	movs	r3, #2
 8003248:	e002      	b.n	8003250 <HAL_GPIO_Init+0x240>
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <HAL_GPIO_Init+0x240>
 800324e:	2300      	movs	r3, #0
 8003250:	69fa      	ldr	r2, [r7, #28]
 8003252:	f002 0203 	and.w	r2, r2, #3
 8003256:	0092      	lsls	r2, r2, #2
 8003258:	4093      	lsls	r3, r2
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4313      	orrs	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003260:	4934      	ldr	r1, [pc, #208]	; (8003334 <HAL_GPIO_Init+0x324>)
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	089b      	lsrs	r3, r3, #2
 8003266:	3302      	adds	r3, #2
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800326e:	4b3c      	ldr	r3, [pc, #240]	; (8003360 <HAL_GPIO_Init+0x350>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	43db      	mvns	r3, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4013      	ands	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003292:	4a33      	ldr	r2, [pc, #204]	; (8003360 <HAL_GPIO_Init+0x350>)
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003298:	4b31      	ldr	r3, [pc, #196]	; (8003360 <HAL_GPIO_Init+0x350>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	43db      	mvns	r3, r3
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	4013      	ands	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032bc:	4a28      	ldr	r2, [pc, #160]	; (8003360 <HAL_GPIO_Init+0x350>)
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032c2:	4b27      	ldr	r3, [pc, #156]	; (8003360 <HAL_GPIO_Init+0x350>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	43db      	mvns	r3, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4013      	ands	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032e6:	4a1e      	ldr	r2, [pc, #120]	; (8003360 <HAL_GPIO_Init+0x350>)
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032ec:	4b1c      	ldr	r3, [pc, #112]	; (8003360 <HAL_GPIO_Init+0x350>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003310:	4a13      	ldr	r2, [pc, #76]	; (8003360 <HAL_GPIO_Init+0x350>)
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	3301      	adds	r3, #1
 800331a:	61fb      	str	r3, [r7, #28]
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	2b0f      	cmp	r3, #15
 8003320:	f67f ae84 	bls.w	800302c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003324:	bf00      	nop
 8003326:	3724      	adds	r7, #36	; 0x24
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	40023800 	.word	0x40023800
 8003334:	40013800 	.word	0x40013800
 8003338:	40020000 	.word	0x40020000
 800333c:	40020400 	.word	0x40020400
 8003340:	40020800 	.word	0x40020800
 8003344:	40020c00 	.word	0x40020c00
 8003348:	40021000 	.word	0x40021000
 800334c:	40021400 	.word	0x40021400
 8003350:	40021800 	.word	0x40021800
 8003354:	40021c00 	.word	0x40021c00
 8003358:	40022000 	.word	0x40022000
 800335c:	40022400 	.word	0x40022400
 8003360:	40013c00 	.word	0x40013c00

08003364 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691a      	ldr	r2, [r3, #16]
 8003374:	887b      	ldrh	r3, [r7, #2]
 8003376:	4013      	ands	r3, r2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d002      	beq.n	8003382 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800337c:	2301      	movs	r3, #1
 800337e:	73fb      	strb	r3, [r7, #15]
 8003380:	e001      	b.n	8003386 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003382:	2300      	movs	r3, #0
 8003384:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003386:	7bfb      	ldrb	r3, [r7, #15]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	807b      	strh	r3, [r7, #2]
 80033a0:	4613      	mov	r3, r2
 80033a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033a4:	787b      	ldrb	r3, [r7, #1]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033aa:	887a      	ldrh	r2, [r7, #2]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033b0:	e003      	b.n	80033ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033b2:	887b      	ldrh	r3, [r7, #2]
 80033b4:	041a      	lsls	r2, r3, #16
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	619a      	str	r2, [r3, #24]
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
	...

080033c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e25b      	b.n	8003892 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d075      	beq.n	80034d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033e6:	4ba3      	ldr	r3, [pc, #652]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 030c 	and.w	r3, r3, #12
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d00c      	beq.n	800340c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033f2:	4ba0      	ldr	r3, [pc, #640]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033fa:	2b08      	cmp	r3, #8
 80033fc:	d112      	bne.n	8003424 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033fe:	4b9d      	ldr	r3, [pc, #628]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003406:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800340a:	d10b      	bne.n	8003424 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800340c:	4b99      	ldr	r3, [pc, #612]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d05b      	beq.n	80034d0 <HAL_RCC_OscConfig+0x108>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d157      	bne.n	80034d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e236      	b.n	8003892 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800342c:	d106      	bne.n	800343c <HAL_RCC_OscConfig+0x74>
 800342e:	4b91      	ldr	r3, [pc, #580]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a90      	ldr	r2, [pc, #576]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 8003434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	e01d      	b.n	8003478 <HAL_RCC_OscConfig+0xb0>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003444:	d10c      	bne.n	8003460 <HAL_RCC_OscConfig+0x98>
 8003446:	4b8b      	ldr	r3, [pc, #556]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a8a      	ldr	r2, [pc, #552]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 800344c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	4b88      	ldr	r3, [pc, #544]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a87      	ldr	r2, [pc, #540]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 8003458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	e00b      	b.n	8003478 <HAL_RCC_OscConfig+0xb0>
 8003460:	4b84      	ldr	r3, [pc, #528]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a83      	ldr	r2, [pc, #524]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 8003466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800346a:	6013      	str	r3, [r2, #0]
 800346c:	4b81      	ldr	r3, [pc, #516]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a80      	ldr	r2, [pc, #512]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 8003472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003476:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d013      	beq.n	80034a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003480:	f7ff f9f2 	bl	8002868 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003488:	f7ff f9ee 	bl	8002868 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b64      	cmp	r3, #100	; 0x64
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e1fb      	b.n	8003892 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349a:	4b76      	ldr	r3, [pc, #472]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0f0      	beq.n	8003488 <HAL_RCC_OscConfig+0xc0>
 80034a6:	e014      	b.n	80034d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a8:	f7ff f9de 	bl	8002868 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034b0:	f7ff f9da 	bl	8002868 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b64      	cmp	r3, #100	; 0x64
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e1e7      	b.n	8003892 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034c2:	4b6c      	ldr	r3, [pc, #432]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1f0      	bne.n	80034b0 <HAL_RCC_OscConfig+0xe8>
 80034ce:	e000      	b.n	80034d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d063      	beq.n	80035a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034de:	4b65      	ldr	r3, [pc, #404]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00b      	beq.n	8003502 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ea:	4b62      	ldr	r3, [pc, #392]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d11c      	bne.n	8003530 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034f6:	4b5f      	ldr	r3, [pc, #380]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d116      	bne.n	8003530 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003502:	4b5c      	ldr	r3, [pc, #368]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d005      	beq.n	800351a <HAL_RCC_OscConfig+0x152>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d001      	beq.n	800351a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e1bb      	b.n	8003892 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800351a:	4b56      	ldr	r3, [pc, #344]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	4952      	ldr	r1, [pc, #328]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 800352a:	4313      	orrs	r3, r2
 800352c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800352e:	e03a      	b.n	80035a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d020      	beq.n	800357a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003538:	4b4f      	ldr	r3, [pc, #316]	; (8003678 <HAL_RCC_OscConfig+0x2b0>)
 800353a:	2201      	movs	r2, #1
 800353c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353e:	f7ff f993 	bl	8002868 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003546:	f7ff f98f 	bl	8002868 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e19c      	b.n	8003892 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003558:	4b46      	ldr	r3, [pc, #280]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0f0      	beq.n	8003546 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003564:	4b43      	ldr	r3, [pc, #268]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	4940      	ldr	r1, [pc, #256]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 8003574:	4313      	orrs	r3, r2
 8003576:	600b      	str	r3, [r1, #0]
 8003578:	e015      	b.n	80035a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800357a:	4b3f      	ldr	r3, [pc, #252]	; (8003678 <HAL_RCC_OscConfig+0x2b0>)
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003580:	f7ff f972 	bl	8002868 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003588:	f7ff f96e 	bl	8002868 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e17b      	b.n	8003892 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800359a:	4b36      	ldr	r3, [pc, #216]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f0      	bne.n	8003588 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d030      	beq.n	8003614 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d016      	beq.n	80035e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ba:	4b30      	ldr	r3, [pc, #192]	; (800367c <HAL_RCC_OscConfig+0x2b4>)
 80035bc:	2201      	movs	r2, #1
 80035be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c0:	f7ff f952 	bl	8002868 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035c8:	f7ff f94e 	bl	8002868 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e15b      	b.n	8003892 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035da:	4b26      	ldr	r3, [pc, #152]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 80035dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0f0      	beq.n	80035c8 <HAL_RCC_OscConfig+0x200>
 80035e6:	e015      	b.n	8003614 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035e8:	4b24      	ldr	r3, [pc, #144]	; (800367c <HAL_RCC_OscConfig+0x2b4>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ee:	f7ff f93b 	bl	8002868 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035f6:	f7ff f937 	bl	8002868 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e144      	b.n	8003892 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003608:	4b1a      	ldr	r3, [pc, #104]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 800360a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1f0      	bne.n	80035f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 80a0 	beq.w	8003762 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003622:	2300      	movs	r3, #0
 8003624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003626:	4b13      	ldr	r3, [pc, #76]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10f      	bne.n	8003652 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	60bb      	str	r3, [r7, #8]
 8003636:	4b0f      	ldr	r3, [pc, #60]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	4a0e      	ldr	r2, [pc, #56]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 800363c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003640:	6413      	str	r3, [r2, #64]	; 0x40
 8003642:	4b0c      	ldr	r3, [pc, #48]	; (8003674 <HAL_RCC_OscConfig+0x2ac>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364a:	60bb      	str	r3, [r7, #8]
 800364c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800364e:	2301      	movs	r3, #1
 8003650:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003652:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <HAL_RCC_OscConfig+0x2b8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365a:	2b00      	cmp	r3, #0
 800365c:	d121      	bne.n	80036a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800365e:	4b08      	ldr	r3, [pc, #32]	; (8003680 <HAL_RCC_OscConfig+0x2b8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a07      	ldr	r2, [pc, #28]	; (8003680 <HAL_RCC_OscConfig+0x2b8>)
 8003664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800366a:	f7ff f8fd 	bl	8002868 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003670:	e011      	b.n	8003696 <HAL_RCC_OscConfig+0x2ce>
 8003672:	bf00      	nop
 8003674:	40023800 	.word	0x40023800
 8003678:	42470000 	.word	0x42470000
 800367c:	42470e80 	.word	0x42470e80
 8003680:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003684:	f7ff f8f0 	bl	8002868 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e0fd      	b.n	8003892 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003696:	4b81      	ldr	r3, [pc, #516]	; (800389c <HAL_RCC_OscConfig+0x4d4>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f0      	beq.n	8003684 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d106      	bne.n	80036b8 <HAL_RCC_OscConfig+0x2f0>
 80036aa:	4b7d      	ldr	r3, [pc, #500]	; (80038a0 <HAL_RCC_OscConfig+0x4d8>)
 80036ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ae:	4a7c      	ldr	r2, [pc, #496]	; (80038a0 <HAL_RCC_OscConfig+0x4d8>)
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	6713      	str	r3, [r2, #112]	; 0x70
 80036b6:	e01c      	b.n	80036f2 <HAL_RCC_OscConfig+0x32a>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	2b05      	cmp	r3, #5
 80036be:	d10c      	bne.n	80036da <HAL_RCC_OscConfig+0x312>
 80036c0:	4b77      	ldr	r3, [pc, #476]	; (80038a0 <HAL_RCC_OscConfig+0x4d8>)
 80036c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c4:	4a76      	ldr	r2, [pc, #472]	; (80038a0 <HAL_RCC_OscConfig+0x4d8>)
 80036c6:	f043 0304 	orr.w	r3, r3, #4
 80036ca:	6713      	str	r3, [r2, #112]	; 0x70
 80036cc:	4b74      	ldr	r3, [pc, #464]	; (80038a0 <HAL_RCC_OscConfig+0x4d8>)
 80036ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d0:	4a73      	ldr	r2, [pc, #460]	; (80038a0 <HAL_RCC_OscConfig+0x4d8>)
 80036d2:	f043 0301 	orr.w	r3, r3, #1
 80036d6:	6713      	str	r3, [r2, #112]	; 0x70
 80036d8:	e00b      	b.n	80036f2 <HAL_RCC_OscConfig+0x32a>
 80036da:	4b71      	ldr	r3, [pc, #452]	; (80038a0 <HAL_RCC_OscConfig+0x4d8>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036de:	4a70      	ldr	r2, [pc, #448]	; (80038a0 <HAL_RCC_OscConfig+0x4d8>)
 80036e0:	f023 0301 	bic.w	r3, r3, #1
 80036e4:	6713      	str	r3, [r2, #112]	; 0x70
 80036e6:	4b6e      	ldr	r3, [pc, #440]	; (80038a0 <HAL_RCC_OscConfig+0x4d8>)
 80036e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ea:	4a6d      	ldr	r2, [pc, #436]	; (80038a0 <HAL_RCC_OscConfig+0x4d8>)
 80036ec:	f023 0304 	bic.w	r3, r3, #4
 80036f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d015      	beq.n	8003726 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fa:	f7ff f8b5 	bl	8002868 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003700:	e00a      	b.n	8003718 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003702:	f7ff f8b1 	bl	8002868 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003710:	4293      	cmp	r3, r2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e0bc      	b.n	8003892 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003718:	4b61      	ldr	r3, [pc, #388]	; (80038a0 <HAL_RCC_OscConfig+0x4d8>)
 800371a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0ee      	beq.n	8003702 <HAL_RCC_OscConfig+0x33a>
 8003724:	e014      	b.n	8003750 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003726:	f7ff f89f 	bl	8002868 <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800372c:	e00a      	b.n	8003744 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800372e:	f7ff f89b 	bl	8002868 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	f241 3288 	movw	r2, #5000	; 0x1388
 800373c:	4293      	cmp	r3, r2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e0a6      	b.n	8003892 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003744:	4b56      	ldr	r3, [pc, #344]	; (80038a0 <HAL_RCC_OscConfig+0x4d8>)
 8003746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1ee      	bne.n	800372e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003750:	7dfb      	ldrb	r3, [r7, #23]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d105      	bne.n	8003762 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003756:	4b52      	ldr	r3, [pc, #328]	; (80038a0 <HAL_RCC_OscConfig+0x4d8>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	4a51      	ldr	r2, [pc, #324]	; (80038a0 <HAL_RCC_OscConfig+0x4d8>)
 800375c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003760:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 8092 	beq.w	8003890 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800376c:	4b4c      	ldr	r3, [pc, #304]	; (80038a0 <HAL_RCC_OscConfig+0x4d8>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 030c 	and.w	r3, r3, #12
 8003774:	2b08      	cmp	r3, #8
 8003776:	d05c      	beq.n	8003832 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	2b02      	cmp	r3, #2
 800377e:	d141      	bne.n	8003804 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003780:	4b48      	ldr	r3, [pc, #288]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003786:	f7ff f86f 	bl	8002868 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800378e:	f7ff f86b 	bl	8002868 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e078      	b.n	8003892 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a0:	4b3f      	ldr	r3, [pc, #252]	; (80038a0 <HAL_RCC_OscConfig+0x4d8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1f0      	bne.n	800378e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69da      	ldr	r2, [r3, #28]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	431a      	orrs	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	019b      	lsls	r3, r3, #6
 80037bc:	431a      	orrs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c2:	085b      	lsrs	r3, r3, #1
 80037c4:	3b01      	subs	r3, #1
 80037c6:	041b      	lsls	r3, r3, #16
 80037c8:	431a      	orrs	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ce:	061b      	lsls	r3, r3, #24
 80037d0:	4933      	ldr	r1, [pc, #204]	; (80038a0 <HAL_RCC_OscConfig+0x4d8>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037d6:	4b33      	ldr	r3, [pc, #204]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 80037d8:	2201      	movs	r2, #1
 80037da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037dc:	f7ff f844 	bl	8002868 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e4:	f7ff f840 	bl	8002868 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e04d      	b.n	8003892 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f6:	4b2a      	ldr	r3, [pc, #168]	; (80038a0 <HAL_RCC_OscConfig+0x4d8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d0f0      	beq.n	80037e4 <HAL_RCC_OscConfig+0x41c>
 8003802:	e045      	b.n	8003890 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003804:	4b27      	ldr	r3, [pc, #156]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380a:	f7ff f82d 	bl	8002868 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003812:	f7ff f829 	bl	8002868 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e036      	b.n	8003892 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003824:	4b1e      	ldr	r3, [pc, #120]	; (80038a0 <HAL_RCC_OscConfig+0x4d8>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1f0      	bne.n	8003812 <HAL_RCC_OscConfig+0x44a>
 8003830:	e02e      	b.n	8003890 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e029      	b.n	8003892 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800383e:	4b18      	ldr	r3, [pc, #96]	; (80038a0 <HAL_RCC_OscConfig+0x4d8>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	429a      	cmp	r2, r3
 8003850:	d11c      	bne.n	800388c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385c:	429a      	cmp	r2, r3
 800385e:	d115      	bne.n	800388c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003866:	4013      	ands	r3, r2
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800386c:	4293      	cmp	r3, r2
 800386e:	d10d      	bne.n	800388c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800387a:	429a      	cmp	r2, r3
 800387c:	d106      	bne.n	800388c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003888:	429a      	cmp	r2, r3
 800388a:	d001      	beq.n	8003890 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e000      	b.n	8003892 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40007000 	.word	0x40007000
 80038a0:	40023800 	.word	0x40023800
 80038a4:	42470060 	.word	0x42470060

080038a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e0cc      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038bc:	4b68      	ldr	r3, [pc, #416]	; (8003a60 <HAL_RCC_ClockConfig+0x1b8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 030f 	and.w	r3, r3, #15
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d90c      	bls.n	80038e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ca:	4b65      	ldr	r3, [pc, #404]	; (8003a60 <HAL_RCC_ClockConfig+0x1b8>)
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d2:	4b63      	ldr	r3, [pc, #396]	; (8003a60 <HAL_RCC_ClockConfig+0x1b8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d001      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e0b8      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d020      	beq.n	8003932 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038fc:	4b59      	ldr	r3, [pc, #356]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	4a58      	ldr	r2, [pc, #352]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003906:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0308 	and.w	r3, r3, #8
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003914:	4b53      	ldr	r3, [pc, #332]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	4a52      	ldr	r2, [pc, #328]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800391e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003920:	4b50      	ldr	r3, [pc, #320]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	494d      	ldr	r1, [pc, #308]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	4313      	orrs	r3, r2
 8003930:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d044      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d107      	bne.n	8003956 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003946:	4b47      	ldr	r3, [pc, #284]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d119      	bne.n	8003986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e07f      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b02      	cmp	r3, #2
 800395c:	d003      	beq.n	8003966 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003962:	2b03      	cmp	r3, #3
 8003964:	d107      	bne.n	8003976 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003966:	4b3f      	ldr	r3, [pc, #252]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d109      	bne.n	8003986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e06f      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003976:	4b3b      	ldr	r3, [pc, #236]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e067      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003986:	4b37      	ldr	r3, [pc, #220]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f023 0203 	bic.w	r2, r3, #3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	4934      	ldr	r1, [pc, #208]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	4313      	orrs	r3, r2
 8003996:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003998:	f7fe ff66 	bl	8002868 <HAL_GetTick>
 800399c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399e:	e00a      	b.n	80039b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039a0:	f7fe ff62 	bl	8002868 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e04f      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b6:	4b2b      	ldr	r3, [pc, #172]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 020c 	and.w	r2, r3, #12
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d1eb      	bne.n	80039a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039c8:	4b25      	ldr	r3, [pc, #148]	; (8003a60 <HAL_RCC_ClockConfig+0x1b8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 030f 	and.w	r3, r3, #15
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d20c      	bcs.n	80039f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d6:	4b22      	ldr	r3, [pc, #136]	; (8003a60 <HAL_RCC_ClockConfig+0x1b8>)
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039de:	4b20      	ldr	r3, [pc, #128]	; (8003a60 <HAL_RCC_ClockConfig+0x1b8>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d001      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e032      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d008      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039fc:	4b19      	ldr	r3, [pc, #100]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	4916      	ldr	r1, [pc, #88]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d009      	beq.n	8003a2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a1a:	4b12      	ldr	r3, [pc, #72]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	490e      	ldr	r1, [pc, #56]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a2e:	f000 f821 	bl	8003a74 <HAL_RCC_GetSysClockFreq>
 8003a32:	4601      	mov	r1, r0
 8003a34:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	091b      	lsrs	r3, r3, #4
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	4a0a      	ldr	r2, [pc, #40]	; (8003a68 <HAL_RCC_ClockConfig+0x1c0>)
 8003a40:	5cd3      	ldrb	r3, [r2, r3]
 8003a42:	fa21 f303 	lsr.w	r3, r1, r3
 8003a46:	4a09      	ldr	r2, [pc, #36]	; (8003a6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a4a:	4b09      	ldr	r3, [pc, #36]	; (8003a70 <HAL_RCC_ClockConfig+0x1c8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fe fec6 	bl	80027e0 <HAL_InitTick>

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40023c00 	.word	0x40023c00
 8003a64:	40023800 	.word	0x40023800
 8003a68:	08006348 	.word	0x08006348
 8003a6c:	20000008 	.word	0x20000008
 8003a70:	2000000c 	.word	0x2000000c

08003a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	607b      	str	r3, [r7, #4]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	2300      	movs	r3, #0
 8003a84:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a8a:	4b50      	ldr	r3, [pc, #320]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x158>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d007      	beq.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x32>
 8003a96:	2b08      	cmp	r3, #8
 8003a98:	d008      	beq.n	8003aac <HAL_RCC_GetSysClockFreq+0x38>
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f040 808d 	bne.w	8003bba <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003aa0:	4b4b      	ldr	r3, [pc, #300]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003aa2:	60bb      	str	r3, [r7, #8]
       break;
 8003aa4:	e08c      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aa6:	4b4b      	ldr	r3, [pc, #300]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003aa8:	60bb      	str	r3, [r7, #8]
      break;
 8003aaa:	e089      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003aac:	4b47      	ldr	r3, [pc, #284]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x158>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ab4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ab6:	4b45      	ldr	r3, [pc, #276]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x158>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d023      	beq.n	8003b0a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ac2:	4b42      	ldr	r3, [pc, #264]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x158>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	099b      	lsrs	r3, r3, #6
 8003ac8:	f04f 0400 	mov.w	r4, #0
 8003acc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	ea03 0501 	and.w	r5, r3, r1
 8003ad8:	ea04 0602 	and.w	r6, r4, r2
 8003adc:	4a3d      	ldr	r2, [pc, #244]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ade:	fb02 f106 	mul.w	r1, r2, r6
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	fb02 f205 	mul.w	r2, r2, r5
 8003ae8:	440a      	add	r2, r1
 8003aea:	493a      	ldr	r1, [pc, #232]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003aec:	fba5 0101 	umull	r0, r1, r5, r1
 8003af0:	1853      	adds	r3, r2, r1
 8003af2:	4619      	mov	r1, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f04f 0400 	mov.w	r4, #0
 8003afa:	461a      	mov	r2, r3
 8003afc:	4623      	mov	r3, r4
 8003afe:	f7fc fbc7 	bl	8000290 <__aeabi_uldivmod>
 8003b02:	4603      	mov	r3, r0
 8003b04:	460c      	mov	r4, r1
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	e049      	b.n	8003b9e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b0a:	4b30      	ldr	r3, [pc, #192]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x158>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	099b      	lsrs	r3, r3, #6
 8003b10:	f04f 0400 	mov.w	r4, #0
 8003b14:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	ea03 0501 	and.w	r5, r3, r1
 8003b20:	ea04 0602 	and.w	r6, r4, r2
 8003b24:	4629      	mov	r1, r5
 8003b26:	4632      	mov	r2, r6
 8003b28:	f04f 0300 	mov.w	r3, #0
 8003b2c:	f04f 0400 	mov.w	r4, #0
 8003b30:	0154      	lsls	r4, r2, #5
 8003b32:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b36:	014b      	lsls	r3, r1, #5
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4622      	mov	r2, r4
 8003b3c:	1b49      	subs	r1, r1, r5
 8003b3e:	eb62 0206 	sbc.w	r2, r2, r6
 8003b42:	f04f 0300 	mov.w	r3, #0
 8003b46:	f04f 0400 	mov.w	r4, #0
 8003b4a:	0194      	lsls	r4, r2, #6
 8003b4c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b50:	018b      	lsls	r3, r1, #6
 8003b52:	1a5b      	subs	r3, r3, r1
 8003b54:	eb64 0402 	sbc.w	r4, r4, r2
 8003b58:	f04f 0100 	mov.w	r1, #0
 8003b5c:	f04f 0200 	mov.w	r2, #0
 8003b60:	00e2      	lsls	r2, r4, #3
 8003b62:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b66:	00d9      	lsls	r1, r3, #3
 8003b68:	460b      	mov	r3, r1
 8003b6a:	4614      	mov	r4, r2
 8003b6c:	195b      	adds	r3, r3, r5
 8003b6e:	eb44 0406 	adc.w	r4, r4, r6
 8003b72:	f04f 0100 	mov.w	r1, #0
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	02a2      	lsls	r2, r4, #10
 8003b7c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b80:	0299      	lsls	r1, r3, #10
 8003b82:	460b      	mov	r3, r1
 8003b84:	4614      	mov	r4, r2
 8003b86:	4618      	mov	r0, r3
 8003b88:	4621      	mov	r1, r4
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f04f 0400 	mov.w	r4, #0
 8003b90:	461a      	mov	r2, r3
 8003b92:	4623      	mov	r3, r4
 8003b94:	f7fc fb7c 	bl	8000290 <__aeabi_uldivmod>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	460c      	mov	r4, r1
 8003b9c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b9e:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x158>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	0c1b      	lsrs	r3, r3, #16
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	3301      	adds	r3, #1
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb6:	60bb      	str	r3, [r7, #8]
      break;
 8003bb8:	e002      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bba:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003bbc:	60bb      	str	r3, [r7, #8]
      break;
 8003bbe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bc0:	68bb      	ldr	r3, [r7, #8]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	00f42400 	.word	0x00f42400
 8003bd4:	017d7840 	.word	0x017d7840

08003bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bdc:	4b03      	ldr	r3, [pc, #12]	; (8003bec <HAL_RCC_GetHCLKFreq+0x14>)
 8003bde:	681b      	ldr	r3, [r3, #0]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	20000008 	.word	0x20000008

08003bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bf4:	f7ff fff0 	bl	8003bd8 <HAL_RCC_GetHCLKFreq>
 8003bf8:	4601      	mov	r1, r0
 8003bfa:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	0a9b      	lsrs	r3, r3, #10
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	4a03      	ldr	r2, [pc, #12]	; (8003c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c06:	5cd3      	ldrb	r3, [r2, r3]
 8003c08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40023800 	.word	0x40023800
 8003c14:	08006358 	.word	0x08006358

08003c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c1c:	f7ff ffdc 	bl	8003bd8 <HAL_RCC_GetHCLKFreq>
 8003c20:	4601      	mov	r1, r0
 8003c22:	4b05      	ldr	r3, [pc, #20]	; (8003c38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	0b5b      	lsrs	r3, r3, #13
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	4a03      	ldr	r2, [pc, #12]	; (8003c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c2e:	5cd3      	ldrb	r3, [r2, r3]
 8003c30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	08006358 	.word	0x08006358

08003c40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10b      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d105      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d075      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c74:	4bad      	ldr	r3, [pc, #692]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c7a:	f7fe fdf5 	bl	8002868 <HAL_GetTick>
 8003c7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c80:	e008      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c82:	f7fe fdf1 	bl	8002868 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e18b      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c94:	4ba6      	ldr	r3, [pc, #664]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1f0      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d009      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	019a      	lsls	r2, r3, #6
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	071b      	lsls	r3, r3, #28
 8003cb8:	499d      	ldr	r1, [pc, #628]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d01f      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ccc:	4b98      	ldr	r3, [pc, #608]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cd2:	0f1b      	lsrs	r3, r3, #28
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	019a      	lsls	r2, r3, #6
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	061b      	lsls	r3, r3, #24
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	071b      	lsls	r3, r3, #28
 8003cec:	4990      	ldr	r1, [pc, #576]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003cf4:	4b8e      	ldr	r3, [pc, #568]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cfa:	f023 021f 	bic.w	r2, r3, #31
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	498a      	ldr	r1, [pc, #552]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00d      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	019a      	lsls	r2, r3, #6
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	061b      	lsls	r3, r3, #24
 8003d24:	431a      	orrs	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	071b      	lsls	r3, r3, #28
 8003d2c:	4980      	ldr	r1, [pc, #512]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d34:	4b7d      	ldr	r3, [pc, #500]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003d36:	2201      	movs	r2, #1
 8003d38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d3a:	f7fe fd95 	bl	8002868 <HAL_GetTick>
 8003d3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d40:	e008      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d42:	f7fe fd91 	bl	8002868 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e12b      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d54:	4b76      	ldr	r3, [pc, #472]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0f0      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d105      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d079      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d78:	4b6e      	ldr	r3, [pc, #440]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d7e:	f7fe fd73 	bl	8002868 <HAL_GetTick>
 8003d82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d84:	e008      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003d86:	f7fe fd6f 	bl	8002868 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e109      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d98:	4b65      	ldr	r3, [pc, #404]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003da0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003da4:	d0ef      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d020      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003db2:	4b5f      	ldr	r3, [pc, #380]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db8:	0f1b      	lsrs	r3, r3, #28
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	019a      	lsls	r2, r3, #6
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	061b      	lsls	r3, r3, #24
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	071b      	lsls	r3, r3, #28
 8003dd2:	4957      	ldr	r1, [pc, #348]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003dda:	4b55      	ldr	r3, [pc, #340]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003de0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	3b01      	subs	r3, #1
 8003dea:	021b      	lsls	r3, r3, #8
 8003dec:	4950      	ldr	r1, [pc, #320]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d01e      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e00:	4b4b      	ldr	r3, [pc, #300]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e06:	0e1b      	lsrs	r3, r3, #24
 8003e08:	f003 030f 	and.w	r3, r3, #15
 8003e0c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	019a      	lsls	r2, r3, #6
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	061b      	lsls	r3, r3, #24
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	071b      	lsls	r3, r3, #28
 8003e20:	4943      	ldr	r1, [pc, #268]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e28:	4b41      	ldr	r3, [pc, #260]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	493e      	ldr	r1, [pc, #248]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e3e:	4b3d      	ldr	r3, [pc, #244]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e40:	2201      	movs	r2, #1
 8003e42:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e44:	f7fe fd10 	bl	8002868 <HAL_GetTick>
 8003e48:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003e4c:	f7fe fd0c 	bl	8002868 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e0a6      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e5e:	4b34      	ldr	r3, [pc, #208]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e6a:	d1ef      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0320 	and.w	r3, r3, #32
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 808d 	beq.w	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	4b2c      	ldr	r3, [pc, #176]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	4a2b      	ldr	r2, [pc, #172]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e88:	6413      	str	r3, [r2, #64]	; 0x40
 8003e8a:	4b29      	ldr	r3, [pc, #164]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003e96:	4b28      	ldr	r3, [pc, #160]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a27      	ldr	r2, [pc, #156]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ea2:	f7fe fce1 	bl	8002868 <HAL_GetTick>
 8003ea6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ea8:	e008      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003eaa:	f7fe fcdd 	bl	8002868 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e077      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ebc:	4b1e      	ldr	r3, [pc, #120]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0f0      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ec8:	4b19      	ldr	r3, [pc, #100]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ecc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ed0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d039      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d032      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ee6:	4b12      	ldr	r3, [pc, #72]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ef0:	4b12      	ldr	r3, [pc, #72]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ef6:	4b11      	ldr	r3, [pc, #68]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003efc:	4a0c      	ldr	r2, [pc, #48]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f02:	4b0b      	ldr	r3, [pc, #44]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d11e      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003f0e:	f7fe fcab 	bl	8002868 <HAL_GetTick>
 8003f12:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f14:	e014      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f16:	f7fe fca7 	bl	8002868 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d90b      	bls.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e03f      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8003f2c:	42470068 	.word	0x42470068
 8003f30:	40023800 	.word	0x40023800
 8003f34:	42470070 	.word	0x42470070
 8003f38:	40007000 	.word	0x40007000
 8003f3c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f40:	4b1c      	ldr	r3, [pc, #112]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0e4      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f58:	d10d      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003f5a:	4b16      	ldr	r3, [pc, #88]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f66:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f6e:	4911      	ldr	r1, [pc, #68]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	608b      	str	r3, [r1, #8]
 8003f74:	e005      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003f76:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	4a0e      	ldr	r2, [pc, #56]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f7c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f80:	6093      	str	r3, [r2, #8]
 8003f82:	4b0c      	ldr	r3, [pc, #48]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f8e:	4909      	ldr	r1, [pc, #36]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0310 	and.w	r3, r3, #16
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d004      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003fa6:	4b04      	ldr	r3, [pc, #16]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003fa8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	424711e0 	.word	0x424711e0

08003fbc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e083      	b.n	80040d6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	7f5b      	ldrb	r3, [r3, #29]
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d105      	bne.n	8003fe4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7fe f996 	bl	8002310 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	22ca      	movs	r2, #202	; 0xca
 8003ff0:	625a      	str	r2, [r3, #36]	; 0x24
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2253      	movs	r2, #83	; 0x53
 8003ff8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f9fb 	bl	80043f6 <RTC_EnterInitMode>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d008      	beq.n	8004018 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	22ff      	movs	r2, #255	; 0xff
 800400c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2204      	movs	r2, #4
 8004012:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e05e      	b.n	80040d6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6812      	ldr	r2, [r2, #0]
 8004022:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800402a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6899      	ldr	r1, [r3, #8]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	431a      	orrs	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	68d2      	ldr	r2, [r2, #12]
 8004052:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6919      	ldr	r1, [r3, #16]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	041a      	lsls	r2, r3, #16
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	430a      	orrs	r2, r1
 8004066:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004076:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10e      	bne.n	80040a4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f98d 	bl	80043a6 <HAL_RTC_WaitForSynchro>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d008      	beq.n	80040a4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	22ff      	movs	r2, #255	; 0xff
 8004098:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2204      	movs	r2, #4
 800409e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e018      	b.n	80040d6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040b2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	699a      	ldr	r2, [r3, #24]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	22ff      	movs	r2, #255	; 0xff
 80040cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80040d4:	2300      	movs	r3, #0
  }
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80040de:	b590      	push	{r4, r7, lr}
 80040e0:	b087      	sub	sp, #28
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	60f8      	str	r0, [r7, #12]
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	7f1b      	ldrb	r3, [r3, #28]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d101      	bne.n	80040fa <HAL_RTC_SetTime+0x1c>
 80040f6:	2302      	movs	r3, #2
 80040f8:	e0aa      	b.n	8004250 <HAL_RTC_SetTime+0x172>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2201      	movs	r2, #1
 80040fe:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2202      	movs	r2, #2
 8004104:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d126      	bne.n	800415a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004116:	2b00      	cmp	r3, #0
 8004118:	d102      	bne.n	8004120 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	2200      	movs	r2, #0
 800411e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f000 f992 	bl	800444e <RTC_ByteToBcd2>
 800412a:	4603      	mov	r3, r0
 800412c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	785b      	ldrb	r3, [r3, #1]
 8004132:	4618      	mov	r0, r3
 8004134:	f000 f98b 	bl	800444e <RTC_ByteToBcd2>
 8004138:	4603      	mov	r3, r0
 800413a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800413c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	789b      	ldrb	r3, [r3, #2]
 8004142:	4618      	mov	r0, r3
 8004144:	f000 f983 	bl	800444e <RTC_ByteToBcd2>
 8004148:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800414a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	78db      	ldrb	r3, [r3, #3]
 8004152:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004154:	4313      	orrs	r3, r2
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	e018      	b.n	800418c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004164:	2b00      	cmp	r3, #0
 8004166:	d102      	bne.n	800416e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2200      	movs	r2, #0
 800416c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	785b      	ldrb	r3, [r3, #1]
 8004178:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800417a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004180:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	78db      	ldrb	r3, [r3, #3]
 8004186:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004188:	4313      	orrs	r3, r2
 800418a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	22ca      	movs	r2, #202	; 0xca
 8004192:	625a      	str	r2, [r3, #36]	; 0x24
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2253      	movs	r2, #83	; 0x53
 800419a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 f92a 	bl	80043f6 <RTC_EnterInitMode>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00b      	beq.n	80041c0 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	22ff      	movs	r2, #255	; 0xff
 80041ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2204      	movs	r2, #4
 80041b4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e047      	b.n	8004250 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80041ca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80041ce:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689a      	ldr	r2, [r3, #8]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041de:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6899      	ldr	r1, [r3, #8]
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004206:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 0320 	and.w	r3, r3, #32
 8004212:	2b00      	cmp	r3, #0
 8004214:	d111      	bne.n	800423a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 f8c5 	bl	80043a6 <HAL_RTC_WaitForSynchro>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00b      	beq.n	800423a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	22ff      	movs	r2, #255	; 0xff
 8004228:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2204      	movs	r2, #4
 800422e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e00a      	b.n	8004250 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	22ff      	movs	r2, #255	; 0xff
 8004240:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2201      	movs	r2, #1
 8004246:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800424e:	2300      	movs	r3, #0
  }
}
 8004250:	4618      	mov	r0, r3
 8004252:	371c      	adds	r7, #28
 8004254:	46bd      	mov	sp, r7
 8004256:	bd90      	pop	{r4, r7, pc}

08004258 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004258:	b590      	push	{r4, r7, lr}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	7f1b      	ldrb	r3, [r3, #28]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d101      	bne.n	8004274 <HAL_RTC_SetDate+0x1c>
 8004270:	2302      	movs	r3, #2
 8004272:	e094      	b.n	800439e <HAL_RTC_SetDate+0x146>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2201      	movs	r2, #1
 8004278:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2202      	movs	r2, #2
 800427e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10e      	bne.n	80042a4 <HAL_RTC_SetDate+0x4c>
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	785b      	ldrb	r3, [r3, #1]
 800428a:	f003 0310 	and.w	r3, r3, #16
 800428e:	2b00      	cmp	r3, #0
 8004290:	d008      	beq.n	80042a4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	785b      	ldrb	r3, [r3, #1]
 8004296:	f023 0310 	bic.w	r3, r3, #16
 800429a:	b2db      	uxtb	r3, r3
 800429c:	330a      	adds	r3, #10
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d11c      	bne.n	80042e4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	78db      	ldrb	r3, [r3, #3]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 f8cd 	bl	800444e <RTC_ByteToBcd2>
 80042b4:	4603      	mov	r3, r0
 80042b6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	785b      	ldrb	r3, [r3, #1]
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 f8c6 	bl	800444e <RTC_ByteToBcd2>
 80042c2:	4603      	mov	r3, r0
 80042c4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80042c6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	789b      	ldrb	r3, [r3, #2]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 f8be 	bl	800444e <RTC_ByteToBcd2>
 80042d2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80042d4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80042de:	4313      	orrs	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]
 80042e2:	e00e      	b.n	8004302 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	78db      	ldrb	r3, [r3, #3]
 80042e8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	785b      	ldrb	r3, [r3, #1]
 80042ee:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80042f0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80042f6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80042fe:	4313      	orrs	r3, r2
 8004300:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	22ca      	movs	r2, #202	; 0xca
 8004308:	625a      	str	r2, [r3, #36]	; 0x24
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2253      	movs	r2, #83	; 0x53
 8004310:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 f86f 	bl	80043f6 <RTC_EnterInitMode>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	22ff      	movs	r2, #255	; 0xff
 8004324:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2204      	movs	r2, #4
 800432a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e033      	b.n	800439e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004340:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004344:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004354:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f003 0320 	and.w	r3, r3, #32
 8004360:	2b00      	cmp	r3, #0
 8004362:	d111      	bne.n	8004388 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f000 f81e 	bl	80043a6 <HAL_RTC_WaitForSynchro>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00b      	beq.n	8004388 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	22ff      	movs	r2, #255	; 0xff
 8004376:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2204      	movs	r2, #4
 800437c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e00a      	b.n	800439e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	22ff      	movs	r2, #255	; 0xff
 800438e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2201      	movs	r2, #1
 8004394:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800439c:	2300      	movs	r3, #0
  }
}
 800439e:	4618      	mov	r0, r3
 80043a0:	371c      	adds	r7, #28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd90      	pop	{r4, r7, pc}

080043a6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b084      	sub	sp, #16
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68da      	ldr	r2, [r3, #12]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043c0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043c2:	f7fe fa51 	bl	8002868 <HAL_GetTick>
 80043c6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80043c8:	e009      	b.n	80043de <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80043ca:	f7fe fa4d 	bl	8002868 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043d8:	d901      	bls.n	80043de <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e007      	b.n	80043ee <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f003 0320 	and.w	r3, r3, #32
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0ee      	beq.n	80043ca <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b084      	sub	sp, #16
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043fe:	2300      	movs	r3, #0
 8004400:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440c:	2b00      	cmp	r3, #0
 800440e:	d119      	bne.n	8004444 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f04f 32ff 	mov.w	r2, #4294967295
 8004418:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800441a:	f7fe fa25 	bl	8002868 <HAL_GetTick>
 800441e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004420:	e009      	b.n	8004436 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004422:	f7fe fa21 	bl	8002868 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004430:	d901      	bls.n	8004436 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e007      	b.n	8004446 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0ee      	beq.n	8004422 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800444e:	b480      	push	{r7}
 8004450:	b085      	sub	sp, #20
 8004452:	af00      	add	r7, sp, #0
 8004454:	4603      	mov	r3, r0
 8004456:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004458:	2300      	movs	r3, #0
 800445a:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800445c:	e005      	b.n	800446a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	3301      	adds	r3, #1
 8004462:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004464:	79fb      	ldrb	r3, [r7, #7]
 8004466:	3b0a      	subs	r3, #10
 8004468:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800446a:	79fb      	ldrb	r3, [r7, #7]
 800446c:	2b09      	cmp	r3, #9
 800446e:	d8f6      	bhi.n	800445e <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	b2db      	uxtb	r3, r3
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	b2da      	uxtb	r2, r3
 8004478:	79fb      	ldrb	r3, [r7, #7]
 800447a:	4313      	orrs	r3, r2
 800447c:	b2db      	uxtb	r3, r3
}
 800447e:	4618      	mov	r0, r3
 8004480:	3714      	adds	r7, #20
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b082      	sub	sp, #8
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e01d      	b.n	80044d8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d106      	bne.n	80044b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f7fd ff43 	bl	800233c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2202      	movs	r2, #2
 80044ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	3304      	adds	r3, #4
 80044c6:	4619      	mov	r1, r3
 80044c8:	4610      	mov	r0, r2
 80044ca:	f000 fa15 	bl	80048f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b06      	cmp	r3, #6
 8004508:	d007      	beq.n	800451a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f042 0201 	orr.w	r2, r2, #1
 8004518:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b02      	cmp	r3, #2
 800453c:	d122      	bne.n	8004584 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b02      	cmp	r3, #2
 800454a:	d11b      	bne.n	8004584 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0202 	mvn.w	r2, #2
 8004554:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f9a5 	bl	80048ba <HAL_TIM_IC_CaptureCallback>
 8004570:	e005      	b.n	800457e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f997 	bl	80048a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f9a8 	bl	80048ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f003 0304 	and.w	r3, r3, #4
 800458e:	2b04      	cmp	r3, #4
 8004590:	d122      	bne.n	80045d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b04      	cmp	r3, #4
 800459e:	d11b      	bne.n	80045d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f06f 0204 	mvn.w	r2, #4
 80045a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2202      	movs	r2, #2
 80045ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f97b 	bl	80048ba <HAL_TIM_IC_CaptureCallback>
 80045c4:	e005      	b.n	80045d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f96d 	bl	80048a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f97e 	bl	80048ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	f003 0308 	and.w	r3, r3, #8
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	d122      	bne.n	800462c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f003 0308 	and.w	r3, r3, #8
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d11b      	bne.n	800462c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f06f 0208 	mvn.w	r2, #8
 80045fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2204      	movs	r2, #4
 8004602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f951 	bl	80048ba <HAL_TIM_IC_CaptureCallback>
 8004618:	e005      	b.n	8004626 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f943 	bl	80048a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f954 	bl	80048ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	f003 0310 	and.w	r3, r3, #16
 8004636:	2b10      	cmp	r3, #16
 8004638:	d122      	bne.n	8004680 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f003 0310 	and.w	r3, r3, #16
 8004644:	2b10      	cmp	r3, #16
 8004646:	d11b      	bne.n	8004680 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f06f 0210 	mvn.w	r2, #16
 8004650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2208      	movs	r2, #8
 8004656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f927 	bl	80048ba <HAL_TIM_IC_CaptureCallback>
 800466c:	e005      	b.n	800467a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f919 	bl	80048a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f92a 	bl	80048ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b01      	cmp	r3, #1
 800468c:	d10e      	bne.n	80046ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b01      	cmp	r3, #1
 800469a:	d107      	bne.n	80046ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f06f 0201 	mvn.w	r2, #1
 80046a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7fd fc92 	bl	8001fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b6:	2b80      	cmp	r3, #128	; 0x80
 80046b8:	d10e      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c4:	2b80      	cmp	r3, #128	; 0x80
 80046c6:	d107      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fad0 	bl	8004c78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e2:	2b40      	cmp	r3, #64	; 0x40
 80046e4:	d10e      	bne.n	8004704 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f0:	2b40      	cmp	r3, #64	; 0x40
 80046f2:	d107      	bne.n	8004704 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f8ef 	bl	80048e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f003 0320 	and.w	r3, r3, #32
 800470e:	2b20      	cmp	r3, #32
 8004710:	d10e      	bne.n	8004730 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f003 0320 	and.w	r3, r3, #32
 800471c:	2b20      	cmp	r3, #32
 800471e:	d107      	bne.n	8004730 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f06f 0220 	mvn.w	r2, #32
 8004728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fa9a 	bl	8004c64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004730:	bf00      	nop
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004748:	2b01      	cmp	r3, #1
 800474a:	d101      	bne.n	8004750 <HAL_TIM_ConfigClockSource+0x18>
 800474c:	2302      	movs	r3, #2
 800474e:	e0a6      	b.n	800489e <HAL_TIM_ConfigClockSource+0x166>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800476e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004776:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b40      	cmp	r3, #64	; 0x40
 8004786:	d067      	beq.n	8004858 <HAL_TIM_ConfigClockSource+0x120>
 8004788:	2b40      	cmp	r3, #64	; 0x40
 800478a:	d80b      	bhi.n	80047a4 <HAL_TIM_ConfigClockSource+0x6c>
 800478c:	2b10      	cmp	r3, #16
 800478e:	d073      	beq.n	8004878 <HAL_TIM_ConfigClockSource+0x140>
 8004790:	2b10      	cmp	r3, #16
 8004792:	d802      	bhi.n	800479a <HAL_TIM_ConfigClockSource+0x62>
 8004794:	2b00      	cmp	r3, #0
 8004796:	d06f      	beq.n	8004878 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004798:	e078      	b.n	800488c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800479a:	2b20      	cmp	r3, #32
 800479c:	d06c      	beq.n	8004878 <HAL_TIM_ConfigClockSource+0x140>
 800479e:	2b30      	cmp	r3, #48	; 0x30
 80047a0:	d06a      	beq.n	8004878 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80047a2:	e073      	b.n	800488c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80047a4:	2b70      	cmp	r3, #112	; 0x70
 80047a6:	d00d      	beq.n	80047c4 <HAL_TIM_ConfigClockSource+0x8c>
 80047a8:	2b70      	cmp	r3, #112	; 0x70
 80047aa:	d804      	bhi.n	80047b6 <HAL_TIM_ConfigClockSource+0x7e>
 80047ac:	2b50      	cmp	r3, #80	; 0x50
 80047ae:	d033      	beq.n	8004818 <HAL_TIM_ConfigClockSource+0xe0>
 80047b0:	2b60      	cmp	r3, #96	; 0x60
 80047b2:	d041      	beq.n	8004838 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80047b4:	e06a      	b.n	800488c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80047b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ba:	d066      	beq.n	800488a <HAL_TIM_ConfigClockSource+0x152>
 80047bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c0:	d017      	beq.n	80047f2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80047c2:	e063      	b.n	800488c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6818      	ldr	r0, [r3, #0]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	6899      	ldr	r1, [r3, #8]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f000 f9aa 	bl	8004b2c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047e6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	609a      	str	r2, [r3, #8]
      break;
 80047f0:	e04c      	b.n	800488c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6818      	ldr	r0, [r3, #0]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	6899      	ldr	r1, [r3, #8]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	f000 f993 	bl	8004b2c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004814:	609a      	str	r2, [r3, #8]
      break;
 8004816:	e039      	b.n	800488c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6818      	ldr	r0, [r3, #0]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	6859      	ldr	r1, [r3, #4]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	461a      	mov	r2, r3
 8004826:	f000 f907 	bl	8004a38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2150      	movs	r1, #80	; 0x50
 8004830:	4618      	mov	r0, r3
 8004832:	f000 f960 	bl	8004af6 <TIM_ITRx_SetConfig>
      break;
 8004836:	e029      	b.n	800488c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6818      	ldr	r0, [r3, #0]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	6859      	ldr	r1, [r3, #4]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	461a      	mov	r2, r3
 8004846:	f000 f926 	bl	8004a96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2160      	movs	r1, #96	; 0x60
 8004850:	4618      	mov	r0, r3
 8004852:	f000 f950 	bl	8004af6 <TIM_ITRx_SetConfig>
      break;
 8004856:	e019      	b.n	800488c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6818      	ldr	r0, [r3, #0]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	6859      	ldr	r1, [r3, #4]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	461a      	mov	r2, r3
 8004866:	f000 f8e7 	bl	8004a38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2140      	movs	r1, #64	; 0x40
 8004870:	4618      	mov	r0, r3
 8004872:	f000 f940 	bl	8004af6 <TIM_ITRx_SetConfig>
      break;
 8004876:	e009      	b.n	800488c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4619      	mov	r1, r3
 8004882:	4610      	mov	r0, r2
 8004884:	f000 f937 	bl	8004af6 <TIM_ITRx_SetConfig>
      break;
 8004888:	e000      	b.n	800488c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800488a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
	...

080048f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a40      	ldr	r2, [pc, #256]	; (8004a0c <TIM_Base_SetConfig+0x114>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d013      	beq.n	8004938 <TIM_Base_SetConfig+0x40>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004916:	d00f      	beq.n	8004938 <TIM_Base_SetConfig+0x40>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a3d      	ldr	r2, [pc, #244]	; (8004a10 <TIM_Base_SetConfig+0x118>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d00b      	beq.n	8004938 <TIM_Base_SetConfig+0x40>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a3c      	ldr	r2, [pc, #240]	; (8004a14 <TIM_Base_SetConfig+0x11c>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d007      	beq.n	8004938 <TIM_Base_SetConfig+0x40>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a3b      	ldr	r2, [pc, #236]	; (8004a18 <TIM_Base_SetConfig+0x120>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d003      	beq.n	8004938 <TIM_Base_SetConfig+0x40>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a3a      	ldr	r2, [pc, #232]	; (8004a1c <TIM_Base_SetConfig+0x124>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d108      	bne.n	800494a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a2f      	ldr	r2, [pc, #188]	; (8004a0c <TIM_Base_SetConfig+0x114>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d02b      	beq.n	80049aa <TIM_Base_SetConfig+0xb2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004958:	d027      	beq.n	80049aa <TIM_Base_SetConfig+0xb2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a2c      	ldr	r2, [pc, #176]	; (8004a10 <TIM_Base_SetConfig+0x118>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d023      	beq.n	80049aa <TIM_Base_SetConfig+0xb2>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a2b      	ldr	r2, [pc, #172]	; (8004a14 <TIM_Base_SetConfig+0x11c>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d01f      	beq.n	80049aa <TIM_Base_SetConfig+0xb2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a2a      	ldr	r2, [pc, #168]	; (8004a18 <TIM_Base_SetConfig+0x120>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d01b      	beq.n	80049aa <TIM_Base_SetConfig+0xb2>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a29      	ldr	r2, [pc, #164]	; (8004a1c <TIM_Base_SetConfig+0x124>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d017      	beq.n	80049aa <TIM_Base_SetConfig+0xb2>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a28      	ldr	r2, [pc, #160]	; (8004a20 <TIM_Base_SetConfig+0x128>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d013      	beq.n	80049aa <TIM_Base_SetConfig+0xb2>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a27      	ldr	r2, [pc, #156]	; (8004a24 <TIM_Base_SetConfig+0x12c>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d00f      	beq.n	80049aa <TIM_Base_SetConfig+0xb2>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a26      	ldr	r2, [pc, #152]	; (8004a28 <TIM_Base_SetConfig+0x130>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d00b      	beq.n	80049aa <TIM_Base_SetConfig+0xb2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a25      	ldr	r2, [pc, #148]	; (8004a2c <TIM_Base_SetConfig+0x134>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d007      	beq.n	80049aa <TIM_Base_SetConfig+0xb2>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a24      	ldr	r2, [pc, #144]	; (8004a30 <TIM_Base_SetConfig+0x138>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d003      	beq.n	80049aa <TIM_Base_SetConfig+0xb2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a23      	ldr	r2, [pc, #140]	; (8004a34 <TIM_Base_SetConfig+0x13c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d108      	bne.n	80049bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a0a      	ldr	r2, [pc, #40]	; (8004a0c <TIM_Base_SetConfig+0x114>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d003      	beq.n	80049f0 <TIM_Base_SetConfig+0xf8>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a0c      	ldr	r2, [pc, #48]	; (8004a1c <TIM_Base_SetConfig+0x124>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d103      	bne.n	80049f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	691a      	ldr	r2, [r3, #16]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	615a      	str	r2, [r3, #20]
}
 80049fe:	bf00      	nop
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	40010000 	.word	0x40010000
 8004a10:	40000400 	.word	0x40000400
 8004a14:	40000800 	.word	0x40000800
 8004a18:	40000c00 	.word	0x40000c00
 8004a1c:	40010400 	.word	0x40010400
 8004a20:	40014000 	.word	0x40014000
 8004a24:	40014400 	.word	0x40014400
 8004a28:	40014800 	.word	0x40014800
 8004a2c:	40001800 	.word	0x40001800
 8004a30:	40001c00 	.word	0x40001c00
 8004a34:	40002000 	.word	0x40002000

08004a38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	f023 0201 	bic.w	r2, r3, #1
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	011b      	lsls	r3, r3, #4
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f023 030a 	bic.w	r3, r3, #10
 8004a74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	621a      	str	r2, [r3, #32]
}
 8004a8a:	bf00      	nop
 8004a8c:	371c      	adds	r7, #28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b087      	sub	sp, #28
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	60f8      	str	r0, [r7, #12]
 8004a9e:	60b9      	str	r1, [r7, #8]
 8004aa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	f023 0210 	bic.w	r2, r3, #16
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ac0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	031b      	lsls	r3, r3, #12
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ad2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	621a      	str	r2, [r3, #32]
}
 8004aea:	bf00      	nop
 8004aec:	371c      	adds	r7, #28
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004af6:	b480      	push	{r7}
 8004af8:	b085      	sub	sp, #20
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
 8004afe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	f043 0307 	orr.w	r3, r3, #7
 8004b18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	609a      	str	r2, [r3, #8]
}
 8004b20:	bf00      	nop
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
 8004b38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	021a      	lsls	r2, r3, #8
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	609a      	str	r2, [r3, #8]
}
 8004b60:	bf00      	nop
 8004b62:	371c      	adds	r7, #28
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d101      	bne.n	8004b84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b80:	2302      	movs	r3, #2
 8004b82:	e05a      	b.n	8004c3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004baa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a21      	ldr	r2, [pc, #132]	; (8004c48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d022      	beq.n	8004c0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd0:	d01d      	beq.n	8004c0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a1d      	ldr	r2, [pc, #116]	; (8004c4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d018      	beq.n	8004c0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a1b      	ldr	r2, [pc, #108]	; (8004c50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d013      	beq.n	8004c0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a1a      	ldr	r2, [pc, #104]	; (8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d00e      	beq.n	8004c0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a18      	ldr	r2, [pc, #96]	; (8004c58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d009      	beq.n	8004c0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a17      	ldr	r2, [pc, #92]	; (8004c5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d004      	beq.n	8004c0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a15      	ldr	r2, [pc, #84]	; (8004c60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d10c      	bne.n	8004c28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	40010000 	.word	0x40010000
 8004c4c:	40000400 	.word	0x40000400
 8004c50:	40000800 	.word	0x40000800
 8004c54:	40000c00 	.word	0x40000c00
 8004c58:	40010400 	.word	0x40010400
 8004c5c:	40014000 	.word	0x40014000
 8004c60:	40001800 	.word	0x40001800

08004c64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e03f      	b.n	8004d1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d106      	bne.n	8004cb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7fd fba4 	bl	8002400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2224      	movs	r2, #36	; 0x24
 8004cbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68da      	ldr	r2, [r3, #12]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 faad 	bl	8005230 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	691a      	ldr	r2, [r3, #16]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ce4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	695a      	ldr	r2, [r3, #20]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cf4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68da      	ldr	r2, [r3, #12]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b085      	sub	sp, #20
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	60f8      	str	r0, [r7, #12]
 8004d2e:	60b9      	str	r1, [r7, #8]
 8004d30:	4613      	mov	r3, r2
 8004d32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b20      	cmp	r3, #32
 8004d3e:	d130      	bne.n	8004da2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d002      	beq.n	8004d4c <HAL_UART_Transmit_IT+0x26>
 8004d46:	88fb      	ldrh	r3, [r7, #6]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e029      	b.n	8004da4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d101      	bne.n	8004d5e <HAL_UART_Transmit_IT+0x38>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	e022      	b.n	8004da4 <HAL_UART_Transmit_IT+0x7e>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	88fa      	ldrh	r2, [r7, #6]
 8004d70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	88fa      	ldrh	r2, [r7, #6]
 8004d76:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2221      	movs	r2, #33	; 0x21
 8004d82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d9c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	e000      	b.n	8004da4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004da2:	2302      	movs	r3, #2
  }
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b088      	sub	sp, #32
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	f003 030f 	and.w	r3, r3, #15
 8004dde:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10d      	bne.n	8004e02 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	f003 0320 	and.w	r3, r3, #32
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d008      	beq.n	8004e02 <HAL_UART_IRQHandler+0x52>
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	f003 0320 	and.w	r3, r3, #32
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f996 	bl	800512c <UART_Receive_IT>
      return;
 8004e00:	e0d1      	b.n	8004fa6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 80b0 	beq.w	8004f6a <HAL_UART_IRQHandler+0x1ba>
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d105      	bne.n	8004e20 <HAL_UART_IRQHandler+0x70>
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 80a5 	beq.w	8004f6a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <HAL_UART_IRQHandler+0x90>
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e38:	f043 0201 	orr.w	r2, r3, #1
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	f003 0304 	and.w	r3, r3, #4
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <HAL_UART_IRQHandler+0xb0>
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d005      	beq.n	8004e60 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e58:	f043 0202 	orr.w	r2, r3, #2
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00a      	beq.n	8004e80 <HAL_UART_IRQHandler+0xd0>
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d005      	beq.n	8004e80 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e78:	f043 0204 	orr.w	r2, r3, #4
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	f003 0308 	and.w	r3, r3, #8
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00f      	beq.n	8004eaa <HAL_UART_IRQHandler+0xfa>
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	f003 0320 	and.w	r3, r3, #32
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d104      	bne.n	8004e9e <HAL_UART_IRQHandler+0xee>
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d005      	beq.n	8004eaa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea2:	f043 0208 	orr.w	r2, r3, #8
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d078      	beq.n	8004fa4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	f003 0320 	and.w	r3, r3, #32
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d007      	beq.n	8004ecc <HAL_UART_IRQHandler+0x11c>
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	f003 0320 	and.w	r3, r3, #32
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f930 	bl	800512c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed6:	2b40      	cmp	r3, #64	; 0x40
 8004ed8:	bf0c      	ite	eq
 8004eda:	2301      	moveq	r3, #1
 8004edc:	2300      	movne	r3, #0
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d102      	bne.n	8004ef4 <HAL_UART_IRQHandler+0x144>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d031      	beq.n	8004f58 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f879 	bl	8004fec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f04:	2b40      	cmp	r3, #64	; 0x40
 8004f06:	d123      	bne.n	8004f50 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	695a      	ldr	r2, [r3, #20]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f16:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d013      	beq.n	8004f48 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f24:	4a21      	ldr	r2, [pc, #132]	; (8004fac <HAL_UART_IRQHandler+0x1fc>)
 8004f26:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7fe f84c 	bl	8002fca <HAL_DMA_Abort_IT>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d016      	beq.n	8004f66 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f42:	4610      	mov	r0, r2
 8004f44:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f46:	e00e      	b.n	8004f66 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f845 	bl	8004fd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f4e:	e00a      	b.n	8004f66 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f841 	bl	8004fd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f56:	e006      	b.n	8004f66 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f83d 	bl	8004fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004f64:	e01e      	b.n	8004fa4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f66:	bf00      	nop
    return;
 8004f68:	e01c      	b.n	8004fa4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d008      	beq.n	8004f86 <HAL_UART_IRQHandler+0x1d6>
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f866 	bl	8005050 <UART_Transmit_IT>
    return;
 8004f84:	e00f      	b.n	8004fa6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00a      	beq.n	8004fa6 <HAL_UART_IRQHandler+0x1f6>
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d005      	beq.n	8004fa6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f8ae 	bl	80050fc <UART_EndTransmit_IT>
    return;
 8004fa0:	bf00      	nop
 8004fa2:	e000      	b.n	8004fa6 <HAL_UART_IRQHandler+0x1f6>
    return;
 8004fa4:	bf00      	nop
  }
}
 8004fa6:	3720      	adds	r7, #32
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	08005029 	.word	0x08005029

08004fb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005002:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	695a      	ldr	r2, [r3, #20]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0201 	bic.w	r2, r2, #1
 8005012:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2220      	movs	r2, #32
 8005018:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005034:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f7ff ffc8 	bl	8004fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005048:	bf00      	nop
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b21      	cmp	r3, #33	; 0x21
 8005062:	d144      	bne.n	80050ee <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800506c:	d11a      	bne.n	80050a4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	461a      	mov	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005082:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d105      	bne.n	8005098 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	1c9a      	adds	r2, r3, #2
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	621a      	str	r2, [r3, #32]
 8005096:	e00e      	b.n	80050b6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	1c5a      	adds	r2, r3, #1
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	621a      	str	r2, [r3, #32]
 80050a2:	e008      	b.n	80050b6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a1b      	ldr	r3, [r3, #32]
 80050a8:	1c59      	adds	r1, r3, #1
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	6211      	str	r1, [r2, #32]
 80050ae:	781a      	ldrb	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	3b01      	subs	r3, #1
 80050be:	b29b      	uxth	r3, r3
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	4619      	mov	r1, r3
 80050c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10f      	bne.n	80050ea <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68da      	ldr	r2, [r3, #12]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050ea:	2300      	movs	r3, #0
 80050ec:	e000      	b.n	80050f0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80050ee:	2302      	movs	r3, #2
  }
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005112:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2220      	movs	r2, #32
 8005118:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7ff ff47 	bl	8004fb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b22      	cmp	r3, #34	; 0x22
 800513e:	d171      	bne.n	8005224 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005148:	d123      	bne.n	8005192 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10e      	bne.n	8005176 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	b29b      	uxth	r3, r3
 8005160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005164:	b29a      	uxth	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516e:	1c9a      	adds	r2, r3, #2
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	629a      	str	r2, [r3, #40]	; 0x28
 8005174:	e029      	b.n	80051ca <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	b29b      	uxth	r3, r3
 800517e:	b2db      	uxtb	r3, r3
 8005180:	b29a      	uxth	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	629a      	str	r2, [r3, #40]	; 0x28
 8005190:	e01b      	b.n	80051ca <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10a      	bne.n	80051b0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6858      	ldr	r0, [r3, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a4:	1c59      	adds	r1, r3, #1
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	6291      	str	r1, [r2, #40]	; 0x28
 80051aa:	b2c2      	uxtb	r2, r0
 80051ac:	701a      	strb	r2, [r3, #0]
 80051ae:	e00c      	b.n	80051ca <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051bc:	1c58      	adds	r0, r3, #1
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	6288      	str	r0, [r1, #40]	; 0x28
 80051c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051c6:	b2d2      	uxtb	r2, r2
 80051c8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	3b01      	subs	r3, #1
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	4619      	mov	r1, r3
 80051d8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d120      	bne.n	8005220 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68da      	ldr	r2, [r3, #12]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 0220 	bic.w	r2, r2, #32
 80051ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68da      	ldr	r2, [r3, #12]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	695a      	ldr	r2, [r3, #20]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 0201 	bic.w	r2, r2, #1
 800520c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2220      	movs	r2, #32
 8005212:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7ff fed4 	bl	8004fc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800521c:	2300      	movs	r3, #0
 800521e:	e002      	b.n	8005226 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005220:	2300      	movs	r3, #0
 8005222:	e000      	b.n	8005226 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005224:	2302      	movs	r3, #2
  }
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005234:	b085      	sub	sp, #20
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68da      	ldr	r2, [r3, #12]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	431a      	orrs	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	431a      	orrs	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	69db      	ldr	r3, [r3, #28]
 8005264:	4313      	orrs	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005272:	f023 030c 	bic.w	r3, r3, #12
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	6812      	ldr	r2, [r2, #0]
 800527a:	68f9      	ldr	r1, [r7, #12]
 800527c:	430b      	orrs	r3, r1
 800527e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	699a      	ldr	r2, [r3, #24]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800529e:	f040 818b 	bne.w	80055b8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4ac1      	ldr	r2, [pc, #772]	; (80055ac <UART_SetConfig+0x37c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d005      	beq.n	80052b8 <UART_SetConfig+0x88>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4abf      	ldr	r2, [pc, #764]	; (80055b0 <UART_SetConfig+0x380>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	f040 80bd 	bne.w	8005432 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052b8:	f7fe fcae 	bl	8003c18 <HAL_RCC_GetPCLK2Freq>
 80052bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	461d      	mov	r5, r3
 80052c2:	f04f 0600 	mov.w	r6, #0
 80052c6:	46a8      	mov	r8, r5
 80052c8:	46b1      	mov	r9, r6
 80052ca:	eb18 0308 	adds.w	r3, r8, r8
 80052ce:	eb49 0409 	adc.w	r4, r9, r9
 80052d2:	4698      	mov	r8, r3
 80052d4:	46a1      	mov	r9, r4
 80052d6:	eb18 0805 	adds.w	r8, r8, r5
 80052da:	eb49 0906 	adc.w	r9, r9, r6
 80052de:	f04f 0100 	mov.w	r1, #0
 80052e2:	f04f 0200 	mov.w	r2, #0
 80052e6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80052ea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80052ee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80052f2:	4688      	mov	r8, r1
 80052f4:	4691      	mov	r9, r2
 80052f6:	eb18 0005 	adds.w	r0, r8, r5
 80052fa:	eb49 0106 	adc.w	r1, r9, r6
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	461d      	mov	r5, r3
 8005304:	f04f 0600 	mov.w	r6, #0
 8005308:	196b      	adds	r3, r5, r5
 800530a:	eb46 0406 	adc.w	r4, r6, r6
 800530e:	461a      	mov	r2, r3
 8005310:	4623      	mov	r3, r4
 8005312:	f7fa ffbd 	bl	8000290 <__aeabi_uldivmod>
 8005316:	4603      	mov	r3, r0
 8005318:	460c      	mov	r4, r1
 800531a:	461a      	mov	r2, r3
 800531c:	4ba5      	ldr	r3, [pc, #660]	; (80055b4 <UART_SetConfig+0x384>)
 800531e:	fba3 2302 	umull	r2, r3, r3, r2
 8005322:	095b      	lsrs	r3, r3, #5
 8005324:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	461d      	mov	r5, r3
 800532c:	f04f 0600 	mov.w	r6, #0
 8005330:	46a9      	mov	r9, r5
 8005332:	46b2      	mov	sl, r6
 8005334:	eb19 0309 	adds.w	r3, r9, r9
 8005338:	eb4a 040a 	adc.w	r4, sl, sl
 800533c:	4699      	mov	r9, r3
 800533e:	46a2      	mov	sl, r4
 8005340:	eb19 0905 	adds.w	r9, r9, r5
 8005344:	eb4a 0a06 	adc.w	sl, sl, r6
 8005348:	f04f 0100 	mov.w	r1, #0
 800534c:	f04f 0200 	mov.w	r2, #0
 8005350:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005354:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005358:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800535c:	4689      	mov	r9, r1
 800535e:	4692      	mov	sl, r2
 8005360:	eb19 0005 	adds.w	r0, r9, r5
 8005364:	eb4a 0106 	adc.w	r1, sl, r6
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	461d      	mov	r5, r3
 800536e:	f04f 0600 	mov.w	r6, #0
 8005372:	196b      	adds	r3, r5, r5
 8005374:	eb46 0406 	adc.w	r4, r6, r6
 8005378:	461a      	mov	r2, r3
 800537a:	4623      	mov	r3, r4
 800537c:	f7fa ff88 	bl	8000290 <__aeabi_uldivmod>
 8005380:	4603      	mov	r3, r0
 8005382:	460c      	mov	r4, r1
 8005384:	461a      	mov	r2, r3
 8005386:	4b8b      	ldr	r3, [pc, #556]	; (80055b4 <UART_SetConfig+0x384>)
 8005388:	fba3 1302 	umull	r1, r3, r3, r2
 800538c:	095b      	lsrs	r3, r3, #5
 800538e:	2164      	movs	r1, #100	; 0x64
 8005390:	fb01 f303 	mul.w	r3, r1, r3
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	3332      	adds	r3, #50	; 0x32
 800539a:	4a86      	ldr	r2, [pc, #536]	; (80055b4 <UART_SetConfig+0x384>)
 800539c:	fba2 2303 	umull	r2, r3, r2, r3
 80053a0:	095b      	lsrs	r3, r3, #5
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053a8:	4498      	add	r8, r3
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	461d      	mov	r5, r3
 80053ae:	f04f 0600 	mov.w	r6, #0
 80053b2:	46a9      	mov	r9, r5
 80053b4:	46b2      	mov	sl, r6
 80053b6:	eb19 0309 	adds.w	r3, r9, r9
 80053ba:	eb4a 040a 	adc.w	r4, sl, sl
 80053be:	4699      	mov	r9, r3
 80053c0:	46a2      	mov	sl, r4
 80053c2:	eb19 0905 	adds.w	r9, r9, r5
 80053c6:	eb4a 0a06 	adc.w	sl, sl, r6
 80053ca:	f04f 0100 	mov.w	r1, #0
 80053ce:	f04f 0200 	mov.w	r2, #0
 80053d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053de:	4689      	mov	r9, r1
 80053e0:	4692      	mov	sl, r2
 80053e2:	eb19 0005 	adds.w	r0, r9, r5
 80053e6:	eb4a 0106 	adc.w	r1, sl, r6
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	461d      	mov	r5, r3
 80053f0:	f04f 0600 	mov.w	r6, #0
 80053f4:	196b      	adds	r3, r5, r5
 80053f6:	eb46 0406 	adc.w	r4, r6, r6
 80053fa:	461a      	mov	r2, r3
 80053fc:	4623      	mov	r3, r4
 80053fe:	f7fa ff47 	bl	8000290 <__aeabi_uldivmod>
 8005402:	4603      	mov	r3, r0
 8005404:	460c      	mov	r4, r1
 8005406:	461a      	mov	r2, r3
 8005408:	4b6a      	ldr	r3, [pc, #424]	; (80055b4 <UART_SetConfig+0x384>)
 800540a:	fba3 1302 	umull	r1, r3, r3, r2
 800540e:	095b      	lsrs	r3, r3, #5
 8005410:	2164      	movs	r1, #100	; 0x64
 8005412:	fb01 f303 	mul.w	r3, r1, r3
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	00db      	lsls	r3, r3, #3
 800541a:	3332      	adds	r3, #50	; 0x32
 800541c:	4a65      	ldr	r2, [pc, #404]	; (80055b4 <UART_SetConfig+0x384>)
 800541e:	fba2 2303 	umull	r2, r3, r2, r3
 8005422:	095b      	lsrs	r3, r3, #5
 8005424:	f003 0207 	and.w	r2, r3, #7
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4442      	add	r2, r8
 800542e:	609a      	str	r2, [r3, #8]
 8005430:	e26f      	b.n	8005912 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005432:	f7fe fbdd 	bl	8003bf0 <HAL_RCC_GetPCLK1Freq>
 8005436:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	461d      	mov	r5, r3
 800543c:	f04f 0600 	mov.w	r6, #0
 8005440:	46a8      	mov	r8, r5
 8005442:	46b1      	mov	r9, r6
 8005444:	eb18 0308 	adds.w	r3, r8, r8
 8005448:	eb49 0409 	adc.w	r4, r9, r9
 800544c:	4698      	mov	r8, r3
 800544e:	46a1      	mov	r9, r4
 8005450:	eb18 0805 	adds.w	r8, r8, r5
 8005454:	eb49 0906 	adc.w	r9, r9, r6
 8005458:	f04f 0100 	mov.w	r1, #0
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005464:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005468:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800546c:	4688      	mov	r8, r1
 800546e:	4691      	mov	r9, r2
 8005470:	eb18 0005 	adds.w	r0, r8, r5
 8005474:	eb49 0106 	adc.w	r1, r9, r6
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	461d      	mov	r5, r3
 800547e:	f04f 0600 	mov.w	r6, #0
 8005482:	196b      	adds	r3, r5, r5
 8005484:	eb46 0406 	adc.w	r4, r6, r6
 8005488:	461a      	mov	r2, r3
 800548a:	4623      	mov	r3, r4
 800548c:	f7fa ff00 	bl	8000290 <__aeabi_uldivmod>
 8005490:	4603      	mov	r3, r0
 8005492:	460c      	mov	r4, r1
 8005494:	461a      	mov	r2, r3
 8005496:	4b47      	ldr	r3, [pc, #284]	; (80055b4 <UART_SetConfig+0x384>)
 8005498:	fba3 2302 	umull	r2, r3, r3, r2
 800549c:	095b      	lsrs	r3, r3, #5
 800549e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	461d      	mov	r5, r3
 80054a6:	f04f 0600 	mov.w	r6, #0
 80054aa:	46a9      	mov	r9, r5
 80054ac:	46b2      	mov	sl, r6
 80054ae:	eb19 0309 	adds.w	r3, r9, r9
 80054b2:	eb4a 040a 	adc.w	r4, sl, sl
 80054b6:	4699      	mov	r9, r3
 80054b8:	46a2      	mov	sl, r4
 80054ba:	eb19 0905 	adds.w	r9, r9, r5
 80054be:	eb4a 0a06 	adc.w	sl, sl, r6
 80054c2:	f04f 0100 	mov.w	r1, #0
 80054c6:	f04f 0200 	mov.w	r2, #0
 80054ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054d6:	4689      	mov	r9, r1
 80054d8:	4692      	mov	sl, r2
 80054da:	eb19 0005 	adds.w	r0, r9, r5
 80054de:	eb4a 0106 	adc.w	r1, sl, r6
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	461d      	mov	r5, r3
 80054e8:	f04f 0600 	mov.w	r6, #0
 80054ec:	196b      	adds	r3, r5, r5
 80054ee:	eb46 0406 	adc.w	r4, r6, r6
 80054f2:	461a      	mov	r2, r3
 80054f4:	4623      	mov	r3, r4
 80054f6:	f7fa fecb 	bl	8000290 <__aeabi_uldivmod>
 80054fa:	4603      	mov	r3, r0
 80054fc:	460c      	mov	r4, r1
 80054fe:	461a      	mov	r2, r3
 8005500:	4b2c      	ldr	r3, [pc, #176]	; (80055b4 <UART_SetConfig+0x384>)
 8005502:	fba3 1302 	umull	r1, r3, r3, r2
 8005506:	095b      	lsrs	r3, r3, #5
 8005508:	2164      	movs	r1, #100	; 0x64
 800550a:	fb01 f303 	mul.w	r3, r1, r3
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	00db      	lsls	r3, r3, #3
 8005512:	3332      	adds	r3, #50	; 0x32
 8005514:	4a27      	ldr	r2, [pc, #156]	; (80055b4 <UART_SetConfig+0x384>)
 8005516:	fba2 2303 	umull	r2, r3, r2, r3
 800551a:	095b      	lsrs	r3, r3, #5
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005522:	4498      	add	r8, r3
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	461d      	mov	r5, r3
 8005528:	f04f 0600 	mov.w	r6, #0
 800552c:	46a9      	mov	r9, r5
 800552e:	46b2      	mov	sl, r6
 8005530:	eb19 0309 	adds.w	r3, r9, r9
 8005534:	eb4a 040a 	adc.w	r4, sl, sl
 8005538:	4699      	mov	r9, r3
 800553a:	46a2      	mov	sl, r4
 800553c:	eb19 0905 	adds.w	r9, r9, r5
 8005540:	eb4a 0a06 	adc.w	sl, sl, r6
 8005544:	f04f 0100 	mov.w	r1, #0
 8005548:	f04f 0200 	mov.w	r2, #0
 800554c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005550:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005554:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005558:	4689      	mov	r9, r1
 800555a:	4692      	mov	sl, r2
 800555c:	eb19 0005 	adds.w	r0, r9, r5
 8005560:	eb4a 0106 	adc.w	r1, sl, r6
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	461d      	mov	r5, r3
 800556a:	f04f 0600 	mov.w	r6, #0
 800556e:	196b      	adds	r3, r5, r5
 8005570:	eb46 0406 	adc.w	r4, r6, r6
 8005574:	461a      	mov	r2, r3
 8005576:	4623      	mov	r3, r4
 8005578:	f7fa fe8a 	bl	8000290 <__aeabi_uldivmod>
 800557c:	4603      	mov	r3, r0
 800557e:	460c      	mov	r4, r1
 8005580:	461a      	mov	r2, r3
 8005582:	4b0c      	ldr	r3, [pc, #48]	; (80055b4 <UART_SetConfig+0x384>)
 8005584:	fba3 1302 	umull	r1, r3, r3, r2
 8005588:	095b      	lsrs	r3, r3, #5
 800558a:	2164      	movs	r1, #100	; 0x64
 800558c:	fb01 f303 	mul.w	r3, r1, r3
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	00db      	lsls	r3, r3, #3
 8005594:	3332      	adds	r3, #50	; 0x32
 8005596:	4a07      	ldr	r2, [pc, #28]	; (80055b4 <UART_SetConfig+0x384>)
 8005598:	fba2 2303 	umull	r2, r3, r2, r3
 800559c:	095b      	lsrs	r3, r3, #5
 800559e:	f003 0207 	and.w	r2, r3, #7
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4442      	add	r2, r8
 80055a8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80055aa:	e1b2      	b.n	8005912 <UART_SetConfig+0x6e2>
 80055ac:	40011000 	.word	0x40011000
 80055b0:	40011400 	.word	0x40011400
 80055b4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4ad7      	ldr	r2, [pc, #860]	; (800591c <UART_SetConfig+0x6ec>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d005      	beq.n	80055ce <UART_SetConfig+0x39e>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4ad6      	ldr	r2, [pc, #856]	; (8005920 <UART_SetConfig+0x6f0>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	f040 80d1 	bne.w	8005770 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80055ce:	f7fe fb23 	bl	8003c18 <HAL_RCC_GetPCLK2Freq>
 80055d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	469a      	mov	sl, r3
 80055d8:	f04f 0b00 	mov.w	fp, #0
 80055dc:	46d0      	mov	r8, sl
 80055de:	46d9      	mov	r9, fp
 80055e0:	eb18 0308 	adds.w	r3, r8, r8
 80055e4:	eb49 0409 	adc.w	r4, r9, r9
 80055e8:	4698      	mov	r8, r3
 80055ea:	46a1      	mov	r9, r4
 80055ec:	eb18 080a 	adds.w	r8, r8, sl
 80055f0:	eb49 090b 	adc.w	r9, r9, fp
 80055f4:	f04f 0100 	mov.w	r1, #0
 80055f8:	f04f 0200 	mov.w	r2, #0
 80055fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005600:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005604:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005608:	4688      	mov	r8, r1
 800560a:	4691      	mov	r9, r2
 800560c:	eb1a 0508 	adds.w	r5, sl, r8
 8005610:	eb4b 0609 	adc.w	r6, fp, r9
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	4619      	mov	r1, r3
 800561a:	f04f 0200 	mov.w	r2, #0
 800561e:	f04f 0300 	mov.w	r3, #0
 8005622:	f04f 0400 	mov.w	r4, #0
 8005626:	0094      	lsls	r4, r2, #2
 8005628:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800562c:	008b      	lsls	r3, r1, #2
 800562e:	461a      	mov	r2, r3
 8005630:	4623      	mov	r3, r4
 8005632:	4628      	mov	r0, r5
 8005634:	4631      	mov	r1, r6
 8005636:	f7fa fe2b 	bl	8000290 <__aeabi_uldivmod>
 800563a:	4603      	mov	r3, r0
 800563c:	460c      	mov	r4, r1
 800563e:	461a      	mov	r2, r3
 8005640:	4bb8      	ldr	r3, [pc, #736]	; (8005924 <UART_SetConfig+0x6f4>)
 8005642:	fba3 2302 	umull	r2, r3, r3, r2
 8005646:	095b      	lsrs	r3, r3, #5
 8005648:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	469b      	mov	fp, r3
 8005650:	f04f 0c00 	mov.w	ip, #0
 8005654:	46d9      	mov	r9, fp
 8005656:	46e2      	mov	sl, ip
 8005658:	eb19 0309 	adds.w	r3, r9, r9
 800565c:	eb4a 040a 	adc.w	r4, sl, sl
 8005660:	4699      	mov	r9, r3
 8005662:	46a2      	mov	sl, r4
 8005664:	eb19 090b 	adds.w	r9, r9, fp
 8005668:	eb4a 0a0c 	adc.w	sl, sl, ip
 800566c:	f04f 0100 	mov.w	r1, #0
 8005670:	f04f 0200 	mov.w	r2, #0
 8005674:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005678:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800567c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005680:	4689      	mov	r9, r1
 8005682:	4692      	mov	sl, r2
 8005684:	eb1b 0509 	adds.w	r5, fp, r9
 8005688:	eb4c 060a 	adc.w	r6, ip, sl
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	4619      	mov	r1, r3
 8005692:	f04f 0200 	mov.w	r2, #0
 8005696:	f04f 0300 	mov.w	r3, #0
 800569a:	f04f 0400 	mov.w	r4, #0
 800569e:	0094      	lsls	r4, r2, #2
 80056a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80056a4:	008b      	lsls	r3, r1, #2
 80056a6:	461a      	mov	r2, r3
 80056a8:	4623      	mov	r3, r4
 80056aa:	4628      	mov	r0, r5
 80056ac:	4631      	mov	r1, r6
 80056ae:	f7fa fdef 	bl	8000290 <__aeabi_uldivmod>
 80056b2:	4603      	mov	r3, r0
 80056b4:	460c      	mov	r4, r1
 80056b6:	461a      	mov	r2, r3
 80056b8:	4b9a      	ldr	r3, [pc, #616]	; (8005924 <UART_SetConfig+0x6f4>)
 80056ba:	fba3 1302 	umull	r1, r3, r3, r2
 80056be:	095b      	lsrs	r3, r3, #5
 80056c0:	2164      	movs	r1, #100	; 0x64
 80056c2:	fb01 f303 	mul.w	r3, r1, r3
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	011b      	lsls	r3, r3, #4
 80056ca:	3332      	adds	r3, #50	; 0x32
 80056cc:	4a95      	ldr	r2, [pc, #596]	; (8005924 <UART_SetConfig+0x6f4>)
 80056ce:	fba2 2303 	umull	r2, r3, r2, r3
 80056d2:	095b      	lsrs	r3, r3, #5
 80056d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056d8:	4498      	add	r8, r3
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	469b      	mov	fp, r3
 80056de:	f04f 0c00 	mov.w	ip, #0
 80056e2:	46d9      	mov	r9, fp
 80056e4:	46e2      	mov	sl, ip
 80056e6:	eb19 0309 	adds.w	r3, r9, r9
 80056ea:	eb4a 040a 	adc.w	r4, sl, sl
 80056ee:	4699      	mov	r9, r3
 80056f0:	46a2      	mov	sl, r4
 80056f2:	eb19 090b 	adds.w	r9, r9, fp
 80056f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80056fa:	f04f 0100 	mov.w	r1, #0
 80056fe:	f04f 0200 	mov.w	r2, #0
 8005702:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005706:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800570a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800570e:	4689      	mov	r9, r1
 8005710:	4692      	mov	sl, r2
 8005712:	eb1b 0509 	adds.w	r5, fp, r9
 8005716:	eb4c 060a 	adc.w	r6, ip, sl
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	4619      	mov	r1, r3
 8005720:	f04f 0200 	mov.w	r2, #0
 8005724:	f04f 0300 	mov.w	r3, #0
 8005728:	f04f 0400 	mov.w	r4, #0
 800572c:	0094      	lsls	r4, r2, #2
 800572e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005732:	008b      	lsls	r3, r1, #2
 8005734:	461a      	mov	r2, r3
 8005736:	4623      	mov	r3, r4
 8005738:	4628      	mov	r0, r5
 800573a:	4631      	mov	r1, r6
 800573c:	f7fa fda8 	bl	8000290 <__aeabi_uldivmod>
 8005740:	4603      	mov	r3, r0
 8005742:	460c      	mov	r4, r1
 8005744:	461a      	mov	r2, r3
 8005746:	4b77      	ldr	r3, [pc, #476]	; (8005924 <UART_SetConfig+0x6f4>)
 8005748:	fba3 1302 	umull	r1, r3, r3, r2
 800574c:	095b      	lsrs	r3, r3, #5
 800574e:	2164      	movs	r1, #100	; 0x64
 8005750:	fb01 f303 	mul.w	r3, r1, r3
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	011b      	lsls	r3, r3, #4
 8005758:	3332      	adds	r3, #50	; 0x32
 800575a:	4a72      	ldr	r2, [pc, #456]	; (8005924 <UART_SetConfig+0x6f4>)
 800575c:	fba2 2303 	umull	r2, r3, r2, r3
 8005760:	095b      	lsrs	r3, r3, #5
 8005762:	f003 020f 	and.w	r2, r3, #15
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4442      	add	r2, r8
 800576c:	609a      	str	r2, [r3, #8]
 800576e:	e0d0      	b.n	8005912 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005770:	f7fe fa3e 	bl	8003bf0 <HAL_RCC_GetPCLK1Freq>
 8005774:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	469a      	mov	sl, r3
 800577a:	f04f 0b00 	mov.w	fp, #0
 800577e:	46d0      	mov	r8, sl
 8005780:	46d9      	mov	r9, fp
 8005782:	eb18 0308 	adds.w	r3, r8, r8
 8005786:	eb49 0409 	adc.w	r4, r9, r9
 800578a:	4698      	mov	r8, r3
 800578c:	46a1      	mov	r9, r4
 800578e:	eb18 080a 	adds.w	r8, r8, sl
 8005792:	eb49 090b 	adc.w	r9, r9, fp
 8005796:	f04f 0100 	mov.w	r1, #0
 800579a:	f04f 0200 	mov.w	r2, #0
 800579e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80057a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80057a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80057aa:	4688      	mov	r8, r1
 80057ac:	4691      	mov	r9, r2
 80057ae:	eb1a 0508 	adds.w	r5, sl, r8
 80057b2:	eb4b 0609 	adc.w	r6, fp, r9
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	4619      	mov	r1, r3
 80057bc:	f04f 0200 	mov.w	r2, #0
 80057c0:	f04f 0300 	mov.w	r3, #0
 80057c4:	f04f 0400 	mov.w	r4, #0
 80057c8:	0094      	lsls	r4, r2, #2
 80057ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80057ce:	008b      	lsls	r3, r1, #2
 80057d0:	461a      	mov	r2, r3
 80057d2:	4623      	mov	r3, r4
 80057d4:	4628      	mov	r0, r5
 80057d6:	4631      	mov	r1, r6
 80057d8:	f7fa fd5a 	bl	8000290 <__aeabi_uldivmod>
 80057dc:	4603      	mov	r3, r0
 80057de:	460c      	mov	r4, r1
 80057e0:	461a      	mov	r2, r3
 80057e2:	4b50      	ldr	r3, [pc, #320]	; (8005924 <UART_SetConfig+0x6f4>)
 80057e4:	fba3 2302 	umull	r2, r3, r3, r2
 80057e8:	095b      	lsrs	r3, r3, #5
 80057ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	469b      	mov	fp, r3
 80057f2:	f04f 0c00 	mov.w	ip, #0
 80057f6:	46d9      	mov	r9, fp
 80057f8:	46e2      	mov	sl, ip
 80057fa:	eb19 0309 	adds.w	r3, r9, r9
 80057fe:	eb4a 040a 	adc.w	r4, sl, sl
 8005802:	4699      	mov	r9, r3
 8005804:	46a2      	mov	sl, r4
 8005806:	eb19 090b 	adds.w	r9, r9, fp
 800580a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800580e:	f04f 0100 	mov.w	r1, #0
 8005812:	f04f 0200 	mov.w	r2, #0
 8005816:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800581a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800581e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005822:	4689      	mov	r9, r1
 8005824:	4692      	mov	sl, r2
 8005826:	eb1b 0509 	adds.w	r5, fp, r9
 800582a:	eb4c 060a 	adc.w	r6, ip, sl
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	4619      	mov	r1, r3
 8005834:	f04f 0200 	mov.w	r2, #0
 8005838:	f04f 0300 	mov.w	r3, #0
 800583c:	f04f 0400 	mov.w	r4, #0
 8005840:	0094      	lsls	r4, r2, #2
 8005842:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005846:	008b      	lsls	r3, r1, #2
 8005848:	461a      	mov	r2, r3
 800584a:	4623      	mov	r3, r4
 800584c:	4628      	mov	r0, r5
 800584e:	4631      	mov	r1, r6
 8005850:	f7fa fd1e 	bl	8000290 <__aeabi_uldivmod>
 8005854:	4603      	mov	r3, r0
 8005856:	460c      	mov	r4, r1
 8005858:	461a      	mov	r2, r3
 800585a:	4b32      	ldr	r3, [pc, #200]	; (8005924 <UART_SetConfig+0x6f4>)
 800585c:	fba3 1302 	umull	r1, r3, r3, r2
 8005860:	095b      	lsrs	r3, r3, #5
 8005862:	2164      	movs	r1, #100	; 0x64
 8005864:	fb01 f303 	mul.w	r3, r1, r3
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	011b      	lsls	r3, r3, #4
 800586c:	3332      	adds	r3, #50	; 0x32
 800586e:	4a2d      	ldr	r2, [pc, #180]	; (8005924 <UART_SetConfig+0x6f4>)
 8005870:	fba2 2303 	umull	r2, r3, r2, r3
 8005874:	095b      	lsrs	r3, r3, #5
 8005876:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800587a:	4498      	add	r8, r3
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	469b      	mov	fp, r3
 8005880:	f04f 0c00 	mov.w	ip, #0
 8005884:	46d9      	mov	r9, fp
 8005886:	46e2      	mov	sl, ip
 8005888:	eb19 0309 	adds.w	r3, r9, r9
 800588c:	eb4a 040a 	adc.w	r4, sl, sl
 8005890:	4699      	mov	r9, r3
 8005892:	46a2      	mov	sl, r4
 8005894:	eb19 090b 	adds.w	r9, r9, fp
 8005898:	eb4a 0a0c 	adc.w	sl, sl, ip
 800589c:	f04f 0100 	mov.w	r1, #0
 80058a0:	f04f 0200 	mov.w	r2, #0
 80058a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058b0:	4689      	mov	r9, r1
 80058b2:	4692      	mov	sl, r2
 80058b4:	eb1b 0509 	adds.w	r5, fp, r9
 80058b8:	eb4c 060a 	adc.w	r6, ip, sl
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	4619      	mov	r1, r3
 80058c2:	f04f 0200 	mov.w	r2, #0
 80058c6:	f04f 0300 	mov.w	r3, #0
 80058ca:	f04f 0400 	mov.w	r4, #0
 80058ce:	0094      	lsls	r4, r2, #2
 80058d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80058d4:	008b      	lsls	r3, r1, #2
 80058d6:	461a      	mov	r2, r3
 80058d8:	4623      	mov	r3, r4
 80058da:	4628      	mov	r0, r5
 80058dc:	4631      	mov	r1, r6
 80058de:	f7fa fcd7 	bl	8000290 <__aeabi_uldivmod>
 80058e2:	4603      	mov	r3, r0
 80058e4:	460c      	mov	r4, r1
 80058e6:	461a      	mov	r2, r3
 80058e8:	4b0e      	ldr	r3, [pc, #56]	; (8005924 <UART_SetConfig+0x6f4>)
 80058ea:	fba3 1302 	umull	r1, r3, r3, r2
 80058ee:	095b      	lsrs	r3, r3, #5
 80058f0:	2164      	movs	r1, #100	; 0x64
 80058f2:	fb01 f303 	mul.w	r3, r1, r3
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	011b      	lsls	r3, r3, #4
 80058fa:	3332      	adds	r3, #50	; 0x32
 80058fc:	4a09      	ldr	r2, [pc, #36]	; (8005924 <UART_SetConfig+0x6f4>)
 80058fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005902:	095b      	lsrs	r3, r3, #5
 8005904:	f003 020f 	and.w	r2, r3, #15
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4442      	add	r2, r8
 800590e:	609a      	str	r2, [r3, #8]
}
 8005910:	e7ff      	b.n	8005912 <UART_SetConfig+0x6e2>
 8005912:	bf00      	nop
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800591c:	40011000 	.word	0x40011000
 8005920:	40011400 	.word	0x40011400
 8005924:	51eb851f 	.word	0x51eb851f

08005928 <__errno>:
 8005928:	4b01      	ldr	r3, [pc, #4]	; (8005930 <__errno+0x8>)
 800592a:	6818      	ldr	r0, [r3, #0]
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	20000014 	.word	0x20000014

08005934 <__libc_init_array>:
 8005934:	b570      	push	{r4, r5, r6, lr}
 8005936:	4e0d      	ldr	r6, [pc, #52]	; (800596c <__libc_init_array+0x38>)
 8005938:	4c0d      	ldr	r4, [pc, #52]	; (8005970 <__libc_init_array+0x3c>)
 800593a:	1ba4      	subs	r4, r4, r6
 800593c:	10a4      	asrs	r4, r4, #2
 800593e:	2500      	movs	r5, #0
 8005940:	42a5      	cmp	r5, r4
 8005942:	d109      	bne.n	8005958 <__libc_init_array+0x24>
 8005944:	4e0b      	ldr	r6, [pc, #44]	; (8005974 <__libc_init_array+0x40>)
 8005946:	4c0c      	ldr	r4, [pc, #48]	; (8005978 <__libc_init_array+0x44>)
 8005948:	f000 fc5a 	bl	8006200 <_init>
 800594c:	1ba4      	subs	r4, r4, r6
 800594e:	10a4      	asrs	r4, r4, #2
 8005950:	2500      	movs	r5, #0
 8005952:	42a5      	cmp	r5, r4
 8005954:	d105      	bne.n	8005962 <__libc_init_array+0x2e>
 8005956:	bd70      	pop	{r4, r5, r6, pc}
 8005958:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800595c:	4798      	blx	r3
 800595e:	3501      	adds	r5, #1
 8005960:	e7ee      	b.n	8005940 <__libc_init_array+0xc>
 8005962:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005966:	4798      	blx	r3
 8005968:	3501      	adds	r5, #1
 800596a:	e7f2      	b.n	8005952 <__libc_init_array+0x1e>
 800596c:	0800639c 	.word	0x0800639c
 8005970:	0800639c 	.word	0x0800639c
 8005974:	0800639c 	.word	0x0800639c
 8005978:	080063a0 	.word	0x080063a0

0800597c <memset>:
 800597c:	4402      	add	r2, r0
 800597e:	4603      	mov	r3, r0
 8005980:	4293      	cmp	r3, r2
 8005982:	d100      	bne.n	8005986 <memset+0xa>
 8005984:	4770      	bx	lr
 8005986:	f803 1b01 	strb.w	r1, [r3], #1
 800598a:	e7f9      	b.n	8005980 <memset+0x4>

0800598c <sniprintf>:
 800598c:	b40c      	push	{r2, r3}
 800598e:	b530      	push	{r4, r5, lr}
 8005990:	4b17      	ldr	r3, [pc, #92]	; (80059f0 <sniprintf+0x64>)
 8005992:	1e0c      	subs	r4, r1, #0
 8005994:	b09d      	sub	sp, #116	; 0x74
 8005996:	681d      	ldr	r5, [r3, #0]
 8005998:	da08      	bge.n	80059ac <sniprintf+0x20>
 800599a:	238b      	movs	r3, #139	; 0x8b
 800599c:	602b      	str	r3, [r5, #0]
 800599e:	f04f 30ff 	mov.w	r0, #4294967295
 80059a2:	b01d      	add	sp, #116	; 0x74
 80059a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059a8:	b002      	add	sp, #8
 80059aa:	4770      	bx	lr
 80059ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 80059b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80059b4:	bf14      	ite	ne
 80059b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80059ba:	4623      	moveq	r3, r4
 80059bc:	9304      	str	r3, [sp, #16]
 80059be:	9307      	str	r3, [sp, #28]
 80059c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80059c4:	9002      	str	r0, [sp, #8]
 80059c6:	9006      	str	r0, [sp, #24]
 80059c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80059cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80059ce:	ab21      	add	r3, sp, #132	; 0x84
 80059d0:	a902      	add	r1, sp, #8
 80059d2:	4628      	mov	r0, r5
 80059d4:	9301      	str	r3, [sp, #4]
 80059d6:	f000 f887 	bl	8005ae8 <_svfiprintf_r>
 80059da:	1c43      	adds	r3, r0, #1
 80059dc:	bfbc      	itt	lt
 80059de:	238b      	movlt	r3, #139	; 0x8b
 80059e0:	602b      	strlt	r3, [r5, #0]
 80059e2:	2c00      	cmp	r4, #0
 80059e4:	d0dd      	beq.n	80059a2 <sniprintf+0x16>
 80059e6:	9b02      	ldr	r3, [sp, #8]
 80059e8:	2200      	movs	r2, #0
 80059ea:	701a      	strb	r2, [r3, #0]
 80059ec:	e7d9      	b.n	80059a2 <sniprintf+0x16>
 80059ee:	bf00      	nop
 80059f0:	20000014 	.word	0x20000014

080059f4 <siprintf>:
 80059f4:	b40e      	push	{r1, r2, r3}
 80059f6:	b500      	push	{lr}
 80059f8:	b09c      	sub	sp, #112	; 0x70
 80059fa:	ab1d      	add	r3, sp, #116	; 0x74
 80059fc:	9002      	str	r0, [sp, #8]
 80059fe:	9006      	str	r0, [sp, #24]
 8005a00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a04:	4809      	ldr	r0, [pc, #36]	; (8005a2c <siprintf+0x38>)
 8005a06:	9107      	str	r1, [sp, #28]
 8005a08:	9104      	str	r1, [sp, #16]
 8005a0a:	4909      	ldr	r1, [pc, #36]	; (8005a30 <siprintf+0x3c>)
 8005a0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a10:	9105      	str	r1, [sp, #20]
 8005a12:	6800      	ldr	r0, [r0, #0]
 8005a14:	9301      	str	r3, [sp, #4]
 8005a16:	a902      	add	r1, sp, #8
 8005a18:	f000 f866 	bl	8005ae8 <_svfiprintf_r>
 8005a1c:	9b02      	ldr	r3, [sp, #8]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	701a      	strb	r2, [r3, #0]
 8005a22:	b01c      	add	sp, #112	; 0x70
 8005a24:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a28:	b003      	add	sp, #12
 8005a2a:	4770      	bx	lr
 8005a2c:	20000014 	.word	0x20000014
 8005a30:	ffff0208 	.word	0xffff0208

08005a34 <__ssputs_r>:
 8005a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a38:	688e      	ldr	r6, [r1, #8]
 8005a3a:	429e      	cmp	r6, r3
 8005a3c:	4682      	mov	sl, r0
 8005a3e:	460c      	mov	r4, r1
 8005a40:	4690      	mov	r8, r2
 8005a42:	4699      	mov	r9, r3
 8005a44:	d837      	bhi.n	8005ab6 <__ssputs_r+0x82>
 8005a46:	898a      	ldrh	r2, [r1, #12]
 8005a48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a4c:	d031      	beq.n	8005ab2 <__ssputs_r+0x7e>
 8005a4e:	6825      	ldr	r5, [r4, #0]
 8005a50:	6909      	ldr	r1, [r1, #16]
 8005a52:	1a6f      	subs	r7, r5, r1
 8005a54:	6965      	ldr	r5, [r4, #20]
 8005a56:	2302      	movs	r3, #2
 8005a58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a5c:	fb95 f5f3 	sdiv	r5, r5, r3
 8005a60:	f109 0301 	add.w	r3, r9, #1
 8005a64:	443b      	add	r3, r7
 8005a66:	429d      	cmp	r5, r3
 8005a68:	bf38      	it	cc
 8005a6a:	461d      	movcc	r5, r3
 8005a6c:	0553      	lsls	r3, r2, #21
 8005a6e:	d530      	bpl.n	8005ad2 <__ssputs_r+0x9e>
 8005a70:	4629      	mov	r1, r5
 8005a72:	f000 fb2b 	bl	80060cc <_malloc_r>
 8005a76:	4606      	mov	r6, r0
 8005a78:	b950      	cbnz	r0, 8005a90 <__ssputs_r+0x5c>
 8005a7a:	230c      	movs	r3, #12
 8005a7c:	f8ca 3000 	str.w	r3, [sl]
 8005a80:	89a3      	ldrh	r3, [r4, #12]
 8005a82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a86:	81a3      	strh	r3, [r4, #12]
 8005a88:	f04f 30ff 	mov.w	r0, #4294967295
 8005a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a90:	463a      	mov	r2, r7
 8005a92:	6921      	ldr	r1, [r4, #16]
 8005a94:	f000 faa8 	bl	8005fe8 <memcpy>
 8005a98:	89a3      	ldrh	r3, [r4, #12]
 8005a9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aa2:	81a3      	strh	r3, [r4, #12]
 8005aa4:	6126      	str	r6, [r4, #16]
 8005aa6:	6165      	str	r5, [r4, #20]
 8005aa8:	443e      	add	r6, r7
 8005aaa:	1bed      	subs	r5, r5, r7
 8005aac:	6026      	str	r6, [r4, #0]
 8005aae:	60a5      	str	r5, [r4, #8]
 8005ab0:	464e      	mov	r6, r9
 8005ab2:	454e      	cmp	r6, r9
 8005ab4:	d900      	bls.n	8005ab8 <__ssputs_r+0x84>
 8005ab6:	464e      	mov	r6, r9
 8005ab8:	4632      	mov	r2, r6
 8005aba:	4641      	mov	r1, r8
 8005abc:	6820      	ldr	r0, [r4, #0]
 8005abe:	f000 fa9e 	bl	8005ffe <memmove>
 8005ac2:	68a3      	ldr	r3, [r4, #8]
 8005ac4:	1b9b      	subs	r3, r3, r6
 8005ac6:	60a3      	str	r3, [r4, #8]
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	441e      	add	r6, r3
 8005acc:	6026      	str	r6, [r4, #0]
 8005ace:	2000      	movs	r0, #0
 8005ad0:	e7dc      	b.n	8005a8c <__ssputs_r+0x58>
 8005ad2:	462a      	mov	r2, r5
 8005ad4:	f000 fb54 	bl	8006180 <_realloc_r>
 8005ad8:	4606      	mov	r6, r0
 8005ada:	2800      	cmp	r0, #0
 8005adc:	d1e2      	bne.n	8005aa4 <__ssputs_r+0x70>
 8005ade:	6921      	ldr	r1, [r4, #16]
 8005ae0:	4650      	mov	r0, sl
 8005ae2:	f000 faa5 	bl	8006030 <_free_r>
 8005ae6:	e7c8      	b.n	8005a7a <__ssputs_r+0x46>

08005ae8 <_svfiprintf_r>:
 8005ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aec:	461d      	mov	r5, r3
 8005aee:	898b      	ldrh	r3, [r1, #12]
 8005af0:	061f      	lsls	r7, r3, #24
 8005af2:	b09d      	sub	sp, #116	; 0x74
 8005af4:	4680      	mov	r8, r0
 8005af6:	460c      	mov	r4, r1
 8005af8:	4616      	mov	r6, r2
 8005afa:	d50f      	bpl.n	8005b1c <_svfiprintf_r+0x34>
 8005afc:	690b      	ldr	r3, [r1, #16]
 8005afe:	b96b      	cbnz	r3, 8005b1c <_svfiprintf_r+0x34>
 8005b00:	2140      	movs	r1, #64	; 0x40
 8005b02:	f000 fae3 	bl	80060cc <_malloc_r>
 8005b06:	6020      	str	r0, [r4, #0]
 8005b08:	6120      	str	r0, [r4, #16]
 8005b0a:	b928      	cbnz	r0, 8005b18 <_svfiprintf_r+0x30>
 8005b0c:	230c      	movs	r3, #12
 8005b0e:	f8c8 3000 	str.w	r3, [r8]
 8005b12:	f04f 30ff 	mov.w	r0, #4294967295
 8005b16:	e0c8      	b.n	8005caa <_svfiprintf_r+0x1c2>
 8005b18:	2340      	movs	r3, #64	; 0x40
 8005b1a:	6163      	str	r3, [r4, #20]
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b20:	2320      	movs	r3, #32
 8005b22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b26:	2330      	movs	r3, #48	; 0x30
 8005b28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b2c:	9503      	str	r5, [sp, #12]
 8005b2e:	f04f 0b01 	mov.w	fp, #1
 8005b32:	4637      	mov	r7, r6
 8005b34:	463d      	mov	r5, r7
 8005b36:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005b3a:	b10b      	cbz	r3, 8005b40 <_svfiprintf_r+0x58>
 8005b3c:	2b25      	cmp	r3, #37	; 0x25
 8005b3e:	d13e      	bne.n	8005bbe <_svfiprintf_r+0xd6>
 8005b40:	ebb7 0a06 	subs.w	sl, r7, r6
 8005b44:	d00b      	beq.n	8005b5e <_svfiprintf_r+0x76>
 8005b46:	4653      	mov	r3, sl
 8005b48:	4632      	mov	r2, r6
 8005b4a:	4621      	mov	r1, r4
 8005b4c:	4640      	mov	r0, r8
 8005b4e:	f7ff ff71 	bl	8005a34 <__ssputs_r>
 8005b52:	3001      	adds	r0, #1
 8005b54:	f000 80a4 	beq.w	8005ca0 <_svfiprintf_r+0x1b8>
 8005b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b5a:	4453      	add	r3, sl
 8005b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8005b5e:	783b      	ldrb	r3, [r7, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f000 809d 	beq.w	8005ca0 <_svfiprintf_r+0x1b8>
 8005b66:	2300      	movs	r3, #0
 8005b68:	f04f 32ff 	mov.w	r2, #4294967295
 8005b6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b70:	9304      	str	r3, [sp, #16]
 8005b72:	9307      	str	r3, [sp, #28]
 8005b74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b78:	931a      	str	r3, [sp, #104]	; 0x68
 8005b7a:	462f      	mov	r7, r5
 8005b7c:	2205      	movs	r2, #5
 8005b7e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005b82:	4850      	ldr	r0, [pc, #320]	; (8005cc4 <_svfiprintf_r+0x1dc>)
 8005b84:	f7fa fb34 	bl	80001f0 <memchr>
 8005b88:	9b04      	ldr	r3, [sp, #16]
 8005b8a:	b9d0      	cbnz	r0, 8005bc2 <_svfiprintf_r+0xda>
 8005b8c:	06d9      	lsls	r1, r3, #27
 8005b8e:	bf44      	itt	mi
 8005b90:	2220      	movmi	r2, #32
 8005b92:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005b96:	071a      	lsls	r2, r3, #28
 8005b98:	bf44      	itt	mi
 8005b9a:	222b      	movmi	r2, #43	; 0x2b
 8005b9c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005ba0:	782a      	ldrb	r2, [r5, #0]
 8005ba2:	2a2a      	cmp	r2, #42	; 0x2a
 8005ba4:	d015      	beq.n	8005bd2 <_svfiprintf_r+0xea>
 8005ba6:	9a07      	ldr	r2, [sp, #28]
 8005ba8:	462f      	mov	r7, r5
 8005baa:	2000      	movs	r0, #0
 8005bac:	250a      	movs	r5, #10
 8005bae:	4639      	mov	r1, r7
 8005bb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bb4:	3b30      	subs	r3, #48	; 0x30
 8005bb6:	2b09      	cmp	r3, #9
 8005bb8:	d94d      	bls.n	8005c56 <_svfiprintf_r+0x16e>
 8005bba:	b1b8      	cbz	r0, 8005bec <_svfiprintf_r+0x104>
 8005bbc:	e00f      	b.n	8005bde <_svfiprintf_r+0xf6>
 8005bbe:	462f      	mov	r7, r5
 8005bc0:	e7b8      	b.n	8005b34 <_svfiprintf_r+0x4c>
 8005bc2:	4a40      	ldr	r2, [pc, #256]	; (8005cc4 <_svfiprintf_r+0x1dc>)
 8005bc4:	1a80      	subs	r0, r0, r2
 8005bc6:	fa0b f000 	lsl.w	r0, fp, r0
 8005bca:	4318      	orrs	r0, r3
 8005bcc:	9004      	str	r0, [sp, #16]
 8005bce:	463d      	mov	r5, r7
 8005bd0:	e7d3      	b.n	8005b7a <_svfiprintf_r+0x92>
 8005bd2:	9a03      	ldr	r2, [sp, #12]
 8005bd4:	1d11      	adds	r1, r2, #4
 8005bd6:	6812      	ldr	r2, [r2, #0]
 8005bd8:	9103      	str	r1, [sp, #12]
 8005bda:	2a00      	cmp	r2, #0
 8005bdc:	db01      	blt.n	8005be2 <_svfiprintf_r+0xfa>
 8005bde:	9207      	str	r2, [sp, #28]
 8005be0:	e004      	b.n	8005bec <_svfiprintf_r+0x104>
 8005be2:	4252      	negs	r2, r2
 8005be4:	f043 0302 	orr.w	r3, r3, #2
 8005be8:	9207      	str	r2, [sp, #28]
 8005bea:	9304      	str	r3, [sp, #16]
 8005bec:	783b      	ldrb	r3, [r7, #0]
 8005bee:	2b2e      	cmp	r3, #46	; 0x2e
 8005bf0:	d10c      	bne.n	8005c0c <_svfiprintf_r+0x124>
 8005bf2:	787b      	ldrb	r3, [r7, #1]
 8005bf4:	2b2a      	cmp	r3, #42	; 0x2a
 8005bf6:	d133      	bne.n	8005c60 <_svfiprintf_r+0x178>
 8005bf8:	9b03      	ldr	r3, [sp, #12]
 8005bfa:	1d1a      	adds	r2, r3, #4
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	9203      	str	r2, [sp, #12]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	bfb8      	it	lt
 8005c04:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c08:	3702      	adds	r7, #2
 8005c0a:	9305      	str	r3, [sp, #20]
 8005c0c:	4d2e      	ldr	r5, [pc, #184]	; (8005cc8 <_svfiprintf_r+0x1e0>)
 8005c0e:	7839      	ldrb	r1, [r7, #0]
 8005c10:	2203      	movs	r2, #3
 8005c12:	4628      	mov	r0, r5
 8005c14:	f7fa faec 	bl	80001f0 <memchr>
 8005c18:	b138      	cbz	r0, 8005c2a <_svfiprintf_r+0x142>
 8005c1a:	2340      	movs	r3, #64	; 0x40
 8005c1c:	1b40      	subs	r0, r0, r5
 8005c1e:	fa03 f000 	lsl.w	r0, r3, r0
 8005c22:	9b04      	ldr	r3, [sp, #16]
 8005c24:	4303      	orrs	r3, r0
 8005c26:	3701      	adds	r7, #1
 8005c28:	9304      	str	r3, [sp, #16]
 8005c2a:	7839      	ldrb	r1, [r7, #0]
 8005c2c:	4827      	ldr	r0, [pc, #156]	; (8005ccc <_svfiprintf_r+0x1e4>)
 8005c2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c32:	2206      	movs	r2, #6
 8005c34:	1c7e      	adds	r6, r7, #1
 8005c36:	f7fa fadb 	bl	80001f0 <memchr>
 8005c3a:	2800      	cmp	r0, #0
 8005c3c:	d038      	beq.n	8005cb0 <_svfiprintf_r+0x1c8>
 8005c3e:	4b24      	ldr	r3, [pc, #144]	; (8005cd0 <_svfiprintf_r+0x1e8>)
 8005c40:	bb13      	cbnz	r3, 8005c88 <_svfiprintf_r+0x1a0>
 8005c42:	9b03      	ldr	r3, [sp, #12]
 8005c44:	3307      	adds	r3, #7
 8005c46:	f023 0307 	bic.w	r3, r3, #7
 8005c4a:	3308      	adds	r3, #8
 8005c4c:	9303      	str	r3, [sp, #12]
 8005c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c50:	444b      	add	r3, r9
 8005c52:	9309      	str	r3, [sp, #36]	; 0x24
 8005c54:	e76d      	b.n	8005b32 <_svfiprintf_r+0x4a>
 8005c56:	fb05 3202 	mla	r2, r5, r2, r3
 8005c5a:	2001      	movs	r0, #1
 8005c5c:	460f      	mov	r7, r1
 8005c5e:	e7a6      	b.n	8005bae <_svfiprintf_r+0xc6>
 8005c60:	2300      	movs	r3, #0
 8005c62:	3701      	adds	r7, #1
 8005c64:	9305      	str	r3, [sp, #20]
 8005c66:	4619      	mov	r1, r3
 8005c68:	250a      	movs	r5, #10
 8005c6a:	4638      	mov	r0, r7
 8005c6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c70:	3a30      	subs	r2, #48	; 0x30
 8005c72:	2a09      	cmp	r2, #9
 8005c74:	d903      	bls.n	8005c7e <_svfiprintf_r+0x196>
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d0c8      	beq.n	8005c0c <_svfiprintf_r+0x124>
 8005c7a:	9105      	str	r1, [sp, #20]
 8005c7c:	e7c6      	b.n	8005c0c <_svfiprintf_r+0x124>
 8005c7e:	fb05 2101 	mla	r1, r5, r1, r2
 8005c82:	2301      	movs	r3, #1
 8005c84:	4607      	mov	r7, r0
 8005c86:	e7f0      	b.n	8005c6a <_svfiprintf_r+0x182>
 8005c88:	ab03      	add	r3, sp, #12
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	4622      	mov	r2, r4
 8005c8e:	4b11      	ldr	r3, [pc, #68]	; (8005cd4 <_svfiprintf_r+0x1ec>)
 8005c90:	a904      	add	r1, sp, #16
 8005c92:	4640      	mov	r0, r8
 8005c94:	f3af 8000 	nop.w
 8005c98:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005c9c:	4681      	mov	r9, r0
 8005c9e:	d1d6      	bne.n	8005c4e <_svfiprintf_r+0x166>
 8005ca0:	89a3      	ldrh	r3, [r4, #12]
 8005ca2:	065b      	lsls	r3, r3, #25
 8005ca4:	f53f af35 	bmi.w	8005b12 <_svfiprintf_r+0x2a>
 8005ca8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005caa:	b01d      	add	sp, #116	; 0x74
 8005cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cb0:	ab03      	add	r3, sp, #12
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	4622      	mov	r2, r4
 8005cb6:	4b07      	ldr	r3, [pc, #28]	; (8005cd4 <_svfiprintf_r+0x1ec>)
 8005cb8:	a904      	add	r1, sp, #16
 8005cba:	4640      	mov	r0, r8
 8005cbc:	f000 f882 	bl	8005dc4 <_printf_i>
 8005cc0:	e7ea      	b.n	8005c98 <_svfiprintf_r+0x1b0>
 8005cc2:	bf00      	nop
 8005cc4:	08006360 	.word	0x08006360
 8005cc8:	08006366 	.word	0x08006366
 8005ccc:	0800636a 	.word	0x0800636a
 8005cd0:	00000000 	.word	0x00000000
 8005cd4:	08005a35 	.word	0x08005a35

08005cd8 <_printf_common>:
 8005cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cdc:	4691      	mov	r9, r2
 8005cde:	461f      	mov	r7, r3
 8005ce0:	688a      	ldr	r2, [r1, #8]
 8005ce2:	690b      	ldr	r3, [r1, #16]
 8005ce4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	bfb8      	it	lt
 8005cec:	4613      	movlt	r3, r2
 8005cee:	f8c9 3000 	str.w	r3, [r9]
 8005cf2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005cf6:	4606      	mov	r6, r0
 8005cf8:	460c      	mov	r4, r1
 8005cfa:	b112      	cbz	r2, 8005d02 <_printf_common+0x2a>
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	f8c9 3000 	str.w	r3, [r9]
 8005d02:	6823      	ldr	r3, [r4, #0]
 8005d04:	0699      	lsls	r1, r3, #26
 8005d06:	bf42      	ittt	mi
 8005d08:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005d0c:	3302      	addmi	r3, #2
 8005d0e:	f8c9 3000 	strmi.w	r3, [r9]
 8005d12:	6825      	ldr	r5, [r4, #0]
 8005d14:	f015 0506 	ands.w	r5, r5, #6
 8005d18:	d107      	bne.n	8005d2a <_printf_common+0x52>
 8005d1a:	f104 0a19 	add.w	sl, r4, #25
 8005d1e:	68e3      	ldr	r3, [r4, #12]
 8005d20:	f8d9 2000 	ldr.w	r2, [r9]
 8005d24:	1a9b      	subs	r3, r3, r2
 8005d26:	42ab      	cmp	r3, r5
 8005d28:	dc28      	bgt.n	8005d7c <_printf_common+0xa4>
 8005d2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005d2e:	6822      	ldr	r2, [r4, #0]
 8005d30:	3300      	adds	r3, #0
 8005d32:	bf18      	it	ne
 8005d34:	2301      	movne	r3, #1
 8005d36:	0692      	lsls	r2, r2, #26
 8005d38:	d42d      	bmi.n	8005d96 <_printf_common+0xbe>
 8005d3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d3e:	4639      	mov	r1, r7
 8005d40:	4630      	mov	r0, r6
 8005d42:	47c0      	blx	r8
 8005d44:	3001      	adds	r0, #1
 8005d46:	d020      	beq.n	8005d8a <_printf_common+0xb2>
 8005d48:	6823      	ldr	r3, [r4, #0]
 8005d4a:	68e5      	ldr	r5, [r4, #12]
 8005d4c:	f8d9 2000 	ldr.w	r2, [r9]
 8005d50:	f003 0306 	and.w	r3, r3, #6
 8005d54:	2b04      	cmp	r3, #4
 8005d56:	bf08      	it	eq
 8005d58:	1aad      	subeq	r5, r5, r2
 8005d5a:	68a3      	ldr	r3, [r4, #8]
 8005d5c:	6922      	ldr	r2, [r4, #16]
 8005d5e:	bf0c      	ite	eq
 8005d60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d64:	2500      	movne	r5, #0
 8005d66:	4293      	cmp	r3, r2
 8005d68:	bfc4      	itt	gt
 8005d6a:	1a9b      	subgt	r3, r3, r2
 8005d6c:	18ed      	addgt	r5, r5, r3
 8005d6e:	f04f 0900 	mov.w	r9, #0
 8005d72:	341a      	adds	r4, #26
 8005d74:	454d      	cmp	r5, r9
 8005d76:	d11a      	bne.n	8005dae <_printf_common+0xd6>
 8005d78:	2000      	movs	r0, #0
 8005d7a:	e008      	b.n	8005d8e <_printf_common+0xb6>
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	4652      	mov	r2, sl
 8005d80:	4639      	mov	r1, r7
 8005d82:	4630      	mov	r0, r6
 8005d84:	47c0      	blx	r8
 8005d86:	3001      	adds	r0, #1
 8005d88:	d103      	bne.n	8005d92 <_printf_common+0xba>
 8005d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d92:	3501      	adds	r5, #1
 8005d94:	e7c3      	b.n	8005d1e <_printf_common+0x46>
 8005d96:	18e1      	adds	r1, r4, r3
 8005d98:	1c5a      	adds	r2, r3, #1
 8005d9a:	2030      	movs	r0, #48	; 0x30
 8005d9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005da0:	4422      	add	r2, r4
 8005da2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005da6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005daa:	3302      	adds	r3, #2
 8005dac:	e7c5      	b.n	8005d3a <_printf_common+0x62>
 8005dae:	2301      	movs	r3, #1
 8005db0:	4622      	mov	r2, r4
 8005db2:	4639      	mov	r1, r7
 8005db4:	4630      	mov	r0, r6
 8005db6:	47c0      	blx	r8
 8005db8:	3001      	adds	r0, #1
 8005dba:	d0e6      	beq.n	8005d8a <_printf_common+0xb2>
 8005dbc:	f109 0901 	add.w	r9, r9, #1
 8005dc0:	e7d8      	b.n	8005d74 <_printf_common+0x9c>
	...

08005dc4 <_printf_i>:
 8005dc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005dc8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005dcc:	460c      	mov	r4, r1
 8005dce:	7e09      	ldrb	r1, [r1, #24]
 8005dd0:	b085      	sub	sp, #20
 8005dd2:	296e      	cmp	r1, #110	; 0x6e
 8005dd4:	4617      	mov	r7, r2
 8005dd6:	4606      	mov	r6, r0
 8005dd8:	4698      	mov	r8, r3
 8005dda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ddc:	f000 80b3 	beq.w	8005f46 <_printf_i+0x182>
 8005de0:	d822      	bhi.n	8005e28 <_printf_i+0x64>
 8005de2:	2963      	cmp	r1, #99	; 0x63
 8005de4:	d036      	beq.n	8005e54 <_printf_i+0x90>
 8005de6:	d80a      	bhi.n	8005dfe <_printf_i+0x3a>
 8005de8:	2900      	cmp	r1, #0
 8005dea:	f000 80b9 	beq.w	8005f60 <_printf_i+0x19c>
 8005dee:	2958      	cmp	r1, #88	; 0x58
 8005df0:	f000 8083 	beq.w	8005efa <_printf_i+0x136>
 8005df4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005df8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005dfc:	e032      	b.n	8005e64 <_printf_i+0xa0>
 8005dfe:	2964      	cmp	r1, #100	; 0x64
 8005e00:	d001      	beq.n	8005e06 <_printf_i+0x42>
 8005e02:	2969      	cmp	r1, #105	; 0x69
 8005e04:	d1f6      	bne.n	8005df4 <_printf_i+0x30>
 8005e06:	6820      	ldr	r0, [r4, #0]
 8005e08:	6813      	ldr	r3, [r2, #0]
 8005e0a:	0605      	lsls	r5, r0, #24
 8005e0c:	f103 0104 	add.w	r1, r3, #4
 8005e10:	d52a      	bpl.n	8005e68 <_printf_i+0xa4>
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6011      	str	r1, [r2, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	da03      	bge.n	8005e22 <_printf_i+0x5e>
 8005e1a:	222d      	movs	r2, #45	; 0x2d
 8005e1c:	425b      	negs	r3, r3
 8005e1e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005e22:	486f      	ldr	r0, [pc, #444]	; (8005fe0 <_printf_i+0x21c>)
 8005e24:	220a      	movs	r2, #10
 8005e26:	e039      	b.n	8005e9c <_printf_i+0xd8>
 8005e28:	2973      	cmp	r1, #115	; 0x73
 8005e2a:	f000 809d 	beq.w	8005f68 <_printf_i+0x1a4>
 8005e2e:	d808      	bhi.n	8005e42 <_printf_i+0x7e>
 8005e30:	296f      	cmp	r1, #111	; 0x6f
 8005e32:	d020      	beq.n	8005e76 <_printf_i+0xb2>
 8005e34:	2970      	cmp	r1, #112	; 0x70
 8005e36:	d1dd      	bne.n	8005df4 <_printf_i+0x30>
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	f043 0320 	orr.w	r3, r3, #32
 8005e3e:	6023      	str	r3, [r4, #0]
 8005e40:	e003      	b.n	8005e4a <_printf_i+0x86>
 8005e42:	2975      	cmp	r1, #117	; 0x75
 8005e44:	d017      	beq.n	8005e76 <_printf_i+0xb2>
 8005e46:	2978      	cmp	r1, #120	; 0x78
 8005e48:	d1d4      	bne.n	8005df4 <_printf_i+0x30>
 8005e4a:	2378      	movs	r3, #120	; 0x78
 8005e4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e50:	4864      	ldr	r0, [pc, #400]	; (8005fe4 <_printf_i+0x220>)
 8005e52:	e055      	b.n	8005f00 <_printf_i+0x13c>
 8005e54:	6813      	ldr	r3, [r2, #0]
 8005e56:	1d19      	adds	r1, r3, #4
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	6011      	str	r1, [r2, #0]
 8005e5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e64:	2301      	movs	r3, #1
 8005e66:	e08c      	b.n	8005f82 <_printf_i+0x1be>
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	6011      	str	r1, [r2, #0]
 8005e6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e70:	bf18      	it	ne
 8005e72:	b21b      	sxthne	r3, r3
 8005e74:	e7cf      	b.n	8005e16 <_printf_i+0x52>
 8005e76:	6813      	ldr	r3, [r2, #0]
 8005e78:	6825      	ldr	r5, [r4, #0]
 8005e7a:	1d18      	adds	r0, r3, #4
 8005e7c:	6010      	str	r0, [r2, #0]
 8005e7e:	0628      	lsls	r0, r5, #24
 8005e80:	d501      	bpl.n	8005e86 <_printf_i+0xc2>
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	e002      	b.n	8005e8c <_printf_i+0xc8>
 8005e86:	0668      	lsls	r0, r5, #25
 8005e88:	d5fb      	bpl.n	8005e82 <_printf_i+0xbe>
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	4854      	ldr	r0, [pc, #336]	; (8005fe0 <_printf_i+0x21c>)
 8005e8e:	296f      	cmp	r1, #111	; 0x6f
 8005e90:	bf14      	ite	ne
 8005e92:	220a      	movne	r2, #10
 8005e94:	2208      	moveq	r2, #8
 8005e96:	2100      	movs	r1, #0
 8005e98:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e9c:	6865      	ldr	r5, [r4, #4]
 8005e9e:	60a5      	str	r5, [r4, #8]
 8005ea0:	2d00      	cmp	r5, #0
 8005ea2:	f2c0 8095 	blt.w	8005fd0 <_printf_i+0x20c>
 8005ea6:	6821      	ldr	r1, [r4, #0]
 8005ea8:	f021 0104 	bic.w	r1, r1, #4
 8005eac:	6021      	str	r1, [r4, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d13d      	bne.n	8005f2e <_printf_i+0x16a>
 8005eb2:	2d00      	cmp	r5, #0
 8005eb4:	f040 808e 	bne.w	8005fd4 <_printf_i+0x210>
 8005eb8:	4665      	mov	r5, ip
 8005eba:	2a08      	cmp	r2, #8
 8005ebc:	d10b      	bne.n	8005ed6 <_printf_i+0x112>
 8005ebe:	6823      	ldr	r3, [r4, #0]
 8005ec0:	07db      	lsls	r3, r3, #31
 8005ec2:	d508      	bpl.n	8005ed6 <_printf_i+0x112>
 8005ec4:	6923      	ldr	r3, [r4, #16]
 8005ec6:	6862      	ldr	r2, [r4, #4]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	bfde      	ittt	le
 8005ecc:	2330      	movle	r3, #48	; 0x30
 8005ece:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ed2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ed6:	ebac 0305 	sub.w	r3, ip, r5
 8005eda:	6123      	str	r3, [r4, #16]
 8005edc:	f8cd 8000 	str.w	r8, [sp]
 8005ee0:	463b      	mov	r3, r7
 8005ee2:	aa03      	add	r2, sp, #12
 8005ee4:	4621      	mov	r1, r4
 8005ee6:	4630      	mov	r0, r6
 8005ee8:	f7ff fef6 	bl	8005cd8 <_printf_common>
 8005eec:	3001      	adds	r0, #1
 8005eee:	d14d      	bne.n	8005f8c <_printf_i+0x1c8>
 8005ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef4:	b005      	add	sp, #20
 8005ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005efa:	4839      	ldr	r0, [pc, #228]	; (8005fe0 <_printf_i+0x21c>)
 8005efc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005f00:	6813      	ldr	r3, [r2, #0]
 8005f02:	6821      	ldr	r1, [r4, #0]
 8005f04:	1d1d      	adds	r5, r3, #4
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	6015      	str	r5, [r2, #0]
 8005f0a:	060a      	lsls	r2, r1, #24
 8005f0c:	d50b      	bpl.n	8005f26 <_printf_i+0x162>
 8005f0e:	07ca      	lsls	r2, r1, #31
 8005f10:	bf44      	itt	mi
 8005f12:	f041 0120 	orrmi.w	r1, r1, #32
 8005f16:	6021      	strmi	r1, [r4, #0]
 8005f18:	b91b      	cbnz	r3, 8005f22 <_printf_i+0x15e>
 8005f1a:	6822      	ldr	r2, [r4, #0]
 8005f1c:	f022 0220 	bic.w	r2, r2, #32
 8005f20:	6022      	str	r2, [r4, #0]
 8005f22:	2210      	movs	r2, #16
 8005f24:	e7b7      	b.n	8005e96 <_printf_i+0xd2>
 8005f26:	064d      	lsls	r5, r1, #25
 8005f28:	bf48      	it	mi
 8005f2a:	b29b      	uxthmi	r3, r3
 8005f2c:	e7ef      	b.n	8005f0e <_printf_i+0x14a>
 8005f2e:	4665      	mov	r5, ip
 8005f30:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f34:	fb02 3311 	mls	r3, r2, r1, r3
 8005f38:	5cc3      	ldrb	r3, [r0, r3]
 8005f3a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005f3e:	460b      	mov	r3, r1
 8005f40:	2900      	cmp	r1, #0
 8005f42:	d1f5      	bne.n	8005f30 <_printf_i+0x16c>
 8005f44:	e7b9      	b.n	8005eba <_printf_i+0xf6>
 8005f46:	6813      	ldr	r3, [r2, #0]
 8005f48:	6825      	ldr	r5, [r4, #0]
 8005f4a:	6961      	ldr	r1, [r4, #20]
 8005f4c:	1d18      	adds	r0, r3, #4
 8005f4e:	6010      	str	r0, [r2, #0]
 8005f50:	0628      	lsls	r0, r5, #24
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	d501      	bpl.n	8005f5a <_printf_i+0x196>
 8005f56:	6019      	str	r1, [r3, #0]
 8005f58:	e002      	b.n	8005f60 <_printf_i+0x19c>
 8005f5a:	066a      	lsls	r2, r5, #25
 8005f5c:	d5fb      	bpl.n	8005f56 <_printf_i+0x192>
 8005f5e:	8019      	strh	r1, [r3, #0]
 8005f60:	2300      	movs	r3, #0
 8005f62:	6123      	str	r3, [r4, #16]
 8005f64:	4665      	mov	r5, ip
 8005f66:	e7b9      	b.n	8005edc <_printf_i+0x118>
 8005f68:	6813      	ldr	r3, [r2, #0]
 8005f6a:	1d19      	adds	r1, r3, #4
 8005f6c:	6011      	str	r1, [r2, #0]
 8005f6e:	681d      	ldr	r5, [r3, #0]
 8005f70:	6862      	ldr	r2, [r4, #4]
 8005f72:	2100      	movs	r1, #0
 8005f74:	4628      	mov	r0, r5
 8005f76:	f7fa f93b 	bl	80001f0 <memchr>
 8005f7a:	b108      	cbz	r0, 8005f80 <_printf_i+0x1bc>
 8005f7c:	1b40      	subs	r0, r0, r5
 8005f7e:	6060      	str	r0, [r4, #4]
 8005f80:	6863      	ldr	r3, [r4, #4]
 8005f82:	6123      	str	r3, [r4, #16]
 8005f84:	2300      	movs	r3, #0
 8005f86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f8a:	e7a7      	b.n	8005edc <_printf_i+0x118>
 8005f8c:	6923      	ldr	r3, [r4, #16]
 8005f8e:	462a      	mov	r2, r5
 8005f90:	4639      	mov	r1, r7
 8005f92:	4630      	mov	r0, r6
 8005f94:	47c0      	blx	r8
 8005f96:	3001      	adds	r0, #1
 8005f98:	d0aa      	beq.n	8005ef0 <_printf_i+0x12c>
 8005f9a:	6823      	ldr	r3, [r4, #0]
 8005f9c:	079b      	lsls	r3, r3, #30
 8005f9e:	d413      	bmi.n	8005fc8 <_printf_i+0x204>
 8005fa0:	68e0      	ldr	r0, [r4, #12]
 8005fa2:	9b03      	ldr	r3, [sp, #12]
 8005fa4:	4298      	cmp	r0, r3
 8005fa6:	bfb8      	it	lt
 8005fa8:	4618      	movlt	r0, r3
 8005faa:	e7a3      	b.n	8005ef4 <_printf_i+0x130>
 8005fac:	2301      	movs	r3, #1
 8005fae:	464a      	mov	r2, r9
 8005fb0:	4639      	mov	r1, r7
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	47c0      	blx	r8
 8005fb6:	3001      	adds	r0, #1
 8005fb8:	d09a      	beq.n	8005ef0 <_printf_i+0x12c>
 8005fba:	3501      	adds	r5, #1
 8005fbc:	68e3      	ldr	r3, [r4, #12]
 8005fbe:	9a03      	ldr	r2, [sp, #12]
 8005fc0:	1a9b      	subs	r3, r3, r2
 8005fc2:	42ab      	cmp	r3, r5
 8005fc4:	dcf2      	bgt.n	8005fac <_printf_i+0x1e8>
 8005fc6:	e7eb      	b.n	8005fa0 <_printf_i+0x1dc>
 8005fc8:	2500      	movs	r5, #0
 8005fca:	f104 0919 	add.w	r9, r4, #25
 8005fce:	e7f5      	b.n	8005fbc <_printf_i+0x1f8>
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1ac      	bne.n	8005f2e <_printf_i+0x16a>
 8005fd4:	7803      	ldrb	r3, [r0, #0]
 8005fd6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fda:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fde:	e76c      	b.n	8005eba <_printf_i+0xf6>
 8005fe0:	08006371 	.word	0x08006371
 8005fe4:	08006382 	.word	0x08006382

08005fe8 <memcpy>:
 8005fe8:	b510      	push	{r4, lr}
 8005fea:	1e43      	subs	r3, r0, #1
 8005fec:	440a      	add	r2, r1
 8005fee:	4291      	cmp	r1, r2
 8005ff0:	d100      	bne.n	8005ff4 <memcpy+0xc>
 8005ff2:	bd10      	pop	{r4, pc}
 8005ff4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ff8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ffc:	e7f7      	b.n	8005fee <memcpy+0x6>

08005ffe <memmove>:
 8005ffe:	4288      	cmp	r0, r1
 8006000:	b510      	push	{r4, lr}
 8006002:	eb01 0302 	add.w	r3, r1, r2
 8006006:	d807      	bhi.n	8006018 <memmove+0x1a>
 8006008:	1e42      	subs	r2, r0, #1
 800600a:	4299      	cmp	r1, r3
 800600c:	d00a      	beq.n	8006024 <memmove+0x26>
 800600e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006012:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006016:	e7f8      	b.n	800600a <memmove+0xc>
 8006018:	4283      	cmp	r3, r0
 800601a:	d9f5      	bls.n	8006008 <memmove+0xa>
 800601c:	1881      	adds	r1, r0, r2
 800601e:	1ad2      	subs	r2, r2, r3
 8006020:	42d3      	cmn	r3, r2
 8006022:	d100      	bne.n	8006026 <memmove+0x28>
 8006024:	bd10      	pop	{r4, pc}
 8006026:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800602a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800602e:	e7f7      	b.n	8006020 <memmove+0x22>

08006030 <_free_r>:
 8006030:	b538      	push	{r3, r4, r5, lr}
 8006032:	4605      	mov	r5, r0
 8006034:	2900      	cmp	r1, #0
 8006036:	d045      	beq.n	80060c4 <_free_r+0x94>
 8006038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800603c:	1f0c      	subs	r4, r1, #4
 800603e:	2b00      	cmp	r3, #0
 8006040:	bfb8      	it	lt
 8006042:	18e4      	addlt	r4, r4, r3
 8006044:	f000 f8d2 	bl	80061ec <__malloc_lock>
 8006048:	4a1f      	ldr	r2, [pc, #124]	; (80060c8 <_free_r+0x98>)
 800604a:	6813      	ldr	r3, [r2, #0]
 800604c:	4610      	mov	r0, r2
 800604e:	b933      	cbnz	r3, 800605e <_free_r+0x2e>
 8006050:	6063      	str	r3, [r4, #4]
 8006052:	6014      	str	r4, [r2, #0]
 8006054:	4628      	mov	r0, r5
 8006056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800605a:	f000 b8c8 	b.w	80061ee <__malloc_unlock>
 800605e:	42a3      	cmp	r3, r4
 8006060:	d90c      	bls.n	800607c <_free_r+0x4c>
 8006062:	6821      	ldr	r1, [r4, #0]
 8006064:	1862      	adds	r2, r4, r1
 8006066:	4293      	cmp	r3, r2
 8006068:	bf04      	itt	eq
 800606a:	681a      	ldreq	r2, [r3, #0]
 800606c:	685b      	ldreq	r3, [r3, #4]
 800606e:	6063      	str	r3, [r4, #4]
 8006070:	bf04      	itt	eq
 8006072:	1852      	addeq	r2, r2, r1
 8006074:	6022      	streq	r2, [r4, #0]
 8006076:	6004      	str	r4, [r0, #0]
 8006078:	e7ec      	b.n	8006054 <_free_r+0x24>
 800607a:	4613      	mov	r3, r2
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	b10a      	cbz	r2, 8006084 <_free_r+0x54>
 8006080:	42a2      	cmp	r2, r4
 8006082:	d9fa      	bls.n	800607a <_free_r+0x4a>
 8006084:	6819      	ldr	r1, [r3, #0]
 8006086:	1858      	adds	r0, r3, r1
 8006088:	42a0      	cmp	r0, r4
 800608a:	d10b      	bne.n	80060a4 <_free_r+0x74>
 800608c:	6820      	ldr	r0, [r4, #0]
 800608e:	4401      	add	r1, r0
 8006090:	1858      	adds	r0, r3, r1
 8006092:	4282      	cmp	r2, r0
 8006094:	6019      	str	r1, [r3, #0]
 8006096:	d1dd      	bne.n	8006054 <_free_r+0x24>
 8006098:	6810      	ldr	r0, [r2, #0]
 800609a:	6852      	ldr	r2, [r2, #4]
 800609c:	605a      	str	r2, [r3, #4]
 800609e:	4401      	add	r1, r0
 80060a0:	6019      	str	r1, [r3, #0]
 80060a2:	e7d7      	b.n	8006054 <_free_r+0x24>
 80060a4:	d902      	bls.n	80060ac <_free_r+0x7c>
 80060a6:	230c      	movs	r3, #12
 80060a8:	602b      	str	r3, [r5, #0]
 80060aa:	e7d3      	b.n	8006054 <_free_r+0x24>
 80060ac:	6820      	ldr	r0, [r4, #0]
 80060ae:	1821      	adds	r1, r4, r0
 80060b0:	428a      	cmp	r2, r1
 80060b2:	bf04      	itt	eq
 80060b4:	6811      	ldreq	r1, [r2, #0]
 80060b6:	6852      	ldreq	r2, [r2, #4]
 80060b8:	6062      	str	r2, [r4, #4]
 80060ba:	bf04      	itt	eq
 80060bc:	1809      	addeq	r1, r1, r0
 80060be:	6021      	streq	r1, [r4, #0]
 80060c0:	605c      	str	r4, [r3, #4]
 80060c2:	e7c7      	b.n	8006054 <_free_r+0x24>
 80060c4:	bd38      	pop	{r3, r4, r5, pc}
 80060c6:	bf00      	nop
 80060c8:	200000fc 	.word	0x200000fc

080060cc <_malloc_r>:
 80060cc:	b570      	push	{r4, r5, r6, lr}
 80060ce:	1ccd      	adds	r5, r1, #3
 80060d0:	f025 0503 	bic.w	r5, r5, #3
 80060d4:	3508      	adds	r5, #8
 80060d6:	2d0c      	cmp	r5, #12
 80060d8:	bf38      	it	cc
 80060da:	250c      	movcc	r5, #12
 80060dc:	2d00      	cmp	r5, #0
 80060de:	4606      	mov	r6, r0
 80060e0:	db01      	blt.n	80060e6 <_malloc_r+0x1a>
 80060e2:	42a9      	cmp	r1, r5
 80060e4:	d903      	bls.n	80060ee <_malloc_r+0x22>
 80060e6:	230c      	movs	r3, #12
 80060e8:	6033      	str	r3, [r6, #0]
 80060ea:	2000      	movs	r0, #0
 80060ec:	bd70      	pop	{r4, r5, r6, pc}
 80060ee:	f000 f87d 	bl	80061ec <__malloc_lock>
 80060f2:	4a21      	ldr	r2, [pc, #132]	; (8006178 <_malloc_r+0xac>)
 80060f4:	6814      	ldr	r4, [r2, #0]
 80060f6:	4621      	mov	r1, r4
 80060f8:	b991      	cbnz	r1, 8006120 <_malloc_r+0x54>
 80060fa:	4c20      	ldr	r4, [pc, #128]	; (800617c <_malloc_r+0xb0>)
 80060fc:	6823      	ldr	r3, [r4, #0]
 80060fe:	b91b      	cbnz	r3, 8006108 <_malloc_r+0x3c>
 8006100:	4630      	mov	r0, r6
 8006102:	f000 f863 	bl	80061cc <_sbrk_r>
 8006106:	6020      	str	r0, [r4, #0]
 8006108:	4629      	mov	r1, r5
 800610a:	4630      	mov	r0, r6
 800610c:	f000 f85e 	bl	80061cc <_sbrk_r>
 8006110:	1c43      	adds	r3, r0, #1
 8006112:	d124      	bne.n	800615e <_malloc_r+0x92>
 8006114:	230c      	movs	r3, #12
 8006116:	6033      	str	r3, [r6, #0]
 8006118:	4630      	mov	r0, r6
 800611a:	f000 f868 	bl	80061ee <__malloc_unlock>
 800611e:	e7e4      	b.n	80060ea <_malloc_r+0x1e>
 8006120:	680b      	ldr	r3, [r1, #0]
 8006122:	1b5b      	subs	r3, r3, r5
 8006124:	d418      	bmi.n	8006158 <_malloc_r+0x8c>
 8006126:	2b0b      	cmp	r3, #11
 8006128:	d90f      	bls.n	800614a <_malloc_r+0x7e>
 800612a:	600b      	str	r3, [r1, #0]
 800612c:	50cd      	str	r5, [r1, r3]
 800612e:	18cc      	adds	r4, r1, r3
 8006130:	4630      	mov	r0, r6
 8006132:	f000 f85c 	bl	80061ee <__malloc_unlock>
 8006136:	f104 000b 	add.w	r0, r4, #11
 800613a:	1d23      	adds	r3, r4, #4
 800613c:	f020 0007 	bic.w	r0, r0, #7
 8006140:	1ac3      	subs	r3, r0, r3
 8006142:	d0d3      	beq.n	80060ec <_malloc_r+0x20>
 8006144:	425a      	negs	r2, r3
 8006146:	50e2      	str	r2, [r4, r3]
 8006148:	e7d0      	b.n	80060ec <_malloc_r+0x20>
 800614a:	428c      	cmp	r4, r1
 800614c:	684b      	ldr	r3, [r1, #4]
 800614e:	bf16      	itet	ne
 8006150:	6063      	strne	r3, [r4, #4]
 8006152:	6013      	streq	r3, [r2, #0]
 8006154:	460c      	movne	r4, r1
 8006156:	e7eb      	b.n	8006130 <_malloc_r+0x64>
 8006158:	460c      	mov	r4, r1
 800615a:	6849      	ldr	r1, [r1, #4]
 800615c:	e7cc      	b.n	80060f8 <_malloc_r+0x2c>
 800615e:	1cc4      	adds	r4, r0, #3
 8006160:	f024 0403 	bic.w	r4, r4, #3
 8006164:	42a0      	cmp	r0, r4
 8006166:	d005      	beq.n	8006174 <_malloc_r+0xa8>
 8006168:	1a21      	subs	r1, r4, r0
 800616a:	4630      	mov	r0, r6
 800616c:	f000 f82e 	bl	80061cc <_sbrk_r>
 8006170:	3001      	adds	r0, #1
 8006172:	d0cf      	beq.n	8006114 <_malloc_r+0x48>
 8006174:	6025      	str	r5, [r4, #0]
 8006176:	e7db      	b.n	8006130 <_malloc_r+0x64>
 8006178:	200000fc 	.word	0x200000fc
 800617c:	20000100 	.word	0x20000100

08006180 <_realloc_r>:
 8006180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006182:	4607      	mov	r7, r0
 8006184:	4614      	mov	r4, r2
 8006186:	460e      	mov	r6, r1
 8006188:	b921      	cbnz	r1, 8006194 <_realloc_r+0x14>
 800618a:	4611      	mov	r1, r2
 800618c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006190:	f7ff bf9c 	b.w	80060cc <_malloc_r>
 8006194:	b922      	cbnz	r2, 80061a0 <_realloc_r+0x20>
 8006196:	f7ff ff4b 	bl	8006030 <_free_r>
 800619a:	4625      	mov	r5, r4
 800619c:	4628      	mov	r0, r5
 800619e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061a0:	f000 f826 	bl	80061f0 <_malloc_usable_size_r>
 80061a4:	42a0      	cmp	r0, r4
 80061a6:	d20f      	bcs.n	80061c8 <_realloc_r+0x48>
 80061a8:	4621      	mov	r1, r4
 80061aa:	4638      	mov	r0, r7
 80061ac:	f7ff ff8e 	bl	80060cc <_malloc_r>
 80061b0:	4605      	mov	r5, r0
 80061b2:	2800      	cmp	r0, #0
 80061b4:	d0f2      	beq.n	800619c <_realloc_r+0x1c>
 80061b6:	4631      	mov	r1, r6
 80061b8:	4622      	mov	r2, r4
 80061ba:	f7ff ff15 	bl	8005fe8 <memcpy>
 80061be:	4631      	mov	r1, r6
 80061c0:	4638      	mov	r0, r7
 80061c2:	f7ff ff35 	bl	8006030 <_free_r>
 80061c6:	e7e9      	b.n	800619c <_realloc_r+0x1c>
 80061c8:	4635      	mov	r5, r6
 80061ca:	e7e7      	b.n	800619c <_realloc_r+0x1c>

080061cc <_sbrk_r>:
 80061cc:	b538      	push	{r3, r4, r5, lr}
 80061ce:	4c06      	ldr	r4, [pc, #24]	; (80061e8 <_sbrk_r+0x1c>)
 80061d0:	2300      	movs	r3, #0
 80061d2:	4605      	mov	r5, r0
 80061d4:	4608      	mov	r0, r1
 80061d6:	6023      	str	r3, [r4, #0]
 80061d8:	f7fc fa6a 	bl	80026b0 <_sbrk>
 80061dc:	1c43      	adds	r3, r0, #1
 80061de:	d102      	bne.n	80061e6 <_sbrk_r+0x1a>
 80061e0:	6823      	ldr	r3, [r4, #0]
 80061e2:	b103      	cbz	r3, 80061e6 <_sbrk_r+0x1a>
 80061e4:	602b      	str	r3, [r5, #0]
 80061e6:	bd38      	pop	{r3, r4, r5, pc}
 80061e8:	20000518 	.word	0x20000518

080061ec <__malloc_lock>:
 80061ec:	4770      	bx	lr

080061ee <__malloc_unlock>:
 80061ee:	4770      	bx	lr

080061f0 <_malloc_usable_size_r>:
 80061f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061f4:	1f18      	subs	r0, r3, #4
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	bfbc      	itt	lt
 80061fa:	580b      	ldrlt	r3, [r1, r0]
 80061fc:	18c0      	addlt	r0, r0, r3
 80061fe:	4770      	bx	lr

08006200 <_init>:
 8006200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006202:	bf00      	nop
 8006204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006206:	bc08      	pop	{r3}
 8006208:	469e      	mov	lr, r3
 800620a:	4770      	bx	lr

0800620c <_fini>:
 800620c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620e:	bf00      	nop
 8006210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006212:	bc08      	pop	{r3}
 8006214:	469e      	mov	lr, r3
 8006216:	4770      	bx	lr
